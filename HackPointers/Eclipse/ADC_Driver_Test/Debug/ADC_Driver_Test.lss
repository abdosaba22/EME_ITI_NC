
ADC_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00003c6a  00003cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027a8  00000000  00000000  00003dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ca5  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00007249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000214  00000000  00000000  00007409  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002612  00000000  00000000  0000761d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014ce  00000000  00000000  00009c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130b  00000000  00000000  0000b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000c408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000307  00000000  00000000  0000c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a1a  00000000  00000000  0000c8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 42 1c 	call	0x3884	; 0x3884 <main>
      7a:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e7       	ldi	r26, 0x75	; 117
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e7       	ldi	r24, 0x75	; 117
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 e7       	ldi	r22, 0x75	; 117
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 14 07 	call	0xe28	; 0xe28 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 24 1e 	jmp	0x3c48	; 0x3c48 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 9c 06 	call	0xd38	; 0xd38 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__+0x20>

000009fe <__floatunsisf>:
     9fe:	a8 e0       	ldi	r26, 0x08	; 8
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	e5 e0       	ldi	r30, 0x05	; 5
     a04:	f5 e0       	ldi	r31, 0x05	; 5
     a06:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__prologue_saves__+0x10>
     a0a:	7b 01       	movw	r14, r22
     a0c:	8c 01       	movw	r16, r24
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	81 05       	cpc	r24, r1
     a14:	91 05       	cpc	r25, r1
     a16:	19 f4       	brne	.+6      	; 0xa1e <__floatunsisf+0x20>
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	60 c0       	rjmp	.+192    	; 0xade <__floatunsisf+0xe0>
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	c8 2e       	mov	r12, r24
     a26:	d1 2c       	mov	r13, r1
     a28:	dc 82       	std	Y+4, r13	; 0x04
     a2a:	cb 82       	std	Y+3, r12	; 0x03
     a2c:	ed 82       	std	Y+5, r14	; 0x05
     a2e:	fe 82       	std	Y+6, r15	; 0x06
     a30:	0f 83       	std	Y+7, r16	; 0x07
     a32:	18 87       	std	Y+8, r17	; 0x08
     a34:	c8 01       	movw	r24, r16
     a36:	b7 01       	movw	r22, r14
     a38:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__clzsi2>
     a3c:	fc 01       	movw	r30, r24
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	f7 ff       	sbrs	r31, 7
     a42:	3b c0       	rjmp	.+118    	; 0xaba <__floatunsisf+0xbc>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	2e 1b       	sub	r18, r30
     a4a:	3f 0b       	sbc	r19, r31
     a4c:	57 01       	movw	r10, r14
     a4e:	68 01       	movw	r12, r16
     a50:	02 2e       	mov	r0, r18
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__floatunsisf+0x5e>
     a54:	d6 94       	lsr	r13
     a56:	c7 94       	ror	r12
     a58:	b7 94       	ror	r11
     a5a:	a7 94       	ror	r10
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__floatunsisf+0x56>
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	aa 1f       	adc	r26, r26
     a78:	bb 1f       	adc	r27, r27
     a7a:	2a 95       	dec	r18
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0x74>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	a1 09       	sbc	r26, r1
     a82:	b1 09       	sbc	r27, r1
     a84:	8e 21       	and	r24, r14
     a86:	9f 21       	and	r25, r15
     a88:	a0 23       	and	r26, r16
     a8a:	b1 23       	and	r27, r17
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	21 f0       	breq	.+8      	; 0xa9c <__floatunsisf+0x9e>
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	4a 29       	or	r20, r10
     a9e:	5b 29       	or	r21, r11
     aa0:	6c 29       	or	r22, r12
     aa2:	7d 29       	or	r23, r13
     aa4:	4d 83       	std	Y+5, r20	; 0x05
     aa6:	5e 83       	std	Y+6, r21	; 0x06
     aa8:	6f 83       	std	Y+7, r22	; 0x07
     aaa:	78 87       	std	Y+8, r23	; 0x08
     aac:	8e e1       	ldi	r24, 0x1E	; 30
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	8e 1b       	sub	r24, r30
     ab2:	9f 0b       	sbc	r25, r31
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	12 c0       	rjmp	.+36     	; 0xade <__floatunsisf+0xe0>
     aba:	30 97       	sbiw	r30, 0x00	; 0
     abc:	81 f0       	breq	.+32     	; 0xade <__floatunsisf+0xe0>
     abe:	0e 2e       	mov	r0, r30
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <__floatunsisf+0xcc>
     ac2:	ee 0c       	add	r14, r14
     ac4:	ff 1c       	adc	r15, r15
     ac6:	00 1f       	adc	r16, r16
     ac8:	11 1f       	adc	r17, r17
     aca:	0a 94       	dec	r0
     acc:	d2 f7       	brpl	.-12     	; 0xac2 <__floatunsisf+0xc4>
     ace:	ed 82       	std	Y+5, r14	; 0x05
     ad0:	fe 82       	std	Y+6, r15	; 0x06
     ad2:	0f 83       	std	Y+7, r16	; 0x07
     ad4:	18 87       	std	Y+8, r17	; 0x08
     ad6:	ce 1a       	sub	r12, r30
     ad8:	df 0a       	sbc	r13, r31
     ada:	dc 82       	std	Y+4, r13	; 0x04
     adc:	cb 82       	std	Y+3, r12	; 0x03
     ade:	1a 82       	std	Y+2, r1	; 0x02
     ae0:	ce 01       	movw	r24, r28
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__pack_f>
     ae8:	28 96       	adiw	r28, 0x08	; 8
     aea:	ea e0       	ldi	r30, 0x0A	; 10
     aec:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__epilogue_restores__+0x10>

00000af0 <__clzsi2>:
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	7b 01       	movw	r14, r22
     afa:	8c 01       	movw	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	e8 16       	cp	r14, r24
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	f8 06       	cpc	r15, r24
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 07       	cpc	r16, r24
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	18 07       	cpc	r17, r24
     b0c:	88 f4       	brcc	.+34     	; 0xb30 <__clzsi2+0x40>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	e8 16       	cp	r14, r24
     b12:	f1 04       	cpc	r15, r1
     b14:	01 05       	cpc	r16, r1
     b16:	11 05       	cpc	r17, r1
     b18:	31 f0       	breq	.+12     	; 0xb26 <__clzsi2+0x36>
     b1a:	28 f0       	brcs	.+10     	; 0xb26 <__clzsi2+0x36>
     b1c:	88 e0       	ldi	r24, 0x08	; 8
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <__clzsi2+0x64>
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	12 c0       	rjmp	.+36     	; 0xb54 <__clzsi2+0x64>
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	e8 16       	cp	r14, r24
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	f8 06       	cpc	r15, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 07       	cpc	r16, r24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	18 07       	cpc	r17, r24
     b40:	28 f0       	brcs	.+10     	; 0xb4c <__clzsi2+0x5c>
     b42:	88 e1       	ldi	r24, 0x18	; 24
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <__clzsi2+0x64>
     b4c:	80 e1       	ldi	r24, 0x10	; 16
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	20 e2       	ldi	r18, 0x20	; 32
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	28 1b       	sub	r18, r24
     b5e:	39 0b       	sbc	r19, r25
     b60:	4a 0b       	sbc	r20, r26
     b62:	5b 0b       	sbc	r21, r27
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__clzsi2+0x7e>
     b66:	16 95       	lsr	r17
     b68:	07 95       	ror	r16
     b6a:	f7 94       	ror	r15
     b6c:	e7 94       	ror	r14
     b6e:	8a 95       	dec	r24
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__clzsi2+0x76>
     b72:	f7 01       	movw	r30, r14
     b74:	e3 58       	subi	r30, 0x83	; 131
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	80 81       	ld	r24, Z
     b7a:	28 1b       	sub	r18, r24
     b7c:	31 09       	sbc	r19, r1
     b7e:	41 09       	sbc	r20, r1
     b80:	51 09       	sbc	r21, r1
     b82:	c9 01       	movw	r24, r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <__pack_f>:
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	ff 92       	push	r15
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	fc 01       	movw	r30, r24
     b9a:	e4 80       	ldd	r14, Z+4	; 0x04
     b9c:	f5 80       	ldd	r15, Z+5	; 0x05
     b9e:	06 81       	ldd	r16, Z+6	; 0x06
     ba0:	17 81       	ldd	r17, Z+7	; 0x07
     ba2:	d1 80       	ldd	r13, Z+1	; 0x01
     ba4:	80 81       	ld	r24, Z
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	48 f4       	brcc	.+18     	; 0xbbc <__pack_f+0x2e>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e1       	ldi	r26, 0x10	; 16
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e8 2a       	or	r14, r24
     bb4:	f9 2a       	or	r15, r25
     bb6:	0a 2b       	or	r16, r26
     bb8:	1b 2b       	or	r17, r27
     bba:	a5 c0       	rjmp	.+330    	; 0xd06 <__pack_f+0x178>
     bbc:	84 30       	cpi	r24, 0x04	; 4
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <__pack_f+0x34>
     bc0:	9f c0       	rjmp	.+318    	; 0xd00 <__pack_f+0x172>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <__pack_f+0x40>
     bc6:	ee 24       	eor	r14, r14
     bc8:	ff 24       	eor	r15, r15
     bca:	87 01       	movw	r16, r14
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <__pack_f+0x4a>
     bce:	e1 14       	cp	r14, r1
     bd0:	f1 04       	cpc	r15, r1
     bd2:	01 05       	cpc	r16, r1
     bd4:	11 05       	cpc	r17, r1
     bd6:	19 f4       	brne	.+6      	; 0xbde <__pack_f+0x50>
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	96 c0       	rjmp	.+300    	; 0xd0a <__pack_f+0x17c>
     bde:	62 81       	ldd	r22, Z+2	; 0x02
     be0:	73 81       	ldd	r23, Z+3	; 0x03
     be2:	9f ef       	ldi	r25, 0xFF	; 255
     be4:	62 38       	cpi	r22, 0x82	; 130
     be6:	79 07       	cpc	r23, r25
     be8:	0c f0       	brlt	.+2      	; 0xbec <__pack_f+0x5e>
     bea:	5b c0       	rjmp	.+182    	; 0xca2 <__pack_f+0x114>
     bec:	22 e8       	ldi	r18, 0x82	; 130
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	26 1b       	sub	r18, r22
     bf2:	37 0b       	sbc	r19, r23
     bf4:	2a 31       	cpi	r18, 0x1A	; 26
     bf6:	31 05       	cpc	r19, r1
     bf8:	2c f0       	brlt	.+10     	; 0xc04 <__pack_f+0x76>
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	2a c0       	rjmp	.+84     	; 0xc58 <__pack_f+0xca>
     c04:	b8 01       	movw	r22, r16
     c06:	a7 01       	movw	r20, r14
     c08:	02 2e       	mov	r0, r18
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <__pack_f+0x86>
     c0c:	76 95       	lsr	r23
     c0e:	67 95       	ror	r22
     c10:	57 95       	ror	r21
     c12:	47 95       	ror	r20
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <__pack_f+0x7e>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x9c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	2a 95       	dec	r18
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__pack_f+0x94>
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	a1 09       	sbc	r26, r1
     c32:	b1 09       	sbc	r27, r1
     c34:	8e 21       	and	r24, r14
     c36:	9f 21       	and	r25, r15
     c38:	a0 23       	and	r26, r16
     c3a:	b1 23       	and	r27, r17
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	a1 05       	cpc	r26, r1
     c40:	b1 05       	cpc	r27, r1
     c42:	21 f0       	breq	.+8      	; 0xc4c <__pack_f+0xbe>
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e0       	ldi	r26, 0x00	; 0
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	9a 01       	movw	r18, r20
     c4e:	ab 01       	movw	r20, r22
     c50:	28 2b       	or	r18, r24
     c52:	39 2b       	or	r19, r25
     c54:	4a 2b       	or	r20, r26
     c56:	5b 2b       	or	r21, r27
     c58:	da 01       	movw	r26, r20
     c5a:	c9 01       	movw	r24, r18
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	a0 70       	andi	r26, 0x00	; 0
     c62:	b0 70       	andi	r27, 0x00	; 0
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	a1 05       	cpc	r26, r1
     c6a:	b1 05       	cpc	r27, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <__pack_f+0xee>
     c6e:	27 ff       	sbrs	r18, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__pack_f+0xf6>
     c72:	20 5c       	subi	r18, 0xC0	; 192
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	4f 4f       	sbci	r20, 0xFF	; 255
     c78:	5f 4f       	sbci	r21, 0xFF	; 255
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0xf6>
     c7c:	21 5c       	subi	r18, 0xC1	; 193
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	4f 4f       	sbci	r20, 0xFF	; 255
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	20 30       	cpi	r18, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	3a 07       	cpc	r19, r26
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	4a 07       	cpc	r20, r26
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	5a 07       	cpc	r21, r26
     c96:	10 f0       	brcs	.+4      	; 0xc9c <__pack_f+0x10e>
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	79 01       	movw	r14, r18
     c9e:	8a 01       	movw	r16, r20
     ca0:	27 c0       	rjmp	.+78     	; 0xcf0 <__pack_f+0x162>
     ca2:	60 38       	cpi	r22, 0x80	; 128
     ca4:	71 05       	cpc	r23, r1
     ca6:	64 f5       	brge	.+88     	; 0xd00 <__pack_f+0x172>
     ca8:	fb 01       	movw	r30, r22
     caa:	e1 58       	subi	r30, 0x81	; 129
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	c7 01       	movw	r24, r14
     cb2:	8f 77       	andi	r24, 0x7F	; 127
     cb4:	90 70       	andi	r25, 0x00	; 0
     cb6:	a0 70       	andi	r26, 0x00	; 0
     cb8:	b0 70       	andi	r27, 0x00	; 0
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	91 05       	cpc	r25, r1
     cbe:	a1 05       	cpc	r26, r1
     cc0:	b1 05       	cpc	r27, r1
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__pack_f+0x144>
     cc4:	e7 fe       	sbrs	r14, 7
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <__pack_f+0x154>
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	04 c0       	rjmp	.+8      	; 0xcda <__pack_f+0x14c>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e0       	ldi	r26, 0x00	; 0
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 0e       	add	r14, r24
     cdc:	f9 1e       	adc	r15, r25
     cde:	0a 1f       	adc	r16, r26
     ce0:	1b 1f       	adc	r17, r27
     ce2:	17 ff       	sbrs	r17, 7
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__pack_f+0x162>
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	31 96       	adiw	r30, 0x01	; 1
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	16 95       	lsr	r17
     cf4:	07 95       	ror	r16
     cf6:	f7 94       	ror	r15
     cf8:	e7 94       	ror	r14
     cfa:	8a 95       	dec	r24
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <__pack_f+0x164>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__pack_f+0x17c>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	ef ef       	ldi	r30, 0xFF	; 255
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	6e 2f       	mov	r22, r30
     d0c:	67 95       	ror	r22
     d0e:	66 27       	eor	r22, r22
     d10:	67 95       	ror	r22
     d12:	90 2f       	mov	r25, r16
     d14:	9f 77       	andi	r25, 0x7F	; 127
     d16:	d7 94       	ror	r13
     d18:	dd 24       	eor	r13, r13
     d1a:	d7 94       	ror	r13
     d1c:	8e 2f       	mov	r24, r30
     d1e:	86 95       	lsr	r24
     d20:	49 2f       	mov	r20, r25
     d22:	46 2b       	or	r20, r22
     d24:	58 2f       	mov	r21, r24
     d26:	5d 29       	or	r21, r13
     d28:	b7 01       	movw	r22, r14
     d2a:	ca 01       	movw	r24, r20
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	08 95       	ret

00000d38 <__unpack_f>:
     d38:	fc 01       	movw	r30, r24
     d3a:	db 01       	movw	r26, r22
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	22 81       	ldd	r18, Z+2	; 0x02
     d42:	62 2f       	mov	r22, r18
     d44:	6f 77       	andi	r22, 0x7F	; 127
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	22 1f       	adc	r18, r18
     d4a:	22 27       	eor	r18, r18
     d4c:	22 1f       	adc	r18, r18
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	89 2f       	mov	r24, r25
     d52:	88 0f       	add	r24, r24
     d54:	82 2b       	or	r24, r18
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	99 1f       	adc	r25, r25
     d5c:	99 27       	eor	r25, r25
     d5e:	99 1f       	adc	r25, r25
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	9c 93       	st	X, r25
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	21 15       	cp	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	a9 f5       	brne	.+106    	; 0xdd6 <__unpack_f+0x9e>
     d6c:	41 15       	cp	r20, r1
     d6e:	51 05       	cpc	r21, r1
     d70:	61 05       	cpc	r22, r1
     d72:	71 05       	cpc	r23, r1
     d74:	11 f4       	brne	.+4      	; 0xd7a <__unpack_f+0x42>
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	37 c0       	rjmp	.+110    	; 0xde8 <__unpack_f+0xb0>
     d7a:	82 e8       	ldi	r24, 0x82	; 130
     d7c:	9f ef       	ldi	r25, 0xFF	; 255
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	67 e0       	ldi	r22, 0x07	; 7
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	44 1f       	adc	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	d1 f7       	brne	.-12     	; 0xd8c <__unpack_f+0x54>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	8c 93       	st	X, r24
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__unpack_f+0x80>
     d9e:	22 0f       	add	r18, r18
     da0:	33 1f       	adc	r19, r19
     da2:	44 1f       	adc	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	8d 91       	ld	r24, X+
     daa:	9c 91       	ld	r25, X
     dac:	13 97       	sbiw	r26, 0x03	; 3
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	13 96       	adiw	r26, 0x03	; 3
     db2:	9c 93       	st	X, r25
     db4:	8e 93       	st	-X, r24
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	38 07       	cpc	r19, r24
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	48 07       	cpc	r20, r24
     dc2:	80 e4       	ldi	r24, 0x40	; 64
     dc4:	58 07       	cpc	r21, r24
     dc6:	58 f3       	brcs	.-42     	; 0xd9e <__unpack_f+0x66>
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	2d 93       	st	X+, r18
     dcc:	3d 93       	st	X+, r19
     dce:	4d 93       	st	X+, r20
     dd0:	5c 93       	st	X, r21
     dd2:	17 97       	sbiw	r26, 0x07	; 7
     dd4:	08 95       	ret
     dd6:	2f 3f       	cpi	r18, 0xFF	; 255
     dd8:	31 05       	cpc	r19, r1
     dda:	79 f4       	brne	.+30     	; 0xdfa <__unpack_f+0xc2>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	19 f4       	brne	.+6      	; 0xdec <__unpack_f+0xb4>
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	8c 93       	st	X, r24
     dea:	08 95       	ret
     dec:	64 ff       	sbrs	r22, 4
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <__unpack_f+0xbe>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <__unpack_f+0xe2>
     df6:	1c 92       	st	X, r1
     df8:	10 c0       	rjmp	.+32     	; 0xe1a <__unpack_f+0xe2>
     dfa:	2f 57       	subi	r18, 0x7F	; 127
     dfc:	30 40       	sbci	r19, 0x00	; 0
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	3c 93       	st	X, r19
     e02:	2e 93       	st	-X, r18
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8c 93       	st	X, r24
     e0a:	87 e0       	ldi	r24, 0x07	; 7
     e0c:	44 0f       	add	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	66 1f       	adc	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	8a 95       	dec	r24
     e16:	d1 f7       	brne	.-12     	; 0xe0c <__unpack_f+0xd4>
     e18:	70 64       	ori	r23, 0x40	; 64
     e1a:	14 96       	adiw	r26, 0x04	; 4
     e1c:	4d 93       	st	X+, r20
     e1e:	5d 93       	st	X+, r21
     e20:	6d 93       	st	X+, r22
     e22:	7c 93       	st	X, r23
     e24:	17 97       	sbiw	r26, 0x07	; 7
     e26:	08 95       	ret

00000e28 <__fpcmp_parts_f>:
     e28:	1f 93       	push	r17
     e2a:	dc 01       	movw	r26, r24
     e2c:	fb 01       	movw	r30, r22
     e2e:	9c 91       	ld	r25, X
     e30:	92 30       	cpi	r25, 0x02	; 2
     e32:	08 f4       	brcc	.+2      	; 0xe36 <__fpcmp_parts_f+0xe>
     e34:	47 c0       	rjmp	.+142    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e36:	80 81       	ld	r24, Z
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <__fpcmp_parts_f+0x16>
     e3c:	43 c0       	rjmp	.+134    	; 0xec4 <__fpcmp_parts_f+0x9c>
     e3e:	94 30       	cpi	r25, 0x04	; 4
     e40:	51 f4       	brne	.+20     	; 0xe56 <__fpcmp_parts_f+0x2e>
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	1c 91       	ld	r17, X
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <__fpcmp_parts_f+0x88>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	68 2f       	mov	r22, r24
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	61 1b       	sub	r22, r17
     e52:	71 09       	sbc	r23, r1
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <__fpcmp_parts_f+0xac>
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	21 f0       	breq	.+8      	; 0xe62 <__fpcmp_parts_f+0x3a>
     e5a:	92 30       	cpi	r25, 0x02	; 2
     e5c:	31 f4       	brne	.+12     	; 0xe6a <__fpcmp_parts_f+0x42>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	b9 f1       	breq	.+110    	; 0xed0 <__fpcmp_parts_f+0xa8>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	89 f1       	breq	.+98     	; 0xeca <__fpcmp_parts_f+0xa2>
     e68:	2d c0       	rjmp	.+90     	; 0xec4 <__fpcmp_parts_f+0x9c>
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	1c 91       	ld	r17, X
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	f1 f0       	breq	.+60     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	18 17       	cp	r17, r24
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	13 97       	sbiw	r26, 0x03	; 3
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	82 17       	cp	r24, r18
     e88:	93 07       	cpc	r25, r19
     e8a:	94 f0       	brlt	.+36     	; 0xeb0 <__fpcmp_parts_f+0x88>
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	bc f0       	brlt	.+46     	; 0xec0 <__fpcmp_parts_f+0x98>
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	8d 91       	ld	r24, X+
     e96:	9d 91       	ld	r25, X+
     e98:	0d 90       	ld	r0, X+
     e9a:	bc 91       	ld	r27, X
     e9c:	a0 2d       	mov	r26, r0
     e9e:	24 81       	ldd	r18, Z+4	; 0x04
     ea0:	35 81       	ldd	r19, Z+5	; 0x05
     ea2:	46 81       	ldd	r20, Z+6	; 0x06
     ea4:	57 81       	ldd	r21, Z+7	; 0x07
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	4a 07       	cpc	r20, r26
     eac:	5b 07       	cpc	r21, r27
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <__fpcmp_parts_f+0x8e>
     eb0:	11 23       	and	r17, r17
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__fpcmp_parts_f+0x9c>
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <__fpcmp_parts_f+0xa2>
     eb6:	82 17       	cp	r24, r18
     eb8:	93 07       	cpc	r25, r19
     eba:	a4 07       	cpc	r26, r20
     ebc:	b5 07       	cpc	r27, r21
     ebe:	40 f4       	brcc	.+16     	; 0xed0 <__fpcmp_parts_f+0xa8>
     ec0:	11 23       	and	r17, r17
     ec2:	19 f0       	breq	.+6      	; 0xeca <__fpcmp_parts_f+0xa2>
     ec4:	61 e0       	ldi	r22, 0x01	; 1
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <__fpcmp_parts_f+0xac>
     eca:	6f ef       	ldi	r22, 0xFF	; 255
     ecc:	7f ef       	ldi	r23, 0xFF	; 255
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <__fpcmp_parts_f+0xac>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	c2 57       	subi	r28, 0x72	; 114
     ee8:	d0 40       	sbci	r29, 0x00	; 0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	62 e0       	ldi	r22, 0x02	; 2
     f0c:	41 e0       	ldi	r20, 0x01	; 1
     f0e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	65 e0       	ldi	r22, 0x05	; 5
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	66 e0       	ldi	r22, 0x06	; 6
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	67 e0       	ldi	r22, 0x07	; 7
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 f7 17 	call	0x2fee	; 0x2fee <MDIO_stderrSetPinDirection>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e1 59       	subi	r30, 0x91	; 145
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e2       	ldi	r26, 0x20	; 32
     f46:	b2 e4       	ldi	r27, 0x42	; 66
     f48:	80 83       	st	Z, r24
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	a2 83       	std	Z+2, r26	; 0x02
     f4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	8e 01       	movw	r16, r28
     f52:	05 59       	subi	r16, 0x95	; 149
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	fe 01       	movw	r30, r28
     f58:	e1 59       	subi	r30, 0x91	; 145
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a ef       	ldi	r20, 0xFA	; 250
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	f8 01       	movw	r30, r16
     f76:	80 83       	st	Z, r24
     f78:	91 83       	std	Z+1, r25	; 0x01
     f7a:	a2 83       	std	Z+2, r26	; 0x02
     f7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f7e:	fe 01       	movw	r30, r28
     f80:	e5 59       	subi	r30, 0x95	; 149
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	44 f4       	brge	.+16     	; 0xfac <HLCD_voidInit+0xd2>
		__ticks = 1;
     f9c:	fe 01       	movw	r30, r28
     f9e:	e7 59       	subi	r30, 0x97	; 151
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
     faa:	64 c0       	rjmp	.+200    	; 0x1074 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
     fac:	fe 01       	movw	r30, r28
     fae:	e5 59       	subi	r30, 0x95	; 149
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	4f e7       	ldi	r20, 0x7F	; 127
     fc0:	57 e4       	ldi	r21, 0x47	; 71
     fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fc6:	18 16       	cp	r1, r24
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <HLCD_voidInit+0xf2>
     fca:	43 c0       	rjmp	.+134    	; 0x1052 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fcc:	fe 01       	movw	r30, r28
     fce:	e1 59       	subi	r30, 0x91	; 145
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e2       	ldi	r20, 0x20	; 32
     fe0:	51 e4       	ldi	r21, 0x41	; 65
     fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8e 01       	movw	r16, r28
     fec:	07 59       	subi	r16, 0x97	; 151
     fee:	1f 4f       	sbci	r17, 0xFF	; 255
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	f8 01       	movw	r30, r16
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
    1002:	1f c0       	rjmp	.+62     	; 0x1042 <HLCD_voidInit+0x168>
    1004:	fe 01       	movw	r30, r28
    1006:	e9 59       	subi	r30, 0x99	; 153
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	88 ec       	ldi	r24, 0xC8	; 200
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1012:	fe 01       	movw	r30, r28
    1014:	e9 59       	subi	r30, 0x99	; 153
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <HLCD_voidInit+0x142>
    1020:	fe 01       	movw	r30, r28
    1022:	e9 59       	subi	r30, 0x99	; 153
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	de 01       	movw	r26, r28
    102c:	a7 59       	subi	r26, 0x97	; 151
    102e:	bf 4f       	sbci	r27, 0xFF	; 255
    1030:	fe 01       	movw	r30, r28
    1032:	e7 59       	subi	r30, 0x97	; 151
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	11 96       	adiw	r26, 0x01	; 1
    103e:	9c 93       	st	X, r25
    1040:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	fe 01       	movw	r30, r28
    1044:	e7 59       	subi	r30, 0x97	; 151
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	00 97       	sbiw	r24, 0x00	; 0
    104e:	d1 f6       	brne	.-76     	; 0x1004 <HLCD_voidInit+0x12a>
    1050:	27 c0       	rjmp	.+78     	; 0x10a0 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1052:	8e 01       	movw	r16, r28
    1054:	07 59       	subi	r16, 0x97	; 151
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	fe 01       	movw	r30, r28
    105a:	e5 59       	subi	r30, 0x95	; 149
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	f8 01       	movw	r30, r16
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	de 01       	movw	r26, r28
    1076:	ab 59       	subi	r26, 0x9B	; 155
    1078:	bf 4f       	sbci	r27, 0xFF	; 255
    107a:	fe 01       	movw	r30, r28
    107c:	e7 59       	subi	r30, 0x97	; 151
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	8d 93       	st	X+, r24
    1086:	9c 93       	st	X, r25
    1088:	fe 01       	movw	r30, r28
    108a:	eb 59       	subi	r30, 0x9B	; 155
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <HLCD_voidInit+0x1b8>
    1096:	fe 01       	movw	r30, r28
    1098:	eb 59       	subi	r30, 0x9B	; 155
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
    10a0:	83 e3       	ldi	r24, 0x33	; 51
    10a2:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    10a6:	fe 01       	movw	r30, r28
    10a8:	ef 59       	subi	r30, 0x9F	; 159
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 ea       	ldi	r26, 0xA0	; 160
    10b2:	b0 e4       	ldi	r27, 0x40	; 64
    10b4:	80 83       	st	Z, r24
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	a2 83       	std	Z+2, r26	; 0x02
    10ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10bc:	8e 01       	movw	r16, r28
    10be:	03 5a       	subi	r16, 0xA3	; 163
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	fe 01       	movw	r30, r28
    10c4:	ef 59       	subi	r30, 0x9F	; 159
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	60 81       	ld	r22, Z
    10ca:	71 81       	ldd	r23, Z+1	; 0x01
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4a ef       	ldi	r20, 0xFA	; 250
    10d6:	54 e4       	ldi	r21, 0x44	; 68
    10d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	f8 01       	movw	r30, r16
    10e2:	80 83       	st	Z, r24
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	a2 83       	std	Z+2, r26	; 0x02
    10e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10ea:	fe 01       	movw	r30, r28
    10ec:	e3 5a       	subi	r30, 0xA3	; 163
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	5f e3       	ldi	r21, 0x3F	; 63
    1100:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1104:	88 23       	and	r24, r24
    1106:	44 f4       	brge	.+16     	; 0x1118 <HLCD_voidInit+0x23e>
		__ticks = 1;
    1108:	fe 01       	movw	r30, r28
    110a:	e5 5a       	subi	r30, 0xA5	; 165
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	80 83       	st	Z, r24
    1116:	64 c0       	rjmp	.+200    	; 0x11e0 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
    1118:	fe 01       	movw	r30, r28
    111a:	e3 5a       	subi	r30, 0xA3	; 163
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	3f ef       	ldi	r19, 0xFF	; 255
    112a:	4f e7       	ldi	r20, 0x7F	; 127
    112c:	57 e4       	ldi	r21, 0x47	; 71
    112e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1132:	18 16       	cp	r1, r24
    1134:	0c f0       	brlt	.+2      	; 0x1138 <HLCD_voidInit+0x25e>
    1136:	43 c0       	rjmp	.+134    	; 0x11be <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1138:	fe 01       	movw	r30, r28
    113a:	ef 59       	subi	r30, 0x9F	; 159
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	8e 01       	movw	r16, r28
    1158:	05 5a       	subi	r16, 0xA5	; 165
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	bc 01       	movw	r22, r24
    115e:	cd 01       	movw	r24, r26
    1160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	f8 01       	movw	r30, r16
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	1f c0       	rjmp	.+62     	; 0x11ae <HLCD_voidInit+0x2d4>
    1170:	fe 01       	movw	r30, r28
    1172:	e7 5a       	subi	r30, 0xA7	; 167
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	fe 01       	movw	r30, r28
    1180:	e7 5a       	subi	r30, 0xA7	; 167
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <HLCD_voidInit+0x2ae>
    118c:	fe 01       	movw	r30, r28
    118e:	e7 5a       	subi	r30, 0xA7	; 167
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	de 01       	movw	r26, r28
    1198:	a5 5a       	subi	r26, 0xA5	; 165
    119a:	bf 4f       	sbci	r27, 0xFF	; 255
    119c:	fe 01       	movw	r30, r28
    119e:	e5 5a       	subi	r30, 0xA5	; 165
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	fe 01       	movw	r30, r28
    11b0:	e5 5a       	subi	r30, 0xA5	; 165
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	d1 f6       	brne	.-76     	; 0x1170 <HLCD_voidInit+0x296>
    11bc:	27 c0       	rjmp	.+78     	; 0x120c <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11be:	8e 01       	movw	r16, r28
    11c0:	05 5a       	subi	r16, 0xA5	; 165
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	fe 01       	movw	r30, r28
    11c6:	e3 5a       	subi	r30, 0xA3	; 163
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	f8 01       	movw	r30, r16
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	80 83       	st	Z, r24
    11e0:	de 01       	movw	r26, r28
    11e2:	a9 5a       	subi	r26, 0xA9	; 169
    11e4:	bf 4f       	sbci	r27, 0xFF	; 255
    11e6:	fe 01       	movw	r30, r28
    11e8:	e5 5a       	subi	r30, 0xA5	; 165
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	8d 93       	st	X+, r24
    11f2:	9c 93       	st	X, r25
    11f4:	fe 01       	movw	r30, r28
    11f6:	e9 5a       	subi	r30, 0xA9	; 169
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	91 81       	ldd	r25, Z+1	; 0x01
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <HLCD_voidInit+0x324>
    1202:	fe 01       	movw	r30, r28
    1204:	e9 5a       	subi	r30, 0xA9	; 169
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
    120c:	82 e3       	ldi	r24, 0x32	; 50
    120e:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5a       	subi	r30, 0xAD	; 173
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a8 ec       	ldi	r26, 0xC8	; 200
    121e:	b2 e4       	ldi	r27, 0x42	; 66
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1228:	8e 01       	movw	r16, r28
    122a:	01 5b       	subi	r16, 0xB1	; 177
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	ed 5a       	subi	r30, 0xAD	; 173
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	2b ea       	ldi	r18, 0xAB	; 171
    123e:	3a ea       	ldi	r19, 0xAA	; 170
    1240:	4a e2       	ldi	r20, 0x2A	; 42
    1242:	50 e4       	ldi	r21, 0x40	; 64
    1244:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	f8 01       	movw	r30, r16
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1256:	fe 01       	movw	r30, r28
    1258:	e1 5b       	subi	r30, 0xB1	; 177
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1270:	88 23       	and	r24, r24
    1272:	34 f4       	brge	.+12     	; 0x1280 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    1274:	fe 01       	movw	r30, r28
    1276:	e2 5b       	subi	r30, 0xB2	; 178
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 83       	st	Z, r24
    127e:	e0 c0       	rjmp	.+448    	; 0x1440 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    1280:	fe 01       	movw	r30, r28
    1282:	e1 5b       	subi	r30, 0xB1	; 177
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	53 e4       	ldi	r21, 0x43	; 67
    1296:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <HLCD_voidInit+0x3c6>
    129e:	c0 c0       	rjmp	.+384    	; 0x1420 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    12a0:	fe 01       	movw	r30, r28
    12a2:	ed 5a       	subi	r30, 0xAD	; 173
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	54 e4       	ldi	r21, 0x44	; 68
    12b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	fe 01       	movw	r30, r28
    12c0:	e6 5b       	subi	r30, 0xB6	; 182
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	8e 01       	movw	r16, r28
    12ce:	0a 5b       	subi	r16, 0xBA	; 186
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	e6 5b       	subi	r30, 0xB6	; 182
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	f8 01       	movw	r30, r16
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	a2 83       	std	Z+2, r26	; 0x02
    12f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fa:	fe 01       	movw	r30, r28
    12fc:	ea 5b       	subi	r30, 0xBA	; 186
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	44 f4       	brge	.+16     	; 0x1328 <HLCD_voidInit+0x44e>
		__ticks = 1;
    1318:	fe 01       	movw	r30, r28
    131a:	ec 5b       	subi	r30, 0xBC	; 188
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
    1326:	64 c0       	rjmp	.+200    	; 0x13f0 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    1328:	fe 01       	movw	r30, r28
    132a:	ea 5b       	subi	r30, 0xBA	; 186
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	0c f0       	brlt	.+2      	; 0x1348 <HLCD_voidInit+0x46e>
    1346:	43 c0       	rjmp	.+134    	; 0x13ce <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	fe 01       	movw	r30, r28
    134a:	e6 5b       	subi	r30, 0xB6	; 182
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8e 01       	movw	r16, r28
    1368:	0c 5b       	subi	r16, 0xBC	; 188
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	1f c0       	rjmp	.+62     	; 0x13be <HLCD_voidInit+0x4e4>
    1380:	fe 01       	movw	r30, r28
    1382:	ee 5b       	subi	r30, 0xBE	; 190
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	88 ec       	ldi	r24, 0xC8	; 200
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	91 83       	std	Z+1, r25	; 0x01
    138c:	80 83       	st	Z, r24
    138e:	fe 01       	movw	r30, r28
    1390:	ee 5b       	subi	r30, 0xBE	; 190
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <HLCD_voidInit+0x4be>
    139c:	fe 01       	movw	r30, r28
    139e:	ee 5b       	subi	r30, 0xBE	; 190
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	91 83       	std	Z+1, r25	; 0x01
    13a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	de 01       	movw	r26, r28
    13a8:	ac 5b       	subi	r26, 0xBC	; 188
    13aa:	bf 4f       	sbci	r27, 0xFF	; 255
    13ac:	fe 01       	movw	r30, r28
    13ae:	ec 5b       	subi	r30, 0xBC	; 188
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	9c 93       	st	X, r25
    13bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	fe 01       	movw	r30, r28
    13c0:	ec 5b       	subi	r30, 0xBC	; 188
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	d1 f6       	brne	.-76     	; 0x1380 <HLCD_voidInit+0x4a6>
    13cc:	42 c0       	rjmp	.+132    	; 0x1452 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	8e 01       	movw	r16, r28
    13d0:	0c 5b       	subi	r16, 0xBC	; 188
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	fe 01       	movw	r30, r28
    13d6:	ea 5b       	subi	r30, 0xBA	; 186
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	f8 01       	movw	r30, r16
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
    13f0:	de 01       	movw	r26, r28
    13f2:	a0 5c       	subi	r26, 0xC0	; 192
    13f4:	bf 4f       	sbci	r27, 0xFF	; 255
    13f6:	fe 01       	movw	r30, r28
    13f8:	ec 5b       	subi	r30, 0xBC	; 188
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	91 81       	ldd	r25, Z+1	; 0x01
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24
    1406:	fe 01       	movw	r30, r28
    1408:	e0 5c       	subi	r30, 0xC0	; 192
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	f1 f7       	brne	.-4      	; 0x1410 <HLCD_voidInit+0x536>
    1414:	fe 01       	movw	r30, r28
    1416:	e0 5c       	subi	r30, 0xC0	; 192
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	19 c0       	rjmp	.+50     	; 0x1452 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1420:	8e 01       	movw	r16, r28
    1422:	02 5b       	subi	r16, 0xB2	; 178
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	fe 01       	movw	r30, r28
    1428:	e1 5b       	subi	r30, 0xB1	; 177
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	60 81       	ld	r22, Z
    142e:	71 81       	ldd	r23, Z+1	; 0x01
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	f8 01       	movw	r30, r16
    143e:	80 83       	st	Z, r24
    1440:	fe 01       	movw	r30, r28
    1442:	e2 5b       	subi	r30, 0xB2	; 178
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	80 81       	ld	r24, Z
    1448:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    144a:	8f ad       	ldd	r24, Y+63	; 0x3f
    144c:	8a 95       	dec	r24
    144e:	f1 f7       	brne	.-4      	; 0x144c <HLCD_voidInit+0x572>
    1450:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    1452:	88 e2       	ldi	r24, 0x28	; 40
    1454:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a8 ec       	ldi	r26, 0xC8	; 200
    145e:	b2 e4       	ldi	r27, 0x42	; 66
    1460:	8b af       	std	Y+59, r24	; 0x3b
    1462:	9c af       	std	Y+60, r25	; 0x3c
    1464:	ad af       	std	Y+61, r26	; 0x3d
    1466:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1468:	6b ad       	ldd	r22, Y+59	; 0x3b
    146a:	7c ad       	ldd	r23, Y+60	; 0x3c
    146c:	8d ad       	ldd	r24, Y+61	; 0x3d
    146e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1470:	2b ea       	ldi	r18, 0xAB	; 171
    1472:	3a ea       	ldi	r19, 0xAA	; 170
    1474:	4a e2       	ldi	r20, 0x2A	; 42
    1476:	50 e4       	ldi	r21, 0x40	; 64
    1478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8f ab       	std	Y+55, r24	; 0x37
    1482:	98 af       	std	Y+56, r25	; 0x38
    1484:	a9 af       	std	Y+57, r26	; 0x39
    1486:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1488:	6f a9       	ldd	r22, Y+55	; 0x37
    148a:	78 ad       	ldd	r23, Y+56	; 0x38
    148c:	89 ad       	ldd	r24, Y+57	; 0x39
    148e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	1c f4       	brge	.+6      	; 0x14a6 <HLCD_voidInit+0x5cc>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	8e ab       	std	Y+54, r24	; 0x36
    14a4:	91 c0       	rjmp	.+290    	; 0x15c8 <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    14a6:	6f a9       	ldd	r22, Y+55	; 0x37
    14a8:	78 ad       	ldd	r23, Y+56	; 0x38
    14aa:	89 ad       	ldd	r24, Y+57	; 0x39
    14ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4f e7       	ldi	r20, 0x7F	; 127
    14b4:	53 e4       	ldi	r21, 0x43	; 67
    14b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14ba:	18 16       	cp	r1, r24
    14bc:	0c f0       	brlt	.+2      	; 0x14c0 <HLCD_voidInit+0x5e6>
    14be:	7b c0       	rjmp	.+246    	; 0x15b6 <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    14c0:	6b ad       	ldd	r22, Y+59	; 0x3b
    14c2:	7c ad       	ldd	r23, Y+60	; 0x3c
    14c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    14c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8a ab       	std	Y+50, r24	; 0x32
    14da:	9b ab       	std	Y+51, r25	; 0x33
    14dc:	ac ab       	std	Y+52, r26	; 0x34
    14de:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	6a a9       	ldd	r22, Y+50	; 0x32
    14e2:	7b a9       	ldd	r23, Y+51	; 0x33
    14e4:	8c a9       	ldd	r24, Y+52	; 0x34
    14e6:	9d a9       	ldd	r25, Y+53	; 0x35
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a ef       	ldi	r20, 0xFA	; 250
    14ee:	54 e4       	ldi	r21, 0x44	; 68
    14f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8e a7       	std	Y+46, r24	; 0x2e
    14fa:	9f a7       	std	Y+47, r25	; 0x2f
    14fc:	a8 ab       	std	Y+48, r26	; 0x30
    14fe:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1500:	6e a5       	ldd	r22, Y+46	; 0x2e
    1502:	7f a5       	ldd	r23, Y+47	; 0x2f
    1504:	88 a9       	ldd	r24, Y+48	; 0x30
    1506:	99 a9       	ldd	r25, Y+49	; 0x31
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <HLCD_voidInit+0x648>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9d a7       	std	Y+45, r25	; 0x2d
    151e:	8c a7       	std	Y+44, r24	; 0x2c
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    1522:	6e a5       	ldd	r22, Y+46	; 0x2e
    1524:	7f a5       	ldd	r23, Y+47	; 0x2f
    1526:	88 a9       	ldd	r24, Y+48	; 0x30
    1528:	99 a9       	ldd	r25, Y+49	; 0x31
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	6a a9       	ldd	r22, Y+50	; 0x32
    153c:	7b a9       	ldd	r23, Y+51	; 0x33
    153e:	8c a9       	ldd	r24, Y+52	; 0x34
    1540:	9d a9       	ldd	r25, Y+53	; 0x35
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9d a7       	std	Y+45, r25	; 0x2d
    1560:	8c a7       	std	Y+44, r24	; 0x2c
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <HLCD_voidInit+0x6a8>
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9b a7       	std	Y+43, r25	; 0x2b
    156a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156c:	8a a5       	ldd	r24, Y+42	; 0x2a
    156e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <HLCD_voidInit+0x696>
    1574:	9b a7       	std	Y+43, r25	; 0x2b
    1576:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8c a5       	ldd	r24, Y+44	; 0x2c
    157a:	9d a5       	ldd	r25, Y+45	; 0x2d
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9d a7       	std	Y+45, r25	; 0x2d
    1580:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8c a5       	ldd	r24, Y+44	; 0x2c
    1584:	9d a5       	ldd	r25, Y+45	; 0x2d
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <HLCD_voidInit+0x68a>
    158a:	24 c0       	rjmp	.+72     	; 0x15d4 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6e a5       	ldd	r22, Y+46	; 0x2e
    158e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1590:	88 a9       	ldd	r24, Y+48	; 0x30
    1592:	99 a9       	ldd	r25, Y+49	; 0x31
    1594:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9d a7       	std	Y+45, r25	; 0x2d
    159e:	8c a7       	std	Y+44, r24	; 0x2c
    15a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    15a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    15a4:	99 a7       	std	Y+41, r25	; 0x29
    15a6:	88 a7       	std	Y+40, r24	; 0x28
    15a8:	88 a5       	ldd	r24, Y+40	; 0x28
    15aa:	99 a5       	ldd	r25, Y+41	; 0x29
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <HLCD_voidInit+0x6d2>
    15b0:	99 a7       	std	Y+41, r25	; 0x29
    15b2:	88 a7       	std	Y+40, r24	; 0x28
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15b6:	6f a9       	ldd	r22, Y+55	; 0x37
    15b8:	78 ad       	ldd	r23, Y+56	; 0x38
    15ba:	89 ad       	ldd	r24, Y+57	; 0x39
    15bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    15be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8e ab       	std	Y+54, r24	; 0x36
    15c8:	8e a9       	ldd	r24, Y+54	; 0x36
    15ca:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15cc:	8f a1       	ldd	r24, Y+39	; 0x27
    15ce:	8a 95       	dec	r24
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <HLCD_voidInit+0x6f4>
    15d2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    15d4:	8c e0       	ldi	r24, 0x0C	; 12
    15d6:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a8 e4       	ldi	r26, 0x48	; 72
    15e0:	b3 e4       	ldi	r27, 0x43	; 67
    15e2:	8b a3       	std	Y+35, r24	; 0x23
    15e4:	9c a3       	std	Y+36, r25	; 0x24
    15e6:	ad a3       	std	Y+37, r26	; 0x25
    15e8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ea:	6b a1       	ldd	r22, Y+35	; 0x23
    15ec:	7c a1       	ldd	r23, Y+36	; 0x24
    15ee:	8d a1       	ldd	r24, Y+37	; 0x25
    15f0:	9e a1       	ldd	r25, Y+38	; 0x26
    15f2:	2b ea       	ldi	r18, 0xAB	; 171
    15f4:	3a ea       	ldi	r19, 0xAA	; 170
    15f6:	4a e2       	ldi	r20, 0x2A	; 42
    15f8:	50 e4       	ldi	r21, 0x40	; 64
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8f 8f       	std	Y+31, r24	; 0x1f
    1604:	98 a3       	std	Y+32, r25	; 0x20
    1606:	a9 a3       	std	Y+33, r26	; 0x21
    1608:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    160a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    160c:	78 a1       	ldd	r23, Y+32	; 0x20
    160e:	89 a1       	ldd	r24, Y+33	; 0x21
    1610:	9a a1       	ldd	r25, Y+34	; 0x22
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	1c f4       	brge	.+6      	; 0x1628 <HLCD_voidInit+0x74e>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	8e 8f       	std	Y+30, r24	; 0x1e
    1626:	91 c0       	rjmp	.+290    	; 0x174a <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    1628:	6f 8d       	ldd	r22, Y+31	; 0x1f
    162a:	78 a1       	ldd	r23, Y+32	; 0x20
    162c:	89 a1       	ldd	r24, Y+33	; 0x21
    162e:	9a a1       	ldd	r25, Y+34	; 0x22
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	53 e4       	ldi	r21, 0x43	; 67
    1638:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <HLCD_voidInit+0x768>
    1640:	7b c0       	rjmp	.+246    	; 0x1738 <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    1642:	6b a1       	ldd	r22, Y+35	; 0x23
    1644:	7c a1       	ldd	r23, Y+36	; 0x24
    1646:	8d a1       	ldd	r24, Y+37	; 0x25
    1648:	9e a1       	ldd	r25, Y+38	; 0x26
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	54 e4       	ldi	r21, 0x44	; 68
    1652:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8a 8f       	std	Y+26, r24	; 0x1a
    165c:	9b 8f       	std	Y+27, r25	; 0x1b
    165e:	ac 8f       	std	Y+28, r26	; 0x1c
    1660:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1662:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1664:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1666:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1668:	9d 8d       	ldd	r25, Y+29	; 0x1d
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a ef       	ldi	r20, 0xFA	; 250
    1670:	54 e4       	ldi	r21, 0x44	; 68
    1672:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	8e 8b       	std	Y+22, r24	; 0x16
    167c:	9f 8b       	std	Y+23, r25	; 0x17
    167e:	a8 8f       	std	Y+24, r26	; 0x18
    1680:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1682:	6e 89       	ldd	r22, Y+22	; 0x16
    1684:	7f 89       	ldd	r23, Y+23	; 0x17
    1686:	88 8d       	ldd	r24, Y+24	; 0x18
    1688:	99 8d       	ldd	r25, Y+25	; 0x19
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	2c f4       	brge	.+10     	; 0x16a4 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9d 8b       	std	Y+21, r25	; 0x15
    16a0:	8c 8b       	std	Y+20, r24	; 0x14
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    16a4:	6e 89       	ldd	r22, Y+22	; 0x16
    16a6:	7f 89       	ldd	r23, Y+23	; 0x17
    16a8:	88 8d       	ldd	r24, Y+24	; 0x18
    16aa:	99 8d       	ldd	r25, Y+25	; 0x19
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	3f ef       	ldi	r19, 0xFF	; 255
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	4c f5       	brge	.+82     	; 0x170e <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16bc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16be:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9d 8b       	std	Y+21, r25	; 0x15
    16e2:	8c 8b       	std	Y+20, r24	; 0x14
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <HLCD_voidInit+0x82a>
    16e6:	88 ec       	ldi	r24, 0xC8	; 200
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9b 8b       	std	Y+19, r25	; 0x13
    16ec:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ee:	8a 89       	ldd	r24, Y+18	; 0x12
    16f0:	9b 89       	ldd	r25, Y+19	; 0x13
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <HLCD_voidInit+0x818>
    16f6:	9b 8b       	std	Y+19, r25	; 0x13
    16f8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	8c 89       	ldd	r24, Y+20	; 0x14
    16fc:	9d 89       	ldd	r25, Y+21	; 0x15
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	9d 8b       	std	Y+21, r25	; 0x15
    1702:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1704:	8c 89       	ldd	r24, Y+20	; 0x14
    1706:	9d 89       	ldd	r25, Y+21	; 0x15
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	69 f7       	brne	.-38     	; 0x16e6 <HLCD_voidInit+0x80c>
    170c:	24 c0       	rjmp	.+72     	; 0x1756 <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	6e 89       	ldd	r22, Y+22	; 0x16
    1710:	7f 89       	ldd	r23, Y+23	; 0x17
    1712:	88 8d       	ldd	r24, Y+24	; 0x18
    1714:	99 8d       	ldd	r25, Y+25	; 0x19
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9d 8b       	std	Y+21, r25	; 0x15
    1720:	8c 8b       	std	Y+20, r24	; 0x14
    1722:	8c 89       	ldd	r24, Y+20	; 0x14
    1724:	9d 89       	ldd	r25, Y+21	; 0x15
    1726:	99 8b       	std	Y+17, r25	; 0x11
    1728:	88 8b       	std	Y+16, r24	; 0x10
    172a:	88 89       	ldd	r24, Y+16	; 0x10
    172c:	99 89       	ldd	r25, Y+17	; 0x11
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <HLCD_voidInit+0x854>
    1732:	99 8b       	std	Y+17, r25	; 0x11
    1734:	88 8b       	std	Y+16, r24	; 0x10
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1738:	6f 8d       	ldd	r22, Y+31	; 0x1f
    173a:	78 a1       	ldd	r23, Y+32	; 0x20
    173c:	89 a1       	ldd	r24, Y+33	; 0x21
    173e:	9a a1       	ldd	r25, Y+34	; 0x22
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	8e 8f       	std	Y+30, r24	; 0x1e
    174a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    174c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	8a 95       	dec	r24
    1752:	f1 f7       	brne	.-4      	; 0x1750 <HLCD_voidInit+0x876>
    1754:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    1756:	86 e0       	ldi	r24, 0x06	; 6
    1758:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    175c:	8f e0       	ldi	r24, 0x0F	; 15
    175e:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e4       	ldi	r27, 0x40	; 64
    1770:	8b 87       	std	Y+11, r24	; 0x0b
    1772:	9c 87       	std	Y+12, r25	; 0x0c
    1774:	ad 87       	std	Y+13, r26	; 0x0d
    1776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a ef       	ldi	r20, 0xFA	; 250
    1786:	54 e4       	ldi	r21, 0x44	; 68
    1788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8f 83       	std	Y+7, r24	; 0x07
    1792:	98 87       	std	Y+8, r25	; 0x08
    1794:	a9 87       	std	Y+9, r26	; 0x09
    1796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <HLCD_voidInit+0x8e0>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <HLCD_voidInit+0x940>
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <HLCD_voidInit+0x92e>
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <HLCD_voidInit+0x922>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <HLCD_voidInit+0x96a>
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    184c:	ce 58       	subi	r28, 0x8E	; 142
    184e:	df 4f       	sbci	r29, 0xFF	; 255
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	c1 56       	subi	r28, 0x61	; 97
    1872:	d0 40       	sbci	r29, 0x00	; 0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	fe 01       	movw	r30, r28
    1880:	ef 59       	subi	r30, 0x9F	; 159
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	41 e0       	ldi	r20, 0x01	; 1
    188c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	62 e0       	ldi	r22, 0x02	; 2
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    18a4:	fe 01       	movw	r30, r28
    18a6:	ef 59       	subi	r30, 0x9F	; 159
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	82 95       	swap	r24
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	98 2f       	mov	r25, r24
    18b4:	9f 5f       	subi	r25, 0xFF	; 255
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	49 2f       	mov	r20, r25
    18bc:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    18c0:	fe 01       	movw	r30, r28
    18c2:	ef 59       	subi	r30, 0x9F	; 159
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	82 95       	swap	r24
    18ca:	86 95       	lsr	r24
    18cc:	87 70       	andi	r24, 0x07	; 7
    18ce:	81 70       	andi	r24, 0x01	; 1
    18d0:	98 2f       	mov	r25, r24
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	65 e0       	ldi	r22, 0x05	; 5
    18d8:	49 2f       	mov	r20, r25
    18da:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    18de:	fe 01       	movw	r30, r28
    18e0:	ef 59       	subi	r30, 0x9F	; 159
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	82 95       	swap	r24
    18e8:	86 95       	lsr	r24
    18ea:	86 95       	lsr	r24
    18ec:	83 70       	andi	r24, 0x03	; 3
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	98 2f       	mov	r25, r24
    18f2:	9f 5f       	subi	r25, 0xFF	; 255
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	66 e0       	ldi	r22, 0x06	; 6
    18f8:	49 2f       	mov	r20, r25
    18fa:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    18fe:	fe 01       	movw	r30, r28
    1900:	ef 59       	subi	r30, 0x9F	; 159
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	88 1f       	adc	r24, r24
    1908:	88 27       	eor	r24, r24
    190a:	88 1f       	adc	r24, r24
    190c:	98 2f       	mov	r25, r24
    190e:	9f 5f       	subi	r25, 0xFF	; 255
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	67 e0       	ldi	r22, 0x07	; 7
    1914:	49 2f       	mov	r20, r25
    1916:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	62 e0       	ldi	r22, 0x02	; 2
    191e:	42 e0       	ldi	r20, 0x02	; 2
    1920:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    1924:	fe 01       	movw	r30, r28
    1926:	e3 5a       	subi	r30, 0xA3	; 163
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a0 e2       	ldi	r26, 0x20	; 32
    1930:	b1 e4       	ldi	r27, 0x41	; 65
    1932:	80 83       	st	Z, r24
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	a2 83       	std	Z+2, r26	; 0x02
    1938:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    193a:	8e 01       	movw	r16, r28
    193c:	07 5a       	subi	r16, 0xA7	; 167
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	fe 01       	movw	r30, r28
    1942:	e3 5a       	subi	r30, 0xA3	; 163
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	2b ea       	ldi	r18, 0xAB	; 171
    1950:	3a ea       	ldi	r19, 0xAA	; 170
    1952:	4a e2       	ldi	r20, 0x2A	; 42
    1954:	50 e4       	ldi	r21, 0x40	; 64
    1956:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	a2 83       	std	Z+2, r26	; 0x02
    1966:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1968:	fe 01       	movw	r30, r28
    196a:	e7 5a       	subi	r30, 0xA7	; 167
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	34 f4       	brge	.+12     	; 0x1992 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    1986:	fe 01       	movw	r30, r28
    1988:	e8 5a       	subi	r30, 0xA8	; 168
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	80 83       	st	Z, r24
    1990:	e0 c0       	rjmp	.+448    	; 0x1b52 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    1992:	fe 01       	movw	r30, r28
    1994:	e7 5a       	subi	r30, 0xA7	; 167
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	60 81       	ld	r22, Z
    199a:	71 81       	ldd	r23, Z+1	; 0x01
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	53 e4       	ldi	r21, 0x43	; 67
    19a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <HLCD_voidSendCmd+0x14e>
    19b0:	c0 c0       	rjmp	.+384    	; 0x1b32 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    19b2:	fe 01       	movw	r30, r28
    19b4:	e3 5a       	subi	r30, 0xA3	; 163
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a e7       	ldi	r20, 0x7A	; 122
    19c6:	54 e4       	ldi	r21, 0x44	; 68
    19c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	fe 01       	movw	r30, r28
    19d2:	ec 5a       	subi	r30, 0xAC	; 172
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 83       	st	Z, r24
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	a2 83       	std	Z+2, r26	; 0x02
    19dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	8e 01       	movw	r16, r28
    19e0:	00 5b       	subi	r16, 0xB0	; 176
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	ec 5a       	subi	r30, 0xAC	; 172
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e0 5b       	subi	r30, 0xB0	; 176
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	44 f4       	brge	.+16     	; 0x1a3a <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e2 5b       	subi	r30, 0xB2	; 178
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	64 c0       	rjmp	.+200    	; 0x1b02 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e0 5b       	subi	r30, 0xB0	; 176
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	0c f0       	brlt	.+2      	; 0x1a5a <HLCD_voidSendCmd+0x1f6>
    1a58:	43 c0       	rjmp	.+134    	; 0x1ae0 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ec 5a       	subi	r30, 0xAC	; 172
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8e 01       	movw	r16, r28
    1a7a:	02 5b       	subi	r16, 0xB2	; 178
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
    1a90:	1f c0       	rjmp	.+62     	; 0x1ad0 <HLCD_voidSendCmd+0x26c>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e4 5b       	subi	r30, 0xB4	; 180
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	88 ec       	ldi	r24, 0xC8	; 200
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e4 5b       	subi	r30, 0xB4	; 180
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <HLCD_voidSendCmd+0x246>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e4 5b       	subi	r30, 0xB4	; 180
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	de 01       	movw	r26, r28
    1aba:	a2 5b       	subi	r26, 0xB2	; 178
    1abc:	bf 4f       	sbci	r27, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e2 5b       	subi	r30, 0xB2	; 178
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	9c 93       	st	X, r25
    1ace:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e2 5b       	subi	r30, 0xB2	; 178
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	d1 f6       	brne	.-76     	; 0x1a92 <HLCD_voidSendCmd+0x22e>
    1ade:	4b c0       	rjmp	.+150    	; 0x1b76 <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	02 5b       	subi	r16, 0xB2	; 178
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e0 5b       	subi	r30, 0xB0	; 176
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	de 01       	movw	r26, r28
    1b04:	a6 5b       	subi	r26, 0xB6	; 182
    1b06:	bf 4f       	sbci	r27, 0xFF	; 255
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e2 5b       	subi	r30, 0xB2	; 178
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	11 96       	adiw	r26, 0x01	; 1
    1b14:	9c 93       	st	X, r25
    1b16:	8e 93       	st	-X, r24
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e6 5b       	subi	r30, 0xB6	; 182
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <HLCD_voidSendCmd+0x2be>
    1b26:	fe 01       	movw	r30, r28
    1b28:	e6 5b       	subi	r30, 0xB6	; 182
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
    1b30:	22 c0       	rjmp	.+68     	; 0x1b76 <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b32:	8e 01       	movw	r16, r28
    1b34:	08 5a       	subi	r16, 0xA8	; 168
    1b36:	1f 4f       	sbci	r17, 0xFF	; 255
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5a       	subi	r30, 0xA7	; 167
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	f8 01       	movw	r30, r16
    1b50:	80 83       	st	Z, r24
    1b52:	de 01       	movw	r26, r28
    1b54:	a7 5b       	subi	r26, 0xB7	; 183
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e8 5a       	subi	r30, 0xA8	; 168
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	8a 95       	dec	r24
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <HLCD_voidSendCmd+0x306>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e7 5b       	subi	r30, 0xB7	; 183
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    1b80:	fe 01       	movw	r30, r28
    1b82:	eb 5b       	subi	r30, 0xBB	; 187
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a8 ec       	ldi	r26, 0xC8	; 200
    1b8c:	b2 e4       	ldi	r27, 0x42	; 66
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b96:	8e 01       	movw	r16, r28
    1b98:	0f 5b       	subi	r16, 0xBF	; 191
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	eb 5b       	subi	r30, 0xBB	; 187
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	2b ea       	ldi	r18, 0xAB	; 171
    1bac:	3a ea       	ldi	r19, 0xAA	; 170
    1bae:	4a e2       	ldi	r20, 0x2A	; 42
    1bb0:	50 e4       	ldi	r21, 0x40	; 64
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ef 5b       	subi	r30, 0xBF	; 191
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	34 f4       	brge	.+12     	; 0x1bee <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	fe 01       	movw	r30, r28
    1be6:	e0 5c       	subi	r30, 0xC0	; 192
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 83       	st	Z, r24
    1bec:	9d c0       	rjmp	.+314    	; 0x1d28 <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ef 5b       	subi	r30, 0xBF	; 191
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	53 e4       	ldi	r21, 0x43	; 67
    1c04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	0c f0       	brlt	.+2      	; 0x1c0e <HLCD_voidSendCmd+0x3aa>
    1c0c:	7e c0       	rjmp	.+252    	; 0x1d0a <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    1c0e:	fe 01       	movw	r30, r28
    1c10:	eb 5b       	subi	r30, 0xBB	; 187
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a e7       	ldi	r20, 0x7A	; 122
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	8c af       	std	Y+60, r24	; 0x3c
    1c2e:	9d af       	std	Y+61, r25	; 0x3d
    1c30:	ae af       	std	Y+62, r26	; 0x3e
    1c32:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c36:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c38:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a ef       	ldi	r20, 0xFA	; 250
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	88 af       	std	Y+56, r24	; 0x38
    1c4e:	99 af       	std	Y+57, r25	; 0x39
    1c50:	aa af       	std	Y+58, r26	; 0x3a
    1c52:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c54:	68 ad       	ldd	r22, Y+56	; 0x38
    1c56:	79 ad       	ldd	r23, Y+57	; 0x39
    1c58:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e8       	ldi	r20, 0x80	; 128
    1c62:	5f e3       	ldi	r21, 0x3F	; 63
    1c64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9f ab       	std	Y+55, r25	; 0x37
    1c72:	8e ab       	std	Y+54, r24	; 0x36
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1c76:	68 ad       	ldd	r22, Y+56	; 0x38
    1c78:	79 ad       	ldd	r23, Y+57	; 0x39
    1c7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	3f ef       	ldi	r19, 0xFF	; 255
    1c82:	4f e7       	ldi	r20, 0x7F	; 127
    1c84:	57 e4       	ldi	r21, 0x47	; 71
    1c86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c90:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c92:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c94:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e2       	ldi	r20, 0x20	; 32
    1c9c:	51 e4       	ldi	r21, 0x41	; 65
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9f ab       	std	Y+55, r25	; 0x37
    1cb4:	8e ab       	std	Y+54, r24	; 0x36
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <HLCD_voidSendCmd+0x472>
    1cb8:	88 ec       	ldi	r24, 0xC8	; 200
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9d ab       	std	Y+53, r25	; 0x35
    1cbe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc0:	8c a9       	ldd	r24, Y+52	; 0x34
    1cc2:	9d a9       	ldd	r25, Y+53	; 0x35
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <HLCD_voidSendCmd+0x460>
    1cc8:	9d ab       	std	Y+53, r25	; 0x35
    1cca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	8e a9       	ldd	r24, Y+54	; 0x36
    1cce:	9f a9       	ldd	r25, Y+55	; 0x37
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9f ab       	std	Y+55, r25	; 0x37
    1cd4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	8e a9       	ldd	r24, Y+54	; 0x36
    1cd8:	9f a9       	ldd	r25, Y+55	; 0x37
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <HLCD_voidSendCmd+0x454>
    1cde:	2d c0       	rjmp	.+90     	; 0x1d3a <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	68 ad       	ldd	r22, Y+56	; 0x38
    1ce2:	79 ad       	ldd	r23, Y+57	; 0x39
    1ce4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ce6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9f ab       	std	Y+55, r25	; 0x37
    1cf2:	8e ab       	std	Y+54, r24	; 0x36
    1cf4:	8e a9       	ldd	r24, Y+54	; 0x36
    1cf6:	9f a9       	ldd	r25, Y+55	; 0x37
    1cf8:	9b ab       	std	Y+51, r25	; 0x33
    1cfa:	8a ab       	std	Y+50, r24	; 0x32
    1cfc:	8a a9       	ldd	r24, Y+50	; 0x32
    1cfe:	9b a9       	ldd	r25, Y+51	; 0x33
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <HLCD_voidSendCmd+0x49c>
    1d04:	9b ab       	std	Y+51, r25	; 0x33
    1d06:	8a ab       	std	Y+50, r24	; 0x32
    1d08:	18 c0       	rjmp	.+48     	; 0x1d3a <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ef 5b       	subi	r30, 0xBF	; 191
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	fe 01       	movw	r30, r28
    1d22:	e0 5c       	subi	r30, 0xC0	; 192
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	80 83       	st	Z, r24
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e0 5c       	subi	r30, 0xC0	; 192
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d32:	89 a9       	ldd	r24, Y+49	; 0x31
    1d34:	8a 95       	dec	r24
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <HLCD_voidSendCmd+0x4d0>
    1d38:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ef 59       	subi	r30, 0x9F	; 159
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	98 2f       	mov	r25, r24
    1d46:	9f 5f       	subi	r25, 0xFF	; 255
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	49 2f       	mov	r20, r25
    1d4e:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1d52:	fe 01       	movw	r30, r28
    1d54:	ef 59       	subi	r30, 0x9F	; 159
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	86 95       	lsr	r24
    1d5c:	81 70       	andi	r24, 0x01	; 1
    1d5e:	98 2f       	mov	r25, r24
    1d60:	9f 5f       	subi	r25, 0xFF	; 255
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	65 e0       	ldi	r22, 0x05	; 5
    1d66:	49 2f       	mov	r20, r25
    1d68:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 59       	subi	r30, 0x9F	; 159
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	86 95       	lsr	r24
    1d76:	86 95       	lsr	r24
    1d78:	81 70       	andi	r24, 0x01	; 1
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	9f 5f       	subi	r25, 0xFF	; 255
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	66 e0       	ldi	r22, 0x06	; 6
    1d82:	49 2f       	mov	r20, r25
    1d84:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ef 59       	subi	r30, 0x9F	; 159
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	86 95       	lsr	r24
    1d92:	86 95       	lsr	r24
    1d94:	86 95       	lsr	r24
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	98 2f       	mov	r25, r24
    1d9a:	9f 5f       	subi	r25, 0xFF	; 255
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	67 e0       	ldi	r22, 0x07	; 7
    1da0:	49 2f       	mov	r20, r25
    1da2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	42 e0       	ldi	r20, 0x02	; 2
    1dac:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e2       	ldi	r26, 0x20	; 32
    1db6:	b1 e4       	ldi	r27, 0x41	; 65
    1db8:	8d a7       	std	Y+45, r24	; 0x2d
    1dba:	9e a7       	std	Y+46, r25	; 0x2e
    1dbc:	af a7       	std	Y+47, r26	; 0x2f
    1dbe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dc0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dc2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc8:	2b ea       	ldi	r18, 0xAB	; 171
    1dca:	3a ea       	ldi	r19, 0xAA	; 170
    1dcc:	4a e2       	ldi	r20, 0x2A	; 42
    1dce:	50 e4       	ldi	r21, 0x40	; 64
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	89 a7       	std	Y+41, r24	; 0x29
    1dda:	9a a7       	std	Y+42, r25	; 0x2a
    1ddc:	ab a7       	std	Y+43, r26	; 0x2b
    1dde:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1de0:	69 a5       	ldd	r22, Y+41	; 0x29
    1de2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1de4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	1c f4       	brge	.+6      	; 0x1dfe <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	88 a7       	std	Y+40, r24	; 0x28
    1dfc:	91 c0       	rjmp	.+290    	; 0x1f20 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1dfe:	69 a5       	ldd	r22, Y+41	; 0x29
    1e00:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	53 e4       	ldi	r21, 0x43	; 67
    1e0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <HLCD_voidSendCmd+0x5b4>
    1e16:	7b c0       	rjmp	.+246    	; 0x1f0e <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1e18:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e1a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a e7       	ldi	r20, 0x7A	; 122
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	8c a3       	std	Y+36, r24	; 0x24
    1e32:	9d a3       	std	Y+37, r25	; 0x25
    1e34:	ae a3       	std	Y+38, r26	; 0x26
    1e36:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e38:	6c a1       	ldd	r22, Y+36	; 0x24
    1e3a:	7d a1       	ldd	r23, Y+37	; 0x25
    1e3c:	8e a1       	ldd	r24, Y+38	; 0x26
    1e3e:	9f a1       	ldd	r25, Y+39	; 0x27
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a ef       	ldi	r20, 0xFA	; 250
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	88 a3       	std	Y+32, r24	; 0x20
    1e52:	99 a3       	std	Y+33, r25	; 0x21
    1e54:	aa a3       	std	Y+34, r26	; 0x22
    1e56:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e58:	68 a1       	ldd	r22, Y+32	; 0x20
    1e5a:	79 a1       	ldd	r23, Y+33	; 0x21
    1e5c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e5e:	9b a1       	ldd	r25, Y+35	; 0x23
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	2c f4       	brge	.+10     	; 0x1e7a <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9f 8f       	std	Y+31, r25	; 0x1f
    1e76:	8e 8f       	std	Y+30, r24	; 0x1e
    1e78:	3f c0       	rjmp	.+126    	; 0x1ef8 <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1e7a:	68 a1       	ldd	r22, Y+32	; 0x20
    1e7c:	79 a1       	ldd	r23, Y+33	; 0x21
    1e7e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e80:	9b a1       	ldd	r25, Y+35	; 0x23
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	3f ef       	ldi	r19, 0xFF	; 255
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	57 e4       	ldi	r21, 0x47	; 71
    1e8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	4c f5       	brge	.+82     	; 0x1ee4 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	6c a1       	ldd	r22, Y+36	; 0x24
    1e94:	7d a1       	ldd	r23, Y+37	; 0x25
    1e96:	8e a1       	ldd	r24, Y+38	; 0x26
    1e98:	9f a1       	ldd	r25, Y+39	; 0x27
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	bc 01       	movw	r22, r24
    1eac:	cd 01       	movw	r24, r26
    1eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	9f 8f       	std	Y+31, r25	; 0x1f
    1eb8:	8e 8f       	std	Y+30, r24	; 0x1e
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <HLCD_voidSendCmd+0x676>
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9d 8f       	std	Y+29, r25	; 0x1d
    1ec2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ec4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ec6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <HLCD_voidSendCmd+0x664>
    1ecc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ece:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ed2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eda:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1edc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	69 f7       	brne	.-38     	; 0x1ebc <HLCD_voidSendCmd+0x658>
    1ee2:	24 c0       	rjmp	.+72     	; 0x1f2c <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ee6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ee8:	8a a1       	ldd	r24, Y+34	; 0x22
    1eea:	9b a1       	ldd	r25, Y+35	; 0x23
    1eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ef6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1efa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1efc:	9b 8f       	std	Y+27, r25	; 0x1b
    1efe:	8a 8f       	std	Y+26, r24	; 0x1a
    1f00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <HLCD_voidSendCmd+0x6a0>
    1f08:	9b 8f       	std	Y+27, r25	; 0x1b
    1f0a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f0e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f10:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	88 a7       	std	Y+40, r24	; 0x28
    1f20:	88 a5       	ldd	r24, Y+40	; 0x28
    1f22:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f24:	89 8d       	ldd	r24, Y+25	; 0x19
    1f26:	8a 95       	dec	r24
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <HLCD_voidSendCmd+0x6c2>
    1f2a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	62 e0       	ldi	r22, 0x02	; 2
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	a8 ec       	ldi	r26, 0xC8	; 200
    1f3c:	b2 e4       	ldi	r27, 0x42	; 66
    1f3e:	8d 8b       	std	Y+21, r24	; 0x15
    1f40:	9e 8b       	std	Y+22, r25	; 0x16
    1f42:	af 8b       	std	Y+23, r26	; 0x17
    1f44:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f46:	6d 89       	ldd	r22, Y+21	; 0x15
    1f48:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4e:	2b ea       	ldi	r18, 0xAB	; 171
    1f50:	3a ea       	ldi	r19, 0xAA	; 170
    1f52:	4a e2       	ldi	r20, 0x2A	; 42
    1f54:	50 e4       	ldi	r21, 0x40	; 64
    1f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	89 8b       	std	Y+17, r24	; 0x11
    1f60:	9a 8b       	std	Y+18, r25	; 0x12
    1f62:	ab 8b       	std	Y+19, r26	; 0x13
    1f64:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f66:	69 89       	ldd	r22, Y+17	; 0x11
    1f68:	7a 89       	ldd	r23, Y+18	; 0x12
    1f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	1c f4       	brge	.+6      	; 0x1f84 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	88 8b       	std	Y+16, r24	; 0x10
    1f82:	91 c0       	rjmp	.+290    	; 0x20a6 <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    1f84:	69 89       	ldd	r22, Y+17	; 0x11
    1f86:	7a 89       	ldd	r23, Y+18	; 0x12
    1f88:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	53 e4       	ldi	r21, 0x43	; 67
    1f94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	0c f0       	brlt	.+2      	; 0x1f9e <HLCD_voidSendCmd+0x73a>
    1f9c:	7b c0       	rjmp	.+246    	; 0x2094 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    1f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a e7       	ldi	r20, 0x7A	; 122
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8c 87       	std	Y+12, r24	; 0x0c
    1fb8:	9d 87       	std	Y+13, r25	; 0x0d
    1fba:	ae 87       	std	Y+14, r26	; 0x0e
    1fbc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	88 87       	std	Y+8, r24	; 0x08
    1fd8:	99 87       	std	Y+9, r25	; 0x09
    1fda:	aa 87       	std	Y+10, r26	; 0x0a
    1fdc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fde:	68 85       	ldd	r22, Y+8	; 0x08
    1fe0:	79 85       	ldd	r23, Y+9	; 0x09
    1fe2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9f 83       	std	Y+7, r25	; 0x07
    1ffc:	8e 83       	std	Y+6, r24	; 0x06
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    2000:	68 85       	ldd	r22, Y+8	; 0x08
    2002:	79 85       	ldd	r23, Y+9	; 0x09
    2004:	8a 85       	ldd	r24, Y+10	; 0x0a
    2006:	9b 85       	ldd	r25, Y+11	; 0x0b
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6c 85       	ldd	r22, Y+12	; 0x0c
    201a:	7d 85       	ldd	r23, Y+13	; 0x0d
    201c:	8e 85       	ldd	r24, Y+14	; 0x0e
    201e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9f 83       	std	Y+7, r25	; 0x07
    203e:	8e 83       	std	Y+6, r24	; 0x06
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <HLCD_voidSendCmd+0x7fc>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9d 83       	std	Y+5, r25	; 0x05
    2048:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <HLCD_voidSendCmd+0x7ea>
    2052:	9d 83       	std	Y+5, r25	; 0x05
    2054:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8e 81       	ldd	r24, Y+6	; 0x06
    2058:	9f 81       	ldd	r25, Y+7	; 0x07
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9f 83       	std	Y+7, r25	; 0x07
    205e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8e 81       	ldd	r24, Y+6	; 0x06
    2062:	9f 81       	ldd	r25, Y+7	; 0x07
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <HLCD_voidSendCmd+0x7de>
    2068:	24 c0       	rjmp	.+72     	; 0x20b2 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	68 85       	ldd	r22, Y+8	; 0x08
    206c:	79 85       	ldd	r23, Y+9	; 0x09
    206e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2070:	9b 85       	ldd	r25, Y+11	; 0x0b
    2072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9f 83       	std	Y+7, r25	; 0x07
    207c:	8e 83       	std	Y+6, r24	; 0x06
    207e:	8e 81       	ldd	r24, Y+6	; 0x06
    2080:	9f 81       	ldd	r25, Y+7	; 0x07
    2082:	9b 83       	std	Y+3, r25	; 0x03
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <HLCD_voidSendCmd+0x826>
    208e:	9b 83       	std	Y+3, r25	; 0x03
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	0f c0       	rjmp	.+30     	; 0x20b2 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2094:	69 89       	ldd	r22, Y+17	; 0x11
    2096:	7a 89       	ldd	r23, Y+18	; 0x12
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	88 8b       	std	Y+16, r24	; 0x10
    20a6:	88 89       	ldd	r24, Y+16	; 0x10
    20a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	8a 95       	dec	r24
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <HLCD_voidSendCmd+0x848>
    20b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    20b2:	cf 59       	subi	r28, 0x9F	; 159
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	c1 56       	subi	r28, 0x61	; 97
    20d8:	d0 40       	sbci	r29, 0x00	; 0
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	fe 01       	movw	r30, r28
    20e6:	ef 59       	subi	r30, 0x9F	; 159
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	42 e0       	ldi	r20, 0x02	; 2
    20f2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    210a:	fe 01       	movw	r30, r28
    210c:	ef 59       	subi	r30, 0x9F	; 159
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	82 95       	swap	r24
    2114:	8f 70       	andi	r24, 0x0F	; 15
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	98 2f       	mov	r25, r24
    211a:	9f 5f       	subi	r25, 0xFF	; 255
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	64 e0       	ldi	r22, 0x04	; 4
    2120:	49 2f       	mov	r20, r25
    2122:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    2126:	fe 01       	movw	r30, r28
    2128:	ef 59       	subi	r30, 0x9F	; 159
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	82 95       	swap	r24
    2130:	86 95       	lsr	r24
    2132:	87 70       	andi	r24, 0x07	; 7
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	98 2f       	mov	r25, r24
    2138:	9f 5f       	subi	r25, 0xFF	; 255
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	65 e0       	ldi	r22, 0x05	; 5
    213e:	49 2f       	mov	r20, r25
    2140:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    2144:	fe 01       	movw	r30, r28
    2146:	ef 59       	subi	r30, 0x9F	; 159
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	82 95       	swap	r24
    214e:	86 95       	lsr	r24
    2150:	86 95       	lsr	r24
    2152:	83 70       	andi	r24, 0x03	; 3
    2154:	81 70       	andi	r24, 0x01	; 1
    2156:	98 2f       	mov	r25, r24
    2158:	9f 5f       	subi	r25, 0xFF	; 255
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	66 e0       	ldi	r22, 0x06	; 6
    215e:	49 2f       	mov	r20, r25
    2160:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    2164:	fe 01       	movw	r30, r28
    2166:	ef 59       	subi	r30, 0x9F	; 159
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	88 1f       	adc	r24, r24
    216e:	88 27       	eor	r24, r24
    2170:	88 1f       	adc	r24, r24
    2172:	98 2f       	mov	r25, r24
    2174:	9f 5f       	subi	r25, 0xFF	; 255
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	49 2f       	mov	r20, r25
    217c:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	62 e0       	ldi	r22, 0x02	; 2
    2184:	42 e0       	ldi	r20, 0x02	; 2
    2186:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    218a:	fe 01       	movw	r30, r28
    218c:	e3 5a       	subi	r30, 0xA3	; 163
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a0 e2       	ldi	r26, 0x20	; 32
    2196:	b1 e4       	ldi	r27, 0x41	; 65
    2198:	80 83       	st	Z, r24
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	a2 83       	std	Z+2, r26	; 0x02
    219e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21a0:	8e 01       	movw	r16, r28
    21a2:	07 5a       	subi	r16, 0xA7	; 167
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	fe 01       	movw	r30, r28
    21a8:	e3 5a       	subi	r30, 0xA3	; 163
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	2b ea       	ldi	r18, 0xAB	; 171
    21b6:	3a ea       	ldi	r19, 0xAA	; 170
    21b8:	4a e2       	ldi	r20, 0x2A	; 42
    21ba:	50 e4       	ldi	r21, 0x40	; 64
    21bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	f8 01       	movw	r30, r16
    21c6:	80 83       	st	Z, r24
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	a2 83       	std	Z+2, r26	; 0x02
    21cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ce:	fe 01       	movw	r30, r28
    21d0:	e7 5a       	subi	r30, 0xA7	; 167
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e8:	88 23       	and	r24, r24
    21ea:	34 f4       	brge	.+12     	; 0x21f8 <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    21ec:	fe 01       	movw	r30, r28
    21ee:	e8 5a       	subi	r30, 0xA8	; 168
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 83       	st	Z, r24
    21f6:	e0 c0       	rjmp	.+448    	; 0x23b8 <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    21f8:	fe 01       	movw	r30, r28
    21fa:	e7 5a       	subi	r30, 0xA7	; 167
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	53 e4       	ldi	r21, 0x43	; 67
    220e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	0c f0       	brlt	.+2      	; 0x2218 <HLCD_voidSendChar+0x14e>
    2216:	c0 c0       	rjmp	.+384    	; 0x2398 <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    2218:	fe 01       	movw	r30, r28
    221a:	e3 5a       	subi	r30, 0xA3	; 163
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a e7       	ldi	r20, 0x7A	; 122
    222c:	54 e4       	ldi	r21, 0x44	; 68
    222e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	fe 01       	movw	r30, r28
    2238:	ec 5a       	subi	r30, 0xAC	; 172
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 83       	st	Z, r24
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	a2 83       	std	Z+2, r26	; 0x02
    2242:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	8e 01       	movw	r16, r28
    2246:	00 5b       	subi	r16, 0xB0	; 176
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	fe 01       	movw	r30, r28
    224c:	ec 5a       	subi	r30, 0xAC	; 172
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	4a ef       	ldi	r20, 0xFA	; 250
    225e:	54 e4       	ldi	r21, 0x44	; 68
    2260:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	f8 01       	movw	r30, r16
    226a:	80 83       	st	Z, r24
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	a2 83       	std	Z+2, r26	; 0x02
    2270:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2272:	fe 01       	movw	r30, r28
    2274:	e0 5b       	subi	r30, 0xB0	; 176
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	60 81       	ld	r22, Z
    227a:	71 81       	ldd	r23, Z+1	; 0x01
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e8       	ldi	r20, 0x80	; 128
    2286:	5f e3       	ldi	r21, 0x3F	; 63
    2288:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    228c:	88 23       	and	r24, r24
    228e:	44 f4       	brge	.+16     	; 0x22a0 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    2290:	fe 01       	movw	r30, r28
    2292:	e2 5b       	subi	r30, 0xB2	; 178
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	64 c0       	rjmp	.+200    	; 0x2368 <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    22a0:	fe 01       	movw	r30, r28
    22a2:	e0 5b       	subi	r30, 0xB0	; 176
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	0c f0       	brlt	.+2      	; 0x22c0 <HLCD_voidSendChar+0x1f6>
    22be:	43 c0       	rjmp	.+134    	; 0x2346 <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	fe 01       	movw	r30, r28
    22c2:	ec 5a       	subi	r30, 0xAC	; 172
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8e 01       	movw	r16, r28
    22e0:	02 5b       	subi	r16, 0xB2	; 178
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	f8 01       	movw	r30, r16
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	1f c0       	rjmp	.+62     	; 0x2336 <HLCD_voidSendChar+0x26c>
    22f8:	fe 01       	movw	r30, r28
    22fa:	e4 5b       	subi	r30, 0xB4	; 180
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	88 ec       	ldi	r24, 0xC8	; 200
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2306:	fe 01       	movw	r30, r28
    2308:	e4 5b       	subi	r30, 0xB4	; 180
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <HLCD_voidSendChar+0x246>
    2314:	fe 01       	movw	r30, r28
    2316:	e4 5b       	subi	r30, 0xB4	; 180
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231e:	de 01       	movw	r26, r28
    2320:	a2 5b       	subi	r26, 0xB2	; 178
    2322:	bf 4f       	sbci	r27, 0xFF	; 255
    2324:	fe 01       	movw	r30, r28
    2326:	e2 5b       	subi	r30, 0xB2	; 178
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	9c 93       	st	X, r25
    2334:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2336:	fe 01       	movw	r30, r28
    2338:	e2 5b       	subi	r30, 0xB2	; 178
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	d1 f6       	brne	.-76     	; 0x22f8 <HLCD_voidSendChar+0x22e>
    2344:	4b c0       	rjmp	.+150    	; 0x23dc <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	8e 01       	movw	r16, r28
    2348:	02 5b       	subi	r16, 0xB2	; 178
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	fe 01       	movw	r30, r28
    234e:	e0 5b       	subi	r30, 0xB0	; 176
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	f8 01       	movw	r30, r16
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	de 01       	movw	r26, r28
    236a:	a6 5b       	subi	r26, 0xB6	; 182
    236c:	bf 4f       	sbci	r27, 0xFF	; 255
    236e:	fe 01       	movw	r30, r28
    2370:	e2 5b       	subi	r30, 0xB2	; 178
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
    237e:	fe 01       	movw	r30, r28
    2380:	e6 5b       	subi	r30, 0xB6	; 182
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <HLCD_voidSendChar+0x2be>
    238c:	fe 01       	movw	r30, r28
    238e:	e6 5b       	subi	r30, 0xB6	; 182
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    2396:	22 c0       	rjmp	.+68     	; 0x23dc <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2398:	8e 01       	movw	r16, r28
    239a:	08 5a       	subi	r16, 0xA8	; 168
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5a       	subi	r30, 0xA7	; 167
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	f8 01       	movw	r30, r16
    23b6:	80 83       	st	Z, r24
    23b8:	de 01       	movw	r26, r28
    23ba:	a7 5b       	subi	r26, 0xB7	; 183
    23bc:	bf 4f       	sbci	r27, 0xFF	; 255
    23be:	fe 01       	movw	r30, r28
    23c0:	e8 5a       	subi	r30, 0xA8	; 168
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23c8:	fe 01       	movw	r30, r28
    23ca:	e7 5b       	subi	r30, 0xB7	; 183
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 81       	ld	r24, Z
    23d0:	8a 95       	dec	r24
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <HLCD_voidSendChar+0x306>
    23d4:	fe 01       	movw	r30, r28
    23d6:	e7 5b       	subi	r30, 0xB7	; 183
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    23e6:	fe 01       	movw	r30, r28
    23e8:	eb 5b       	subi	r30, 0xBB	; 187
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a8 ec       	ldi	r26, 0xC8	; 200
    23f2:	b2 e4       	ldi	r27, 0x42	; 66
    23f4:	80 83       	st	Z, r24
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	a2 83       	std	Z+2, r26	; 0x02
    23fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23fc:	8e 01       	movw	r16, r28
    23fe:	0f 5b       	subi	r16, 0xBF	; 191
    2400:	1f 4f       	sbci	r17, 0xFF	; 255
    2402:	fe 01       	movw	r30, r28
    2404:	eb 5b       	subi	r30, 0xBB	; 187
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	2b ea       	ldi	r18, 0xAB	; 171
    2412:	3a ea       	ldi	r19, 0xAA	; 170
    2414:	4a e2       	ldi	r20, 0x2A	; 42
    2416:	50 e4       	ldi	r21, 0x40	; 64
    2418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	80 83       	st	Z, r24
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	a2 83       	std	Z+2, r26	; 0x02
    2428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242a:	fe 01       	movw	r30, r28
    242c:	ef 5b       	subi	r30, 0xBF	; 191
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	34 f4       	brge	.+12     	; 0x2454 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	fe 01       	movw	r30, r28
    244c:	e0 5c       	subi	r30, 0xC0	; 192
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	80 83       	st	Z, r24
    2452:	9d c0       	rjmp	.+314    	; 0x258e <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    2454:	fe 01       	movw	r30, r28
    2456:	ef 5b       	subi	r30, 0xBF	; 191
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	53 e4       	ldi	r21, 0x43	; 67
    246a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	0c f0       	brlt	.+2      	; 0x2474 <HLCD_voidSendChar+0x3aa>
    2472:	7e c0       	rjmp	.+252    	; 0x2570 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    2474:	fe 01       	movw	r30, r28
    2476:	eb 5b       	subi	r30, 0xBB	; 187
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	4a e7       	ldi	r20, 0x7A	; 122
    2488:	54 e4       	ldi	r21, 0x44	; 68
    248a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	8c af       	std	Y+60, r24	; 0x3c
    2494:	9d af       	std	Y+61, r25	; 0x3d
    2496:	ae af       	std	Y+62, r26	; 0x3e
    2498:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	6c ad       	ldd	r22, Y+60	; 0x3c
    249c:	7d ad       	ldd	r23, Y+61	; 0x3d
    249e:	8e ad       	ldd	r24, Y+62	; 0x3e
    24a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a ef       	ldi	r20, 0xFA	; 250
    24a8:	54 e4       	ldi	r21, 0x44	; 68
    24aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	88 af       	std	Y+56, r24	; 0x38
    24b4:	99 af       	std	Y+57, r25	; 0x39
    24b6:	aa af       	std	Y+58, r26	; 0x3a
    24b8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    24ba:	68 ad       	ldd	r22, Y+56	; 0x38
    24bc:	79 ad       	ldd	r23, Y+57	; 0x39
    24be:	8a ad       	ldd	r24, Y+58	; 0x3a
    24c0:	9b ad       	ldd	r25, Y+59	; 0x3b
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	2c f4       	brge	.+10     	; 0x24dc <HLCD_voidSendChar+0x412>
		__ticks = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9f ab       	std	Y+55, r25	; 0x37
    24d8:	8e ab       	std	Y+54, r24	; 0x36
    24da:	3f c0       	rjmp	.+126    	; 0x255a <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    24dc:	68 ad       	ldd	r22, Y+56	; 0x38
    24de:	79 ad       	ldd	r23, Y+57	; 0x39
    24e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    24e2:	9b ad       	ldd	r25, Y+59	; 0x3b
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	57 e4       	ldi	r21, 0x47	; 71
    24ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24f0:	18 16       	cp	r1, r24
    24f2:	4c f5       	brge	.+82     	; 0x2546 <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    24f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    24f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9f ab       	std	Y+55, r25	; 0x37
    251a:	8e ab       	std	Y+54, r24	; 0x36
    251c:	0f c0       	rjmp	.+30     	; 0x253c <HLCD_voidSendChar+0x472>
    251e:	88 ec       	ldi	r24, 0xC8	; 200
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9d ab       	std	Y+53, r25	; 0x35
    2524:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2526:	8c a9       	ldd	r24, Y+52	; 0x34
    2528:	9d a9       	ldd	r25, Y+53	; 0x35
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <HLCD_voidSendChar+0x460>
    252e:	9d ab       	std	Y+53, r25	; 0x35
    2530:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2532:	8e a9       	ldd	r24, Y+54	; 0x36
    2534:	9f a9       	ldd	r25, Y+55	; 0x37
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	9f ab       	std	Y+55, r25	; 0x37
    253a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	8e a9       	ldd	r24, Y+54	; 0x36
    253e:	9f a9       	ldd	r25, Y+55	; 0x37
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	69 f7       	brne	.-38     	; 0x251e <HLCD_voidSendChar+0x454>
    2544:	2d c0       	rjmp	.+90     	; 0x25a0 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2546:	68 ad       	ldd	r22, Y+56	; 0x38
    2548:	79 ad       	ldd	r23, Y+57	; 0x39
    254a:	8a ad       	ldd	r24, Y+58	; 0x3a
    254c:	9b ad       	ldd	r25, Y+59	; 0x3b
    254e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9f ab       	std	Y+55, r25	; 0x37
    2558:	8e ab       	std	Y+54, r24	; 0x36
    255a:	8e a9       	ldd	r24, Y+54	; 0x36
    255c:	9f a9       	ldd	r25, Y+55	; 0x37
    255e:	9b ab       	std	Y+51, r25	; 0x33
    2560:	8a ab       	std	Y+50, r24	; 0x32
    2562:	8a a9       	ldd	r24, Y+50	; 0x32
    2564:	9b a9       	ldd	r25, Y+51	; 0x33
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <HLCD_voidSendChar+0x49c>
    256a:	9b ab       	std	Y+51, r25	; 0x33
    256c:	8a ab       	std	Y+50, r24	; 0x32
    256e:	18 c0       	rjmp	.+48     	; 0x25a0 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2570:	fe 01       	movw	r30, r28
    2572:	ef 5b       	subi	r30, 0xBF	; 191
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	fe 01       	movw	r30, r28
    2588:	e0 5c       	subi	r30, 0xC0	; 192
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 83       	st	Z, r24
    258e:	fe 01       	movw	r30, r28
    2590:	e0 5c       	subi	r30, 0xC0	; 192
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2598:	89 a9       	ldd	r24, Y+49	; 0x31
    259a:	8a 95       	dec	r24
    259c:	f1 f7       	brne	.-4      	; 0x259a <HLCD_voidSendChar+0x4d0>
    259e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    25a0:	fe 01       	movw	r30, r28
    25a2:	ef 59       	subi	r30, 0x9F	; 159
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	81 70       	andi	r24, 0x01	; 1
    25aa:	98 2f       	mov	r25, r24
    25ac:	9f 5f       	subi	r25, 0xFF	; 255
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	49 2f       	mov	r20, r25
    25b4:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    25b8:	fe 01       	movw	r30, r28
    25ba:	ef 59       	subi	r30, 0x9F	; 159
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	86 95       	lsr	r24
    25c2:	81 70       	andi	r24, 0x01	; 1
    25c4:	98 2f       	mov	r25, r24
    25c6:	9f 5f       	subi	r25, 0xFF	; 255
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	65 e0       	ldi	r22, 0x05	; 5
    25cc:	49 2f       	mov	r20, r25
    25ce:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    25d2:	fe 01       	movw	r30, r28
    25d4:	ef 59       	subi	r30, 0x9F	; 159
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	86 95       	lsr	r24
    25dc:	86 95       	lsr	r24
    25de:	81 70       	andi	r24, 0x01	; 1
    25e0:	98 2f       	mov	r25, r24
    25e2:	9f 5f       	subi	r25, 0xFF	; 255
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	66 e0       	ldi	r22, 0x06	; 6
    25e8:	49 2f       	mov	r20, r25
    25ea:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    25ee:	fe 01       	movw	r30, r28
    25f0:	ef 59       	subi	r30, 0x9F	; 159
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	86 95       	lsr	r24
    25f8:	86 95       	lsr	r24
    25fa:	86 95       	lsr	r24
    25fc:	81 70       	andi	r24, 0x01	; 1
    25fe:	98 2f       	mov	r25, r24
    2600:	9f 5f       	subi	r25, 0xFF	; 255
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	67 e0       	ldi	r22, 0x07	; 7
    2606:	49 2f       	mov	r20, r25
    2608:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	62 e0       	ldi	r22, 0x02	; 2
    2610:	42 e0       	ldi	r20, 0x02	; 2
    2612:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a0 e2       	ldi	r26, 0x20	; 32
    261c:	b1 e4       	ldi	r27, 0x41	; 65
    261e:	8d a7       	std	Y+45, r24	; 0x2d
    2620:	9e a7       	std	Y+46, r25	; 0x2e
    2622:	af a7       	std	Y+47, r26	; 0x2f
    2624:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2626:	6d a5       	ldd	r22, Y+45	; 0x2d
    2628:	7e a5       	ldd	r23, Y+46	; 0x2e
    262a:	8f a5       	ldd	r24, Y+47	; 0x2f
    262c:	98 a9       	ldd	r25, Y+48	; 0x30
    262e:	2b ea       	ldi	r18, 0xAB	; 171
    2630:	3a ea       	ldi	r19, 0xAA	; 170
    2632:	4a e2       	ldi	r20, 0x2A	; 42
    2634:	50 e4       	ldi	r21, 0x40	; 64
    2636:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	89 a7       	std	Y+41, r24	; 0x29
    2640:	9a a7       	std	Y+42, r25	; 0x2a
    2642:	ab a7       	std	Y+43, r26	; 0x2b
    2644:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2646:	69 a5       	ldd	r22, Y+41	; 0x29
    2648:	7a a5       	ldd	r23, Y+42	; 0x2a
    264a:	8b a5       	ldd	r24, Y+43	; 0x2b
    264c:	9c a5       	ldd	r25, Y+44	; 0x2c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	1c f4       	brge	.+6      	; 0x2664 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	88 a7       	std	Y+40, r24	; 0x28
    2662:	91 c0       	rjmp	.+290    	; 0x2786 <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    2664:	69 a5       	ldd	r22, Y+41	; 0x29
    2666:	7a a5       	ldd	r23, Y+42	; 0x2a
    2668:	8b a5       	ldd	r24, Y+43	; 0x2b
    266a:	9c a5       	ldd	r25, Y+44	; 0x2c
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	53 e4       	ldi	r21, 0x43	; 67
    2674:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	0c f0       	brlt	.+2      	; 0x267e <HLCD_voidSendChar+0x5b4>
    267c:	7b c0       	rjmp	.+246    	; 0x2774 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    267e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2680:	7e a5       	ldd	r23, Y+46	; 0x2e
    2682:	8f a5       	ldd	r24, Y+47	; 0x2f
    2684:	98 a9       	ldd	r25, Y+48	; 0x30
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8c a3       	std	Y+36, r24	; 0x24
    2698:	9d a3       	std	Y+37, r25	; 0x25
    269a:	ae a3       	std	Y+38, r26	; 0x26
    269c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	6c a1       	ldd	r22, Y+36	; 0x24
    26a0:	7d a1       	ldd	r23, Y+37	; 0x25
    26a2:	8e a1       	ldd	r24, Y+38	; 0x26
    26a4:	9f a1       	ldd	r25, Y+39	; 0x27
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a ef       	ldi	r20, 0xFA	; 250
    26ac:	54 e4       	ldi	r21, 0x44	; 68
    26ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	88 a3       	std	Y+32, r24	; 0x20
    26b8:	99 a3       	std	Y+33, r25	; 0x21
    26ba:	aa a3       	std	Y+34, r26	; 0x22
    26bc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    26be:	68 a1       	ldd	r22, Y+32	; 0x20
    26c0:	79 a1       	ldd	r23, Y+33	; 0x21
    26c2:	8a a1       	ldd	r24, Y+34	; 0x22
    26c4:	9b a1       	ldd	r25, Y+35	; 0x23
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9f 8f       	std	Y+31, r25	; 0x1f
    26dc:	8e 8f       	std	Y+30, r24	; 0x1e
    26de:	3f c0       	rjmp	.+126    	; 0x275e <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    26e0:	68 a1       	ldd	r22, Y+32	; 0x20
    26e2:	79 a1       	ldd	r23, Y+33	; 0x21
    26e4:	8a a1       	ldd	r24, Y+34	; 0x22
    26e6:	9b a1       	ldd	r25, Y+35	; 0x23
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	6c a1       	ldd	r22, Y+36	; 0x24
    26fa:	7d a1       	ldd	r23, Y+37	; 0x25
    26fc:	8e a1       	ldd	r24, Y+38	; 0x26
    26fe:	9f a1       	ldd	r25, Y+39	; 0x27
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9f 8f       	std	Y+31, r25	; 0x1f
    271e:	8e 8f       	std	Y+30, r24	; 0x1e
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <HLCD_voidSendChar+0x676>
    2722:	88 ec       	ldi	r24, 0xC8	; 200
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9d 8f       	std	Y+29, r25	; 0x1d
    2728:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    272a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    272c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <HLCD_voidSendChar+0x664>
    2732:	9d 8f       	std	Y+29, r25	; 0x1d
    2734:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2738:	9f 8d       	ldd	r25, Y+31	; 0x1f
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9f 8f       	std	Y+31, r25	; 0x1f
    273e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2742:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <HLCD_voidSendChar+0x658>
    2748:	24 c0       	rjmp	.+72     	; 0x2792 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	68 a1       	ldd	r22, Y+32	; 0x20
    274c:	79 a1       	ldd	r23, Y+33	; 0x21
    274e:	8a a1       	ldd	r24, Y+34	; 0x22
    2750:	9b a1       	ldd	r25, Y+35	; 0x23
    2752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9f 8f       	std	Y+31, r25	; 0x1f
    275c:	8e 8f       	std	Y+30, r24	; 0x1e
    275e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2760:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2762:	9b 8f       	std	Y+27, r25	; 0x1b
    2764:	8a 8f       	std	Y+26, r24	; 0x1a
    2766:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2768:	9b 8d       	ldd	r25, Y+27	; 0x1b
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <HLCD_voidSendChar+0x6a0>
    276e:	9b 8f       	std	Y+27, r25	; 0x1b
    2770:	8a 8f       	std	Y+26, r24	; 0x1a
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2774:	69 a5       	ldd	r22, Y+41	; 0x29
    2776:	7a a5       	ldd	r23, Y+42	; 0x2a
    2778:	8b a5       	ldd	r24, Y+43	; 0x2b
    277a:	9c a5       	ldd	r25, Y+44	; 0x2c
    277c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	88 a7       	std	Y+40, r24	; 0x28
    2786:	88 a5       	ldd	r24, Y+40	; 0x28
    2788:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    278a:	89 8d       	ldd	r24, Y+25	; 0x19
    278c:	8a 95       	dec	r24
    278e:	f1 f7       	brne	.-4      	; 0x278c <HLCD_voidSendChar+0x6c2>
    2790:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	62 e0       	ldi	r22, 0x02	; 2
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	0e 94 ee 19 	call	0x33dc	; 0x33dc <MDIO_stderrSetPinValue>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a8 ec       	ldi	r26, 0xC8	; 200
    27a2:	b2 e4       	ldi	r27, 0x42	; 66
    27a4:	8d 8b       	std	Y+21, r24	; 0x15
    27a6:	9e 8b       	std	Y+22, r25	; 0x16
    27a8:	af 8b       	std	Y+23, r26	; 0x17
    27aa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27ac:	6d 89       	ldd	r22, Y+21	; 0x15
    27ae:	7e 89       	ldd	r23, Y+22	; 0x16
    27b0:	8f 89       	ldd	r24, Y+23	; 0x17
    27b2:	98 8d       	ldd	r25, Y+24	; 0x18
    27b4:	2b ea       	ldi	r18, 0xAB	; 171
    27b6:	3a ea       	ldi	r19, 0xAA	; 170
    27b8:	4a e2       	ldi	r20, 0x2A	; 42
    27ba:	50 e4       	ldi	r21, 0x40	; 64
    27bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	89 8b       	std	Y+17, r24	; 0x11
    27c6:	9a 8b       	std	Y+18, r25	; 0x12
    27c8:	ab 8b       	std	Y+19, r26	; 0x13
    27ca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27cc:	69 89       	ldd	r22, Y+17	; 0x11
    27ce:	7a 89       	ldd	r23, Y+18	; 0x12
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	1c f4       	brge	.+6      	; 0x27ea <HLCD_voidSendChar+0x720>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	88 8b       	std	Y+16, r24	; 0x10
    27e8:	91 c0       	rjmp	.+290    	; 0x290c <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    27ea:	69 89       	ldd	r22, Y+17	; 0x11
    27ec:	7a 89       	ldd	r23, Y+18	; 0x12
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	53 e4       	ldi	r21, 0x43	; 67
    27fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	0c f0       	brlt	.+2      	; 0x2804 <HLCD_voidSendChar+0x73a>
    2802:	7b c0       	rjmp	.+246    	; 0x28fa <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    2804:	6d 89       	ldd	r22, Y+21	; 0x15
    2806:	7e 89       	ldd	r23, Y+22	; 0x16
    2808:	8f 89       	ldd	r24, Y+23	; 0x17
    280a:	98 8d       	ldd	r25, Y+24	; 0x18
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	4a e7       	ldi	r20, 0x7A	; 122
    2812:	54 e4       	ldi	r21, 0x44	; 68
    2814:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8c 87       	std	Y+12, r24	; 0x0c
    281e:	9d 87       	std	Y+13, r25	; 0x0d
    2820:	ae 87       	std	Y+14, r26	; 0x0e
    2822:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6c 85       	ldd	r22, Y+12	; 0x0c
    2826:	7d 85       	ldd	r23, Y+13	; 0x0d
    2828:	8e 85       	ldd	r24, Y+14	; 0x0e
    282a:	9f 85       	ldd	r25, Y+15	; 0x0f
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	88 87       	std	Y+8, r24	; 0x08
    283e:	99 87       	std	Y+9, r25	; 0x09
    2840:	aa 87       	std	Y+10, r26	; 0x0a
    2842:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2844:	68 85       	ldd	r22, Y+8	; 0x08
    2846:	79 85       	ldd	r23, Y+9	; 0x09
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9f 83       	std	Y+7, r25	; 0x07
    2862:	8e 83       	std	Y+6, r24	; 0x06
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    2866:	68 85       	ldd	r22, Y+8	; 0x08
    2868:	79 85       	ldd	r23, Y+9	; 0x09
    286a:	8a 85       	ldd	r24, Y+10	; 0x0a
    286c:	9b 85       	ldd	r25, Y+11	; 0x0b
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2880:	7d 85       	ldd	r23, Y+13	; 0x0d
    2882:	8e 85       	ldd	r24, Y+14	; 0x0e
    2884:	9f 85       	ldd	r25, Y+15	; 0x0f
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9f 83       	std	Y+7, r25	; 0x07
    28a4:	8e 83       	std	Y+6, r24	; 0x06
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <HLCD_voidSendChar+0x7fc>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9d 83       	std	Y+5, r25	; 0x05
    28ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <HLCD_voidSendChar+0x7ea>
    28b8:	9d 83       	std	Y+5, r25	; 0x05
    28ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	9f 81       	ldd	r25, Y+7	; 0x07
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <HLCD_voidSendChar+0x7de>
    28ce:	24 c0       	rjmp	.+72     	; 0x2918 <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	68 85       	ldd	r22, Y+8	; 0x08
    28d2:	79 85       	ldd	r23, Y+9	; 0x09
    28d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9f 83       	std	Y+7, r25	; 0x07
    28e2:	8e 83       	std	Y+6, r24	; 0x06
    28e4:	8e 81       	ldd	r24, Y+6	; 0x06
    28e6:	9f 81       	ldd	r25, Y+7	; 0x07
    28e8:	9b 83       	std	Y+3, r25	; 0x03
    28ea:	8a 83       	std	Y+2, r24	; 0x02
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <HLCD_voidSendChar+0x826>
    28f4:	9b 83       	std	Y+3, r25	; 0x03
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28fa:	69 89       	ldd	r22, Y+17	; 0x11
    28fc:	7a 89       	ldd	r23, Y+18	; 0x12
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	9c 89       	ldd	r25, Y+20	; 0x14
    2902:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	88 8b       	std	Y+16, r24	; 0x10
    290c:	88 89       	ldd	r24, Y+16	; 0x10
    290e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	8a 95       	dec	r24
    2914:	f1 f7       	brne	.-4      	; 0x2912 <HLCD_voidSendChar+0x848>
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    2918:	cf 59       	subi	r28, 0x9F	; 159
    291a:	df 4f       	sbci	r29, 0xFF	; 255
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

00002930 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	29 97       	sbiw	r28, 0x09	; 9
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	99 87       	std	Y+9, r25	; 0x09
    2946:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    2948:	88 85       	ldd	r24, Y+8	; 0x08
    294a:	99 85       	ldd	r25, Y+9	; 0x09
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	21 f4       	brne	.+8      	; 0x2958 <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    2950:	80 e3       	ldi	r24, 0x30	; 48
    2952:	0e 94 65 10 	call	0x20ca	; 0x20ca <HLCD_voidSendChar>
    2956:	3d c0       	rjmp	.+122    	; 0x29d2 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    2958:	19 82       	std	Y+1, r1	; 0x01
    295a:	20 c0       	rjmp	.+64     	; 0x299c <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	e8 2f       	mov	r30, r24
    2960:	ff 27       	eor	r31, r31
    2962:	e7 fd       	sbrc	r30, 7
    2964:	f0 95       	com	r31
    2966:	88 85       	ldd	r24, Y+8	; 0x08
    2968:	99 85       	ldd	r25, Y+9	; 0x09
    296a:	2a e0       	ldi	r18, 0x0A	; 10
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	b9 01       	movw	r22, r18
    2970:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__udivmodhi4>
    2974:	28 2f       	mov	r18, r24
    2976:	20 5d       	subi	r18, 0xD0	; 208
    2978:	ce 01       	movw	r24, r28
    297a:	02 96       	adiw	r24, 0x02	; 2
    297c:	e8 0f       	add	r30, r24
    297e:	f9 1f       	adc	r31, r25
    2980:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    2982:	88 85       	ldd	r24, Y+8	; 0x08
    2984:	99 85       	ldd	r25, Y+9	; 0x09
    2986:	2a e0       	ldi	r18, 0x0A	; 10
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	b9 01       	movw	r22, r18
    298c:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <__udivmodhi4>
    2990:	cb 01       	movw	r24, r22
    2992:	99 87       	std	Y+9, r25	; 0x09
    2994:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	88 85       	ldd	r24, Y+8	; 0x08
    299e:	99 85       	ldd	r25, Y+9	; 0x09
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	e1 f6       	brne	.-72     	; 0x295c <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	81 50       	subi	r24, 0x01	; 1
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	10 c0       	rjmp	.+32     	; 0x29cc <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	28 2f       	mov	r18, r24
    29b0:	33 27       	eor	r19, r19
    29b2:	27 fd       	sbrc	r18, 7
    29b4:	30 95       	com	r19
    29b6:	ce 01       	movw	r24, r28
    29b8:	02 96       	adiw	r24, 0x02	; 2
    29ba:	fc 01       	movw	r30, r24
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	80 81       	ld	r24, Z
    29c2:	0e 94 65 10 	call	0x20ca	; 0x20ca <HLCD_voidSendChar>
			L_s8Iterator--;
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	8f 3f       	cpi	r24, 0xFF	; 255
    29d0:	69 f7       	brne	.-38     	; 0x29ac <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    29d2:	29 96       	adiw	r28, 0x09	; 9
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <HLCD_voidSendString+0x6>
    29ea:	0f 92       	push	r0
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	9b 83       	std	Y+3, r25	; 0x03
    29f2:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	d1 f0       	breq	.+52     	; 0x2a30 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    29fc:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	fc 01       	movw	r30, r24
    2a0a:	e2 0f       	add	r30, r18
    2a0c:	f3 1f       	adc	r31, r19
    2a0e:	80 81       	ld	r24, Z
    2a10:	0e 94 65 10 	call	0x20ca	; 0x20ca <HLCD_voidSendChar>
			L_u8Iterator++;
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	9b 81       	ldd	r25, Y+3	; 0x03
    2a24:	fc 01       	movw	r30, r24
    2a26:	e2 0f       	add	r30, r18
    2a28:	f3 1f       	adc	r31, r19
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 23       	and	r24, r24
    2a2e:	39 f7       	brne	.-50     	; 0x29fe <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	61 97       	sbiw	r28, 0x11	; 17
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	88 8b       	std	Y+16, r24	; 0x10
    2a52:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    2a54:	88 89       	ldd	r24, Y+16	; 0x10
    2a56:	98 2f       	mov	r25, r24
    2a58:	92 95       	swap	r25
    2a5a:	99 0f       	add	r25, r25
    2a5c:	99 0f       	add	r25, r25
    2a5e:	90 7c       	andi	r25, 0xC0	; 192
    2a60:	89 89       	ldd	r24, Y+17	; 0x11
    2a62:	89 2b       	or	r24, r25
    2a64:	80 68       	ori	r24, 0x80	; 128
    2a66:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    2a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6a:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e8       	ldi	r26, 0x80	; 128
    2a74:	bf e3       	ldi	r27, 0x3F	; 63
    2a76:	8b 87       	std	Y+11, r24	; 0x0b
    2a78:	9c 87       	std	Y+12, r25	; 0x0c
    2a7a:	ad 87       	std	Y+13, r26	; 0x0d
    2a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	8f 83       	std	Y+7, r24	; 0x07
    2a98:	98 87       	std	Y+8, r25	; 0x08
    2a9a:	a9 87       	std	Y+9, r26	; 0x09
    2a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa0:	78 85       	ldd	r23, Y+8	; 0x08
    2aa2:	89 85       	ldd	r24, Y+9	; 0x09
    2aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac2:	78 85       	ldd	r23, Y+8	; 0x08
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    2adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9e 83       	std	Y+6, r25	; 0x06
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <HLCD_voidSetCur+0xe4>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <HLCD_voidSetCur+0xd2>
    2b12:	9c 83       	std	Y+4, r25	; 0x04
    2b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8d 81       	ldd	r24, Y+5	; 0x05
    2b18:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <HLCD_voidSetCur+0xc6>
    2b28:	14 c0       	rjmp	.+40     	; 0x2b52 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <HLCD_voidSetCur+0x10e>
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2b52:	61 96       	adiw	r28, 0x11	; 17
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	0e 94 32 0c 	call	0x1864	; 0x1864 <HLCD_voidSendCmd>
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e8       	ldi	r26, 0x80	; 128
    2b84:	bf e3       	ldi	r27, 0x3F	; 63
    2b86:	8b 87       	std	Y+11, r24	; 0x0b
    2b88:	9c 87       	std	Y+12, r25	; 0x0c
    2b8a:	ad 87       	std	Y+13, r26	; 0x0d
    2b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	4a ef       	ldi	r20, 0xFA	; 250
    2b9c:	54 e4       	ldi	r21, 0x44	; 68
    2b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	8f 83       	std	Y+7, r24	; 0x07
    2ba8:	98 87       	std	Y+8, r25	; 0x08
    2baa:	a9 87       	std	Y+9, r26	; 0x09
    2bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e8       	ldi	r20, 0x80	; 128
    2bbc:	5f e3       	ldi	r21, 0x3F	; 63
    2bbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bc2:	88 23       	and	r24, r24
    2bc4:	2c f4       	brge	.+10     	; 0x2bd0 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	3f c0       	rjmp	.+126    	; 0x2c4e <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	3f ef       	ldi	r19, 0xFF	; 255
    2bdc:	4f e7       	ldi	r20, 0x7F	; 127
    2bde:	57 e4       	ldi	r21, 0x47	; 71
    2be0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2be4:	18 16       	cp	r1, r24
    2be6:	4c f5       	brge	.+82     	; 0x2c3a <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e2       	ldi	r20, 0x20	; 32
    2bf6:	51 e4       	ldi	r21, 0x41	; 65
    2bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	0f c0       	rjmp	.+30     	; 0x2c30 <HLCD_voidClear+0xcc>
    2c12:	88 ec       	ldi	r24, 0xC8	; 200
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <HLCD_voidClear+0xba>
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	00 97       	sbiw	r24, 0x00	; 0
    2c36:	69 f7       	brne	.-38     	; 0x2c12 <HLCD_voidClear+0xae>
    2c38:	14 c0       	rjmp	.+40     	; 0x2c62 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3c:	78 85       	ldd	r23, Y+8	; 0x08
    2c3e:	89 85       	ldd	r24, Y+9	; 0x09
    2c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9e 83       	std	Y+6, r25	; 0x06
    2c4c:	8d 83       	std	Y+5, r24	; 0x05
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <HLCD_voidClear+0xf6>
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c62:	2e 96       	adiw	r28, 0x0e	; 14
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <MADC_stderrInit>:
/* SWC Includes */
#include "MADC_private.h"
#include "MADC_interface.h"

STD_error_t MADC_stderrInit(u8 ARG_u8VoltageReference, u8 ARG_u8Prescaler, u8 ARG_u8ADCAdjust)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <MADC_stderrInit+0x6>
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <MADC_stderrInit+0x8>
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	8a 83       	std	Y+2, r24	; 0x02
    2c82:	6b 83       	std	Y+3, r22	; 0x03
    2c84:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError =E_OK;
    2c86:	19 82       	std	Y+1, r1	; 0x01
	if(  (ARG_u8VoltageReference<=1 || 3==ARG_u8VoltageReference)   &&  ARG_u8Prescaler<=7 &&ARG_u8ADCAdjust<=MADC_ADJUST_LEFT )
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	82 30       	cpi	r24, 0x02	; 2
    2c8c:	18 f0       	brcs	.+6      	; 0x2c94 <MADC_stderrInit+0x20>
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	83 30       	cpi	r24, 0x03	; 3
    2c92:	61 f5       	brne	.+88     	; 0x2cec <MADC_stderrInit+0x78>
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	88 30       	cpi	r24, 0x08	; 8
    2c98:	48 f5       	brcc	.+82     	; 0x2cec <MADC_stderrInit+0x78>
    2c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9c:	82 30       	cpi	r24, 0x02	; 2
    2c9e:	30 f5       	brcc	.+76     	; 0x2cec <MADC_stderrInit+0x78>
	{
		/* mask Then OR with the needed val */
		ADMUX = ( ADMUX & 0x1F ) | (ARG_u8VoltageReference<<REFS0) | (ARG_u8ADCAdjust<<ADLAR) ; /* set voltage Ref, ADLAR=1 */
    2ca0:	a7 e2       	ldi	r26, 0x27	; 39
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e7 e2       	ldi	r30, 0x27	; 39
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	28 2f       	mov	r18, r24
    2cac:	2f 71       	andi	r18, 0x1F	; 31
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	88 2f       	mov	r24, r24
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	00 24       	eor	r0, r0
    2cb6:	96 95       	lsr	r25
    2cb8:	87 95       	ror	r24
    2cba:	07 94       	ror	r0
    2cbc:	96 95       	lsr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	07 94       	ror	r0
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	80 2d       	mov	r24, r0
    2cc6:	28 2b       	or	r18, r24
    2cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cca:	88 2f       	mov	r24, r24
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	82 95       	swap	r24
    2cd4:	92 95       	swap	r25
    2cd6:	90 7f       	andi	r25, 0xF0	; 240
    2cd8:	98 27       	eor	r25, r24
    2cda:	80 7f       	andi	r24, 0xF0	; 240
    2cdc:	98 27       	eor	r25, r24
    2cde:	82 2b       	or	r24, r18
    2ce0:	8c 93       	st	X, r24
		ADCSRA = (ADLAR & 0xF8) | (ARG_u8Prescaler<<ADPS0) ; /* note ADPS0 is 0 not important, set prescaler */
    2ce2:	e6 e2       	ldi	r30, 0x26	; 38
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	80 83       	st	Z, r24
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <MADC_stderrInit+0x7c>
	}
	else {
		L_stderrError =E_NOK;
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <MADC_stderrReadADC>:

STD_error_t MADC_stderrReadADC(u16* ARG_u16pADCReading, u8 ARG_u8Channel)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <MADC_stderrReadADC+0x6>
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <MADC_stderrReadADC+0x8>
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9b 83       	std	Y+3, r25	; 0x03
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    2d10:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2d12:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER != ARG_u16pADCReading)
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	d1 f0       	breq	.+52     	; 0x2d50 <MADC_stderrReadADC+0x50>
	{	
		MADC_voidEnableADC(); /* enable ADC to convert */
    2d1c:	0e 94 d6 16 	call	0x2dac	; 0x2dac <MADC_voidEnableADC>
		L_stderrError = MADC_stderrStartConversion(ARG_u8Channel);
    2d20:	8c 81       	ldd	r24, Y+4	; 0x04
    2d22:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <MADC_stderrStartConversion>
    2d26:	89 83       	std	Y+1, r24	; 0x01
		
		if(E_OK==L_stderrError)
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	88 23       	and	r24, r24
    2d2c:	71 f4       	brne	.+28     	; 0x2d4a <MADC_stderrReadADC+0x4a>
		{
			MADC_voidPollFlag(); /* polling wait flag ADIF be 1 */
    2d2e:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <MADC_voidPollFlag>
			*ARG_u16pADCReading	= ADCH ; /* in this case we read the 8-MSB that mean we use 8 bit Resolution */
    2d32:	e5 e2       	ldi	r30, 0x25	; 37
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	80 83       	st	Z, r24
			MADC_voidClearFlag(); /* CLear flag by SW */	
    2d44:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MADC_voidClearFlag>
    2d48:	05 c0       	rjmp	.+10     	; 0x2d54 <MADC_stderrReadADC+0x54>
		}
		else{
			/*do nothing*/
			MADC_voidDisableADC();
    2d4a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <MADC_voidDisableADC>
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <MADC_stderrReadADC+0x54>
		}
	}
	else{
		L_stderrError = E_NULL_POINTER;
    2d50:	82 e0       	ldi	r24, 0x02	; 2
    2d52:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrError;
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
}	
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <MADC_stderrStartConversion>:
	
STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{	
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <MADC_stderrStartConversion+0x6>
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError = E_OK;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    
    if (ARG_u8Channel <= 7) {
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	88 30       	cpi	r24, 0x08	; 8
    2d76:	90 f4       	brcc	.+36     	; 0x2d9c <MADC_stderrStartConversion+0x38>
        /* Select the channel using the ADMUX register */
        ADMUX = (ADMUX & 0xE0) | (ARG_u8Channel<<MUX0); /* note MUX0 is 0 not important*/
    2d78:	a7 e2       	ldi	r26, 0x27	; 39
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e7 e2       	ldi	r30, 0x27	; 39
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	98 2f       	mov	r25, r24
    2d84:	90 7e       	andi	r25, 0xE0	; 224
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	89 2b       	or	r24, r25
    2d8a:	8c 93       	st	X, r24
		/* Start the conversion by setting the ADSC bit */
		SET_BIT(ADCSRA,ADSC);	//ADCSRA |= (1 << ADSC);
    2d8c:	a6 e2       	ldi	r26, 0x26	; 38
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	e6 e2       	ldi	r30, 0x26	; 38
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	80 64       	ori	r24, 0x40	; 64
    2d98:	8c 93       	st	X, r24
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <MADC_stderrStartConversion+0x3c>
    } else {
        L_stderrError = E_NOK;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    }
    return L_stderrError;
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <MADC_voidEnableADC>:

void MADC_voidEnableADC(void)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    2db4:	a6 e2       	ldi	r26, 0x26	; 38
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e6 e2       	ldi	r30, 0x26	; 38
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 68       	ori	r24, 0x80	; 128
    2dc0:	8c 93       	st	X, r24
}
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <MADC_voidDisableADC>:

void MADC_voidDisableADC(void)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
    2dd0:	a6 e2       	ldi	r26, 0x26	; 38
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e6 e2       	ldi	r30, 0x26	; 38
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8f 77       	andi	r24, 0x7F	; 127
    2ddc:	8c 93       	st	X, r24
}
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <MADC_voidPollFlag>:

void MADC_voidPollFlag(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF)); /* POLL , stuck while flag is low */
    2dec:	e6 e2       	ldi	r30, 0x26	; 38
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	82 95       	swap	r24
    2df4:	8f 70       	andi	r24, 0x0F	; 15
    2df6:	88 2f       	mov	r24, r24
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	81 70       	andi	r24, 0x01	; 1
    2dfc:	90 70       	andi	r25, 0x00	; 0
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	a9 f3       	breq	.-22     	; 0x2dec <MADC_voidPollFlag+0x8>
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <MADC_voidClearFlag>:

void MADC_voidClearFlag(void)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF); /* Clear flag by set it */
    2e10:	a6 e2       	ldi	r26, 0x26	; 38
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e6 e2       	ldi	r30, 0x26	; 38
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 61       	ori	r24, 0x10	; 16
    2e1c:	8c 93       	st	X, r24
}
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <MDIO_stderrSetPortDirection+0x6>
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <MDIO_stderrSetPortDirection+0x8>
    2e2c:	0f 92       	push	r0
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	8a 83       	std	Y+2, r24	; 0x02
    2e34:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2e36:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2e38:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3d 83       	std	Y+5, r19	; 0x05
    2e40:	2c 83       	std	Y+4, r18	; 0x04
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
    2e44:	9d 81       	ldd	r25, Y+5	; 0x05
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	91 05       	cpc	r25, r1
    2e4a:	d9 f0       	breq	.+54     	; 0x2e82 <MDIO_stderrSetPortDirection+0x5e>
    2e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e50:	23 30       	cpi	r18, 0x03	; 3
    2e52:	31 05       	cpc	r19, r1
    2e54:	34 f4       	brge	.+12     	; 0x2e62 <MDIO_stderrSetPortDirection+0x3e>
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <MDIO_stderrSetPortDirection+0x54>
    2e60:	1f c0       	rjmp	.+62     	; 0x2ea0 <MDIO_stderrSetPortDirection+0x7c>
    2e62:	2c 81       	ldd	r18, Y+4	; 0x04
    2e64:	3d 81       	ldd	r19, Y+5	; 0x05
    2e66:	23 30       	cpi	r18, 0x03	; 3
    2e68:	31 05       	cpc	r19, r1
    2e6a:	81 f0       	breq	.+32     	; 0x2e8c <MDIO_stderrSetPortDirection+0x68>
    2e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e70:	84 30       	cpi	r24, 0x04	; 4
    2e72:	91 05       	cpc	r25, r1
    2e74:	81 f0       	breq	.+32     	; 0x2e96 <MDIO_stderrSetPortDirection+0x72>
    2e76:	14 c0       	rjmp	.+40     	; 0x2ea0 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2e78:	e9 e3       	ldi	r30, 0x39	; 57
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	81 83       	std	Z+1, r24	; 0x01
    2e80:	11 c0       	rjmp	.+34     	; 0x2ea4 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2e82:	e6 e3       	ldi	r30, 0x36	; 54
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	81 83       	std	Z+1, r24	; 0x01
    2e8a:	0c c0       	rjmp	.+24     	; 0x2ea4 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2e8c:	e3 e3       	ldi	r30, 0x33	; 51
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	81 83       	std	Z+1, r24	; 0x01
    2e94:	07 c0       	rjmp	.+14     	; 0x2ea4 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2e96:	e0 e3       	ldi	r30, 0x30	; 48
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	81 83       	std	Z+1, r24	; 0x01
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <MDIO_stderrSetPortValue+0x6>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <MDIO_stderrSetPortValue+0x8>
    2ebe:	0f 92       	push	r0
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	8a 83       	std	Y+2, r24	; 0x02
    2ec6:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2ec8:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	3d 83       	std	Y+5, r19	; 0x05
    2ed2:	2c 83       	std	Y+4, r18	; 0x04
    2ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed8:	82 30       	cpi	r24, 0x02	; 2
    2eda:	91 05       	cpc	r25, r1
    2edc:	d9 f0       	breq	.+54     	; 0x2f14 <MDIO_stderrSetPortValue+0x5e>
    2ede:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ee2:	23 30       	cpi	r18, 0x03	; 3
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	34 f4       	brge	.+12     	; 0x2ef4 <MDIO_stderrSetPortValue+0x3e>
    2ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	81 30       	cpi	r24, 0x01	; 1
    2eee:	91 05       	cpc	r25, r1
    2ef0:	61 f0       	breq	.+24     	; 0x2f0a <MDIO_stderrSetPortValue+0x54>
    2ef2:	1f c0       	rjmp	.+62     	; 0x2f32 <MDIO_stderrSetPortValue+0x7c>
    2ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef8:	23 30       	cpi	r18, 0x03	; 3
    2efa:	31 05       	cpc	r19, r1
    2efc:	81 f0       	breq	.+32     	; 0x2f1e <MDIO_stderrSetPortValue+0x68>
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	9d 81       	ldd	r25, Y+5	; 0x05
    2f02:	84 30       	cpi	r24, 0x04	; 4
    2f04:	91 05       	cpc	r25, r1
    2f06:	81 f0       	breq	.+32     	; 0x2f28 <MDIO_stderrSetPortValue+0x72>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2f0a:	e9 e3       	ldi	r30, 0x39	; 57
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	82 83       	std	Z+2, r24	; 0x02
    2f12:	11 c0       	rjmp	.+34     	; 0x2f36 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2f14:	e6 e3       	ldi	r30, 0x36	; 54
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	82 83       	std	Z+2, r24	; 0x02
    2f1c:	0c c0       	rjmp	.+24     	; 0x2f36 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2f1e:	e3 e3       	ldi	r30, 0x33	; 51
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	82 83       	std	Z+2, r24	; 0x02
    2f26:	07 c0       	rjmp	.+14     	; 0x2f36 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2f28:	e0 e3       	ldi	r30, 0x30	; 48
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	82 83       	std	Z+2, r24	; 0x02
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <MDIO_stderrGetPortValue+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <MDIO_stderrGetPortValue+0x8>
    2f50:	00 d0       	rcall	.+0      	; 0x2f52 <MDIO_stderrGetPortValue+0xa>
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02
    2f5a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2f5c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	3e 83       	std	Y+6, r19	; 0x06
    2f66:	2d 83       	std	Y+5, r18	; 0x05
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	82 30       	cpi	r24, 0x02	; 2
    2f6e:	91 05       	cpc	r25, r1
    2f70:	e9 f0       	breq	.+58     	; 0x2fac <MDIO_stderrGetPortValue+0x64>
    2f72:	2d 81       	ldd	r18, Y+5	; 0x05
    2f74:	3e 81       	ldd	r19, Y+6	; 0x06
    2f76:	23 30       	cpi	r18, 0x03	; 3
    2f78:	31 05       	cpc	r19, r1
    2f7a:	34 f4       	brge	.+12     	; 0x2f88 <MDIO_stderrGetPortValue+0x40>
    2f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f80:	81 30       	cpi	r24, 0x01	; 1
    2f82:	91 05       	cpc	r25, r1
    2f84:	61 f0       	breq	.+24     	; 0x2f9e <MDIO_stderrGetPortValue+0x56>
    2f86:	27 c0       	rjmp	.+78     	; 0x2fd6 <MDIO_stderrGetPortValue+0x8e>
    2f88:	2d 81       	ldd	r18, Y+5	; 0x05
    2f8a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f8c:	23 30       	cpi	r18, 0x03	; 3
    2f8e:	31 05       	cpc	r19, r1
    2f90:	a1 f0       	breq	.+40     	; 0x2fba <MDIO_stderrGetPortValue+0x72>
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	91 05       	cpc	r25, r1
    2f9a:	b1 f0       	breq	.+44     	; 0x2fc8 <MDIO_stderrGetPortValue+0x80>
    2f9c:	1c c0       	rjmp	.+56     	; 0x2fd6 <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2f9e:	e9 e3       	ldi	r30, 0x39	; 57
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fa6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fa8:	80 83       	st	Z, r24
    2faa:	17 c0       	rjmp	.+46     	; 0x2fda <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2fac:	e6 e3       	ldi	r30, 0x36	; 54
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2fb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2fb6:	80 83       	st	Z, r24
    2fb8:	10 c0       	rjmp	.+32     	; 0x2fda <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2fba:	e3 e3       	ldi	r30, 0x33	; 51
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc4:	80 83       	st	Z, r24
    2fc6:	09 c0       	rjmp	.+18     	; 0x2fda <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2fc8:	e0 e3       	ldi	r30, 0x30	; 48
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	ea 81       	ldd	r30, Y+2	; 0x02
    2fd0:	fb 81       	ldd	r31, Y+3	; 0x03
    2fd2:	80 83       	st	Z, r24
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fdc:	26 96       	adiw	r28, 0x06	; 6
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	2a 97       	sbiw	r28, 0x0a	; 10
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	8a 83       	std	Y+2, r24	; 0x02
    3004:	6b 83       	std	Y+3, r22	; 0x03
    3006:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    3008:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	88 30       	cpi	r24, 0x08	; 8
    300e:	08 f0       	brcs	.+2      	; 0x3012 <MDIO_stderrSetPinDirection+0x24>
    3010:	d9 c1       	rjmp	.+946    	; 0x33c4 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    3012:	8c 81       	ldd	r24, Y+4	; 0x04
    3014:	81 30       	cpi	r24, 0x01	; 1
    3016:	09 f0       	breq	.+2      	; 0x301a <MDIO_stderrSetPinDirection+0x2c>
    3018:	7c c0       	rjmp	.+248    	; 0x3112 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	3a 87       	std	Y+10, r19	; 0x0a
    3022:	29 87       	std	Y+9, r18	; 0x09
    3024:	89 85       	ldd	r24, Y+9	; 0x09
    3026:	9a 85       	ldd	r25, Y+10	; 0x0a
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	91 05       	cpc	r25, r1
    302c:	69 f1       	breq	.+90     	; 0x3088 <MDIO_stderrSetPinDirection+0x9a>
    302e:	29 85       	ldd	r18, Y+9	; 0x09
    3030:	3a 85       	ldd	r19, Y+10	; 0x0a
    3032:	23 30       	cpi	r18, 0x03	; 3
    3034:	31 05       	cpc	r19, r1
    3036:	34 f4       	brge	.+12     	; 0x3044 <MDIO_stderrSetPinDirection+0x56>
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	9a 85       	ldd	r25, Y+10	; 0x0a
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	91 05       	cpc	r25, r1
    3040:	69 f0       	breq	.+26     	; 0x305c <MDIO_stderrSetPinDirection+0x6e>
    3042:	64 c0       	rjmp	.+200    	; 0x310c <MDIO_stderrSetPinDirection+0x11e>
    3044:	29 85       	ldd	r18, Y+9	; 0x09
    3046:	3a 85       	ldd	r19, Y+10	; 0x0a
    3048:	23 30       	cpi	r18, 0x03	; 3
    304a:	31 05       	cpc	r19, r1
    304c:	99 f1       	breq	.+102    	; 0x30b4 <MDIO_stderrSetPinDirection+0xc6>
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	84 30       	cpi	r24, 0x04	; 4
    3054:	91 05       	cpc	r25, r1
    3056:	09 f4       	brne	.+2      	; 0x305a <MDIO_stderrSetPinDirection+0x6c>
    3058:	43 c0       	rjmp	.+134    	; 0x30e0 <MDIO_stderrSetPinDirection+0xf2>
    305a:	58 c0       	rjmp	.+176    	; 0x310c <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    305c:	a9 e3       	ldi	r26, 0x39	; 57
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e9 e3       	ldi	r30, 0x39	; 57
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	81 81       	ldd	r24, Z+1	; 0x01
    3066:	48 2f       	mov	r20, r24
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	02 2e       	mov	r0, r18
    3074:	02 c0       	rjmp	.+4      	; 0x307a <MDIO_stderrSetPinDirection+0x8c>
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	0a 94       	dec	r0
    307c:	e2 f7       	brpl	.-8      	; 0x3076 <MDIO_stderrSetPinDirection+0x88>
    307e:	84 2b       	or	r24, r20
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	8c 93       	st	X, r24
    3084:	11 97       	sbiw	r26, 0x01	; 1
    3086:	a0 c1       	rjmp	.+832    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    3088:	a6 e3       	ldi	r26, 0x36	; 54
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e6 e3       	ldi	r30, 0x36	; 54
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	81 81       	ldd	r24, Z+1	; 0x01
    3092:	48 2f       	mov	r20, r24
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	02 2e       	mov	r0, r18
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <MDIO_stderrSetPinDirection+0xb8>
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	0a 94       	dec	r0
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <MDIO_stderrSetPinDirection+0xb4>
    30aa:	84 2b       	or	r24, r20
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	8c 93       	st	X, r24
    30b0:	11 97       	sbiw	r26, 0x01	; 1
    30b2:	8a c1       	rjmp	.+788    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    30b4:	a3 e3       	ldi	r26, 0x33	; 51
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e3 e3       	ldi	r30, 0x33	; 51
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	81 81       	ldd	r24, Z+1	; 0x01
    30be:	48 2f       	mov	r20, r24
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	02 2e       	mov	r0, r18
    30cc:	02 c0       	rjmp	.+4      	; 0x30d2 <MDIO_stderrSetPinDirection+0xe4>
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	0a 94       	dec	r0
    30d4:	e2 f7       	brpl	.-8      	; 0x30ce <MDIO_stderrSetPinDirection+0xe0>
    30d6:	84 2b       	or	r24, r20
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	8c 93       	st	X, r24
    30dc:	11 97       	sbiw	r26, 0x01	; 1
    30de:	74 c1       	rjmp	.+744    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    30e0:	a0 e3       	ldi	r26, 0x30	; 48
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e0 e3       	ldi	r30, 0x30	; 48
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	81 81       	ldd	r24, Z+1	; 0x01
    30ea:	48 2f       	mov	r20, r24
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	02 2e       	mov	r0, r18
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <MDIO_stderrSetPinDirection+0x110>
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	0a 94       	dec	r0
    3100:	e2 f7       	brpl	.-8      	; 0x30fa <MDIO_stderrSetPinDirection+0x10c>
    3102:	84 2b       	or	r24, r20
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	8c 93       	st	X, r24
    3108:	11 97       	sbiw	r26, 0x01	; 1
    310a:	5e c1       	rjmp	.+700    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	5b c1       	rjmp	.+694    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	82 30       	cpi	r24, 0x02	; 2
    3116:	09 f0       	breq	.+2      	; 0x311a <MDIO_stderrSetPinDirection+0x12c>
    3118:	80 c0       	rjmp	.+256    	; 0x321a <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	38 87       	std	Y+8, r19	; 0x08
    3122:	2f 83       	std	Y+7, r18	; 0x07
    3124:	8f 81       	ldd	r24, Y+7	; 0x07
    3126:	98 85       	ldd	r25, Y+8	; 0x08
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	91 05       	cpc	r25, r1
    312c:	71 f1       	breq	.+92     	; 0x318a <MDIO_stderrSetPinDirection+0x19c>
    312e:	2f 81       	ldd	r18, Y+7	; 0x07
    3130:	38 85       	ldd	r19, Y+8	; 0x08
    3132:	23 30       	cpi	r18, 0x03	; 3
    3134:	31 05       	cpc	r19, r1
    3136:	34 f4       	brge	.+12     	; 0x3144 <MDIO_stderrSetPinDirection+0x156>
    3138:	8f 81       	ldd	r24, Y+7	; 0x07
    313a:	98 85       	ldd	r25, Y+8	; 0x08
    313c:	81 30       	cpi	r24, 0x01	; 1
    313e:	91 05       	cpc	r25, r1
    3140:	69 f0       	breq	.+26     	; 0x315c <MDIO_stderrSetPinDirection+0x16e>
    3142:	68 c0       	rjmp	.+208    	; 0x3214 <MDIO_stderrSetPinDirection+0x226>
    3144:	2f 81       	ldd	r18, Y+7	; 0x07
    3146:	38 85       	ldd	r19, Y+8	; 0x08
    3148:	23 30       	cpi	r18, 0x03	; 3
    314a:	31 05       	cpc	r19, r1
    314c:	a9 f1       	breq	.+106    	; 0x31b8 <MDIO_stderrSetPinDirection+0x1ca>
    314e:	8f 81       	ldd	r24, Y+7	; 0x07
    3150:	98 85       	ldd	r25, Y+8	; 0x08
    3152:	84 30       	cpi	r24, 0x04	; 4
    3154:	91 05       	cpc	r25, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <MDIO_stderrSetPinDirection+0x16c>
    3158:	46 c0       	rjmp	.+140    	; 0x31e6 <MDIO_stderrSetPinDirection+0x1f8>
    315a:	5c c0       	rjmp	.+184    	; 0x3214 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    315c:	a9 e3       	ldi	r26, 0x39	; 57
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e9 e3       	ldi	r30, 0x39	; 57
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	81 81       	ldd	r24, Z+1	; 0x01
    3166:	48 2f       	mov	r20, r24
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	28 2f       	mov	r18, r24
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	02 2e       	mov	r0, r18
    3174:	02 c0       	rjmp	.+4      	; 0x317a <MDIO_stderrSetPinDirection+0x18c>
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	0a 94       	dec	r0
    317c:	e2 f7       	brpl	.-8      	; 0x3176 <MDIO_stderrSetPinDirection+0x188>
    317e:	80 95       	com	r24
    3180:	84 23       	and	r24, r20
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	8c 93       	st	X, r24
    3186:	11 97       	sbiw	r26, 0x01	; 1
    3188:	1f c1       	rjmp	.+574    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    318a:	a6 e3       	ldi	r26, 0x36	; 54
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e6 e3       	ldi	r30, 0x36	; 54
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	81 81       	ldd	r24, Z+1	; 0x01
    3194:	48 2f       	mov	r20, r24
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	02 2e       	mov	r0, r18
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <MDIO_stderrSetPinDirection+0x1ba>
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	0a 94       	dec	r0
    31aa:	e2 f7       	brpl	.-8      	; 0x31a4 <MDIO_stderrSetPinDirection+0x1b6>
    31ac:	80 95       	com	r24
    31ae:	84 23       	and	r24, r20
    31b0:	11 96       	adiw	r26, 0x01	; 1
    31b2:	8c 93       	st	X, r24
    31b4:	11 97       	sbiw	r26, 0x01	; 1
    31b6:	08 c1       	rjmp	.+528    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    31b8:	a3 e3       	ldi	r26, 0x33	; 51
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	e3 e3       	ldi	r30, 0x33	; 51
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	81 81       	ldd	r24, Z+1	; 0x01
    31c2:	48 2f       	mov	r20, r24
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	02 2e       	mov	r0, r18
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <MDIO_stderrSetPinDirection+0x1e8>
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	0a 94       	dec	r0
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <MDIO_stderrSetPinDirection+0x1e4>
    31da:	80 95       	com	r24
    31dc:	84 23       	and	r24, r20
    31de:	11 96       	adiw	r26, 0x01	; 1
    31e0:	8c 93       	st	X, r24
    31e2:	11 97       	sbiw	r26, 0x01	; 1
    31e4:	f1 c0       	rjmp	.+482    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    31e6:	a0 e3       	ldi	r26, 0x30	; 48
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e0 e3       	ldi	r30, 0x30	; 48
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	81 81       	ldd	r24, Z+1	; 0x01
    31f0:	48 2f       	mov	r20, r24
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	28 2f       	mov	r18, r24
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	02 2e       	mov	r0, r18
    31fe:	02 c0       	rjmp	.+4      	; 0x3204 <MDIO_stderrSetPinDirection+0x216>
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	0a 94       	dec	r0
    3206:	e2 f7       	brpl	.-8      	; 0x3200 <MDIO_stderrSetPinDirection+0x212>
    3208:	80 95       	com	r24
    320a:	84 23       	and	r24, r20
    320c:	11 96       	adiw	r26, 0x01	; 1
    320e:	8c 93       	st	X, r24
    3210:	11 97       	sbiw	r26, 0x01	; 1
    3212:	da c0       	rjmp	.+436    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	89 83       	std	Y+1, r24	; 0x01
    3218:	d7 c0       	rjmp	.+430    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    321a:	8c 81       	ldd	r24, Y+4	; 0x04
    321c:	83 30       	cpi	r24, 0x03	; 3
    321e:	09 f0       	breq	.+2      	; 0x3222 <MDIO_stderrSetPinDirection+0x234>
    3220:	ce c0       	rjmp	.+412    	; 0x33be <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	3e 83       	std	Y+6, r19	; 0x06
    322a:	2d 83       	std	Y+5, r18	; 0x05
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
    322e:	9e 81       	ldd	r25, Y+6	; 0x06
    3230:	82 30       	cpi	r24, 0x02	; 2
    3232:	91 05       	cpc	r25, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <MDIO_stderrSetPinDirection+0x24a>
    3236:	42 c0       	rjmp	.+132    	; 0x32bc <MDIO_stderrSetPinDirection+0x2ce>
    3238:	2d 81       	ldd	r18, Y+5	; 0x05
    323a:	3e 81       	ldd	r19, Y+6	; 0x06
    323c:	23 30       	cpi	r18, 0x03	; 3
    323e:	31 05       	cpc	r19, r1
    3240:	34 f4       	brge	.+12     	; 0x324e <MDIO_stderrSetPinDirection+0x260>
    3242:	8d 81       	ldd	r24, Y+5	; 0x05
    3244:	9e 81       	ldd	r25, Y+6	; 0x06
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	91 05       	cpc	r25, r1
    324a:	71 f0       	breq	.+28     	; 0x3268 <MDIO_stderrSetPinDirection+0x27a>
    324c:	b5 c0       	rjmp	.+362    	; 0x33b8 <MDIO_stderrSetPinDirection+0x3ca>
    324e:	2d 81       	ldd	r18, Y+5	; 0x05
    3250:	3e 81       	ldd	r19, Y+6	; 0x06
    3252:	23 30       	cpi	r18, 0x03	; 3
    3254:	31 05       	cpc	r19, r1
    3256:	09 f4       	brne	.+2      	; 0x325a <MDIO_stderrSetPinDirection+0x26c>
    3258:	5b c0       	rjmp	.+182    	; 0x3310 <MDIO_stderrSetPinDirection+0x322>
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	84 30       	cpi	r24, 0x04	; 4
    3260:	91 05       	cpc	r25, r1
    3262:	09 f4       	brne	.+2      	; 0x3266 <MDIO_stderrSetPinDirection+0x278>
    3264:	7f c0       	rjmp	.+254    	; 0x3364 <MDIO_stderrSetPinDirection+0x376>
    3266:	a8 c0       	rjmp	.+336    	; 0x33b8 <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3268:	a9 e3       	ldi	r26, 0x39	; 57
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e9 e3       	ldi	r30, 0x39	; 57
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	81 81       	ldd	r24, Z+1	; 0x01
    3272:	48 2f       	mov	r20, r24
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	02 c0       	rjmp	.+4      	; 0x3284 <MDIO_stderrSetPinDirection+0x296>
    3280:	88 0f       	add	r24, r24
    3282:	99 1f       	adc	r25, r25
    3284:	2a 95       	dec	r18
    3286:	e2 f7       	brpl	.-8      	; 0x3280 <MDIO_stderrSetPinDirection+0x292>
    3288:	80 95       	com	r24
    328a:	84 23       	and	r24, r20
    328c:	11 96       	adiw	r26, 0x01	; 1
    328e:	8c 93       	st	X, r24
    3290:	a9 e3       	ldi	r26, 0x39	; 57
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e9 e3       	ldi	r30, 0x39	; 57
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	48 2f       	mov	r20, r24
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	02 2e       	mov	r0, r18
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <MDIO_stderrSetPinDirection+0x2c0>
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	0a 94       	dec	r0
    32b0:	e2 f7       	brpl	.-8      	; 0x32aa <MDIO_stderrSetPinDirection+0x2bc>
    32b2:	84 2b       	or	r24, r20
    32b4:	12 96       	adiw	r26, 0x02	; 2
    32b6:	8c 93       	st	X, r24
    32b8:	12 97       	sbiw	r26, 0x02	; 2
    32ba:	86 c0       	rjmp	.+268    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    32bc:	a6 e3       	ldi	r26, 0x36	; 54
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e6 e3       	ldi	r30, 0x36	; 54
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	81 81       	ldd	r24, Z+1	; 0x01
    32c6:	48 2f       	mov	r20, r24
    32c8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <MDIO_stderrSetPinDirection+0x2ea>
    32d4:	88 0f       	add	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	2a 95       	dec	r18
    32da:	e2 f7       	brpl	.-8      	; 0x32d4 <MDIO_stderrSetPinDirection+0x2e6>
    32dc:	80 95       	com	r24
    32de:	84 23       	and	r24, r20
    32e0:	11 96       	adiw	r26, 0x01	; 1
    32e2:	8c 93       	st	X, r24
    32e4:	a6 e3       	ldi	r26, 0x36	; 54
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e6 e3       	ldi	r30, 0x36	; 54
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	82 81       	ldd	r24, Z+2	; 0x02
    32ee:	48 2f       	mov	r20, r24
    32f0:	8b 81       	ldd	r24, Y+3	; 0x03
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	02 2e       	mov	r0, r18
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <MDIO_stderrSetPinDirection+0x314>
    32fe:	88 0f       	add	r24, r24
    3300:	99 1f       	adc	r25, r25
    3302:	0a 94       	dec	r0
    3304:	e2 f7       	brpl	.-8      	; 0x32fe <MDIO_stderrSetPinDirection+0x310>
    3306:	84 2b       	or	r24, r20
    3308:	12 96       	adiw	r26, 0x02	; 2
    330a:	8c 93       	st	X, r24
    330c:	12 97       	sbiw	r26, 0x02	; 2
    330e:	5c c0       	rjmp	.+184    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    3310:	a3 e3       	ldi	r26, 0x33	; 51
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	e3 e3       	ldi	r30, 0x33	; 51
    3316:	f0 e0       	ldi	r31, 0x00	; 0
    3318:	81 81       	ldd	r24, Z+1	; 0x01
    331a:	48 2f       	mov	r20, r24
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <MDIO_stderrSetPinDirection+0x33e>
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	2a 95       	dec	r18
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <MDIO_stderrSetPinDirection+0x33a>
    3330:	80 95       	com	r24
    3332:	84 23       	and	r24, r20
    3334:	11 96       	adiw	r26, 0x01	; 1
    3336:	8c 93       	st	X, r24
    3338:	a3 e3       	ldi	r26, 0x33	; 51
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e3 e3       	ldi	r30, 0x33	; 51
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	48 2f       	mov	r20, r24
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	02 2e       	mov	r0, r18
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <MDIO_stderrSetPinDirection+0x368>
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	0a 94       	dec	r0
    3358:	e2 f7       	brpl	.-8      	; 0x3352 <MDIO_stderrSetPinDirection+0x364>
    335a:	84 2b       	or	r24, r20
    335c:	12 96       	adiw	r26, 0x02	; 2
    335e:	8c 93       	st	X, r24
    3360:	12 97       	sbiw	r26, 0x02	; 2
    3362:	32 c0       	rjmp	.+100    	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    3364:	a0 e3       	ldi	r26, 0x30	; 48
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e0 e3       	ldi	r30, 0x30	; 48
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	81 81       	ldd	r24, Z+1	; 0x01
    336e:	48 2f       	mov	r20, r24
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <MDIO_stderrSetPinDirection+0x392>
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	2a 95       	dec	r18
    3382:	e2 f7       	brpl	.-8      	; 0x337c <MDIO_stderrSetPinDirection+0x38e>
    3384:	80 95       	com	r24
    3386:	84 23       	and	r24, r20
    3388:	11 96       	adiw	r26, 0x01	; 1
    338a:	8c 93       	st	X, r24
    338c:	a0 e3       	ldi	r26, 0x30	; 48
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e0 e3       	ldi	r30, 0x30	; 48
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	48 2f       	mov	r20, r24
    3398:	8b 81       	ldd	r24, Y+3	; 0x03
    339a:	28 2f       	mov	r18, r24
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	02 2e       	mov	r0, r18
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <MDIO_stderrSetPinDirection+0x3bc>
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	0a 94       	dec	r0
    33ac:	e2 f7       	brpl	.-8      	; 0x33a6 <MDIO_stderrSetPinDirection+0x3b8>
    33ae:	84 2b       	or	r24, r20
    33b0:	12 96       	adiw	r26, 0x02	; 2
    33b2:	8c 93       	st	X, r24
    33b4:	12 97       	sbiw	r26, 0x02	; 2
    33b6:	08 c0       	rjmp	.+16     	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	05 c0       	rjmp	.+10     	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ca:	2a 96       	adiw	r28, 0x0a	; 10
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	cf 91       	pop	r28
    33d8:	df 91       	pop	r29
    33da:	08 95       	ret

000033dc <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	28 97       	sbiw	r28, 0x08	; 8
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	8a 83       	std	Y+2, r24	; 0x02
    33f2:	6b 83       	std	Y+3, r22	; 0x03
    33f4:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    33f6:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	88 30       	cpi	r24, 0x08	; 8
    33fc:	08 f0       	brcs	.+2      	; 0x3400 <MDIO_stderrSetPinValue+0x24>
    33fe:	07 c1       	rjmp	.+526    	; 0x360e <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	82 30       	cpi	r24, 0x02	; 2
    3404:	09 f0       	breq	.+2      	; 0x3408 <MDIO_stderrSetPinValue+0x2c>
    3406:	7c c0       	rjmp	.+248    	; 0x3500 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	38 87       	std	Y+8, r19	; 0x08
    3410:	2f 83       	std	Y+7, r18	; 0x07
    3412:	8f 81       	ldd	r24, Y+7	; 0x07
    3414:	98 85       	ldd	r25, Y+8	; 0x08
    3416:	82 30       	cpi	r24, 0x02	; 2
    3418:	91 05       	cpc	r25, r1
    341a:	69 f1       	breq	.+90     	; 0x3476 <MDIO_stderrSetPinValue+0x9a>
    341c:	2f 81       	ldd	r18, Y+7	; 0x07
    341e:	38 85       	ldd	r19, Y+8	; 0x08
    3420:	23 30       	cpi	r18, 0x03	; 3
    3422:	31 05       	cpc	r19, r1
    3424:	34 f4       	brge	.+12     	; 0x3432 <MDIO_stderrSetPinValue+0x56>
    3426:	8f 81       	ldd	r24, Y+7	; 0x07
    3428:	98 85       	ldd	r25, Y+8	; 0x08
    342a:	81 30       	cpi	r24, 0x01	; 1
    342c:	91 05       	cpc	r25, r1
    342e:	69 f0       	breq	.+26     	; 0x344a <MDIO_stderrSetPinValue+0x6e>
    3430:	64 c0       	rjmp	.+200    	; 0x34fa <MDIO_stderrSetPinValue+0x11e>
    3432:	2f 81       	ldd	r18, Y+7	; 0x07
    3434:	38 85       	ldd	r19, Y+8	; 0x08
    3436:	23 30       	cpi	r18, 0x03	; 3
    3438:	31 05       	cpc	r19, r1
    343a:	99 f1       	breq	.+102    	; 0x34a2 <MDIO_stderrSetPinValue+0xc6>
    343c:	8f 81       	ldd	r24, Y+7	; 0x07
    343e:	98 85       	ldd	r25, Y+8	; 0x08
    3440:	84 30       	cpi	r24, 0x04	; 4
    3442:	91 05       	cpc	r25, r1
    3444:	09 f4       	brne	.+2      	; 0x3448 <MDIO_stderrSetPinValue+0x6c>
    3446:	43 c0       	rjmp	.+134    	; 0x34ce <MDIO_stderrSetPinValue+0xf2>
    3448:	58 c0       	rjmp	.+176    	; 0x34fa <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    344a:	a9 e3       	ldi	r26, 0x39	; 57
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e9 e3       	ldi	r30, 0x39	; 57
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	48 2f       	mov	r20, r24
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	02 2e       	mov	r0, r18
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <MDIO_stderrSetPinValue+0x8c>
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	0a 94       	dec	r0
    346a:	e2 f7       	brpl	.-8      	; 0x3464 <MDIO_stderrSetPinValue+0x88>
    346c:	84 2b       	or	r24, r20
    346e:	12 96       	adiw	r26, 0x02	; 2
    3470:	8c 93       	st	X, r24
    3472:	12 97       	sbiw	r26, 0x02	; 2
    3474:	ce c0       	rjmp	.+412    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    3476:	a6 e3       	ldi	r26, 0x36	; 54
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e6 e3       	ldi	r30, 0x36	; 54
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	48 2f       	mov	r20, r24
    3482:	8b 81       	ldd	r24, Y+3	; 0x03
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	02 2e       	mov	r0, r18
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <MDIO_stderrSetPinValue+0xb8>
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	0a 94       	dec	r0
    3496:	e2 f7       	brpl	.-8      	; 0x3490 <MDIO_stderrSetPinValue+0xb4>
    3498:	84 2b       	or	r24, r20
    349a:	12 96       	adiw	r26, 0x02	; 2
    349c:	8c 93       	st	X, r24
    349e:	12 97       	sbiw	r26, 0x02	; 2
    34a0:	b8 c0       	rjmp	.+368    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    34a2:	a3 e3       	ldi	r26, 0x33	; 51
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e3 e3       	ldi	r30, 0x33	; 51
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	48 2f       	mov	r20, r24
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	28 2f       	mov	r18, r24
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	02 2e       	mov	r0, r18
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <MDIO_stderrSetPinValue+0xe4>
    34bc:	88 0f       	add	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	0a 94       	dec	r0
    34c2:	e2 f7       	brpl	.-8      	; 0x34bc <MDIO_stderrSetPinValue+0xe0>
    34c4:	84 2b       	or	r24, r20
    34c6:	12 96       	adiw	r26, 0x02	; 2
    34c8:	8c 93       	st	X, r24
    34ca:	12 97       	sbiw	r26, 0x02	; 2
    34cc:	a2 c0       	rjmp	.+324    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    34ce:	a0 e3       	ldi	r26, 0x30	; 48
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e0 e3       	ldi	r30, 0x30	; 48
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	48 2f       	mov	r20, r24
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	28 2f       	mov	r18, r24
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	02 2e       	mov	r0, r18
    34e6:	02 c0       	rjmp	.+4      	; 0x34ec <MDIO_stderrSetPinValue+0x110>
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	0a 94       	dec	r0
    34ee:	e2 f7       	brpl	.-8      	; 0x34e8 <MDIO_stderrSetPinValue+0x10c>
    34f0:	84 2b       	or	r24, r20
    34f2:	12 96       	adiw	r26, 0x02	; 2
    34f4:	8c 93       	st	X, r24
    34f6:	12 97       	sbiw	r26, 0x02	; 2
    34f8:	8c c0       	rjmp	.+280    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	89 c0       	rjmp	.+274    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    3500:	8c 81       	ldd	r24, Y+4	; 0x04
    3502:	81 30       	cpi	r24, 0x01	; 1
    3504:	09 f0       	breq	.+2      	; 0x3508 <MDIO_stderrSetPinValue+0x12c>
    3506:	80 c0       	rjmp	.+256    	; 0x3608 <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	3e 83       	std	Y+6, r19	; 0x06
    3510:	2d 83       	std	Y+5, r18	; 0x05
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	82 30       	cpi	r24, 0x02	; 2
    3518:	91 05       	cpc	r25, r1
    351a:	71 f1       	breq	.+92     	; 0x3578 <MDIO_stderrSetPinValue+0x19c>
    351c:	2d 81       	ldd	r18, Y+5	; 0x05
    351e:	3e 81       	ldd	r19, Y+6	; 0x06
    3520:	23 30       	cpi	r18, 0x03	; 3
    3522:	31 05       	cpc	r19, r1
    3524:	34 f4       	brge	.+12     	; 0x3532 <MDIO_stderrSetPinValue+0x156>
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	81 30       	cpi	r24, 0x01	; 1
    352c:	91 05       	cpc	r25, r1
    352e:	69 f0       	breq	.+26     	; 0x354a <MDIO_stderrSetPinValue+0x16e>
    3530:	68 c0       	rjmp	.+208    	; 0x3602 <MDIO_stderrSetPinValue+0x226>
    3532:	2d 81       	ldd	r18, Y+5	; 0x05
    3534:	3e 81       	ldd	r19, Y+6	; 0x06
    3536:	23 30       	cpi	r18, 0x03	; 3
    3538:	31 05       	cpc	r19, r1
    353a:	a9 f1       	breq	.+106    	; 0x35a6 <MDIO_stderrSetPinValue+0x1ca>
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	84 30       	cpi	r24, 0x04	; 4
    3542:	91 05       	cpc	r25, r1
    3544:	09 f4       	brne	.+2      	; 0x3548 <MDIO_stderrSetPinValue+0x16c>
    3546:	46 c0       	rjmp	.+140    	; 0x35d4 <MDIO_stderrSetPinValue+0x1f8>
    3548:	5c c0       	rjmp	.+184    	; 0x3602 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    354a:	a9 e3       	ldi	r26, 0x39	; 57
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e9 e3       	ldi	r30, 0x39	; 57
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	48 2f       	mov	r20, r24
    3556:	8b 81       	ldd	r24, Y+3	; 0x03
    3558:	28 2f       	mov	r18, r24
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	02 2e       	mov	r0, r18
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <MDIO_stderrSetPinValue+0x18c>
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	0a 94       	dec	r0
    356a:	e2 f7       	brpl	.-8      	; 0x3564 <MDIO_stderrSetPinValue+0x188>
    356c:	80 95       	com	r24
    356e:	84 23       	and	r24, r20
    3570:	12 96       	adiw	r26, 0x02	; 2
    3572:	8c 93       	st	X, r24
    3574:	12 97       	sbiw	r26, 0x02	; 2
    3576:	4d c0       	rjmp	.+154    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    3578:	a6 e3       	ldi	r26, 0x36	; 54
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	e6 e3       	ldi	r30, 0x36	; 54
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	48 2f       	mov	r20, r24
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	02 2e       	mov	r0, r18
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <MDIO_stderrSetPinValue+0x1ba>
    3592:	88 0f       	add	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	0a 94       	dec	r0
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <MDIO_stderrSetPinValue+0x1b6>
    359a:	80 95       	com	r24
    359c:	84 23       	and	r24, r20
    359e:	12 96       	adiw	r26, 0x02	; 2
    35a0:	8c 93       	st	X, r24
    35a2:	12 97       	sbiw	r26, 0x02	; 2
    35a4:	36 c0       	rjmp	.+108    	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    35a6:	a3 e3       	ldi	r26, 0x33	; 51
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	e3 e3       	ldi	r30, 0x33	; 51
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	48 2f       	mov	r20, r24
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	02 2e       	mov	r0, r18
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <MDIO_stderrSetPinValue+0x1e8>
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	0a 94       	dec	r0
    35c6:	e2 f7       	brpl	.-8      	; 0x35c0 <MDIO_stderrSetPinValue+0x1e4>
    35c8:	80 95       	com	r24
    35ca:	84 23       	and	r24, r20
    35cc:	12 96       	adiw	r26, 0x02	; 2
    35ce:	8c 93       	st	X, r24
    35d0:	12 97       	sbiw	r26, 0x02	; 2
    35d2:	1f c0       	rjmp	.+62     	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    35d4:	a0 e3       	ldi	r26, 0x30	; 48
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e0 e3       	ldi	r30, 0x30	; 48
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	82 81       	ldd	r24, Z+2	; 0x02
    35de:	48 2f       	mov	r20, r24
    35e0:	8b 81       	ldd	r24, Y+3	; 0x03
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	02 2e       	mov	r0, r18
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <MDIO_stderrSetPinValue+0x216>
    35ee:	88 0f       	add	r24, r24
    35f0:	99 1f       	adc	r25, r25
    35f2:	0a 94       	dec	r0
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <MDIO_stderrSetPinValue+0x212>
    35f6:	80 95       	com	r24
    35f8:	84 23       	and	r24, r20
    35fa:	12 96       	adiw	r26, 0x02	; 2
    35fc:	8c 93       	st	X, r24
    35fe:	12 97       	sbiw	r26, 0x02	; 2
    3600:	08 c0       	rjmp	.+16     	; 0x3612 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	05 c0       	rjmp	.+10     	; 0x3612 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3612:	89 81       	ldd	r24, Y+1	; 0x01
}
    3614:	28 96       	adiw	r28, 0x08	; 8
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	f8 94       	cli
    361a:	de bf       	out	0x3e, r29	; 62
    361c:	0f be       	out	0x3f, r0	; 63
    361e:	cd bf       	out	0x3d, r28	; 61
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	27 97       	sbiw	r28, 0x07	; 7
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	9b 83       	std	Y+3, r25	; 0x03
    363c:	8a 83       	std	Y+2, r24	; 0x02
    363e:	6c 83       	std	Y+4, r22	; 0x04
    3640:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    3642:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    3644:	8a 81       	ldd	r24, Y+2	; 0x02
    3646:	9b 81       	ldd	r25, Y+3	; 0x03
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	19 f4       	brne	.+6      	; 0x3652 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	7a c0       	rjmp	.+244    	; 0x3746 <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	88 30       	cpi	r24, 0x08	; 8
    3656:	08 f0       	brcs	.+2      	; 0x365a <MDIO_stderrGetPinValue+0x34>
    3658:	74 c0       	rjmp	.+232    	; 0x3742 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    365a:	8c 81       	ldd	r24, Y+4	; 0x04
    365c:	28 2f       	mov	r18, r24
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	3f 83       	std	Y+7, r19	; 0x07
    3662:	2e 83       	std	Y+6, r18	; 0x06
    3664:	4e 81       	ldd	r20, Y+6	; 0x06
    3666:	5f 81       	ldd	r21, Y+7	; 0x07
    3668:	42 30       	cpi	r20, 0x02	; 2
    366a:	51 05       	cpc	r21, r1
    366c:	59 f1       	breq	.+86     	; 0x36c4 <MDIO_stderrGetPinValue+0x9e>
    366e:	8e 81       	ldd	r24, Y+6	; 0x06
    3670:	9f 81       	ldd	r25, Y+7	; 0x07
    3672:	83 30       	cpi	r24, 0x03	; 3
    3674:	91 05       	cpc	r25, r1
    3676:	34 f4       	brge	.+12     	; 0x3684 <MDIO_stderrGetPinValue+0x5e>
    3678:	2e 81       	ldd	r18, Y+6	; 0x06
    367a:	3f 81       	ldd	r19, Y+7	; 0x07
    367c:	21 30       	cpi	r18, 0x01	; 1
    367e:	31 05       	cpc	r19, r1
    3680:	69 f0       	breq	.+26     	; 0x369c <MDIO_stderrGetPinValue+0x76>
    3682:	5c c0       	rjmp	.+184    	; 0x373c <MDIO_stderrGetPinValue+0x116>
    3684:	4e 81       	ldd	r20, Y+6	; 0x06
    3686:	5f 81       	ldd	r21, Y+7	; 0x07
    3688:	43 30       	cpi	r20, 0x03	; 3
    368a:	51 05       	cpc	r21, r1
    368c:	79 f1       	breq	.+94     	; 0x36ec <MDIO_stderrGetPinValue+0xc6>
    368e:	8e 81       	ldd	r24, Y+6	; 0x06
    3690:	9f 81       	ldd	r25, Y+7	; 0x07
    3692:	84 30       	cpi	r24, 0x04	; 4
    3694:	91 05       	cpc	r25, r1
    3696:	09 f4       	brne	.+2      	; 0x369a <MDIO_stderrGetPinValue+0x74>
    3698:	3d c0       	rjmp	.+122    	; 0x3714 <MDIO_stderrGetPinValue+0xee>
    369a:	50 c0       	rjmp	.+160    	; 0x373c <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    369c:	e9 e3       	ldi	r30, 0x39	; 57
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	28 2f       	mov	r18, r24
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	8d 81       	ldd	r24, Y+5	; 0x05
    36a8:	88 2f       	mov	r24, r24
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a9 01       	movw	r20, r18
    36ae:	02 c0       	rjmp	.+4      	; 0x36b4 <MDIO_stderrGetPinValue+0x8e>
    36b0:	55 95       	asr	r21
    36b2:	47 95       	ror	r20
    36b4:	8a 95       	dec	r24
    36b6:	e2 f7       	brpl	.-8      	; 0x36b0 <MDIO_stderrGetPinValue+0x8a>
    36b8:	ca 01       	movw	r24, r20
    36ba:	81 70       	andi	r24, 0x01	; 1
    36bc:	ea 81       	ldd	r30, Y+2	; 0x02
    36be:	fb 81       	ldd	r31, Y+3	; 0x03
    36c0:	80 83       	st	Z, r24
    36c2:	41 c0       	rjmp	.+130    	; 0x3746 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    36c4:	e6 e3       	ldi	r30, 0x36	; 54
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	28 2f       	mov	r18, r24
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	a9 01       	movw	r20, r18
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <MDIO_stderrGetPinValue+0xb6>
    36d8:	55 95       	asr	r21
    36da:	47 95       	ror	r20
    36dc:	8a 95       	dec	r24
    36de:	e2 f7       	brpl	.-8      	; 0x36d8 <MDIO_stderrGetPinValue+0xb2>
    36e0:	ca 01       	movw	r24, r20
    36e2:	81 70       	andi	r24, 0x01	; 1
    36e4:	ea 81       	ldd	r30, Y+2	; 0x02
    36e6:	fb 81       	ldd	r31, Y+3	; 0x03
    36e8:	80 83       	st	Z, r24
    36ea:	2d c0       	rjmp	.+90     	; 0x3746 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    36ec:	e3 e3       	ldi	r30, 0x33	; 51
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	80 81       	ld	r24, Z
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	8d 81       	ldd	r24, Y+5	; 0x05
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a9 01       	movw	r20, r18
    36fe:	02 c0       	rjmp	.+4      	; 0x3704 <MDIO_stderrGetPinValue+0xde>
    3700:	55 95       	asr	r21
    3702:	47 95       	ror	r20
    3704:	8a 95       	dec	r24
    3706:	e2 f7       	brpl	.-8      	; 0x3700 <MDIO_stderrGetPinValue+0xda>
    3708:	ca 01       	movw	r24, r20
    370a:	81 70       	andi	r24, 0x01	; 1
    370c:	ea 81       	ldd	r30, Y+2	; 0x02
    370e:	fb 81       	ldd	r31, Y+3	; 0x03
    3710:	80 83       	st	Z, r24
    3712:	19 c0       	rjmp	.+50     	; 0x3746 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    3714:	e0 e3       	ldi	r30, 0x30	; 48
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	a9 01       	movw	r20, r18
    3726:	02 c0       	rjmp	.+4      	; 0x372c <MDIO_stderrGetPinValue+0x106>
    3728:	55 95       	asr	r21
    372a:	47 95       	ror	r20
    372c:	8a 95       	dec	r24
    372e:	e2 f7       	brpl	.-8      	; 0x3728 <MDIO_stderrGetPinValue+0x102>
    3730:	ca 01       	movw	r24, r20
    3732:	81 70       	andi	r24, 0x01	; 1
    3734:	ea 81       	ldd	r30, Y+2	; 0x02
    3736:	fb 81       	ldd	r31, Y+3	; 0x03
    3738:	80 83       	st	Z, r24
    373a:	05 c0       	rjmp	.+10     	; 0x3746 <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3746:	89 81       	ldd	r24, Y+1	; 0x01
}
    3748:	27 96       	adiw	r28, 0x07	; 7
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <MDIO_stderrTogglePinValue+0x6>
    3760:	00 d0       	rcall	.+0      	; 0x3762 <MDIO_stderrTogglePinValue+0x8>
    3762:	0f 92       	push	r0
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	8a 83       	std	Y+2, r24	; 0x02
    376a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    376c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	88 30       	cpi	r24, 0x08	; 8
    3772:	08 f0       	brcs	.+2      	; 0x3776 <MDIO_stderrTogglePinValue+0x1c>
    3774:	7c c0       	rjmp	.+248    	; 0x386e <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	28 2f       	mov	r18, r24
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	3d 83       	std	Y+5, r19	; 0x05
    377e:	2c 83       	std	Y+4, r18	; 0x04
    3780:	8c 81       	ldd	r24, Y+4	; 0x04
    3782:	9d 81       	ldd	r25, Y+5	; 0x05
    3784:	82 30       	cpi	r24, 0x02	; 2
    3786:	91 05       	cpc	r25, r1
    3788:	69 f1       	breq	.+90     	; 0x37e4 <MDIO_stderrTogglePinValue+0x8a>
    378a:	2c 81       	ldd	r18, Y+4	; 0x04
    378c:	3d 81       	ldd	r19, Y+5	; 0x05
    378e:	23 30       	cpi	r18, 0x03	; 3
    3790:	31 05       	cpc	r19, r1
    3792:	34 f4       	brge	.+12     	; 0x37a0 <MDIO_stderrTogglePinValue+0x46>
    3794:	8c 81       	ldd	r24, Y+4	; 0x04
    3796:	9d 81       	ldd	r25, Y+5	; 0x05
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	91 05       	cpc	r25, r1
    379c:	69 f0       	breq	.+26     	; 0x37b8 <MDIO_stderrTogglePinValue+0x5e>
    379e:	64 c0       	rjmp	.+200    	; 0x3868 <MDIO_stderrTogglePinValue+0x10e>
    37a0:	2c 81       	ldd	r18, Y+4	; 0x04
    37a2:	3d 81       	ldd	r19, Y+5	; 0x05
    37a4:	23 30       	cpi	r18, 0x03	; 3
    37a6:	31 05       	cpc	r19, r1
    37a8:	99 f1       	breq	.+102    	; 0x3810 <MDIO_stderrTogglePinValue+0xb6>
    37aa:	8c 81       	ldd	r24, Y+4	; 0x04
    37ac:	9d 81       	ldd	r25, Y+5	; 0x05
    37ae:	84 30       	cpi	r24, 0x04	; 4
    37b0:	91 05       	cpc	r25, r1
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <MDIO_stderrTogglePinValue+0x5c>
    37b4:	43 c0       	rjmp	.+134    	; 0x383c <MDIO_stderrTogglePinValue+0xe2>
    37b6:	58 c0       	rjmp	.+176    	; 0x3868 <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    37b8:	a9 e3       	ldi	r26, 0x39	; 57
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e9 e3       	ldi	r30, 0x39	; 57
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	82 81       	ldd	r24, Z+2	; 0x02
    37c2:	48 2f       	mov	r20, r24
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	28 2f       	mov	r18, r24
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	02 2e       	mov	r0, r18
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <MDIO_stderrTogglePinValue+0x7c>
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	0a 94       	dec	r0
    37d8:	e2 f7       	brpl	.-8      	; 0x37d2 <MDIO_stderrTogglePinValue+0x78>
    37da:	84 27       	eor	r24, r20
    37dc:	12 96       	adiw	r26, 0x02	; 2
    37de:	8c 93       	st	X, r24
    37e0:	12 97       	sbiw	r26, 0x02	; 2
    37e2:	47 c0       	rjmp	.+142    	; 0x3872 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    37e4:	a6 e3       	ldi	r26, 0x36	; 54
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	e6 e3       	ldi	r30, 0x36	; 54
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	82 81       	ldd	r24, Z+2	; 0x02
    37ee:	48 2f       	mov	r20, r24
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	28 2f       	mov	r18, r24
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	02 2e       	mov	r0, r18
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <MDIO_stderrTogglePinValue+0xa8>
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	0a 94       	dec	r0
    3804:	e2 f7       	brpl	.-8      	; 0x37fe <MDIO_stderrTogglePinValue+0xa4>
    3806:	84 27       	eor	r24, r20
    3808:	12 96       	adiw	r26, 0x02	; 2
    380a:	8c 93       	st	X, r24
    380c:	12 97       	sbiw	r26, 0x02	; 2
    380e:	31 c0       	rjmp	.+98     	; 0x3872 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    3810:	a3 e3       	ldi	r26, 0x33	; 51
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	e3 e3       	ldi	r30, 0x33	; 51
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	82 81       	ldd	r24, Z+2	; 0x02
    381a:	48 2f       	mov	r20, r24
    381c:	8b 81       	ldd	r24, Y+3	; 0x03
    381e:	28 2f       	mov	r18, r24
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	02 2e       	mov	r0, r18
    3828:	02 c0       	rjmp	.+4      	; 0x382e <MDIO_stderrTogglePinValue+0xd4>
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	0a 94       	dec	r0
    3830:	e2 f7       	brpl	.-8      	; 0x382a <MDIO_stderrTogglePinValue+0xd0>
    3832:	84 27       	eor	r24, r20
    3834:	12 96       	adiw	r26, 0x02	; 2
    3836:	8c 93       	st	X, r24
    3838:	12 97       	sbiw	r26, 0x02	; 2
    383a:	1b c0       	rjmp	.+54     	; 0x3872 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    383c:	a0 e3       	ldi	r26, 0x30	; 48
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e0 e3       	ldi	r30, 0x30	; 48
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	82 81       	ldd	r24, Z+2	; 0x02
    3846:	48 2f       	mov	r20, r24
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	02 2e       	mov	r0, r18
    3854:	02 c0       	rjmp	.+4      	; 0x385a <MDIO_stderrTogglePinValue+0x100>
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	0a 94       	dec	r0
    385c:	e2 f7       	brpl	.-8      	; 0x3856 <MDIO_stderrTogglePinValue+0xfc>
    385e:	84 27       	eor	r24, r20
    3860:	12 96       	adiw	r26, 0x02	; 2
    3862:	8c 93       	st	X, r24
    3864:	12 97       	sbiw	r26, 0x02	; 2
    3866:	05 c0       	rjmp	.+10     	; 0x3872 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	89 83       	std	Y+1, r24	; 0x01
    386c:	02 c0       	rjmp	.+4      	; 0x3872 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    386e:	82 e0       	ldi	r24, 0x02	; 2
    3870:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3872:	89 81       	ldd	r24, Y+1	; 0x01
}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	cf 91       	pop	r28
    3880:	df 91       	pop	r29
    3882:	08 95       	ret

00003884 <main>:
#include "HLCD_interface.h"


void floatToString(f32 num, char* str);

int main(void){
    3884:	df 93       	push	r29
    3886:	cf 93       	push	r28
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	6f 97       	sbiw	r28, 0x1f	; 31
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
	// Initialization  (Run Once)
	char L_charpNumString[6]="0000";
    3898:	ce 01       	movw	r24, r28
    389a:	43 96       	adiw	r24, 0x13	; 19
    389c:	9c 8f       	std	Y+28, r25	; 0x1c
    389e:	8b 8f       	std	Y+27, r24	; 0x1b
    38a0:	ef e6       	ldi	r30, 0x6F	; 111
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	fe 8f       	std	Y+30, r31	; 0x1e
    38a6:	ed 8f       	std	Y+29, r30	; 0x1d
    38a8:	f5 e0       	ldi	r31, 0x05	; 5
    38aa:	ff 8f       	std	Y+31, r31	; 0x1f
    38ac:	ed 8d       	ldd	r30, Y+29	; 0x1d
    38ae:	fe 8d       	ldd	r31, Y+30	; 0x1e
    38b0:	00 80       	ld	r0, Z
    38b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	9e 8f       	std	Y+30, r25	; 0x1e
    38ba:	8d 8f       	std	Y+29, r24	; 0x1d
    38bc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    38be:	fc 8d       	ldd	r31, Y+28	; 0x1c
    38c0:	00 82       	st	Z, r0
    38c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	9c 8f       	std	Y+28, r25	; 0x1c
    38ca:	8b 8f       	std	Y+27, r24	; 0x1b
    38cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38ce:	91 50       	subi	r25, 0x01	; 1
    38d0:	9f 8f       	std	Y+31, r25	; 0x1f
    38d2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    38d4:	ee 23       	and	r30, r30
    38d6:	51 f7       	brne	.-44     	; 0x38ac <main+0x28>
    38d8:	18 8e       	std	Y+24, r1	; 0x18
	f32 L_f32Volt=0;
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	a0 e0       	ldi	r26, 0x00	; 0
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	8f 87       	std	Y+15, r24	; 0x0f
    38e4:	98 8b       	std	Y+16, r25	; 0x10
    38e6:	a9 8b       	std	Y+17, r26	; 0x11
    38e8:	ba 8b       	std	Y+18, r27	; 0x12
	u16 L_u16ADCResult= 0;
    38ea:	1a 8e       	std	Y+26, r1	; 0x1a
    38ec:	19 8e       	std	Y+25, r1	; 0x19

	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_64,MADC_ADJUST_LEFT);
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	66 e0       	ldi	r22, 0x06	; 6
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <MADC_stderrInit>

	HLCD_voidInit();
    38f8:	0e 94 6d 07 	call	0xeda	; 0xeda <HLCD_voidInit>

	while(1){
		// Application (Run )
		MADC_stderrReadADC(&L_u16ADCResult,MADC_SCHANNEL_ADC0);
    38fc:	ce 01       	movw	r24, r28
    38fe:	49 96       	adiw	r24, 0x19	; 25
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	0e 94 80 16 	call	0x2d00	; 0x2d00 <MADC_stderrReadADC>
		//MDIO_stderrSetPortValue(MDIO_PORTB,L_u16ADCResult);
		HLCD_voidClear();
    3906:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <HLCD_voidClear>
		HLCD_voidSetCur(0,0);
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidSetCur>
		HLCD_voidSendString("ADCR:");
    3912:	80 e6       	ldi	r24, 0x60	; 96
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <HLCD_voidSendString>
		HLCD_voidSendNum(L_u16ADCResult);
    391a:	89 8d       	ldd	r24, Y+25	; 0x19
    391c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    391e:	0e 94 98 14 	call	0x2930	; 0x2930 <HLCD_voidSendNum>
		//_delay_ms(1000);
		L_f32Volt = L_u16ADCResult* (5.0/256.0); // volt val conversion
    3922:	89 8d       	ldd	r24, Y+25	; 0x19
    3924:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3926:	cc 01       	movw	r24, r24
    3928:	a0 e0       	ldi	r26, 0x00	; 0
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__floatunsisf>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 ea       	ldi	r20, 0xA0	; 160
    3942:	5c e3       	ldi	r21, 0x3C	; 60
    3944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	8f 87       	std	Y+15, r24	; 0x0f
    394e:	98 8b       	std	Y+16, r25	; 0x10
    3950:	a9 8b       	std	Y+17, r26	; 0x11
    3952:	ba 8b       	std	Y+18, r27	; 0x12
		floatToString(L_f32Volt,L_charpNumString); // convert float to string
    3954:	8f 85       	ldd	r24, Y+15	; 0x0f
    3956:	98 89       	ldd	r25, Y+16	; 0x10
    3958:	a9 89       	ldd	r26, Y+17	; 0x11
    395a:	ba 89       	ldd	r27, Y+18	; 0x12
    395c:	9e 01       	movw	r18, r28
    395e:	2d 5e       	subi	r18, 0xED	; 237
    3960:	3f 4f       	sbci	r19, 0xFF	; 255
    3962:	bc 01       	movw	r22, r24
    3964:	cd 01       	movw	r24, r26
    3966:	a9 01       	movw	r20, r18
    3968:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <floatToString>
		HLCD_voidSetCur(1,1);
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	61 e0       	ldi	r22, 0x01	; 1
    3970:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <HLCD_voidSetCur>
		HLCD_voidSendString("Volt is:");
    3974:	86 e6       	ldi	r24, 0x66	; 102
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <HLCD_voidSendString>
		HLCD_voidSendString(L_charpNumString);
    397c:	ce 01       	movw	r24, r28
    397e:	43 96       	adiw	r24, 0x13	; 19
    3980:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <HLCD_voidSendString>
		HLCD_voidSendChar('V');
    3984:	86 e5       	ldi	r24, 0x56	; 86
    3986:	0e 94 65 10 	call	0x20ca	; 0x20ca <HLCD_voidSendChar>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e8       	ldi	r25, 0x80	; 128
    398e:	ab eb       	ldi	r26, 0xBB	; 187
    3990:	b4 e4       	ldi	r27, 0x44	; 68
    3992:	8b 87       	std	Y+11, r24	; 0x0b
    3994:	9c 87       	std	Y+12, r25	; 0x0c
    3996:	ad 87       	std	Y+13, r26	; 0x0d
    3998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6b 85       	ldd	r22, Y+11	; 0x0b
    399c:	7c 85       	ldd	r23, Y+12	; 0x0c
    399e:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a ef       	ldi	r20, 0xFA	; 250
    39a8:	54 e4       	ldi	r21, 0x44	; 68
    39aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	8f 83       	std	Y+7, r24	; 0x07
    39b4:	98 87       	std	Y+8, r25	; 0x08
    39b6:	a9 87       	std	Y+9, r26	; 0x09
    39b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ba:	6f 81       	ldd	r22, Y+7	; 0x07
    39bc:	78 85       	ldd	r23, Y+8	; 0x08
    39be:	89 85       	ldd	r24, Y+9	; 0x09
    39c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <main+0x158>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e 83       	std	Y+6, r25	; 0x06
    39d8:	8d 83       	std	Y+5, r24	; 0x05
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <main+0x1d6>
	else if (__tmp > 65535)
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <main+0x1b8>
    3a1e:	88 ec       	ldi	r24, 0xC8	; 200
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	9c 83       	std	Y+4, r25	; 0x04
    3a24:	8b 83       	std	Y+3, r24	; 0x03
    3a26:	8b 81       	ldd	r24, Y+3	; 0x03
    3a28:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <main+0x1a6>
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8d 81       	ldd	r24, Y+5	; 0x05
    3a34:	9e 81       	ldd	r25, Y+6	; 0x06
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	9e 83       	std	Y+6, r25	; 0x06
    3a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <main+0x19a>
    3a44:	5b cf       	rjmp	.-330    	; 0x38fc <main+0x78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	9e 83       	std	Y+6, r25	; 0x06
    3a58:	8d 83       	std	Y+5, r24	; 0x05
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5e:	9a 83       	std	Y+2, r25	; 0x02
    3a60:	89 83       	std	Y+1, r24	; 0x01
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	9a 81       	ldd	r25, Y+2	; 0x02
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <main+0x1e2>
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	46 cf       	rjmp	.-372    	; 0x38fc <main+0x78>

00003a70 <floatToString>:
	}
	return 0;
}


void floatToString(f32 num, char* str) {
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	29 97       	sbiw	r28, 0x09	; 9
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	6c 83       	std	Y+4, r22	; 0x04
    3a86:	7d 83       	std	Y+5, r23	; 0x05
    3a88:	8e 83       	std	Y+6, r24	; 0x06
    3a8a:	9f 83       	std	Y+7, r25	; 0x07
    3a8c:	59 87       	std	Y+9, r21	; 0x09
    3a8e:	48 87       	std	Y+8, r20	; 0x08
	*str++='0';
    3a90:	e8 85       	ldd	r30, Y+8	; 0x08
    3a92:	f9 85       	ldd	r31, Y+9	; 0x09
    3a94:	80 e3       	ldi	r24, 0x30	; 48
    3a96:	80 83       	st	Z, r24
    3a98:	88 85       	ldd	r24, Y+8	; 0x08
    3a9a:	99 85       	ldd	r25, Y+9	; 0x09
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	99 87       	std	Y+9, r25	; 0x09
    3aa0:	88 87       	std	Y+8, r24	; 0x08
	*str='.';
    3aa2:	e8 85       	ldd	r30, Y+8	; 0x08
    3aa4:	f9 85       	ldd	r31, Y+9	; 0x09
    3aa6:	8e e2       	ldi	r24, 0x2E	; 46
    3aa8:	80 83       	st	Z, r24

    u8 L_u8Part = (u8)num;
    3aaa:	6c 81       	ldd	r22, Y+4	; 0x04
    3aac:	7d 81       	ldd	r23, Y+5	; 0x05
    3aae:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	8b 83       	std	Y+3, r24	; 0x03
    u8 L_u8fractionalPart = (u8) 100*(num - L_u8Part);
    3abc:	8b 81       	ldd	r24, Y+3	; 0x03
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	aa 27       	eor	r26, r26
    3ac4:	97 fd       	sbrc	r25, 7
    3ac6:	a0 95       	com	r26
    3ac8:	ba 2f       	mov	r27, r26
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3ad2:	9b 01       	movw	r18, r22
    3ad4:	ac 01       	movw	r20, r24
    3ad6:	6c 81       	ldd	r22, Y+4	; 0x04
    3ad8:	7d 81       	ldd	r23, Y+5	; 0x05
    3ada:	8e 81       	ldd	r24, Y+6	; 0x06
    3adc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ade:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	48 ec       	ldi	r20, 0xC8	; 200
    3af0:	52 e4       	ldi	r21, 0x42	; 66
    3af2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	8a 83       	std	Y+2, r24	; 0x02
    3b08:	05 c0       	rjmp	.+10     	; 0x3b14 <floatToString+0xa4>
    u8 L_s8Iterator ;

    // Move pointer to the end of the string
    while (*str != '\0') {
    	str++;
    3b0a:	88 85       	ldd	r24, Y+8	; 0x08
    3b0c:	99 85       	ldd	r25, Y+9	; 0x09
    3b0e:	01 96       	adiw	r24, 0x01	; 1
    3b10:	99 87       	std	Y+9, r25	; 0x09
    3b12:	88 87       	std	Y+8, r24	; 0x08
    u8 L_u8Part = (u8)num;
    u8 L_u8fractionalPart = (u8) 100*(num - L_u8Part);
    u8 L_s8Iterator ;

    // Move pointer to the end of the string
    while (*str != '\0') {
    3b14:	e8 85       	ldd	r30, Y+8	; 0x08
    3b16:	f9 85       	ldd	r31, Y+9	; 0x09
    3b18:	80 81       	ld	r24, Z
    3b1a:	88 23       	and	r24, r24
    3b1c:	b1 f7       	brne	.-20     	; 0x3b0a <floatToString+0x9a>
    	str++;
    }
    str--;
    3b1e:	88 85       	ldd	r24, Y+8	; 0x08
    3b20:	99 85       	ldd	r25, Y+9	; 0x09
    3b22:	01 97       	sbiw	r24, 0x01	; 1
    3b24:	99 87       	std	Y+9, r25	; 0x09
    3b26:	88 87       	std	Y+8, r24	; 0x08



    // Convert fractional part to string with the given precision
    for ( L_s8Iterator = 0; L_s8Iterator < 2; L_s8Iterator++) {
    3b28:	19 82       	std	Y+1, r1	; 0x01
    3b2a:	18 c0       	rjmp	.+48     	; 0x3b5c <floatToString+0xec>
    	*str=(L_u8fractionalPart%10) +'0';
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	9a e0       	ldi	r25, 0x0A	; 10
    3b30:	69 2f       	mov	r22, r25
    3b32:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__udivmodqi4>
    3b36:	89 2f       	mov	r24, r25
    3b38:	80 5d       	subi	r24, 0xD0	; 208
    3b3a:	e8 85       	ldd	r30, Y+8	; 0x08
    3b3c:	f9 85       	ldd	r31, Y+9	; 0x09
    3b3e:	80 83       	st	Z, r24
    	L_u8fractionalPart/=10;
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	9a e0       	ldi	r25, 0x0A	; 10
    3b44:	69 2f       	mov	r22, r25
    3b46:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__udivmodqi4>
    3b4a:	8a 83       	std	Y+2, r24	; 0x02
    	str--;
    3b4c:	88 85       	ldd	r24, Y+8	; 0x08
    3b4e:	99 85       	ldd	r25, Y+9	; 0x09
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	99 87       	std	Y+9, r25	; 0x09
    3b54:	88 87       	std	Y+8, r24	; 0x08
    str--;



    // Convert fractional part to string with the given precision
    for ( L_s8Iterator = 0; L_s8Iterator < 2; L_s8Iterator++) {
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	8f 5f       	subi	r24, 0xFF	; 255
    3b5a:	89 83       	std	Y+1, r24	; 0x01
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	82 30       	cpi	r24, 0x02	; 2
    3b60:	28 f3       	brcs	.-54     	; 0x3b2c <floatToString+0xbc>
    	L_u8fractionalPart/=10;
    	str--;
    }

    // Add decimal point
    *str = '.';
    3b62:	e8 85       	ldd	r30, Y+8	; 0x08
    3b64:	f9 85       	ldd	r31, Y+9	; 0x09
    3b66:	8e e2       	ldi	r24, 0x2E	; 46
    3b68:	80 83       	st	Z, r24
    str--;
    3b6a:	88 85       	ldd	r24, Y+8	; 0x08
    3b6c:	99 85       	ldd	r25, Y+9	; 0x09
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	99 87       	std	Y+9, r25	; 0x09
    3b72:	88 87       	std	Y+8, r24	; 0x08
    3b74:	15 c0       	rjmp	.+42     	; 0x3ba0 <floatToString+0x130>
    for(;L_u8Part!=0;str--)
    {
    	*str=(L_u8Part%10) +'0';
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	9a e0       	ldi	r25, 0x0A	; 10
    3b7a:	69 2f       	mov	r22, r25
    3b7c:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__udivmodqi4>
    3b80:	89 2f       	mov	r24, r25
    3b82:	80 5d       	subi	r24, 0xD0	; 208
    3b84:	e8 85       	ldd	r30, Y+8	; 0x08
    3b86:	f9 85       	ldd	r31, Y+9	; 0x09
    3b88:	80 83       	st	Z, r24
    	L_u8Part/=10;
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	9a e0       	ldi	r25, 0x0A	; 10
    3b8e:	69 2f       	mov	r22, r25
    3b90:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__udivmodqi4>
    3b94:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Add decimal point
    *str = '.';
    str--;
    for(;L_u8Part!=0;str--)
    3b96:	88 85       	ldd	r24, Y+8	; 0x08
    3b98:	99 85       	ldd	r25, Y+9	; 0x09
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	99 87       	std	Y+9, r25	; 0x09
    3b9e:	88 87       	std	Y+8, r24	; 0x08
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	88 23       	and	r24, r24
    3ba4:	41 f7       	brne	.-48     	; 0x3b76 <floatToString+0x106>
    {
    	*str=(L_u8Part%10) +'0';
    	L_u8Part/=10;
    }

}
    3ba6:	29 96       	adiw	r28, 0x09	; 9
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <__udivmodqi4>:
    3bb8:	99 1b       	sub	r25, r25
    3bba:	79 e0       	ldi	r23, 0x09	; 9
    3bbc:	04 c0       	rjmp	.+8      	; 0x3bc6 <__udivmodqi4_ep>

00003bbe <__udivmodqi4_loop>:
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	96 17       	cp	r25, r22
    3bc2:	08 f0       	brcs	.+2      	; 0x3bc6 <__udivmodqi4_ep>
    3bc4:	96 1b       	sub	r25, r22

00003bc6 <__udivmodqi4_ep>:
    3bc6:	88 1f       	adc	r24, r24
    3bc8:	7a 95       	dec	r23
    3bca:	c9 f7       	brne	.-14     	; 0x3bbe <__udivmodqi4_loop>
    3bcc:	80 95       	com	r24
    3bce:	08 95       	ret

00003bd0 <__udivmodhi4>:
    3bd0:	aa 1b       	sub	r26, r26
    3bd2:	bb 1b       	sub	r27, r27
    3bd4:	51 e1       	ldi	r21, 0x11	; 17
    3bd6:	07 c0       	rjmp	.+14     	; 0x3be6 <__udivmodhi4_ep>

00003bd8 <__udivmodhi4_loop>:
    3bd8:	aa 1f       	adc	r26, r26
    3bda:	bb 1f       	adc	r27, r27
    3bdc:	a6 17       	cp	r26, r22
    3bde:	b7 07       	cpc	r27, r23
    3be0:	10 f0       	brcs	.+4      	; 0x3be6 <__udivmodhi4_ep>
    3be2:	a6 1b       	sub	r26, r22
    3be4:	b7 0b       	sbc	r27, r23

00003be6 <__udivmodhi4_ep>:
    3be6:	88 1f       	adc	r24, r24
    3be8:	99 1f       	adc	r25, r25
    3bea:	5a 95       	dec	r21
    3bec:	a9 f7       	brne	.-22     	; 0x3bd8 <__udivmodhi4_loop>
    3bee:	80 95       	com	r24
    3bf0:	90 95       	com	r25
    3bf2:	bc 01       	movw	r22, r24
    3bf4:	cd 01       	movw	r24, r26
    3bf6:	08 95       	ret

00003bf8 <__prologue_saves__>:
    3bf8:	2f 92       	push	r2
    3bfa:	3f 92       	push	r3
    3bfc:	4f 92       	push	r4
    3bfe:	5f 92       	push	r5
    3c00:	6f 92       	push	r6
    3c02:	7f 92       	push	r7
    3c04:	8f 92       	push	r8
    3c06:	9f 92       	push	r9
    3c08:	af 92       	push	r10
    3c0a:	bf 92       	push	r11
    3c0c:	cf 92       	push	r12
    3c0e:	df 92       	push	r13
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	cd b7       	in	r28, 0x3d	; 61
    3c1e:	de b7       	in	r29, 0x3e	; 62
    3c20:	ca 1b       	sub	r28, r26
    3c22:	db 0b       	sbc	r29, r27
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	09 94       	ijmp

00003c30 <__epilogue_restores__>:
    3c30:	2a 88       	ldd	r2, Y+18	; 0x12
    3c32:	39 88       	ldd	r3, Y+17	; 0x11
    3c34:	48 88       	ldd	r4, Y+16	; 0x10
    3c36:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c38:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c40:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c42:	b9 84       	ldd	r11, Y+9	; 0x09
    3c44:	c8 84       	ldd	r12, Y+8	; 0x08
    3c46:	df 80       	ldd	r13, Y+7	; 0x07
    3c48:	ee 80       	ldd	r14, Y+6	; 0x06
    3c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c4c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c4e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c50:	aa 81       	ldd	r26, Y+2	; 0x02
    3c52:	b9 81       	ldd	r27, Y+1	; 0x01
    3c54:	ce 0f       	add	r28, r30
    3c56:	d1 1d       	adc	r29, r1
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
    3c62:	ed 01       	movw	r28, r26
    3c64:	08 95       	ret

00003c66 <_exit>:
    3c66:	f8 94       	cli

00003c68 <__stop_program>:
    3c68:	ff cf       	rjmp	.-2      	; 0x3c68 <__stop_program>
