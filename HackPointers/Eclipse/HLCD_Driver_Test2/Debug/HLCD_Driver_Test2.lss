
HLCD_Driver_Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000029ac  00002a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001aac  00000000  00000000  00002a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b2c  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000532b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007370  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000093f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a0c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3d 12 	call	0x247a	; 0x247a <main>
      7a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e8       	ldi	r26, 0x81	; 129
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e8       	ldi	r24, 0x81	; 129
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	61 e8       	ldi	r22, 0x81	; 129
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_config.h"
#include "HLCD_interface.h"


void HLCD_voidInit(void){
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c6 55       	subi	r28, 0x56	; 86
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	
	/* init direction */
	HLCD_DATA_PORT_INIT();
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	6f ef       	ldi	r22, 0xFF	; 255
     cac:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <MDIO_stderrSetPortDirection>
	HLCD_CTRL_INIT(HLCD_RS_PIN);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <MDIO_stderrSetPinDirection>
	
	HLCD_voidSendCmd(HLCD_FUNCTION_SET);
     cce:	8c e3       	ldi	r24, 0x3C	; 60
     cd0:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
     cd4:	fe 01       	movw	r30, r28
     cd6:	ed 5a       	subi	r30, 0xAD	; 173
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a8 e4       	ldi	r26, 0x48	; 72
     ce0:	b2 e4       	ldi	r27, 0x42	; 66
     ce2:	80 83       	st	Z, r24
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	a2 83       	std	Z+2, r26	; 0x02
     ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cea:	8e 01       	movw	r16, r28
     cec:	01 5b       	subi	r16, 0xB1	; 177
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	ed 5a       	subi	r30, 0xAD	; 173
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	2b ea       	ldi	r18, 0xAB	; 171
     d00:	3a ea       	ldi	r19, 0xAA	; 170
     d02:	4a e2       	ldi	r20, 0x2A	; 42
     d04:	50 e4       	ldi	r21, 0x40	; 64
     d06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	a2 83       	std	Z+2, r26	; 0x02
     d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d18:	fe 01       	movw	r30, r28
     d1a:	e1 5b       	subi	r30, 0xB1	; 177
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	34 f4       	brge	.+12     	; 0xd42 <HLCD_voidInit+0xb4>
		__ticks = 1;
     d36:	fe 01       	movw	r30, r28
     d38:	e2 5b       	subi	r30, 0xB2	; 178
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24
     d40:	e0 c0       	rjmp	.+448    	; 0xf02 <HLCD_voidInit+0x274>
	else if (__tmp > 255)
     d42:	fe 01       	movw	r30, r28
     d44:	e1 5b       	subi	r30, 0xB1	; 177
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	53 e4       	ldi	r21, 0x43	; 67
     d58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	0c f0       	brlt	.+2      	; 0xd62 <HLCD_voidInit+0xd4>
     d60:	c0 c0       	rjmp	.+384    	; 0xee2 <HLCD_voidInit+0x254>
	{
		_delay_ms(__us / 1000.0);
     d62:	fe 01       	movw	r30, r28
     d64:	ed 5a       	subi	r30, 0xAD	; 173
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	fe 01       	movw	r30, r28
     d82:	e6 5b       	subi	r30, 0xB6	; 182
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8e:	8e 01       	movw	r16, r28
     d90:	0a 5b       	subi	r16, 0xBA	; 186
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	fe 01       	movw	r30, r28
     d96:	e6 5b       	subi	r30, 0xB6	; 182
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a ef       	ldi	r20, 0xFA	; 250
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	f8 01       	movw	r30, r16
     db4:	80 83       	st	Z, r24
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	a2 83       	std	Z+2, r26	; 0x02
     dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dbc:	fe 01       	movw	r30, r28
     dbe:	ea 5b       	subi	r30, 0xBA	; 186
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	44 f4       	brge	.+16     	; 0xdea <HLCD_voidInit+0x15c>
		__ticks = 1;
     dda:	fe 01       	movw	r30, r28
     ddc:	ec 5b       	subi	r30, 0xBC	; 188
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	64 c0       	rjmp	.+200    	; 0xeb2 <HLCD_voidInit+0x224>
	else if (__tmp > 65535)
     dea:	fe 01       	movw	r30, r28
     dec:	ea 5b       	subi	r30, 0xBA	; 186
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	0c f0       	brlt	.+2      	; 0xe0a <HLCD_voidInit+0x17c>
     e08:	43 c0       	rjmp	.+134    	; 0xe90 <HLCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0a:	fe 01       	movw	r30, r28
     e0c:	e6 5b       	subi	r30, 0xB6	; 182
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8e 01       	movw	r16, r28
     e2a:	0c 5b       	subi	r16, 0xBC	; 188
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
     e40:	1f c0       	rjmp	.+62     	; 0xe80 <HLCD_voidInit+0x1f2>
     e42:	fe 01       	movw	r30, r28
     e44:	ee 5b       	subi	r30, 0xBE	; 190
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e50:	fe 01       	movw	r30, r28
     e52:	ee 5b       	subi	r30, 0xBE	; 190
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <HLCD_voidInit+0x1cc>
     e5e:	fe 01       	movw	r30, r28
     e60:	ee 5b       	subi	r30, 0xBE	; 190
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	de 01       	movw	r26, r28
     e6a:	ac 5b       	subi	r26, 0xBC	; 188
     e6c:	bf 4f       	sbci	r27, 0xFF	; 255
     e6e:	fe 01       	movw	r30, r28
     e70:	ec 5b       	subi	r30, 0xBC	; 188
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	9c 93       	st	X, r25
     e7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e80:	fe 01       	movw	r30, r28
     e82:	ec 5b       	subi	r30, 0xBC	; 188
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	d1 f6       	brne	.-76     	; 0xe42 <HLCD_voidInit+0x1b4>
     e8e:	42 c0       	rjmp	.+132    	; 0xf14 <HLCD_voidInit+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	8e 01       	movw	r16, r28
     e92:	0c 5b       	subi	r16, 0xBC	; 188
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	fe 01       	movw	r30, r28
     e98:	ea 5b       	subi	r30, 0xBA	; 186
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	f8 01       	movw	r30, r16
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
     eb2:	de 01       	movw	r26, r28
     eb4:	a0 5c       	subi	r26, 0xC0	; 192
     eb6:	bf 4f       	sbci	r27, 0xFF	; 255
     eb8:	fe 01       	movw	r30, r28
     eba:	ec 5b       	subi	r30, 0xBC	; 188
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	11 96       	adiw	r26, 0x01	; 1
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	fe 01       	movw	r30, r28
     eca:	e0 5c       	subi	r30, 0xC0	; 192
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <HLCD_voidInit+0x244>
     ed6:	fe 01       	movw	r30, r28
     ed8:	e0 5c       	subi	r30, 0xC0	; 192
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	19 c0       	rjmp	.+50     	; 0xf14 <HLCD_voidInit+0x286>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ee2:	8e 01       	movw	r16, r28
     ee4:	02 5b       	subi	r16, 0xB2	; 178
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	fe 01       	movw	r30, r28
     eea:	e1 5b       	subi	r30, 0xB1	; 177
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	fe 01       	movw	r30, r28
     f04:	e2 5b       	subi	r30, 0xB2	; 178
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 81       	ld	r24, Z
     f0a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f0c:	8f ad       	ldd	r24, Y+63	; 0x3f
     f0e:	8a 95       	dec	r24
     f10:	f1 f7       	brne	.-4      	; 0xf0e <HLCD_voidInit+0x280>
     f12:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(50);
	HLCD_voidSendCmd(HLCD_ENTRY_MODE_SET);
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a8 e4       	ldi	r26, 0x48	; 72
     f20:	b2 e4       	ldi	r27, 0x42	; 66
     f22:	8b af       	std	Y+59, r24	; 0x3b
     f24:	9c af       	std	Y+60, r25	; 0x3c
     f26:	ad af       	std	Y+61, r26	; 0x3d
     f28:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f2a:	6b ad       	ldd	r22, Y+59	; 0x3b
     f2c:	7c ad       	ldd	r23, Y+60	; 0x3c
     f2e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f30:	9e ad       	ldd	r25, Y+62	; 0x3e
     f32:	2b ea       	ldi	r18, 0xAB	; 171
     f34:	3a ea       	ldi	r19, 0xAA	; 170
     f36:	4a e2       	ldi	r20, 0x2A	; 42
     f38:	50 e4       	ldi	r21, 0x40	; 64
     f3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	8f ab       	std	Y+55, r24	; 0x37
     f44:	98 af       	std	Y+56, r25	; 0x38
     f46:	a9 af       	std	Y+57, r26	; 0x39
     f48:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     f4a:	6f a9       	ldd	r22, Y+55	; 0x37
     f4c:	78 ad       	ldd	r23, Y+56	; 0x38
     f4e:	89 ad       	ldd	r24, Y+57	; 0x39
     f50:	9a ad       	ldd	r25, Y+58	; 0x3a
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e8       	ldi	r20, 0x80	; 128
     f58:	5f e3       	ldi	r21, 0x3F	; 63
     f5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f5e:	88 23       	and	r24, r24
     f60:	1c f4       	brge	.+6      	; 0xf68 <HLCD_voidInit+0x2da>
		__ticks = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	8e ab       	std	Y+54, r24	; 0x36
     f66:	91 c0       	rjmp	.+290    	; 0x108a <HLCD_voidInit+0x3fc>
	else if (__tmp > 255)
     f68:	6f a9       	ldd	r22, Y+55	; 0x37
     f6a:	78 ad       	ldd	r23, Y+56	; 0x38
     f6c:	89 ad       	ldd	r24, Y+57	; 0x39
     f6e:	9a ad       	ldd	r25, Y+58	; 0x3a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	0c f0       	brlt	.+2      	; 0xf82 <HLCD_voidInit+0x2f4>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <HLCD_voidInit+0x3ea>
	{
		_delay_ms(__us / 1000.0);
     f82:	6b ad       	ldd	r22, Y+59	; 0x3b
     f84:	7c ad       	ldd	r23, Y+60	; 0x3c
     f86:	8d ad       	ldd	r24, Y+61	; 0x3d
     f88:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a e7       	ldi	r20, 0x7A	; 122
     f90:	54 e4       	ldi	r21, 0x44	; 68
     f92:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8a ab       	std	Y+50, r24	; 0x32
     f9c:	9b ab       	std	Y+51, r25	; 0x33
     f9e:	ac ab       	std	Y+52, r26	; 0x34
     fa0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa2:	6a a9       	ldd	r22, Y+50	; 0x32
     fa4:	7b a9       	ldd	r23, Y+51	; 0x33
     fa6:	8c a9       	ldd	r24, Y+52	; 0x34
     fa8:	9d a9       	ldd	r25, Y+53	; 0x35
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	4a ef       	ldi	r20, 0xFA	; 250
     fb0:	54 e4       	ldi	r21, 0x44	; 68
     fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	8e a7       	std	Y+46, r24	; 0x2e
     fbc:	9f a7       	std	Y+47, r25	; 0x2f
     fbe:	a8 ab       	std	Y+48, r26	; 0x30
     fc0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     fc2:	6e a5       	ldd	r22, Y+46	; 0x2e
     fc4:	7f a5       	ldd	r23, Y+47	; 0x2f
     fc6:	88 a9       	ldd	r24, Y+48	; 0x30
     fc8:	99 a9       	ldd	r25, Y+49	; 0x31
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e8       	ldi	r20, 0x80	; 128
     fd0:	5f e3       	ldi	r21, 0x3F	; 63
     fd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fd6:	88 23       	and	r24, r24
     fd8:	2c f4       	brge	.+10     	; 0xfe4 <HLCD_voidInit+0x356>
		__ticks = 1;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9d a7       	std	Y+45, r25	; 0x2d
     fe0:	8c a7       	std	Y+44, r24	; 0x2c
     fe2:	3f c0       	rjmp	.+126    	; 0x1062 <HLCD_voidInit+0x3d4>
	else if (__tmp > 65535)
     fe4:	6e a5       	ldd	r22, Y+46	; 0x2e
     fe6:	7f a5       	ldd	r23, Y+47	; 0x2f
     fe8:	88 a9       	ldd	r24, Y+48	; 0x30
     fea:	99 a9       	ldd	r25, Y+49	; 0x31
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	3f ef       	ldi	r19, 0xFF	; 255
     ff0:	4f e7       	ldi	r20, 0x7F	; 127
     ff2:	57 e4       	ldi	r21, 0x47	; 71
     ff4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	4c f5       	brge	.+82     	; 0x104e <HLCD_voidInit+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffc:	6a a9       	ldd	r22, Y+50	; 0x32
     ffe:	7b a9       	ldd	r23, Y+51	; 0x33
    1000:	8c a9       	ldd	r24, Y+52	; 0x34
    1002:	9d a9       	ldd	r25, Y+53	; 0x35
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e2       	ldi	r20, 0x20	; 32
    100a:	51 e4       	ldi	r21, 0x41	; 65
    100c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	bc 01       	movw	r22, r24
    1016:	cd 01       	movw	r24, r26
    1018:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	9d a7       	std	Y+45, r25	; 0x2d
    1022:	8c a7       	std	Y+44, r24	; 0x2c
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <HLCD_voidInit+0x3b6>
    1026:	88 ec       	ldi	r24, 0xC8	; 200
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9b a7       	std	Y+43, r25	; 0x2b
    102c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    102e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1030:	9b a5       	ldd	r25, Y+43	; 0x2b
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <HLCD_voidInit+0x3a4>
    1036:	9b a7       	std	Y+43, r25	; 0x2b
    1038:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103a:	8c a5       	ldd	r24, Y+44	; 0x2c
    103c:	9d a5       	ldd	r25, Y+45	; 0x2d
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	9d a7       	std	Y+45, r25	; 0x2d
    1042:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1044:	8c a5       	ldd	r24, Y+44	; 0x2c
    1046:	9d a5       	ldd	r25, Y+45	; 0x2d
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	69 f7       	brne	.-38     	; 0x1026 <HLCD_voidInit+0x398>
    104c:	24 c0       	rjmp	.+72     	; 0x1096 <HLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1050:	7f a5       	ldd	r23, Y+47	; 0x2f
    1052:	88 a9       	ldd	r24, Y+48	; 0x30
    1054:	99 a9       	ldd	r25, Y+49	; 0x31
    1056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9d a7       	std	Y+45, r25	; 0x2d
    1060:	8c a7       	std	Y+44, r24	; 0x2c
    1062:	8c a5       	ldd	r24, Y+44	; 0x2c
    1064:	9d a5       	ldd	r25, Y+45	; 0x2d
    1066:	99 a7       	std	Y+41, r25	; 0x29
    1068:	88 a7       	std	Y+40, r24	; 0x28
    106a:	88 a5       	ldd	r24, Y+40	; 0x28
    106c:	99 a5       	ldd	r25, Y+41	; 0x29
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	f1 f7       	brne	.-4      	; 0x106e <HLCD_voidInit+0x3e0>
    1072:	99 a7       	std	Y+41, r25	; 0x29
    1074:	88 a7       	std	Y+40, r24	; 0x28
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <HLCD_voidInit+0x408>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1078:	6f a9       	ldd	r22, Y+55	; 0x37
    107a:	78 ad       	ldd	r23, Y+56	; 0x38
    107c:	89 ad       	ldd	r24, Y+57	; 0x39
    107e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	8e ab       	std	Y+54, r24	; 0x36
    108a:	8e a9       	ldd	r24, Y+54	; 0x36
    108c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    108e:	8f a1       	ldd	r24, Y+39	; 0x27
    1090:	8a 95       	dec	r24
    1092:	f1 f7       	brne	.-4      	; 0x1090 <HLCD_voidInit+0x402>
    1094:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	HLCD_voidSendCmd(HLCD_DISPLAY_ON);
    1096:	8f e0       	ldi	r24, 0x0F	; 15
    1098:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a8 e4       	ldi	r26, 0x48	; 72
    10a2:	b2 e4       	ldi	r27, 0x42	; 66
    10a4:	8b a3       	std	Y+35, r24	; 0x23
    10a6:	9c a3       	std	Y+36, r25	; 0x24
    10a8:	ad a3       	std	Y+37, r26	; 0x25
    10aa:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10ac:	6b a1       	ldd	r22, Y+35	; 0x23
    10ae:	7c a1       	ldd	r23, Y+36	; 0x24
    10b0:	8d a1       	ldd	r24, Y+37	; 0x25
    10b2:	9e a1       	ldd	r25, Y+38	; 0x26
    10b4:	2b ea       	ldi	r18, 0xAB	; 171
    10b6:	3a ea       	ldi	r19, 0xAA	; 170
    10b8:	4a e2       	ldi	r20, 0x2A	; 42
    10ba:	50 e4       	ldi	r21, 0x40	; 64
    10bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	8f 8f       	std	Y+31, r24	; 0x1f
    10c6:	98 a3       	std	Y+32, r25	; 0x20
    10c8:	a9 a3       	std	Y+33, r26	; 0x21
    10ca:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    10cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10ce:	78 a1       	ldd	r23, Y+32	; 0x20
    10d0:	89 a1       	ldd	r24, Y+33	; 0x21
    10d2:	9a a1       	ldd	r25, Y+34	; 0x22
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	1c f4       	brge	.+6      	; 0x10ea <HLCD_voidInit+0x45c>
		__ticks = 1;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	8e 8f       	std	Y+30, r24	; 0x1e
    10e8:	91 c0       	rjmp	.+290    	; 0x120c <HLCD_voidInit+0x57e>
	else if (__tmp > 255)
    10ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10ec:	78 a1       	ldd	r23, Y+32	; 0x20
    10ee:	89 a1       	ldd	r24, Y+33	; 0x21
    10f0:	9a a1       	ldd	r25, Y+34	; 0x22
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	0c f0       	brlt	.+2      	; 0x1104 <HLCD_voidInit+0x476>
    1102:	7b c0       	rjmp	.+246    	; 0x11fa <HLCD_voidInit+0x56c>
	{
		_delay_ms(__us / 1000.0);
    1104:	6b a1       	ldd	r22, Y+35	; 0x23
    1106:	7c a1       	ldd	r23, Y+36	; 0x24
    1108:	8d a1       	ldd	r24, Y+37	; 0x25
    110a:	9e a1       	ldd	r25, Y+38	; 0x26
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a e7       	ldi	r20, 0x7A	; 122
    1112:	54 e4       	ldi	r21, 0x44	; 68
    1114:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	8a 8f       	std	Y+26, r24	; 0x1a
    111e:	9b 8f       	std	Y+27, r25	; 0x1b
    1120:	ac 8f       	std	Y+28, r26	; 0x1c
    1122:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1126:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1128:	8c 8d       	ldd	r24, Y+28	; 0x1c
    112a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a ef       	ldi	r20, 0xFA	; 250
    1132:	54 e4       	ldi	r21, 0x44	; 68
    1134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8e 8b       	std	Y+22, r24	; 0x16
    113e:	9f 8b       	std	Y+23, r25	; 0x17
    1140:	a8 8f       	std	Y+24, r26	; 0x18
    1142:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1144:	6e 89       	ldd	r22, Y+22	; 0x16
    1146:	7f 89       	ldd	r23, Y+23	; 0x17
    1148:	88 8d       	ldd	r24, Y+24	; 0x18
    114a:	99 8d       	ldd	r25, Y+25	; 0x19
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <HLCD_voidInit+0x4d8>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9d 8b       	std	Y+21, r25	; 0x15
    1162:	8c 8b       	std	Y+20, r24	; 0x14
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <HLCD_voidInit+0x556>
	else if (__tmp > 65535)
    1166:	6e 89       	ldd	r22, Y+22	; 0x16
    1168:	7f 89       	ldd	r23, Y+23	; 0x17
    116a:	88 8d       	ldd	r24, Y+24	; 0x18
    116c:	99 8d       	ldd	r25, Y+25	; 0x19
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <HLCD_voidInit+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1180:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1182:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1184:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9d 8b       	std	Y+21, r25	; 0x15
    11a4:	8c 8b       	std	Y+20, r24	; 0x14
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <HLCD_voidInit+0x538>
    11a8:	88 ec       	ldi	r24, 0xC8	; 200
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9b 8b       	std	Y+19, r25	; 0x13
    11ae:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b0:	8a 89       	ldd	r24, Y+18	; 0x12
    11b2:	9b 89       	ldd	r25, Y+19	; 0x13
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <HLCD_voidInit+0x526>
    11b8:	9b 8b       	std	Y+19, r25	; 0x13
    11ba:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	8c 89       	ldd	r24, Y+20	; 0x14
    11be:	9d 89       	ldd	r25, Y+21	; 0x15
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9d 8b       	std	Y+21, r25	; 0x15
    11c4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	8c 89       	ldd	r24, Y+20	; 0x14
    11c8:	9d 89       	ldd	r25, Y+21	; 0x15
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <HLCD_voidInit+0x51a>
    11ce:	24 c0       	rjmp	.+72     	; 0x1218 <HLCD_voidInit+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6e 89       	ldd	r22, Y+22	; 0x16
    11d2:	7f 89       	ldd	r23, Y+23	; 0x17
    11d4:	88 8d       	ldd	r24, Y+24	; 0x18
    11d6:	99 8d       	ldd	r25, Y+25	; 0x19
    11d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9d 8b       	std	Y+21, r25	; 0x15
    11e2:	8c 8b       	std	Y+20, r24	; 0x14
    11e4:	8c 89       	ldd	r24, Y+20	; 0x14
    11e6:	9d 89       	ldd	r25, Y+21	; 0x15
    11e8:	99 8b       	std	Y+17, r25	; 0x11
    11ea:	88 8b       	std	Y+16, r24	; 0x10
    11ec:	88 89       	ldd	r24, Y+16	; 0x10
    11ee:	99 89       	ldd	r25, Y+17	; 0x11
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <HLCD_voidInit+0x562>
    11f4:	99 8b       	std	Y+17, r25	; 0x11
    11f6:	88 8b       	std	Y+16, r24	; 0x10
    11f8:	0f c0       	rjmp	.+30     	; 0x1218 <HLCD_voidInit+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11fc:	78 a1       	ldd	r23, Y+32	; 0x20
    11fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1200:	9a a1       	ldd	r25, Y+34	; 0x22
    1202:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	8e 8f       	std	Y+30, r24	; 0x1e
    120c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    120e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1210:	8f 85       	ldd	r24, Y+15	; 0x0f
    1212:	8a 95       	dec	r24
    1214:	f1 f7       	brne	.-4      	; 0x1212 <HLCD_voidInit+0x584>
    1216:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e4       	ldi	r27, 0x40	; 64
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <HLCD_voidInit+0x5e2>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <HLCD_voidInit+0x660>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <HLCD_voidInit+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <HLCD_voidInit+0x642>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <HLCD_voidInit+0x630>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <HLCD_voidInit+0x624>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <HLCD_voidInit+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <HLCD_voidInit+0x66c>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	
}
    1302:	ca 5a       	subi	r28, 0xAA	; 170
    1304:	df 4f       	sbci	r29, 0xFF	; 255
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	69 97       	sbiw	r28, 0x19	; 25
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	89 8f       	std	Y+25, r24	; 0x19

	HLCD_RS(MDIO_LOW);
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_HIGH);
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	42 e0       	ldi	r20, 0x02	; 2
    1354:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>

	HLCD_SEND_DATA_PORT(ARG_u8Cmd);	
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	69 8d       	ldd	r22, Y+25	; 0x19
    135c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MDIO_stderrSetPortValue>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e0       	ldi	r26, 0x00	; 0
    1366:	b0 e4       	ldi	r27, 0x40	; 64
    1368:	8d 8b       	std	Y+21, r24	; 0x15
    136a:	9e 8b       	std	Y+22, r25	; 0x16
    136c:	af 8b       	std	Y+23, r26	; 0x17
    136e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1370:	6d 89       	ldd	r22, Y+21	; 0x15
    1372:	7e 89       	ldd	r23, Y+22	; 0x16
    1374:	8f 89       	ldd	r24, Y+23	; 0x17
    1376:	98 8d       	ldd	r25, Y+24	; 0x18
    1378:	2b ea       	ldi	r18, 0xAB	; 171
    137a:	3a ea       	ldi	r19, 0xAA	; 170
    137c:	4a e2       	ldi	r20, 0x2A	; 42
    137e:	50 e4       	ldi	r21, 0x40	; 64
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	89 8b       	std	Y+17, r24	; 0x11
    138a:	9a 8b       	std	Y+18, r25	; 0x12
    138c:	ab 8b       	std	Y+19, r26	; 0x13
    138e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1390:	69 89       	ldd	r22, Y+17	; 0x11
    1392:	7a 89       	ldd	r23, Y+18	; 0x12
    1394:	8b 89       	ldd	r24, Y+19	; 0x13
    1396:	9c 89       	ldd	r25, Y+20	; 0x14
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	1c f4       	brge	.+6      	; 0x13ae <HLCD_voidSendCmd+0x94>
		__ticks = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	88 8b       	std	Y+16, r24	; 0x10
    13ac:	91 c0       	rjmp	.+290    	; 0x14d0 <HLCD_voidSendCmd+0x1b6>
	else if (__tmp > 255)
    13ae:	69 89       	ldd	r22, Y+17	; 0x11
    13b0:	7a 89       	ldd	r23, Y+18	; 0x12
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	53 e4       	ldi	r21, 0x43	; 67
    13be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	0c f0       	brlt	.+2      	; 0x13c8 <HLCD_voidSendCmd+0xae>
    13c6:	7b c0       	rjmp	.+246    	; 0x14be <HLCD_voidSendCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    13c8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ca:	7e 89       	ldd	r23, Y+22	; 0x16
    13cc:	8f 89       	ldd	r24, Y+23	; 0x17
    13ce:	98 8d       	ldd	r25, Y+24	; 0x18
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8c 87       	std	Y+12, r24	; 0x0c
    13e2:	9d 87       	std	Y+13, r25	; 0x0d
    13e4:	ae 87       	std	Y+14, r26	; 0x0e
    13e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    13ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	88 87       	std	Y+8, r24	; 0x08
    1402:	99 87       	std	Y+9, r25	; 0x09
    1404:	aa 87       	std	Y+10, r26	; 0x0a
    1406:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1408:	68 85       	ldd	r22, Y+8	; 0x08
    140a:	79 85       	ldd	r23, Y+9	; 0x09
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <HLCD_voidSendCmd+0x110>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9f 83       	std	Y+7, r25	; 0x07
    1426:	8e 83       	std	Y+6, r24	; 0x06
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <HLCD_voidSendCmd+0x18e>
	else if (__tmp > 65535)
    142a:	68 85       	ldd	r22, Y+8	; 0x08
    142c:	79 85       	ldd	r23, Y+9	; 0x09
    142e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1430:	9b 85       	ldd	r25, Y+11	; 0x0b
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <HLCD_voidSendCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6c 85       	ldd	r22, Y+12	; 0x0c
    1444:	7d 85       	ldd	r23, Y+13	; 0x0d
    1446:	8e 85       	ldd	r24, Y+14	; 0x0e
    1448:	9f 85       	ldd	r25, Y+15	; 0x0f
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9f 83       	std	Y+7, r25	; 0x07
    1468:	8e 83       	std	Y+6, r24	; 0x06
    146a:	0f c0       	rjmp	.+30     	; 0x148a <HLCD_voidSendCmd+0x170>
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9d 83       	std	Y+5, r25	; 0x05
    1472:	8c 83       	std	Y+4, r24	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <HLCD_voidSendCmd+0x15e>
    147c:	9d 83       	std	Y+5, r25	; 0x05
    147e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8e 81       	ldd	r24, Y+6	; 0x06
    1482:	9f 81       	ldd	r25, Y+7	; 0x07
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9f 83       	std	Y+7, r25	; 0x07
    1488:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8e 81       	ldd	r24, Y+6	; 0x06
    148c:	9f 81       	ldd	r25, Y+7	; 0x07
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <HLCD_voidSendCmd+0x152>
    1492:	24 c0       	rjmp	.+72     	; 0x14dc <HLCD_voidSendCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	68 85       	ldd	r22, Y+8	; 0x08
    1496:	79 85       	ldd	r23, Y+9	; 0x09
    1498:	8a 85       	ldd	r24, Y+10	; 0x0a
    149a:	9b 85       	ldd	r25, Y+11	; 0x0b
    149c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9f 83       	std	Y+7, r25	; 0x07
    14a6:	8e 83       	std	Y+6, r24	; 0x06
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	9b 83       	std	Y+3, r25	; 0x03
    14ae:	8a 83       	std	Y+2, r24	; 0x02
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <HLCD_voidSendCmd+0x19a>
    14b8:	9b 83       	std	Y+3, r25	; 0x03
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <HLCD_voidSendCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14be:	69 89       	ldd	r22, Y+17	; 0x11
    14c0:	7a 89       	ldd	r23, Y+18	; 0x12
    14c2:	8b 89       	ldd	r24, Y+19	; 0x13
    14c4:	9c 89       	ldd	r25, Y+20	; 0x14
    14c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	88 8b       	std	Y+16, r24	; 0x10
    14d0:	88 89       	ldd	r24, Y+16	; 0x10
    14d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	8a 95       	dec	r24
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <HLCD_voidSendCmd+0x1bc>
    14da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	HLCD_EN(MDIO_LOW);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	
}
    14e6:	69 96       	adiw	r28, 0x19	; 25
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	69 97       	sbiw	r28, 0x19	; 25
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	89 8f       	std	Y+25, r24	; 0x19
	
	HLCD_RS(MDIO_HIGH);
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	42 e0       	ldi	r20, 0x02	; 2
    1514:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_HIGH);
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	42 e0       	ldi	r20, 0x02	; 2
    1532:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>

	HLCD_SEND_DATA_PORT(ARG_charChar);	
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MDIO_stderrSetPortValue>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	a0 e0       	ldi	r26, 0x00	; 0
    1544:	b0 e4       	ldi	r27, 0x40	; 64
    1546:	8d 8b       	std	Y+21, r24	; 0x15
    1548:	9e 8b       	std	Y+22, r25	; 0x16
    154a:	af 8b       	std	Y+23, r26	; 0x17
    154c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    154e:	6d 89       	ldd	r22, Y+21	; 0x15
    1550:	7e 89       	ldd	r23, Y+22	; 0x16
    1552:	8f 89       	ldd	r24, Y+23	; 0x17
    1554:	98 8d       	ldd	r25, Y+24	; 0x18
    1556:	2b ea       	ldi	r18, 0xAB	; 171
    1558:	3a ea       	ldi	r19, 0xAA	; 170
    155a:	4a e2       	ldi	r20, 0x2A	; 42
    155c:	50 e4       	ldi	r21, 0x40	; 64
    155e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	89 8b       	std	Y+17, r24	; 0x11
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	ab 8b       	std	Y+19, r26	; 0x13
    156c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    156e:	69 89       	ldd	r22, Y+17	; 0x11
    1570:	7a 89       	ldd	r23, Y+18	; 0x12
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e8       	ldi	r20, 0x80	; 128
    157c:	5f e3       	ldi	r21, 0x3F	; 63
    157e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1582:	88 23       	and	r24, r24
    1584:	1c f4       	brge	.+6      	; 0x158c <HLCD_voidSendChar+0x94>
		__ticks = 1;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	88 8b       	std	Y+16, r24	; 0x10
    158a:	91 c0       	rjmp	.+290    	; 0x16ae <HLCD_voidSendChar+0x1b6>
	else if (__tmp > 255)
    158c:	69 89       	ldd	r22, Y+17	; 0x11
    158e:	7a 89       	ldd	r23, Y+18	; 0x12
    1590:	8b 89       	ldd	r24, Y+19	; 0x13
    1592:	9c 89       	ldd	r25, Y+20	; 0x14
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	53 e4       	ldi	r21, 0x43	; 67
    159c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	0c f0       	brlt	.+2      	; 0x15a6 <HLCD_voidSendChar+0xae>
    15a4:	7b c0       	rjmp	.+246    	; 0x169c <HLCD_voidSendChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    15a6:	6d 89       	ldd	r22, Y+21	; 0x15
    15a8:	7e 89       	ldd	r23, Y+22	; 0x16
    15aa:	8f 89       	ldd	r24, Y+23	; 0x17
    15ac:	98 8d       	ldd	r25, Y+24	; 0x18
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a e7       	ldi	r20, 0x7A	; 122
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8c 87       	std	Y+12, r24	; 0x0c
    15c0:	9d 87       	std	Y+13, r25	; 0x0d
    15c2:	ae 87       	std	Y+14, r26	; 0x0e
    15c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    15c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    15ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    15cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	88 87       	std	Y+8, r24	; 0x08
    15e0:	99 87       	std	Y+9, r25	; 0x09
    15e2:	aa 87       	std	Y+10, r26	; 0x0a
    15e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15e6:	68 85       	ldd	r22, Y+8	; 0x08
    15e8:	79 85       	ldd	r23, Y+9	; 0x09
    15ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <HLCD_voidSendChar+0x110>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9f 83       	std	Y+7, r25	; 0x07
    1604:	8e 83       	std	Y+6, r24	; 0x06
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <HLCD_voidSendChar+0x18e>
	else if (__tmp > 65535)
    1608:	68 85       	ldd	r22, Y+8	; 0x08
    160a:	79 85       	ldd	r23, Y+9	; 0x09
    160c:	8a 85       	ldd	r24, Y+10	; 0x0a
    160e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <HLCD_voidSendChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6c 85       	ldd	r22, Y+12	; 0x0c
    1622:	7d 85       	ldd	r23, Y+13	; 0x0d
    1624:	8e 85       	ldd	r24, Y+14	; 0x0e
    1626:	9f 85       	ldd	r25, Y+15	; 0x0f
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9f 83       	std	Y+7, r25	; 0x07
    1646:	8e 83       	std	Y+6, r24	; 0x06
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <HLCD_voidSendChar+0x170>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9d 83       	std	Y+5, r25	; 0x05
    1650:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <HLCD_voidSendChar+0x15e>
    165a:	9d 83       	std	Y+5, r25	; 0x05
    165c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9f 83       	std	Y+7, r25	; 0x07
    1666:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8e 81       	ldd	r24, Y+6	; 0x06
    166a:	9f 81       	ldd	r25, Y+7	; 0x07
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <HLCD_voidSendChar+0x152>
    1670:	24 c0       	rjmp	.+72     	; 0x16ba <HLCD_voidSendChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	68 85       	ldd	r22, Y+8	; 0x08
    1674:	79 85       	ldd	r23, Y+9	; 0x09
    1676:	8a 85       	ldd	r24, Y+10	; 0x0a
    1678:	9b 85       	ldd	r25, Y+11	; 0x0b
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9f 83       	std	Y+7, r25	; 0x07
    1684:	8e 83       	std	Y+6, r24	; 0x06
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	9f 81       	ldd	r25, Y+7	; 0x07
    168a:	9b 83       	std	Y+3, r25	; 0x03
    168c:	8a 83       	std	Y+2, r24	; 0x02
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <HLCD_voidSendChar+0x19a>
    1696:	9b 83       	std	Y+3, r25	; 0x03
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <HLCD_voidSendChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    169c:	69 89       	ldd	r22, Y+17	; 0x11
    169e:	7a 89       	ldd	r23, Y+18	; 0x12
    16a0:	8b 89       	ldd	r24, Y+19	; 0x13
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	88 8b       	std	Y+16, r24	; 0x10
    16ae:	88 89       	ldd	r24, Y+16	; 0x10
    16b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	8a 95       	dec	r24
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <HLCD_voidSendChar+0x1bc>
    16b8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
	HLCD_EN(MDIO_LOW);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <MDIO_stderrSetPinValue>
	
}
    16c4:	69 96       	adiw	r28, 0x19	; 25
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	29 97       	sbiw	r28, 0x09	; 9
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	99 87       	std	Y+9, r25	; 0x09
    16ec:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    16ee:	88 85       	ldd	r24, Y+8	; 0x08
    16f0:	99 85       	ldd	r25, Y+9	; 0x09
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	21 f4       	brne	.+8      	; 0x16fe <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    16f6:	80 e3       	ldi	r24, 0x30	; 48
    16f8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
    16fc:	3d c0       	rjmp	.+122    	; 0x1778 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    16fe:	19 82       	std	Y+1, r1	; 0x01
    1700:	20 c0       	rjmp	.+64     	; 0x1742 <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	e8 2f       	mov	r30, r24
    1706:	ff 27       	eor	r31, r31
    1708:	e7 fd       	sbrc	r30, 7
    170a:	f0 95       	com	r31
    170c:	88 85       	ldd	r24, Y+8	; 0x08
    170e:	99 85       	ldd	r25, Y+9	; 0x09
    1710:	2a e0       	ldi	r18, 0x0A	; 10
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	b9 01       	movw	r22, r18
    1716:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodhi4>
    171a:	28 2f       	mov	r18, r24
    171c:	20 5d       	subi	r18, 0xD0	; 208
    171e:	ce 01       	movw	r24, r28
    1720:	02 96       	adiw	r24, 0x02	; 2
    1722:	e8 0f       	add	r30, r24
    1724:	f9 1f       	adc	r31, r25
    1726:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    1728:	88 85       	ldd	r24, Y+8	; 0x08
    172a:	99 85       	ldd	r25, Y+9	; 0x09
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	b9 01       	movw	r22, r18
    1732:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodhi4>
    1736:	cb 01       	movw	r24, r22
    1738:	99 87       	std	Y+9, r25	; 0x09
    173a:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	88 85       	ldd	r24, Y+8	; 0x08
    1744:	99 85       	ldd	r25, Y+9	; 0x09
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	e1 f6       	brne	.-72     	; 0x1702 <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	81 50       	subi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	10 c0       	rjmp	.+32     	; 0x1772 <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	33 27       	eor	r19, r19
    1758:	27 fd       	sbrc	r18, 7
    175a:	30 95       	com	r19
    175c:	ce 01       	movw	r24, r28
    175e:	02 96       	adiw	r24, 0x02	; 2
    1760:	fc 01       	movw	r30, r24
    1762:	e2 0f       	add	r30, r18
    1764:	f3 1f       	adc	r31, r19
    1766:	80 81       	ld	r24, Z
    1768:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
			L_s8Iterator--;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	81 50       	subi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	8f 3f       	cpi	r24, 0xFF	; 255
    1776:	69 f7       	brne	.-38     	; 0x1752 <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    1778:	29 96       	adiw	r28, 0x09	; 9
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <HLCD_voidSendString+0x6>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	d1 f0       	breq	.+52     	; 0x17d6 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    17a2:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	9b 81       	ldd	r25, Y+3	; 0x03
    17ae:	fc 01       	movw	r30, r24
    17b0:	e2 0f       	add	r30, r18
    17b2:	f3 1f       	adc	r31, r19
    17b4:	80 81       	ld	r24, Z
    17b6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
			L_u8Iterator++;
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ca:	fc 01       	movw	r30, r24
    17cc:	e2 0f       	add	r30, r18
    17ce:	f3 1f       	adc	r31, r19
    17d0:	80 81       	ld	r24, Z
    17d2:	88 23       	and	r24, r24
    17d4:	39 f7       	brne	.-50     	; 0x17a4 <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	61 97       	sbiw	r28, 0x11	; 17
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	88 8b       	std	Y+16, r24	; 0x10
    17f8:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp= ( HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6) );
    17fa:	88 89       	ldd	r24, Y+16	; 0x10
    17fc:	98 2f       	mov	r25, r24
    17fe:	92 95       	swap	r25
    1800:	99 0f       	add	r25, r25
    1802:	99 0f       	add	r25, r25
    1804:	90 7c       	andi	r25, 0xC0	; 192
    1806:	89 89       	ldd	r24, Y+17	; 0x11
    1808:	89 2b       	or	r24, r25
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    180e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1810:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	8b 87       	std	Y+11, r24	; 0x0b
    181e:	9c 87       	std	Y+12, r25	; 0x0c
    1820:	ad 87       	std	Y+13, r26	; 0x0d
    1822:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4a ef       	ldi	r20, 0xFA	; 250
    1832:	54 e4       	ldi	r21, 0x44	; 68
    1834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8f 83       	std	Y+7, r24	; 0x07
    183e:	98 87       	std	Y+8, r25	; 0x08
    1840:	a9 87       	std	Y+9, r26	; 0x09
    1842:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	2c f4       	brge	.+10     	; 0x1866 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	3f c0       	rjmp	.+126    	; 0x18e4 <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    1866:	6f 81       	ldd	r22, Y+7	; 0x07
    1868:	78 85       	ldd	r23, Y+8	; 0x08
    186a:	89 85       	ldd	r24, Y+9	; 0x09
    186c:	9a 85       	ldd	r25, Y+10	; 0x0a
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	3f ef       	ldi	r19, 0xFF	; 255
    1872:	4f e7       	ldi	r20, 0x7F	; 127
    1874:	57 e4       	ldi	r21, 0x47	; 71
    1876:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    187a:	18 16       	cp	r1, r24
    187c:	4c f5       	brge	.+82     	; 0x18d0 <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1880:	7c 85       	ldd	r23, Y+12	; 0x0c
    1882:	8d 85       	ldd	r24, Y+13	; 0x0d
    1884:	9e 85       	ldd	r25, Y+14	; 0x0e
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e2       	ldi	r20, 0x20	; 32
    188c:	51 e4       	ldi	r21, 0x41	; 65
    188e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	bc 01       	movw	r22, r24
    1898:	cd 01       	movw	r24, r26
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <HLCD_voidSetCur+0xe4>
    18a8:	88 ec       	ldi	r24, 0xC8	; 200
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <HLCD_voidSetCur+0xd2>
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <HLCD_voidSetCur+0xc6>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <HLCD_voidSetCur+0x10e>
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

}
    18f8:	61 96       	adiw	r28, 0x11	; 17
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <HLCD_voidClear>:


void HLCD_voidClear(void)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	2e 97       	sbiw	r28, 0x0e	; 14
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e8       	ldi	r26, 0x80	; 128
    192a:	bf e3       	ldi	r27, 0x3F	; 63
    192c:	8b 87       	std	Y+11, r24	; 0x0b
    192e:	9c 87       	std	Y+12, r25	; 0x0c
    1930:	ad 87       	std	Y+13, r26	; 0x0d
    1932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	6b 85       	ldd	r22, Y+11	; 0x0b
    1936:	7c 85       	ldd	r23, Y+12	; 0x0c
    1938:	8d 85       	ldd	r24, Y+13	; 0x0d
    193a:	9e 85       	ldd	r25, Y+14	; 0x0e
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a ef       	ldi	r20, 0xFA	; 250
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8f 83       	std	Y+7, r24	; 0x07
    194e:	98 87       	std	Y+8, r25	; 0x08
    1950:	a9 87       	std	Y+9, r26	; 0x09
    1952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <HLCD_voidClear+0x6c>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <HLCD_voidClear+0xcc>
    19b8:	88 ec       	ldi	r24, 0xC8	; 200
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <HLCD_voidClear+0xba>
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <HLCD_voidClear+0xae>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6f 81       	ldd	r22, Y+7	; 0x07
    19e2:	78 85       	ldd	r23, Y+8	; 0x08
    19e4:	89 85       	ldd	r24, Y+9	; 0x09
    19e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9e 83       	std	Y+6, r25	; 0x06
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <HLCD_voidClear+0xf6>
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1a08:	2e 96       	adiw	r28, 0x0e	; 14
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <MDIO_stderrSetPortDirection+0x6>
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <MDIO_stderrSetPortDirection+0x8>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	8a 83       	std	Y+2, r24	; 0x02
    1a2a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3d 83       	std	Y+5, r19	; 0x05
    1a36:	2c 83       	std	Y+4, r18	; 0x04
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	91 05       	cpc	r25, r1
    1a40:	d9 f0       	breq	.+54     	; 0x1a78 <MDIO_stderrSetPortDirection+0x5e>
    1a42:	2c 81       	ldd	r18, Y+4	; 0x04
    1a44:	3d 81       	ldd	r19, Y+5	; 0x05
    1a46:	23 30       	cpi	r18, 0x03	; 3
    1a48:	31 05       	cpc	r19, r1
    1a4a:	34 f4       	brge	.+12     	; 0x1a58 <MDIO_stderrSetPortDirection+0x3e>
    1a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	91 05       	cpc	r25, r1
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <MDIO_stderrSetPortDirection+0x54>
    1a56:	1f c0       	rjmp	.+62     	; 0x1a96 <MDIO_stderrSetPortDirection+0x7c>
    1a58:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5c:	23 30       	cpi	r18, 0x03	; 3
    1a5e:	31 05       	cpc	r19, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <MDIO_stderrSetPortDirection+0x68>
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	91 05       	cpc	r25, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <MDIO_stderrSetPortDirection+0x72>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    1a6e:	e9 e3       	ldi	r30, 0x39	; 57
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 83       	std	Z+1, r24	; 0x01
    1a76:	11 c0       	rjmp	.+34     	; 0x1a9a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    1a78:	e6 e3       	ldi	r30, 0x36	; 54
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	81 83       	std	Z+1, r24	; 0x01
    1a80:	0c c0       	rjmp	.+24     	; 0x1a9a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    1a82:	e3 e3       	ldi	r30, 0x33	; 51
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	81 83       	std	Z+1, r24	; 0x01
    1a8a:	07 c0       	rjmp	.+14     	; 0x1a9a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    1a8c:	e0 e3       	ldi	r30, 0x30	; 48
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	81 83       	std	Z+1, r24	; 0x01
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <MDIO_stderrSetPortValue+0x6>
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <MDIO_stderrSetPortValue+0x8>
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	8a 83       	std	Y+2, r24	; 0x02
    1abc:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    1abe:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3d 83       	std	Y+5, r19	; 0x05
    1ac8:	2c 83       	std	Y+4, r18	; 0x04
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	d9 f0       	breq	.+54     	; 0x1b0a <MDIO_stderrSetPortValue+0x5e>
    1ad4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad8:	23 30       	cpi	r18, 0x03	; 3
    1ada:	31 05       	cpc	r19, r1
    1adc:	34 f4       	brge	.+12     	; 0x1aea <MDIO_stderrSetPortValue+0x3e>
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <MDIO_stderrSetPortValue+0x54>
    1ae8:	1f c0       	rjmp	.+62     	; 0x1b28 <MDIO_stderrSetPortValue+0x7c>
    1aea:	2c 81       	ldd	r18, Y+4	; 0x04
    1aec:	3d 81       	ldd	r19, Y+5	; 0x05
    1aee:	23 30       	cpi	r18, 0x03	; 3
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <MDIO_stderrSetPortValue+0x68>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	84 30       	cpi	r24, 0x04	; 4
    1afa:	91 05       	cpc	r25, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <MDIO_stderrSetPortValue+0x72>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    1b00:	e9 e3       	ldi	r30, 0x39	; 57
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	82 83       	std	Z+2, r24	; 0x02
    1b08:	11 c0       	rjmp	.+34     	; 0x1b2c <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    1b0a:	e6 e3       	ldi	r30, 0x36	; 54
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	82 83       	std	Z+2, r24	; 0x02
    1b12:	0c c0       	rjmp	.+24     	; 0x1b2c <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    1b14:	e3 e3       	ldi	r30, 0x33	; 51
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	82 83       	std	Z+2, r24	; 0x02
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    1b1e:	e0 e3       	ldi	r30, 0x30	; 48
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	82 83       	std	Z+2, r24	; 0x02
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <MDIO_stderrGetPortValue+0x6>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <MDIO_stderrGetPortValue+0x8>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <MDIO_stderrGetPortValue+0xa>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	9b 83       	std	Y+3, r25	; 0x03
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
    1b50:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    1b52:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	3e 83       	std	Y+6, r19	; 0x06
    1b5c:	2d 83       	std	Y+5, r18	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	91 05       	cpc	r25, r1
    1b66:	e9 f0       	breq	.+58     	; 0x1ba2 <MDIO_stderrGetPortValue+0x64>
    1b68:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6c:	23 30       	cpi	r18, 0x03	; 3
    1b6e:	31 05       	cpc	r19, r1
    1b70:	34 f4       	brge	.+12     	; 0x1b7e <MDIO_stderrGetPortValue+0x40>
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <MDIO_stderrGetPortValue+0x56>
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <MDIO_stderrGetPortValue+0x8e>
    1b7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b80:	3e 81       	ldd	r19, Y+6	; 0x06
    1b82:	23 30       	cpi	r18, 0x03	; 3
    1b84:	31 05       	cpc	r19, r1
    1b86:	a1 f0       	breq	.+40     	; 0x1bb0 <MDIO_stderrGetPortValue+0x72>
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	84 30       	cpi	r24, 0x04	; 4
    1b8e:	91 05       	cpc	r25, r1
    1b90:	b1 f0       	breq	.+44     	; 0x1bbe <MDIO_stderrGetPortValue+0x80>
    1b92:	1c c0       	rjmp	.+56     	; 0x1bcc <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    1b94:	e9 e3       	ldi	r30, 0x39	; 57
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b9c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b9e:	80 83       	st	Z, r24
    1ba0:	17 c0       	rjmp	.+46     	; 0x1bd0 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    1ba2:	e6 e3       	ldi	r30, 0x36	; 54
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	ea 81       	ldd	r30, Y+2	; 0x02
    1baa:	fb 81       	ldd	r31, Y+3	; 0x03
    1bac:	80 83       	st	Z, r24
    1bae:	10 c0       	rjmp	.+32     	; 0x1bd0 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    1bb0:	e3 e3       	ldi	r30, 0x33	; 51
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bb8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bba:	80 83       	st	Z, r24
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    1bbe:	e0 e3       	ldi	r30, 0x30	; 48
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc8:	80 83       	st	Z, r24
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	26 96       	adiw	r28, 0x06	; 6
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	2a 97       	sbiw	r28, 0x0a	; 10
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	6b 83       	std	Y+3, r22	; 0x03
    1bfc:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	88 30       	cpi	r24, 0x08	; 8
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <MDIO_stderrSetPinDirection+0x24>
    1c06:	d9 c1       	rjmp	.+946    	; 0x1fba <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <MDIO_stderrSetPinDirection+0x2c>
    1c0e:	7c c0       	rjmp	.+248    	; 0x1d08 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	3a 87       	std	Y+10, r19	; 0x0a
    1c18:	29 87       	std	Y+9, r18	; 0x09
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	91 05       	cpc	r25, r1
    1c22:	69 f1       	breq	.+90     	; 0x1c7e <MDIO_stderrSetPinDirection+0x9a>
    1c24:	29 85       	ldd	r18, Y+9	; 0x09
    1c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c28:	23 30       	cpi	r18, 0x03	; 3
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	34 f4       	brge	.+12     	; 0x1c3a <MDIO_stderrSetPinDirection+0x56>
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	69 f0       	breq	.+26     	; 0x1c52 <MDIO_stderrSetPinDirection+0x6e>
    1c38:	64 c0       	rjmp	.+200    	; 0x1d02 <MDIO_stderrSetPinDirection+0x11e>
    1c3a:	29 85       	ldd	r18, Y+9	; 0x09
    1c3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c3e:	23 30       	cpi	r18, 0x03	; 3
    1c40:	31 05       	cpc	r19, r1
    1c42:	99 f1       	breq	.+102    	; 0x1caa <MDIO_stderrSetPinDirection+0xc6>
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <MDIO_stderrSetPinDirection+0x6c>
    1c4e:	43 c0       	rjmp	.+134    	; 0x1cd6 <MDIO_stderrSetPinDirection+0xf2>
    1c50:	58 c0       	rjmp	.+176    	; 0x1d02 <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    1c52:	a9 e3       	ldi	r26, 0x39	; 57
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e9 e3       	ldi	r30, 0x39	; 57
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	81 81       	ldd	r24, Z+1	; 0x01
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <MDIO_stderrSetPinDirection+0x8c>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <MDIO_stderrSetPinDirection+0x88>
    1c74:	84 2b       	or	r24, r20
    1c76:	11 96       	adiw	r26, 0x01	; 1
    1c78:	8c 93       	st	X, r24
    1c7a:	11 97       	sbiw	r26, 0x01	; 1
    1c7c:	a0 c1       	rjmp	.+832    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    1c7e:	a6 e3       	ldi	r26, 0x36	; 54
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e6 e3       	ldi	r30, 0x36	; 54
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	81 81       	ldd	r24, Z+1	; 0x01
    1c88:	48 2f       	mov	r20, r24
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 2e       	mov	r0, r18
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <MDIO_stderrSetPinDirection+0xb8>
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	0a 94       	dec	r0
    1c9e:	e2 f7       	brpl	.-8      	; 0x1c98 <MDIO_stderrSetPinDirection+0xb4>
    1ca0:	84 2b       	or	r24, r20
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	8c 93       	st	X, r24
    1ca6:	11 97       	sbiw	r26, 0x01	; 1
    1ca8:	8a c1       	rjmp	.+788    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    1caa:	a3 e3       	ldi	r26, 0x33	; 51
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e3 e3       	ldi	r30, 0x33	; 51
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	81 81       	ldd	r24, Z+1	; 0x01
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <MDIO_stderrSetPinDirection+0xe4>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <MDIO_stderrSetPinDirection+0xe0>
    1ccc:	84 2b       	or	r24, r20
    1cce:	11 96       	adiw	r26, 0x01	; 1
    1cd0:	8c 93       	st	X, r24
    1cd2:	11 97       	sbiw	r26, 0x01	; 1
    1cd4:	74 c1       	rjmp	.+744    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    1cd6:	a0 e3       	ldi	r26, 0x30	; 48
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e0 e3       	ldi	r30, 0x30	; 48
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	81 81       	ldd	r24, Z+1	; 0x01
    1ce0:	48 2f       	mov	r20, r24
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	02 2e       	mov	r0, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <MDIO_stderrSetPinDirection+0x110>
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	0a 94       	dec	r0
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <MDIO_stderrSetPinDirection+0x10c>
    1cf8:	84 2b       	or	r24, r20
    1cfa:	11 96       	adiw	r26, 0x01	; 1
    1cfc:	8c 93       	st	X, r24
    1cfe:	11 97       	sbiw	r26, 0x01	; 1
    1d00:	5e c1       	rjmp	.+700    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	5b c1       	rjmp	.+694    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    1d08:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <MDIO_stderrSetPinDirection+0x12c>
    1d0e:	80 c0       	rjmp	.+256    	; 0x1e10 <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	38 87       	std	Y+8, r19	; 0x08
    1d18:	2f 83       	std	Y+7, r18	; 0x07
    1d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1c:	98 85       	ldd	r25, Y+8	; 0x08
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	91 05       	cpc	r25, r1
    1d22:	71 f1       	breq	.+92     	; 0x1d80 <MDIO_stderrSetPinDirection+0x19c>
    1d24:	2f 81       	ldd	r18, Y+7	; 0x07
    1d26:	38 85       	ldd	r19, Y+8	; 0x08
    1d28:	23 30       	cpi	r18, 0x03	; 3
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	34 f4       	brge	.+12     	; 0x1d3a <MDIO_stderrSetPinDirection+0x156>
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d30:	98 85       	ldd	r25, Y+8	; 0x08
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	91 05       	cpc	r25, r1
    1d36:	69 f0       	breq	.+26     	; 0x1d52 <MDIO_stderrSetPinDirection+0x16e>
    1d38:	68 c0       	rjmp	.+208    	; 0x1e0a <MDIO_stderrSetPinDirection+0x226>
    1d3a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d3c:	38 85       	ldd	r19, Y+8	; 0x08
    1d3e:	23 30       	cpi	r18, 0x03	; 3
    1d40:	31 05       	cpc	r19, r1
    1d42:	a9 f1       	breq	.+106    	; 0x1dae <MDIO_stderrSetPinDirection+0x1ca>
    1d44:	8f 81       	ldd	r24, Y+7	; 0x07
    1d46:	98 85       	ldd	r25, Y+8	; 0x08
    1d48:	84 30       	cpi	r24, 0x04	; 4
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <MDIO_stderrSetPinDirection+0x16c>
    1d4e:	46 c0       	rjmp	.+140    	; 0x1ddc <MDIO_stderrSetPinDirection+0x1f8>
    1d50:	5c c0       	rjmp	.+184    	; 0x1e0a <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    1d52:	a9 e3       	ldi	r26, 0x39	; 57
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e9 e3       	ldi	r30, 0x39	; 57
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	81 81       	ldd	r24, Z+1	; 0x01
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <MDIO_stderrSetPinDirection+0x18c>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <MDIO_stderrSetPinDirection+0x188>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	8c 93       	st	X, r24
    1d7c:	11 97       	sbiw	r26, 0x01	; 1
    1d7e:	1f c1       	rjmp	.+574    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    1d80:	a6 e3       	ldi	r26, 0x36	; 54
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e6 e3       	ldi	r30, 0x36	; 54
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	81 81       	ldd	r24, Z+1	; 0x01
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_stderrSetPinDirection+0x1ba>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <MDIO_stderrSetPinDirection+0x1b6>
    1da2:	80 95       	com	r24
    1da4:	84 23       	and	r24, r20
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	8c 93       	st	X, r24
    1daa:	11 97       	sbiw	r26, 0x01	; 1
    1dac:	08 c1       	rjmp	.+528    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    1dae:	a3 e3       	ldi	r26, 0x33	; 51
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e3 e3       	ldi	r30, 0x33	; 51
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	81 81       	ldd	r24, Z+1	; 0x01
    1db8:	48 2f       	mov	r20, r24
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <MDIO_stderrSetPinDirection+0x1e8>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <MDIO_stderrSetPinDirection+0x1e4>
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	8c 93       	st	X, r24
    1dd8:	11 97       	sbiw	r26, 0x01	; 1
    1dda:	f1 c0       	rjmp	.+482    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    1ddc:	a0 e3       	ldi	r26, 0x30	; 48
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e0 e3       	ldi	r30, 0x30	; 48
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	81 81       	ldd	r24, Z+1	; 0x01
    1de6:	48 2f       	mov	r20, r24
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 2e       	mov	r0, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <MDIO_stderrSetPinDirection+0x216>
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	0a 94       	dec	r0
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <MDIO_stderrSetPinDirection+0x212>
    1dfe:	80 95       	com	r24
    1e00:	84 23       	and	r24, r20
    1e02:	11 96       	adiw	r26, 0x01	; 1
    1e04:	8c 93       	st	X, r24
    1e06:	11 97       	sbiw	r26, 0x01	; 1
    1e08:	da c0       	rjmp	.+436    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	d7 c0       	rjmp	.+430    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	83 30       	cpi	r24, 0x03	; 3
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <MDIO_stderrSetPinDirection+0x234>
    1e16:	ce c0       	rjmp	.+412    	; 0x1fb4 <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	2d 83       	std	Y+5, r18	; 0x05
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	82 30       	cpi	r24, 0x02	; 2
    1e28:	91 05       	cpc	r25, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <MDIO_stderrSetPinDirection+0x24a>
    1e2c:	42 c0       	rjmp	.+132    	; 0x1eb2 <MDIO_stderrSetPinDirection+0x2ce>
    1e2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e30:	3e 81       	ldd	r19, Y+6	; 0x06
    1e32:	23 30       	cpi	r18, 0x03	; 3
    1e34:	31 05       	cpc	r19, r1
    1e36:	34 f4       	brge	.+12     	; 0x1e44 <MDIO_stderrSetPinDirection+0x260>
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	91 05       	cpc	r25, r1
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <MDIO_stderrSetPinDirection+0x27a>
    1e42:	b5 c0       	rjmp	.+362    	; 0x1fae <MDIO_stderrSetPinDirection+0x3ca>
    1e44:	2d 81       	ldd	r18, Y+5	; 0x05
    1e46:	3e 81       	ldd	r19, Y+6	; 0x06
    1e48:	23 30       	cpi	r18, 0x03	; 3
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <MDIO_stderrSetPinDirection+0x26c>
    1e4e:	5b c0       	rjmp	.+182    	; 0x1f06 <MDIO_stderrSetPinDirection+0x322>
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	84 30       	cpi	r24, 0x04	; 4
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <MDIO_stderrSetPinDirection+0x278>
    1e5a:	7f c0       	rjmp	.+254    	; 0x1f5a <MDIO_stderrSetPinDirection+0x376>
    1e5c:	a8 c0       	rjmp	.+336    	; 0x1fae <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    1e5e:	a9 e3       	ldi	r26, 0x39	; 57
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e9 e3       	ldi	r30, 0x39	; 57
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	81 81       	ldd	r24, Z+1	; 0x01
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <MDIO_stderrSetPinDirection+0x296>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	2a 95       	dec	r18
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <MDIO_stderrSetPinDirection+0x292>
    1e7e:	80 95       	com	r24
    1e80:	84 23       	and	r24, r20
    1e82:	11 96       	adiw	r26, 0x01	; 1
    1e84:	8c 93       	st	X, r24
    1e86:	a9 e3       	ldi	r26, 0x39	; 57
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e9 e3       	ldi	r30, 0x39	; 57
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	48 2f       	mov	r20, r24
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <MDIO_stderrSetPinDirection+0x2c0>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <MDIO_stderrSetPinDirection+0x2bc>
    1ea8:	84 2b       	or	r24, r20
    1eaa:	12 96       	adiw	r26, 0x02	; 2
    1eac:	8c 93       	st	X, r24
    1eae:	12 97       	sbiw	r26, 0x02	; 2
    1eb0:	86 c0       	rjmp	.+268    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    1eb2:	a6 e3       	ldi	r26, 0x36	; 54
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e6 e3       	ldi	r30, 0x36	; 54
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	81 81       	ldd	r24, Z+1	; 0x01
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <MDIO_stderrSetPinDirection+0x2ea>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	2a 95       	dec	r18
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <MDIO_stderrSetPinDirection+0x2e6>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	8c 93       	st	X, r24
    1eda:	a6 e3       	ldi	r26, 0x36	; 54
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 e3       	ldi	r30, 0x36	; 54
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <MDIO_stderrSetPinDirection+0x314>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <MDIO_stderrSetPinDirection+0x310>
    1efc:	84 2b       	or	r24, r20
    1efe:	12 96       	adiw	r26, 0x02	; 2
    1f00:	8c 93       	st	X, r24
    1f02:	12 97       	sbiw	r26, 0x02	; 2
    1f04:	5c c0       	rjmp	.+184    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    1f06:	a3 e3       	ldi	r26, 0x33	; 51
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e3 e3       	ldi	r30, 0x33	; 51
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	81 81       	ldd	r24, Z+1	; 0x01
    1f10:	48 2f       	mov	r20, r24
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <MDIO_stderrSetPinDirection+0x33e>
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	2a 95       	dec	r18
    1f24:	e2 f7       	brpl	.-8      	; 0x1f1e <MDIO_stderrSetPinDirection+0x33a>
    1f26:	80 95       	com	r24
    1f28:	84 23       	and	r24, r20
    1f2a:	11 96       	adiw	r26, 0x01	; 1
    1f2c:	8c 93       	st	X, r24
    1f2e:	a3 e3       	ldi	r26, 0x33	; 51
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e3 e3       	ldi	r30, 0x33	; 51
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <MDIO_stderrSetPinDirection+0x368>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <MDIO_stderrSetPinDirection+0x364>
    1f50:	84 2b       	or	r24, r20
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	8c 93       	st	X, r24
    1f56:	12 97       	sbiw	r26, 0x02	; 2
    1f58:	32 c0       	rjmp	.+100    	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    1f5a:	a0 e3       	ldi	r26, 0x30	; 48
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e0 e3       	ldi	r30, 0x30	; 48
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	81 81       	ldd	r24, Z+1	; 0x01
    1f64:	48 2f       	mov	r20, r24
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <MDIO_stderrSetPinDirection+0x392>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	2a 95       	dec	r18
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <MDIO_stderrSetPinDirection+0x38e>
    1f7a:	80 95       	com	r24
    1f7c:	84 23       	and	r24, r20
    1f7e:	11 96       	adiw	r26, 0x01	; 1
    1f80:	8c 93       	st	X, r24
    1f82:	a0 e3       	ldi	r26, 0x30	; 48
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e0 e3       	ldi	r30, 0x30	; 48
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <MDIO_stderrSetPinDirection+0x3bc>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <MDIO_stderrSetPinDirection+0x3b8>
    1fa4:	84 2b       	or	r24, r20
    1fa6:	12 96       	adiw	r26, 0x02	; 2
    1fa8:	8c 93       	st	X, r24
    1faa:	12 97       	sbiw	r26, 0x02	; 2
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fc0:	2a 96       	adiw	r28, 0x0a	; 10
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	28 97       	sbiw	r28, 0x08	; 8
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	8a 83       	std	Y+2, r24	; 0x02
    1fe8:	6b 83       	std	Y+3, r22	; 0x03
    1fea:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    1fec:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 30       	cpi	r24, 0x08	; 8
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <MDIO_stderrSetPinValue+0x24>
    1ff4:	07 c1       	rjmp	.+526    	; 0x2204 <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <MDIO_stderrSetPinValue+0x2c>
    1ffc:	7c c0       	rjmp	.+248    	; 0x20f6 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	38 87       	std	Y+8, r19	; 0x08
    2006:	2f 83       	std	Y+7, r18	; 0x07
    2008:	8f 81       	ldd	r24, Y+7	; 0x07
    200a:	98 85       	ldd	r25, Y+8	; 0x08
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	91 05       	cpc	r25, r1
    2010:	69 f1       	breq	.+90     	; 0x206c <MDIO_stderrSetPinValue+0x9a>
    2012:	2f 81       	ldd	r18, Y+7	; 0x07
    2014:	38 85       	ldd	r19, Y+8	; 0x08
    2016:	23 30       	cpi	r18, 0x03	; 3
    2018:	31 05       	cpc	r19, r1
    201a:	34 f4       	brge	.+12     	; 0x2028 <MDIO_stderrSetPinValue+0x56>
    201c:	8f 81       	ldd	r24, Y+7	; 0x07
    201e:	98 85       	ldd	r25, Y+8	; 0x08
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	91 05       	cpc	r25, r1
    2024:	69 f0       	breq	.+26     	; 0x2040 <MDIO_stderrSetPinValue+0x6e>
    2026:	64 c0       	rjmp	.+200    	; 0x20f0 <MDIO_stderrSetPinValue+0x11e>
    2028:	2f 81       	ldd	r18, Y+7	; 0x07
    202a:	38 85       	ldd	r19, Y+8	; 0x08
    202c:	23 30       	cpi	r18, 0x03	; 3
    202e:	31 05       	cpc	r19, r1
    2030:	99 f1       	breq	.+102    	; 0x2098 <MDIO_stderrSetPinValue+0xc6>
    2032:	8f 81       	ldd	r24, Y+7	; 0x07
    2034:	98 85       	ldd	r25, Y+8	; 0x08
    2036:	84 30       	cpi	r24, 0x04	; 4
    2038:	91 05       	cpc	r25, r1
    203a:	09 f4       	brne	.+2      	; 0x203e <MDIO_stderrSetPinValue+0x6c>
    203c:	43 c0       	rjmp	.+134    	; 0x20c4 <MDIO_stderrSetPinValue+0xf2>
    203e:	58 c0       	rjmp	.+176    	; 0x20f0 <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    2040:	a9 e3       	ldi	r26, 0x39	; 57
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e9 e3       	ldi	r30, 0x39	; 57
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	48 2f       	mov	r20, r24
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <MDIO_stderrSetPinValue+0x8c>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <MDIO_stderrSetPinValue+0x88>
    2062:	84 2b       	or	r24, r20
    2064:	12 96       	adiw	r26, 0x02	; 2
    2066:	8c 93       	st	X, r24
    2068:	12 97       	sbiw	r26, 0x02	; 2
    206a:	ce c0       	rjmp	.+412    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    206c:	a6 e3       	ldi	r26, 0x36	; 54
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e6 e3       	ldi	r30, 0x36	; 54
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	48 2f       	mov	r20, r24
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	02 2e       	mov	r0, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <MDIO_stderrSetPinValue+0xb8>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	0a 94       	dec	r0
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <MDIO_stderrSetPinValue+0xb4>
    208e:	84 2b       	or	r24, r20
    2090:	12 96       	adiw	r26, 0x02	; 2
    2092:	8c 93       	st	X, r24
    2094:	12 97       	sbiw	r26, 0x02	; 2
    2096:	b8 c0       	rjmp	.+368    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    2098:	a3 e3       	ldi	r26, 0x33	; 51
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e3       	ldi	r30, 0x33	; 51
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	48 2f       	mov	r20, r24
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 2e       	mov	r0, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <MDIO_stderrSetPinValue+0xe4>
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	0a 94       	dec	r0
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <MDIO_stderrSetPinValue+0xe0>
    20ba:	84 2b       	or	r24, r20
    20bc:	12 96       	adiw	r26, 0x02	; 2
    20be:	8c 93       	st	X, r24
    20c0:	12 97       	sbiw	r26, 0x02	; 2
    20c2:	a2 c0       	rjmp	.+324    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    20c4:	a0 e3       	ldi	r26, 0x30	; 48
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e0 e3       	ldi	r30, 0x30	; 48
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	48 2f       	mov	r20, r24
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	02 2e       	mov	r0, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <MDIO_stderrSetPinValue+0x110>
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	0a 94       	dec	r0
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <MDIO_stderrSetPinValue+0x10c>
    20e6:	84 2b       	or	r24, r20
    20e8:	12 96       	adiw	r26, 0x02	; 2
    20ea:	8c 93       	st	X, r24
    20ec:	12 97       	sbiw	r26, 0x02	; 2
    20ee:	8c c0       	rjmp	.+280    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	89 c0       	rjmp	.+274    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <MDIO_stderrSetPinValue+0x12c>
    20fc:	80 c0       	rjmp	.+256    	; 0x21fe <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	3e 83       	std	Y+6, r19	; 0x06
    2106:	2d 83       	std	Y+5, r18	; 0x05
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	91 05       	cpc	r25, r1
    2110:	71 f1       	breq	.+92     	; 0x216e <MDIO_stderrSetPinValue+0x19c>
    2112:	2d 81       	ldd	r18, Y+5	; 0x05
    2114:	3e 81       	ldd	r19, Y+6	; 0x06
    2116:	23 30       	cpi	r18, 0x03	; 3
    2118:	31 05       	cpc	r19, r1
    211a:	34 f4       	brge	.+12     	; 0x2128 <MDIO_stderrSetPinValue+0x156>
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	69 f0       	breq	.+26     	; 0x2140 <MDIO_stderrSetPinValue+0x16e>
    2126:	68 c0       	rjmp	.+208    	; 0x21f8 <MDIO_stderrSetPinValue+0x226>
    2128:	2d 81       	ldd	r18, Y+5	; 0x05
    212a:	3e 81       	ldd	r19, Y+6	; 0x06
    212c:	23 30       	cpi	r18, 0x03	; 3
    212e:	31 05       	cpc	r19, r1
    2130:	a9 f1       	breq	.+106    	; 0x219c <MDIO_stderrSetPinValue+0x1ca>
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	91 05       	cpc	r25, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <MDIO_stderrSetPinValue+0x16c>
    213c:	46 c0       	rjmp	.+140    	; 0x21ca <MDIO_stderrSetPinValue+0x1f8>
    213e:	5c c0       	rjmp	.+184    	; 0x21f8 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    2140:	a9 e3       	ldi	r26, 0x39	; 57
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e9 e3       	ldi	r30, 0x39	; 57
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	48 2f       	mov	r20, r24
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <MDIO_stderrSetPinValue+0x18c>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <MDIO_stderrSetPinValue+0x188>
    2162:	80 95       	com	r24
    2164:	84 23       	and	r24, r20
    2166:	12 96       	adiw	r26, 0x02	; 2
    2168:	8c 93       	st	X, r24
    216a:	12 97       	sbiw	r26, 0x02	; 2
    216c:	4d c0       	rjmp	.+154    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    216e:	a6 e3       	ldi	r26, 0x36	; 54
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e6 e3       	ldi	r30, 0x36	; 54
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	48 2f       	mov	r20, r24
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <MDIO_stderrSetPinValue+0x1ba>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <MDIO_stderrSetPinValue+0x1b6>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	12 96       	adiw	r26, 0x02	; 2
    2196:	8c 93       	st	X, r24
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	36 c0       	rjmp	.+108    	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    219c:	a3 e3       	ldi	r26, 0x33	; 51
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e3 e3       	ldi	r30, 0x33	; 51
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	48 2f       	mov	r20, r24
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	02 2e       	mov	r0, r18
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <MDIO_stderrSetPinValue+0x1e8>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	0a 94       	dec	r0
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <MDIO_stderrSetPinValue+0x1e4>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	12 96       	adiw	r26, 0x02	; 2
    21c4:	8c 93       	st	X, r24
    21c6:	12 97       	sbiw	r26, 0x02	; 2
    21c8:	1f c0       	rjmp	.+62     	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    21ca:	a0 e3       	ldi	r26, 0x30	; 48
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e0 e3       	ldi	r30, 0x30	; 48
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	48 2f       	mov	r20, r24
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	02 2e       	mov	r0, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <MDIO_stderrSetPinValue+0x216>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <MDIO_stderrSetPinValue+0x212>
    21ec:	80 95       	com	r24
    21ee:	84 23       	and	r24, r20
    21f0:	12 96       	adiw	r26, 0x02	; 2
    21f2:	8c 93       	st	X, r24
    21f4:	12 97       	sbiw	r26, 0x02	; 2
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	05 c0       	rjmp	.+10     	; 0x2208 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
}
    220a:	28 96       	adiw	r28, 0x08	; 8
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
    2224:	27 97       	sbiw	r28, 0x07	; 7
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	9b 83       	std	Y+3, r25	; 0x03
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	6c 83       	std	Y+4, r22	; 0x04
    2236:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    2238:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	19 f4       	brne	.+6      	; 0x2248 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	7a c0       	rjmp	.+244    	; 0x233c <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	88 30       	cpi	r24, 0x08	; 8
    224c:	08 f0       	brcs	.+2      	; 0x2250 <MDIO_stderrGetPinValue+0x34>
    224e:	74 c0       	rjmp	.+232    	; 0x2338 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	3f 83       	std	Y+7, r19	; 0x07
    2258:	2e 83       	std	Y+6, r18	; 0x06
    225a:	4e 81       	ldd	r20, Y+6	; 0x06
    225c:	5f 81       	ldd	r21, Y+7	; 0x07
    225e:	42 30       	cpi	r20, 0x02	; 2
    2260:	51 05       	cpc	r21, r1
    2262:	59 f1       	breq	.+86     	; 0x22ba <MDIO_stderrGetPinValue+0x9e>
    2264:	8e 81       	ldd	r24, Y+6	; 0x06
    2266:	9f 81       	ldd	r25, Y+7	; 0x07
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	91 05       	cpc	r25, r1
    226c:	34 f4       	brge	.+12     	; 0x227a <MDIO_stderrGetPinValue+0x5e>
    226e:	2e 81       	ldd	r18, Y+6	; 0x06
    2270:	3f 81       	ldd	r19, Y+7	; 0x07
    2272:	21 30       	cpi	r18, 0x01	; 1
    2274:	31 05       	cpc	r19, r1
    2276:	69 f0       	breq	.+26     	; 0x2292 <MDIO_stderrGetPinValue+0x76>
    2278:	5c c0       	rjmp	.+184    	; 0x2332 <MDIO_stderrGetPinValue+0x116>
    227a:	4e 81       	ldd	r20, Y+6	; 0x06
    227c:	5f 81       	ldd	r21, Y+7	; 0x07
    227e:	43 30       	cpi	r20, 0x03	; 3
    2280:	51 05       	cpc	r21, r1
    2282:	79 f1       	breq	.+94     	; 0x22e2 <MDIO_stderrGetPinValue+0xc6>
    2284:	8e 81       	ldd	r24, Y+6	; 0x06
    2286:	9f 81       	ldd	r25, Y+7	; 0x07
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	91 05       	cpc	r25, r1
    228c:	09 f4       	brne	.+2      	; 0x2290 <MDIO_stderrGetPinValue+0x74>
    228e:	3d c0       	rjmp	.+122    	; 0x230a <MDIO_stderrGetPinValue+0xee>
    2290:	50 c0       	rjmp	.+160    	; 0x2332 <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    2292:	e9 e3       	ldi	r30, 0x39	; 57
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	a9 01       	movw	r20, r18
    22a4:	02 c0       	rjmp	.+4      	; 0x22aa <MDIO_stderrGetPinValue+0x8e>
    22a6:	55 95       	asr	r21
    22a8:	47 95       	ror	r20
    22aa:	8a 95       	dec	r24
    22ac:	e2 f7       	brpl	.-8      	; 0x22a6 <MDIO_stderrGetPinValue+0x8a>
    22ae:	ca 01       	movw	r24, r20
    22b0:	81 70       	andi	r24, 0x01	; 1
    22b2:	ea 81       	ldd	r30, Y+2	; 0x02
    22b4:	fb 81       	ldd	r31, Y+3	; 0x03
    22b6:	80 83       	st	Z, r24
    22b8:	41 c0       	rjmp	.+130    	; 0x233c <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    22ba:	e6 e3       	ldi	r30, 0x36	; 54
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a9 01       	movw	r20, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <MDIO_stderrGetPinValue+0xb6>
    22ce:	55 95       	asr	r21
    22d0:	47 95       	ror	r20
    22d2:	8a 95       	dec	r24
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <MDIO_stderrGetPinValue+0xb2>
    22d6:	ca 01       	movw	r24, r20
    22d8:	81 70       	andi	r24, 0x01	; 1
    22da:	ea 81       	ldd	r30, Y+2	; 0x02
    22dc:	fb 81       	ldd	r31, Y+3	; 0x03
    22de:	80 83       	st	Z, r24
    22e0:	2d c0       	rjmp	.+90     	; 0x233c <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    22e2:	e3 e3       	ldi	r30, 0x33	; 51
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a9 01       	movw	r20, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <MDIO_stderrGetPinValue+0xde>
    22f6:	55 95       	asr	r21
    22f8:	47 95       	ror	r20
    22fa:	8a 95       	dec	r24
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <MDIO_stderrGetPinValue+0xda>
    22fe:	ca 01       	movw	r24, r20
    2300:	81 70       	andi	r24, 0x01	; 1
    2302:	ea 81       	ldd	r30, Y+2	; 0x02
    2304:	fb 81       	ldd	r31, Y+3	; 0x03
    2306:	80 83       	st	Z, r24
    2308:	19 c0       	rjmp	.+50     	; 0x233c <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    230a:	e0 e3       	ldi	r30, 0x30	; 48
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a9 01       	movw	r20, r18
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <MDIO_stderrGetPinValue+0x106>
    231e:	55 95       	asr	r21
    2320:	47 95       	ror	r20
    2322:	8a 95       	dec	r24
    2324:	e2 f7       	brpl	.-8      	; 0x231e <MDIO_stderrGetPinValue+0x102>
    2326:	ca 01       	movw	r24, r20
    2328:	81 70       	andi	r24, 0x01	; 1
    232a:	ea 81       	ldd	r30, Y+2	; 0x02
    232c:	fb 81       	ldd	r31, Y+3	; 0x03
    232e:	80 83       	st	Z, r24
    2330:	05 c0       	rjmp	.+10     	; 0x233c <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	02 c0       	rjmp	.+4      	; 0x233c <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
}
    233e:	27 96       	adiw	r28, 0x07	; 7
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <MDIO_stderrTogglePinValue+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <MDIO_stderrTogglePinValue+0x8>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    2362:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	88 30       	cpi	r24, 0x08	; 8
    2368:	08 f0       	brcs	.+2      	; 0x236c <MDIO_stderrTogglePinValue+0x1c>
    236a:	7c c0       	rjmp	.+248    	; 0x2464 <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	3d 83       	std	Y+5, r19	; 0x05
    2374:	2c 83       	std	Y+4, r18	; 0x04
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	91 05       	cpc	r25, r1
    237e:	69 f1       	breq	.+90     	; 0x23da <MDIO_stderrTogglePinValue+0x8a>
    2380:	2c 81       	ldd	r18, Y+4	; 0x04
    2382:	3d 81       	ldd	r19, Y+5	; 0x05
    2384:	23 30       	cpi	r18, 0x03	; 3
    2386:	31 05       	cpc	r19, r1
    2388:	34 f4       	brge	.+12     	; 0x2396 <MDIO_stderrTogglePinValue+0x46>
    238a:	8c 81       	ldd	r24, Y+4	; 0x04
    238c:	9d 81       	ldd	r25, Y+5	; 0x05
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	91 05       	cpc	r25, r1
    2392:	69 f0       	breq	.+26     	; 0x23ae <MDIO_stderrTogglePinValue+0x5e>
    2394:	64 c0       	rjmp	.+200    	; 0x245e <MDIO_stderrTogglePinValue+0x10e>
    2396:	2c 81       	ldd	r18, Y+4	; 0x04
    2398:	3d 81       	ldd	r19, Y+5	; 0x05
    239a:	23 30       	cpi	r18, 0x03	; 3
    239c:	31 05       	cpc	r19, r1
    239e:	99 f1       	breq	.+102    	; 0x2406 <MDIO_stderrTogglePinValue+0xb6>
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	9d 81       	ldd	r25, Y+5	; 0x05
    23a4:	84 30       	cpi	r24, 0x04	; 4
    23a6:	91 05       	cpc	r25, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <MDIO_stderrTogglePinValue+0x5c>
    23aa:	43 c0       	rjmp	.+134    	; 0x2432 <MDIO_stderrTogglePinValue+0xe2>
    23ac:	58 c0       	rjmp	.+176    	; 0x245e <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    23ae:	a9 e3       	ldi	r26, 0x39	; 57
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	e9 e3       	ldi	r30, 0x39	; 57
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	48 2f       	mov	r20, r24
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	02 2e       	mov	r0, r18
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <MDIO_stderrTogglePinValue+0x7c>
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	0a 94       	dec	r0
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <MDIO_stderrTogglePinValue+0x78>
    23d0:	84 27       	eor	r24, r20
    23d2:	12 96       	adiw	r26, 0x02	; 2
    23d4:	8c 93       	st	X, r24
    23d6:	12 97       	sbiw	r26, 0x02	; 2
    23d8:	47 c0       	rjmp	.+142    	; 0x2468 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    23da:	a6 e3       	ldi	r26, 0x36	; 54
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e6 e3       	ldi	r30, 0x36	; 54
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	48 2f       	mov	r20, r24
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <MDIO_stderrTogglePinValue+0xa8>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <MDIO_stderrTogglePinValue+0xa4>
    23fc:	84 27       	eor	r24, r20
    23fe:	12 96       	adiw	r26, 0x02	; 2
    2400:	8c 93       	st	X, r24
    2402:	12 97       	sbiw	r26, 0x02	; 2
    2404:	31 c0       	rjmp	.+98     	; 0x2468 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    2406:	a3 e3       	ldi	r26, 0x33	; 51
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e3 e3       	ldi	r30, 0x33	; 51
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	48 2f       	mov	r20, r24
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	02 2e       	mov	r0, r18
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <MDIO_stderrTogglePinValue+0xd4>
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	0a 94       	dec	r0
    2426:	e2 f7       	brpl	.-8      	; 0x2420 <MDIO_stderrTogglePinValue+0xd0>
    2428:	84 27       	eor	r24, r20
    242a:	12 96       	adiw	r26, 0x02	; 2
    242c:	8c 93       	st	X, r24
    242e:	12 97       	sbiw	r26, 0x02	; 2
    2430:	1b c0       	rjmp	.+54     	; 0x2468 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    2432:	a0 e3       	ldi	r26, 0x30	; 48
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e0 e3       	ldi	r30, 0x30	; 48
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	48 2f       	mov	r20, r24
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 2e       	mov	r0, r18
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <MDIO_stderrTogglePinValue+0x100>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <MDIO_stderrTogglePinValue+0xfc>
    2454:	84 27       	eor	r24, r20
    2456:	12 96       	adiw	r26, 0x02	; 2
    2458:	8c 93       	st	X, r24
    245a:	12 97       	sbiw	r26, 0x02	; 2
    245c:	05 c0       	rjmp	.+10     	; 0x2468 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    2464:	82 e0       	ldi	r24, 0x02	; 2
    2466:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2468:	89 81       	ldd	r24, Y+1	; 0x01
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <main>:

#include "MDIO_interface.h"

#include "HLCD_interface.h"

int main(void){
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	cd 55       	subi	r28, 0x5D	; 93
    2484:	d0 40       	sbci	r29, 0x00	; 0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
	// Initialization  (Run Once)
	s8 L_s8Iterator=0;
    2490:	1d 8e       	std	Y+29, r1	; 0x1d
	char L_charptrDisplay[20]= "Abdalrahman";
    2492:	ce 01       	movw	r24, r28
    2494:	4e 96       	adiw	r24, 0x1e	; 30
    2496:	2c 96       	adiw	r28, 0x0c	; 12
    2498:	9f af       	std	Y+63, r25	; 0x3f
    249a:	8e af       	std	Y+62, r24	; 0x3e
    249c:	2c 97       	sbiw	r28, 0x0c	; 12
    249e:	ad e6       	ldi	r26, 0x6D	; 109
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	2e 96       	adiw	r28, 0x0e	; 14
    24a4:	bf af       	std	Y+63, r27	; 0x3f
    24a6:	ae af       	std	Y+62, r26	; 0x3e
    24a8:	2e 97       	sbiw	r28, 0x0e	; 14
    24aa:	bc e0       	ldi	r27, 0x0C	; 12
    24ac:	2f 96       	adiw	r28, 0x0f	; 15
    24ae:	bf af       	std	Y+63, r27	; 0x3f
    24b0:	2f 97       	sbiw	r28, 0x0f	; 15
    24b2:	2e 96       	adiw	r28, 0x0e	; 14
    24b4:	ee ad       	ldd	r30, Y+62	; 0x3e
    24b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    24b8:	2e 97       	sbiw	r28, 0x0e	; 14
    24ba:	00 80       	ld	r0, Z
    24bc:	2e 96       	adiw	r28, 0x0e	; 14
    24be:	8e ad       	ldd	r24, Y+62	; 0x3e
    24c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    24c2:	2e 97       	sbiw	r28, 0x0e	; 14
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	2e 96       	adiw	r28, 0x0e	; 14
    24c8:	9f af       	std	Y+63, r25	; 0x3f
    24ca:	8e af       	std	Y+62, r24	; 0x3e
    24cc:	2e 97       	sbiw	r28, 0x0e	; 14
    24ce:	2c 96       	adiw	r28, 0x0c	; 12
    24d0:	ae ad       	ldd	r26, Y+62	; 0x3e
    24d2:	bf ad       	ldd	r27, Y+63	; 0x3f
    24d4:	2c 97       	sbiw	r28, 0x0c	; 12
    24d6:	0c 92       	st	X, r0
    24d8:	2c 96       	adiw	r28, 0x0c	; 12
    24da:	ee ad       	ldd	r30, Y+62	; 0x3e
    24dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    24de:	2c 97       	sbiw	r28, 0x0c	; 12
    24e0:	31 96       	adiw	r30, 0x01	; 1
    24e2:	2c 96       	adiw	r28, 0x0c	; 12
    24e4:	ff af       	std	Y+63, r31	; 0x3f
    24e6:	ee af       	std	Y+62, r30	; 0x3e
    24e8:	2c 97       	sbiw	r28, 0x0c	; 12
    24ea:	2f 96       	adiw	r28, 0x0f	; 15
    24ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    24ee:	2f 97       	sbiw	r28, 0x0f	; 15
    24f0:	f1 50       	subi	r31, 0x01	; 1
    24f2:	2f 96       	adiw	r28, 0x0f	; 15
    24f4:	ff af       	std	Y+63, r31	; 0x3f
    24f6:	2f 97       	sbiw	r28, 0x0f	; 15
    24f8:	2f 96       	adiw	r28, 0x0f	; 15
    24fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    24fc:	2f 97       	sbiw	r28, 0x0f	; 15
    24fe:	88 23       	and	r24, r24
    2500:	c1 f6       	brne	.-80     	; 0x24b2 <main+0x38>
    2502:	88 e0       	ldi	r24, 0x08	; 8
    2504:	fe 01       	movw	r30, r28
    2506:	ba 96       	adiw	r30, 0x2a	; 42
    2508:	df 01       	movw	r26, r30
    250a:	98 2f       	mov	r25, r24
    250c:	1d 92       	st	X+, r1
    250e:	9a 95       	dec	r25
    2510:	e9 f7       	brne	.-6      	; 0x250c <main+0x92>
				0b11111,
				0b00000,
				0b00000,
				0b00000

		};
    2512:	de 01       	movw	r26, r28
    2514:	d2 96       	adiw	r26, 0x32	; 50
    2516:	61 96       	adiw	r28, 0x11	; 17
    2518:	bf af       	std	Y+63, r27	; 0x3f
    251a:	ae af       	std	Y+62, r26	; 0x3e
    251c:	61 97       	sbiw	r28, 0x11	; 17
    251e:	e9 e9       	ldi	r30, 0x99	; 153
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	63 96       	adiw	r28, 0x13	; 19
    2524:	ff af       	std	Y+63, r31	; 0x3f
    2526:	ee af       	std	Y+62, r30	; 0x3e
    2528:	63 97       	sbiw	r28, 0x13	; 19
    252a:	f8 e0       	ldi	r31, 0x08	; 8
    252c:	64 96       	adiw	r28, 0x14	; 20
    252e:	ff af       	std	Y+63, r31	; 0x3f
    2530:	64 97       	sbiw	r28, 0x14	; 20
    2532:	63 96       	adiw	r28, 0x13	; 19
    2534:	ae ad       	ldd	r26, Y+62	; 0x3e
    2536:	bf ad       	ldd	r27, Y+63	; 0x3f
    2538:	63 97       	sbiw	r28, 0x13	; 19
    253a:	0c 90       	ld	r0, X
    253c:	63 96       	adiw	r28, 0x13	; 19
    253e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2540:	ff ad       	ldd	r31, Y+63	; 0x3f
    2542:	63 97       	sbiw	r28, 0x13	; 19
    2544:	31 96       	adiw	r30, 0x01	; 1
    2546:	63 96       	adiw	r28, 0x13	; 19
    2548:	ff af       	std	Y+63, r31	; 0x3f
    254a:	ee af       	std	Y+62, r30	; 0x3e
    254c:	63 97       	sbiw	r28, 0x13	; 19
    254e:	61 96       	adiw	r28, 0x11	; 17
    2550:	ae ad       	ldd	r26, Y+62	; 0x3e
    2552:	bf ad       	ldd	r27, Y+63	; 0x3f
    2554:	61 97       	sbiw	r28, 0x11	; 17
    2556:	0c 92       	st	X, r0
    2558:	61 96       	adiw	r28, 0x11	; 17
    255a:	ee ad       	ldd	r30, Y+62	; 0x3e
    255c:	ff ad       	ldd	r31, Y+63	; 0x3f
    255e:	61 97       	sbiw	r28, 0x11	; 17
    2560:	31 96       	adiw	r30, 0x01	; 1
    2562:	61 96       	adiw	r28, 0x11	; 17
    2564:	ff af       	std	Y+63, r31	; 0x3f
    2566:	ee af       	std	Y+62, r30	; 0x3e
    2568:	61 97       	sbiw	r28, 0x11	; 17
    256a:	64 96       	adiw	r28, 0x14	; 20
    256c:	ff ad       	ldd	r31, Y+63	; 0x3f
    256e:	64 97       	sbiw	r28, 0x14	; 20
    2570:	f1 50       	subi	r31, 0x01	; 1
    2572:	64 96       	adiw	r28, 0x14	; 20
    2574:	ff af       	std	Y+63, r31	; 0x3f
    2576:	64 97       	sbiw	r28, 0x14	; 20
    2578:	64 96       	adiw	r28, 0x14	; 20
    257a:	8f ad       	ldd	r24, Y+63	; 0x3f
    257c:	64 97       	sbiw	r28, 0x14	; 20
    257e:	88 23       	and	r24, r24
    2580:	c1 f6       	brne	.-80     	; 0x2532 <main+0xb8>
				0b01000,
				0b11111,
				0b00000,
				0b01000,
				0b00000
		};
    2582:	de 01       	movw	r26, r28
    2584:	da 96       	adiw	r26, 0x3a	; 58
    2586:	66 96       	adiw	r28, 0x16	; 22
    2588:	bf af       	std	Y+63, r27	; 0x3f
    258a:	ae af       	std	Y+62, r26	; 0x3e
    258c:	66 97       	sbiw	r28, 0x16	; 22
    258e:	e1 e9       	ldi	r30, 0x91	; 145
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	68 96       	adiw	r28, 0x18	; 24
    2594:	ff af       	std	Y+63, r31	; 0x3f
    2596:	ee af       	std	Y+62, r30	; 0x3e
    2598:	68 97       	sbiw	r28, 0x18	; 24
    259a:	f8 e0       	ldi	r31, 0x08	; 8
    259c:	69 96       	adiw	r28, 0x19	; 25
    259e:	ff af       	std	Y+63, r31	; 0x3f
    25a0:	69 97       	sbiw	r28, 0x19	; 25
    25a2:	68 96       	adiw	r28, 0x18	; 24
    25a4:	ae ad       	ldd	r26, Y+62	; 0x3e
    25a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25a8:	68 97       	sbiw	r28, 0x18	; 24
    25aa:	0c 90       	ld	r0, X
    25ac:	68 96       	adiw	r28, 0x18	; 24
    25ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    25b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    25b2:	68 97       	sbiw	r28, 0x18	; 24
    25b4:	31 96       	adiw	r30, 0x01	; 1
    25b6:	68 96       	adiw	r28, 0x18	; 24
    25b8:	ff af       	std	Y+63, r31	; 0x3f
    25ba:	ee af       	std	Y+62, r30	; 0x3e
    25bc:	68 97       	sbiw	r28, 0x18	; 24
    25be:	66 96       	adiw	r28, 0x16	; 22
    25c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    25c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    25c4:	66 97       	sbiw	r28, 0x16	; 22
    25c6:	0c 92       	st	X, r0
    25c8:	66 96       	adiw	r28, 0x16	; 22
    25ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    25cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    25ce:	66 97       	sbiw	r28, 0x16	; 22
    25d0:	31 96       	adiw	r30, 0x01	; 1
    25d2:	66 96       	adiw	r28, 0x16	; 22
    25d4:	ff af       	std	Y+63, r31	; 0x3f
    25d6:	ee af       	std	Y+62, r30	; 0x3e
    25d8:	66 97       	sbiw	r28, 0x16	; 22
    25da:	69 96       	adiw	r28, 0x19	; 25
    25dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    25de:	69 97       	sbiw	r28, 0x19	; 25
    25e0:	f1 50       	subi	r31, 0x01	; 1
    25e2:	69 96       	adiw	r28, 0x19	; 25
    25e4:	ff af       	std	Y+63, r31	; 0x3f
    25e6:	69 97       	sbiw	r28, 0x19	; 25
    25e8:	69 96       	adiw	r28, 0x19	; 25
    25ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    25ec:	69 97       	sbiw	r28, 0x19	; 25
    25ee:	88 23       	and	r24, r24
    25f0:	c1 f6       	brne	.-80     	; 0x25a2 <main+0x128>
				0b00100,
				0b01111,
				0b10000,
				0b10000,
				0b01111
		};
    25f2:	ce 01       	movw	r24, r28
    25f4:	8e 5b       	subi	r24, 0xBE	; 190
    25f6:	9f 4f       	sbci	r25, 0xFF	; 255
    25f8:	6b 96       	adiw	r28, 0x1b	; 27
    25fa:	9f af       	std	Y+63, r25	; 0x3f
    25fc:	8e af       	std	Y+62, r24	; 0x3e
    25fe:	6b 97       	sbiw	r28, 0x1b	; 27
    2600:	a9 e8       	ldi	r26, 0x89	; 137
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	6d 96       	adiw	r28, 0x1d	; 29
    2606:	bf af       	std	Y+63, r27	; 0x3f
    2608:	ae af       	std	Y+62, r26	; 0x3e
    260a:	6d 97       	sbiw	r28, 0x1d	; 29
    260c:	b8 e0       	ldi	r27, 0x08	; 8
    260e:	6e 96       	adiw	r28, 0x1e	; 30
    2610:	bf af       	std	Y+63, r27	; 0x3f
    2612:	6e 97       	sbiw	r28, 0x1e	; 30
    2614:	6d 96       	adiw	r28, 0x1d	; 29
    2616:	ee ad       	ldd	r30, Y+62	; 0x3e
    2618:	ff ad       	ldd	r31, Y+63	; 0x3f
    261a:	6d 97       	sbiw	r28, 0x1d	; 29
    261c:	00 80       	ld	r0, Z
    261e:	6d 96       	adiw	r28, 0x1d	; 29
    2620:	8e ad       	ldd	r24, Y+62	; 0x3e
    2622:	9f ad       	ldd	r25, Y+63	; 0x3f
    2624:	6d 97       	sbiw	r28, 0x1d	; 29
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	6d 96       	adiw	r28, 0x1d	; 29
    262a:	9f af       	std	Y+63, r25	; 0x3f
    262c:	8e af       	std	Y+62, r24	; 0x3e
    262e:	6d 97       	sbiw	r28, 0x1d	; 29
    2630:	6b 96       	adiw	r28, 0x1b	; 27
    2632:	ae ad       	ldd	r26, Y+62	; 0x3e
    2634:	bf ad       	ldd	r27, Y+63	; 0x3f
    2636:	6b 97       	sbiw	r28, 0x1b	; 27
    2638:	0c 92       	st	X, r0
    263a:	6b 96       	adiw	r28, 0x1b	; 27
    263c:	ee ad       	ldd	r30, Y+62	; 0x3e
    263e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2640:	6b 97       	sbiw	r28, 0x1b	; 27
    2642:	31 96       	adiw	r30, 0x01	; 1
    2644:	6b 96       	adiw	r28, 0x1b	; 27
    2646:	ff af       	std	Y+63, r31	; 0x3f
    2648:	ee af       	std	Y+62, r30	; 0x3e
    264a:	6b 97       	sbiw	r28, 0x1b	; 27
    264c:	6e 96       	adiw	r28, 0x1e	; 30
    264e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2650:	6e 97       	sbiw	r28, 0x1e	; 30
    2652:	f1 50       	subi	r31, 0x01	; 1
    2654:	6e 96       	adiw	r28, 0x1e	; 30
    2656:	ff af       	std	Y+63, r31	; 0x3f
    2658:	6e 97       	sbiw	r28, 0x1e	; 30
    265a:	6e 96       	adiw	r28, 0x1e	; 30
    265c:	8f ad       	ldd	r24, Y+63	; 0x3f
    265e:	6e 97       	sbiw	r28, 0x1e	; 30
    2660:	88 23       	and	r24, r24
    2662:	c1 f6       	brne	.-80     	; 0x2614 <main+0x19a>


	HLCD_voidInit();
    2664:	0e 94 47 06 	call	0xc8e	; 0xc8e <HLCD_voidInit>

	HLCD_voidSendString(L_charptrDisplay);
    2668:	ce 01       	movw	r24, r28
    266a:	4e 96       	adiw	r24, 0x1e	; 30
    266c:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD_voidSendString>

	HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/
    2670:	80 e4       	ldi	r24, 0x40	; 64
    2672:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>

	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    2676:	1d 8e       	std	Y+29, r1	; 0x1d
    2678:	11 c0       	rjmp	.+34     	; 0x269c <main+0x222>
		HLCD_voidSendChar(L_charptrNewChar4[L_s8Iterator]);
    267a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267c:	28 2f       	mov	r18, r24
    267e:	33 27       	eor	r19, r19
    2680:	27 fd       	sbrc	r18, 7
    2682:	30 95       	com	r19
    2684:	ce 01       	movw	r24, r28
    2686:	8e 5b       	subi	r24, 0xBE	; 190
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>

	HLCD_voidSendString(L_charptrDisplay);

	HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/

	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    2696:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	8d 8f       	std	Y+29, r24	; 0x1d
    269c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    269e:	88 30       	cpi	r24, 0x08	; 8
    26a0:	64 f3       	brlt	.-40     	; 0x267a <main+0x200>
		HLCD_voidSendChar(L_charptrNewChar4[L_s8Iterator]);
	}
	//_delay_us(1);
	//HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    26a2:	1d 8e       	std	Y+29, r1	; 0x1d
    26a4:	10 c0       	rjmp	.+32     	; 0x26c6 <main+0x24c>
		HLCD_voidSendChar(L_charptrNewChar3[L_s8Iterator]);
    26a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a8:	28 2f       	mov	r18, r24
    26aa:	33 27       	eor	r19, r19
    26ac:	27 fd       	sbrc	r18, 7
    26ae:	30 95       	com	r19
    26b0:	ce 01       	movw	r24, r28
    26b2:	ca 96       	adiw	r24, 0x3a	; 58
    26b4:	fc 01       	movw	r30, r24
    26b6:	e2 0f       	add	r30, r18
    26b8:	f3 1f       	adc	r31, r19
    26ba:	80 81       	ld	r24, Z
    26bc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
		HLCD_voidSendChar(L_charptrNewChar4[L_s8Iterator]);
	}
	//_delay_us(1);
	//HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    26c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	8d 8f       	std	Y+29, r24	; 0x1d
    26c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c8:	88 30       	cpi	r24, 0x08	; 8
    26ca:	6c f3       	brlt	.-38     	; 0x26a6 <main+0x22c>
		HLCD_voidSendChar(L_charptrNewChar3[L_s8Iterator]);
	}
	//_delay_us(1);
	//HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    26cc:	1d 8e       	std	Y+29, r1	; 0x1d
    26ce:	10 c0       	rjmp	.+32     	; 0x26f0 <main+0x276>
		HLCD_voidSendChar(L_charptrNewChar2[L_s8Iterator]);
    26d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d2:	28 2f       	mov	r18, r24
    26d4:	33 27       	eor	r19, r19
    26d6:	27 fd       	sbrc	r18, 7
    26d8:	30 95       	com	r19
    26da:	ce 01       	movw	r24, r28
    26dc:	c2 96       	adiw	r24, 0x32	; 50
    26de:	fc 01       	movw	r30, r24
    26e0:	e2 0f       	add	r30, r18
    26e2:	f3 1f       	adc	r31, r19
    26e4:	80 81       	ld	r24, Z
    26e6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
		HLCD_voidSendChar(L_charptrNewChar3[L_s8Iterator]);
	}
	//_delay_us(1);
	//HLCD_voidSendCmd(HLCD_CGRAM_ADD); /* Set CGRAM Address 0x40*/
	for(L_s8Iterator=0;L_s8Iterator<8;L_s8Iterator++){
    26ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ec:	8f 5f       	subi	r24, 0xFF	; 255
    26ee:	8d 8f       	std	Y+29, r24	; 0x1d
    26f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26f2:	88 30       	cpi	r24, 0x08	; 8
    26f4:	6c f3       	brlt	.-38     	; 0x26d0 <main+0x256>
		HLCD_voidSendChar(L_charptrNewChar2[L_s8Iterator]);
	}
	//_delay_us(1);

	HLCD_voidSetCur(0,12);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	6c e0       	ldi	r22, 0x0C	; 12
    26fa:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <HLCD_voidSetCur>
	HLCD_voidSendChar(0);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
	HLCD_voidSendChar(1);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
	HLCD_voidSendChar(2);
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendChar>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e2       	ldi	r26, 0x20	; 32
    2716:	b1 e4       	ldi	r27, 0x41	; 65
    2718:	89 8f       	std	Y+25, r24	; 0x19
    271a:	9a 8f       	std	Y+26, r25	; 0x1a
    271c:	ab 8f       	std	Y+27, r26	; 0x1b
    271e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	69 8d       	ldd	r22, Y+25	; 0x19
    2722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8d 8b       	std	Y+21, r24	; 0x15
    273a:	9e 8b       	std	Y+22, r25	; 0x16
    273c:	af 8b       	std	Y+23, r26	; 0x17
    273e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2740:	6d 89       	ldd	r22, Y+21	; 0x15
    2742:	7e 89       	ldd	r23, Y+22	; 0x16
    2744:	8f 89       	ldd	r24, Y+23	; 0x17
    2746:	98 8d       	ldd	r25, Y+24	; 0x18
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <main+0x2e8>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8b 8b       	std	Y+19, r24	; 0x13
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <main+0x366>
	else if (__tmp > 65535)
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <main+0x348>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	89 8b       	std	Y+17, r24	; 0x11
    27ac:	89 89       	ldd	r24, Y+17	; 0x11
    27ae:	9a 89       	ldd	r25, Y+18	; 0x12
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <main+0x336>
    27b4:	9a 8b       	std	Y+18, r25	; 0x12
    27b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ba:	9c 89       	ldd	r25, Y+20	; 0x14
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9c 8b       	std	Y+20, r25	; 0x14
    27c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <main+0x32a>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <main+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	98 8b       	std	Y+16, r25	; 0x10
    27e6:	8f 87       	std	Y+15, r24	; 0x0f
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <main+0x372>
    27f0:	98 8b       	std	Y+16, r25	; 0x10
    27f2:	8f 87       	std	Y+15, r24	; 0x0f
	//HLCD_voidSendChar(3);
	_delay_ms(10);
	HLCD_voidSetCur(1,0);
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <HLCD_voidSetCur>
	HLCD_voidSendString(" ITI NC1 ^_*");
    27fc:	80 e6       	ldi	r24, 0x60	; 96
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 c5 0b 	call	0x178a	; 0x178a <HLCD_voidSendString>

	L_s8Iterator=15;
    2804:	8f e0       	ldi	r24, 0x0F	; 15
    2806:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1){
		// Application (Run )
		if(L_s8Iterator >=0){
    2808:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280a:	88 23       	and	r24, r24
    280c:	24 f0       	brlt	.+8      	; 0x2816 <main+0x39c>
			HLCD_voidSendCmd(HLCD_SHIFT_LEFT);
    280e:	8c e1       	ldi	r24, 0x1C	; 28
    2810:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    2814:	03 c0       	rjmp	.+6      	; 0x281c <main+0x3a2>
		}
		else{
			HLCD_voidSendCmd(HLCD_SHIFT_RIGHT);
    2816:	88 e1       	ldi	r24, 0x18	; 24
    2818:	0e 94 8d 09 	call	0x131a	; 0x131a <HLCD_voidSendCmd>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a6 e9       	ldi	r26, 0x96	; 150
    2822:	b3 e4       	ldi	r27, 0x43	; 67
    2824:	8b 87       	std	Y+11, r24	; 0x0b
    2826:	9c 87       	std	Y+12, r25	; 0x0c
    2828:	ad 87       	std	Y+13, r26	; 0x0d
    282a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	8f 83       	std	Y+7, r24	; 0x07
    2846:	98 87       	std	Y+8, r25	; 0x08
    2848:	a9 87       	std	Y+9, r26	; 0x09
    284a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284c:	6f 81       	ldd	r22, Y+7	; 0x07
    284e:	78 85       	ldd	r23, Y+8	; 0x08
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	9a 85       	ldd	r25, Y+10	; 0x0a
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e8       	ldi	r20, 0x80	; 128
    285a:	5f e3       	ldi	r21, 0x3F	; 63
    285c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2860:	88 23       	and	r24, r24
    2862:	2c f4       	brge	.+10     	; 0x286e <main+0x3f4>
		__ticks = 1;
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	3f c0       	rjmp	.+126    	; 0x28ec <main+0x472>
	else if (__tmp > 65535)
    286e:	6f 81       	ldd	r22, Y+7	; 0x07
    2870:	78 85       	ldd	r23, Y+8	; 0x08
    2872:	89 85       	ldd	r24, Y+9	; 0x09
    2874:	9a 85       	ldd	r25, Y+10	; 0x0a
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	4c f5       	brge	.+82     	; 0x28d8 <main+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <main+0x454>
    28b0:	88 ec       	ldi	r24, 0xC8	; 200
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <main+0x442>
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	69 f7       	brne	.-38     	; 0x28b0 <main+0x436>
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <main+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	9e 81       	ldd	r25, Y+6	; 0x06
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <main+0x47e>
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(300);
		if(L_s8Iterator==-15) L_s8Iterator=15;
    2900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2902:	81 3f       	cpi	r24, 0xF1	; 241
    2904:	11 f4       	brne	.+4      	; 0x290a <main+0x490>
    2906:	8f e0       	ldi	r24, 0x0F	; 15
    2908:	8d 8f       	std	Y+29, r24	; 0x1d
		L_s8Iterator--;
    290a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	8d 8f       	std	Y+29, r24	; 0x1d
    2910:	7b cf       	rjmp	.-266    	; 0x2808 <main+0x38e>

00002912 <__udivmodhi4>:
    2912:	aa 1b       	sub	r26, r26
    2914:	bb 1b       	sub	r27, r27
    2916:	51 e1       	ldi	r21, 0x11	; 17
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <__udivmodhi4_ep>

0000291a <__udivmodhi4_loop>:
    291a:	aa 1f       	adc	r26, r26
    291c:	bb 1f       	adc	r27, r27
    291e:	a6 17       	cp	r26, r22
    2920:	b7 07       	cpc	r27, r23
    2922:	10 f0       	brcs	.+4      	; 0x2928 <__udivmodhi4_ep>
    2924:	a6 1b       	sub	r26, r22
    2926:	b7 0b       	sbc	r27, r23

00002928 <__udivmodhi4_ep>:
    2928:	88 1f       	adc	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	5a 95       	dec	r21
    292e:	a9 f7       	brne	.-22     	; 0x291a <__udivmodhi4_loop>
    2930:	80 95       	com	r24
    2932:	90 95       	com	r25
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	08 95       	ret

0000293a <__prologue_saves__>:
    293a:	2f 92       	push	r2
    293c:	3f 92       	push	r3
    293e:	4f 92       	push	r4
    2940:	5f 92       	push	r5
    2942:	6f 92       	push	r6
    2944:	7f 92       	push	r7
    2946:	8f 92       	push	r8
    2948:	9f 92       	push	r9
    294a:	af 92       	push	r10
    294c:	bf 92       	push	r11
    294e:	cf 92       	push	r12
    2950:	df 92       	push	r13
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	ca 1b       	sub	r28, r26
    2964:	db 0b       	sbc	r29, r27
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	09 94       	ijmp

00002972 <__epilogue_restores__>:
    2972:	2a 88       	ldd	r2, Y+18	; 0x12
    2974:	39 88       	ldd	r3, Y+17	; 0x11
    2976:	48 88       	ldd	r4, Y+16	; 0x10
    2978:	5f 84       	ldd	r5, Y+15	; 0x0f
    297a:	6e 84       	ldd	r6, Y+14	; 0x0e
    297c:	7d 84       	ldd	r7, Y+13	; 0x0d
    297e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2980:	9b 84       	ldd	r9, Y+11	; 0x0b
    2982:	aa 84       	ldd	r10, Y+10	; 0x0a
    2984:	b9 84       	ldd	r11, Y+9	; 0x09
    2986:	c8 84       	ldd	r12, Y+8	; 0x08
    2988:	df 80       	ldd	r13, Y+7	; 0x07
    298a:	ee 80       	ldd	r14, Y+6	; 0x06
    298c:	fd 80       	ldd	r15, Y+5	; 0x05
    298e:	0c 81       	ldd	r16, Y+4	; 0x04
    2990:	1b 81       	ldd	r17, Y+3	; 0x03
    2992:	aa 81       	ldd	r26, Y+2	; 0x02
    2994:	b9 81       	ldd	r27, Y+1	; 0x01
    2996:	ce 0f       	add	r28, r30
    2998:	d1 1d       	adc	r29, r1
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	ed 01       	movw	r28, r26
    29a6:	08 95       	ret

000029a8 <_exit>:
    29a8:	f8 94       	cli

000029aa <__stop_program>:
    29aa:	ff cf       	rjmp	.-2      	; 0x29aa <__stop_program>
