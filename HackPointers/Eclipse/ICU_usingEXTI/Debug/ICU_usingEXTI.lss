
ICU_usingEXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000490c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000490c  000049a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080018c  0080018c  00004acc  2**0
                  ALLOC
  3 .stab         000038ac  00000000  00000000  00004acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001217  00000000  00000000  00008378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000958f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000972f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 05 1d 	jmp	0x3a0a	; 0x3a0a <__vector_1>
       8:	0c 94 32 1d 	jmp	0x3a64	; 0x3a64 <__vector_2>
       c:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__vector_10>
      2c:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 22 	call	0x44ee	; 0x44ee <main>
      8a:	0c 94 84 24 	jmp	0x4908	; 0x4908 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4d 24 	jmp	0x489a	; 0x489a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 75 24 	jmp	0x48ea	; 0x48ea <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 5d 24 	jmp	0x48ba	; 0x48ba <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 79 24 	jmp	0x48f2	; 0x48f2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 57       	subi	r30, 0x75	; 117
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	c2 57       	subi	r28, 0x72	; 114
     e3c:	d0 40       	sbci	r29, 0x00	; 0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	64 e0       	ldi	r22, 0x04	; 4
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	66 e0       	ldi	r22, 0x06	; 6
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	67 e0       	ldi	r22, 0x07	; 7
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>
     e8e:	fe 01       	movw	r30, r28
     e90:	e1 59       	subi	r30, 0x91	; 145
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a0 e2       	ldi	r26, 0x20	; 32
     e9a:	b2 e4       	ldi	r27, 0x42	; 66
     e9c:	80 83       	st	Z, r24
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	a2 83       	std	Z+2, r26	; 0x02
     ea2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea4:	8e 01       	movw	r16, r28
     ea6:	05 59       	subi	r16, 0x95	; 149
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	fe 01       	movw	r30, r28
     eac:	e1 59       	subi	r30, 0x91	; 145
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	4a ef       	ldi	r20, 0xFA	; 250
     ebe:	54 e4       	ldi	r21, 0x44	; 68
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	f8 01       	movw	r30, r16
     eca:	80 83       	st	Z, r24
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	a2 83       	std	Z+2, r26	; 0x02
     ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ed2:	fe 01       	movw	r30, r28
     ed4:	e5 59       	subi	r30, 0x95	; 149
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	82 81       	ldd	r24, Z+2	; 0x02
     ede:	93 81       	ldd	r25, Z+3	; 0x03
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	44 f4       	brge	.+16     	; 0xf00 <HLCD_voidInit+0xd2>
		__ticks = 1;
     ef0:	fe 01       	movw	r30, r28
     ef2:	e7 59       	subi	r30, 0x97	; 151
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	64 c0       	rjmp	.+200    	; 0xfc8 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
     f00:	fe 01       	movw	r30, r28
     f02:	e5 59       	subi	r30, 0x95	; 149
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	3f ef       	ldi	r19, 0xFF	; 255
     f12:	4f e7       	ldi	r20, 0x7F	; 127
     f14:	57 e4       	ldi	r21, 0x47	; 71
     f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f1a:	18 16       	cp	r1, r24
     f1c:	0c f0       	brlt	.+2      	; 0xf20 <HLCD_voidInit+0xf2>
     f1e:	43 c0       	rjmp	.+134    	; 0xfa6 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	fe 01       	movw	r30, r28
     f22:	e1 59       	subi	r30, 0x91	; 145
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8e 01       	movw	r16, r28
     f40:	07 59       	subi	r16, 0x97	; 151
     f42:	1f 4f       	sbci	r17, 0xFF	; 255
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	f8 01       	movw	r30, r16
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	1f c0       	rjmp	.+62     	; 0xf96 <HLCD_voidInit+0x168>
     f58:	fe 01       	movw	r30, r28
     f5a:	e9 59       	subi	r30, 0x99	; 153
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f66:	fe 01       	movw	r30, r28
     f68:	e9 59       	subi	r30, 0x99	; 153
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <HLCD_voidInit+0x142>
     f74:	fe 01       	movw	r30, r28
     f76:	e9 59       	subi	r30, 0x99	; 153
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	91 83       	std	Z+1, r25	; 0x01
     f7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	de 01       	movw	r26, r28
     f80:	a7 59       	subi	r26, 0x97	; 151
     f82:	bf 4f       	sbci	r27, 0xFF	; 255
     f84:	fe 01       	movw	r30, r28
     f86:	e7 59       	subi	r30, 0x97	; 151
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	9c 93       	st	X, r25
     f94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	fe 01       	movw	r30, r28
     f98:	e7 59       	subi	r30, 0x97	; 151
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	d1 f6       	brne	.-76     	; 0xf58 <HLCD_voidInit+0x12a>
     fa4:	27 c0       	rjmp	.+78     	; 0xff4 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	8e 01       	movw	r16, r28
     fa8:	07 59       	subi	r16, 0x97	; 151
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	fe 01       	movw	r30, r28
     fae:	e5 59       	subi	r30, 0x95	; 149
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	f8 01       	movw	r30, r16
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
     fc8:	de 01       	movw	r26, r28
     fca:	ab 59       	subi	r26, 0x9B	; 155
     fcc:	bf 4f       	sbci	r27, 0xFF	; 255
     fce:	fe 01       	movw	r30, r28
     fd0:	e7 59       	subi	r30, 0x97	; 151
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	8d 93       	st	X+, r24
     fda:	9c 93       	st	X, r25
     fdc:	fe 01       	movw	r30, r28
     fde:	eb 59       	subi	r30, 0x9B	; 155
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <HLCD_voidInit+0x1b8>
     fea:	fe 01       	movw	r30, r28
     fec:	eb 59       	subi	r30, 0x9B	; 155
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
     ff4:	83 e3       	ldi	r24, 0x33	; 51
     ff6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
     ffa:	fe 01       	movw	r30, r28
     ffc:	ef 59       	subi	r30, 0x9F	; 159
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 ea       	ldi	r26, 0xA0	; 160
    1006:	b0 e4       	ldi	r27, 0x40	; 64
    1008:	80 83       	st	Z, r24
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	a2 83       	std	Z+2, r26	; 0x02
    100e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1010:	8e 01       	movw	r16, r28
    1012:	03 5a       	subi	r16, 0xA3	; 163
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	fe 01       	movw	r30, r28
    1018:	ef 59       	subi	r30, 0x9F	; 159
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	60 81       	ld	r22, Z
    101e:	71 81       	ldd	r23, Z+1	; 0x01
    1020:	82 81       	ldd	r24, Z+2	; 0x02
    1022:	93 81       	ldd	r25, Z+3	; 0x03
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	4a ef       	ldi	r20, 0xFA	; 250
    102a:	54 e4       	ldi	r21, 0x44	; 68
    102c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	f8 01       	movw	r30, r16
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    103e:	fe 01       	movw	r30, r28
    1040:	e3 5a       	subi	r30, 0xA3	; 163
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	60 81       	ld	r22, Z
    1046:	71 81       	ldd	r23, Z+1	; 0x01
    1048:	82 81       	ldd	r24, Z+2	; 0x02
    104a:	93 81       	ldd	r25, Z+3	; 0x03
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1058:	88 23       	and	r24, r24
    105a:	44 f4       	brge	.+16     	; 0x106c <HLCD_voidInit+0x23e>
		__ticks = 1;
    105c:	fe 01       	movw	r30, r28
    105e:	e5 5a       	subi	r30, 0xA5	; 165
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	80 83       	st	Z, r24
    106a:	64 c0       	rjmp	.+200    	; 0x1134 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
    106c:	fe 01       	movw	r30, r28
    106e:	e3 5a       	subi	r30, 0xA3	; 163
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	0c f0       	brlt	.+2      	; 0x108c <HLCD_voidInit+0x25e>
    108a:	43 c0       	rjmp	.+134    	; 0x1112 <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	fe 01       	movw	r30, r28
    108e:	ef 59       	subi	r30, 0x9F	; 159
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	8e 01       	movw	r16, r28
    10ac:	05 5a       	subi	r16, 0xA5	; 165
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	f8 01       	movw	r30, r16
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	1f c0       	rjmp	.+62     	; 0x1102 <HLCD_voidInit+0x2d4>
    10c4:	fe 01       	movw	r30, r28
    10c6:	e7 5a       	subi	r30, 0xA7	; 167
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	88 ec       	ldi	r24, 0xC8	; 200
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	fe 01       	movw	r30, r28
    10d4:	e7 5a       	subi	r30, 0xA7	; 167
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <HLCD_voidInit+0x2ae>
    10e0:	fe 01       	movw	r30, r28
    10e2:	e7 5a       	subi	r30, 0xA7	; 167
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ea:	de 01       	movw	r26, r28
    10ec:	a5 5a       	subi	r26, 0xA5	; 165
    10ee:	bf 4f       	sbci	r27, 0xFF	; 255
    10f0:	fe 01       	movw	r30, r28
    10f2:	e5 5a       	subi	r30, 0xA5	; 165
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	80 81       	ld	r24, Z
    10f8:	91 81       	ldd	r25, Z+1	; 0x01
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	9c 93       	st	X, r25
    1100:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	fe 01       	movw	r30, r28
    1104:	e5 5a       	subi	r30, 0xA5	; 165
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	d1 f6       	brne	.-76     	; 0x10c4 <HLCD_voidInit+0x296>
    1110:	27 c0       	rjmp	.+78     	; 0x1160 <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1112:	8e 01       	movw	r16, r28
    1114:	05 5a       	subi	r16, 0xA5	; 165
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	fe 01       	movw	r30, r28
    111a:	e3 5a       	subi	r30, 0xA3	; 163
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	f8 01       	movw	r30, r16
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
    1134:	de 01       	movw	r26, r28
    1136:	a9 5a       	subi	r26, 0xA9	; 169
    1138:	bf 4f       	sbci	r27, 0xFF	; 255
    113a:	fe 01       	movw	r30, r28
    113c:	e5 5a       	subi	r30, 0xA5	; 165
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	8d 93       	st	X+, r24
    1146:	9c 93       	st	X, r25
    1148:	fe 01       	movw	r30, r28
    114a:	e9 5a       	subi	r30, 0xA9	; 169
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <HLCD_voidInit+0x324>
    1156:	fe 01       	movw	r30, r28
    1158:	e9 5a       	subi	r30, 0xA9	; 169
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
    1160:	82 e3       	ldi	r24, 0x32	; 50
    1162:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    1166:	fe 01       	movw	r30, r28
    1168:	ed 5a       	subi	r30, 0xAD	; 173
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a8 ec       	ldi	r26, 0xC8	; 200
    1172:	b2 e4       	ldi	r27, 0x42	; 66
    1174:	80 83       	st	Z, r24
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	a2 83       	std	Z+2, r26	; 0x02
    117a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    117c:	8e 01       	movw	r16, r28
    117e:	01 5b       	subi	r16, 0xB1	; 177
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	fe 01       	movw	r30, r28
    1184:	ed 5a       	subi	r30, 0xAD	; 173
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	60 81       	ld	r22, Z
    118a:	71 81       	ldd	r23, Z+1	; 0x01
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	2b ea       	ldi	r18, 0xAB	; 171
    1192:	3a ea       	ldi	r19, 0xAA	; 170
    1194:	4a e2       	ldi	r20, 0x2A	; 42
    1196:	50 e4       	ldi	r21, 0x40	; 64
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	f8 01       	movw	r30, r16
    11a2:	80 83       	st	Z, r24
    11a4:	91 83       	std	Z+1, r25	; 0x01
    11a6:	a2 83       	std	Z+2, r26	; 0x02
    11a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11aa:	fe 01       	movw	r30, r28
    11ac:	e1 5b       	subi	r30, 0xB1	; 177
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	60 81       	ld	r22, Z
    11b2:	71 81       	ldd	r23, Z+1	; 0x01
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e8       	ldi	r20, 0x80	; 128
    11be:	5f e3       	ldi	r21, 0x3F	; 63
    11c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c4:	88 23       	and	r24, r24
    11c6:	34 f4       	brge	.+12     	; 0x11d4 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    11c8:	fe 01       	movw	r30, r28
    11ca:	e2 5b       	subi	r30, 0xB2	; 178
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 83       	st	Z, r24
    11d2:	e0 c0       	rjmp	.+448    	; 0x1394 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    11d4:	fe 01       	movw	r30, r28
    11d6:	e1 5b       	subi	r30, 0xB1	; 177
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	4f e7       	ldi	r20, 0x7F	; 127
    11e8:	53 e4       	ldi	r21, 0x43	; 67
    11ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	0c f0       	brlt	.+2      	; 0x11f4 <HLCD_voidInit+0x3c6>
    11f2:	c0 c0       	rjmp	.+384    	; 0x1374 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    11f4:	fe 01       	movw	r30, r28
    11f6:	ed 5a       	subi	r30, 0xAD	; 173
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a e7       	ldi	r20, 0x7A	; 122
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	fe 01       	movw	r30, r28
    1214:	e6 5b       	subi	r30, 0xB6	; 182
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 83       	st	Z, r24
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	a2 83       	std	Z+2, r26	; 0x02
    121e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1220:	8e 01       	movw	r16, r28
    1222:	0a 5b       	subi	r16, 0xBA	; 186
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e6 5b       	subi	r30, 0xB6	; 182
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	60 81       	ld	r22, Z
    122e:	71 81       	ldd	r23, Z+1	; 0x01
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a ef       	ldi	r20, 0xFA	; 250
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	f8 01       	movw	r30, r16
    1246:	80 83       	st	Z, r24
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	a2 83       	std	Z+2, r26	; 0x02
    124c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    124e:	fe 01       	movw	r30, r28
    1250:	ea 5b       	subi	r30, 0xBA	; 186
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e8       	ldi	r20, 0x80	; 128
    1262:	5f e3       	ldi	r21, 0x3F	; 63
    1264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	44 f4       	brge	.+16     	; 0x127c <HLCD_voidInit+0x44e>
		__ticks = 1;
    126c:	fe 01       	movw	r30, r28
    126e:	ec 5b       	subi	r30, 0xBC	; 188
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	64 c0       	rjmp	.+200    	; 0x1344 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    127c:	fe 01       	movw	r30, r28
    127e:	ea 5b       	subi	r30, 0xBA	; 186
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	3f ef       	ldi	r19, 0xFF	; 255
    128e:	4f e7       	ldi	r20, 0x7F	; 127
    1290:	57 e4       	ldi	r21, 0x47	; 71
    1292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1296:	18 16       	cp	r1, r24
    1298:	0c f0       	brlt	.+2      	; 0x129c <HLCD_voidInit+0x46e>
    129a:	43 c0       	rjmp	.+134    	; 0x1322 <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    129c:	fe 01       	movw	r30, r28
    129e:	e6 5b       	subi	r30, 0xB6	; 182
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8e 01       	movw	r16, r28
    12bc:	0c 5b       	subi	r16, 0xBC	; 188
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	f8 01       	movw	r30, r16
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	80 83       	st	Z, r24
    12d2:	1f c0       	rjmp	.+62     	; 0x1312 <HLCD_voidInit+0x4e4>
    12d4:	fe 01       	movw	r30, r28
    12d6:	ee 5b       	subi	r30, 0xBE	; 190
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	88 ec       	ldi	r24, 0xC8	; 200
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    12e2:	fe 01       	movw	r30, r28
    12e4:	ee 5b       	subi	r30, 0xBE	; 190
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <HLCD_voidInit+0x4be>
    12f0:	fe 01       	movw	r30, r28
    12f2:	ee 5b       	subi	r30, 0xBE	; 190
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	de 01       	movw	r26, r28
    12fc:	ac 5b       	subi	r26, 0xBC	; 188
    12fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1300:	fe 01       	movw	r30, r28
    1302:	ec 5b       	subi	r30, 0xBC	; 188
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	9c 93       	st	X, r25
    1310:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1312:	fe 01       	movw	r30, r28
    1314:	ec 5b       	subi	r30, 0xBC	; 188
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	d1 f6       	brne	.-76     	; 0x12d4 <HLCD_voidInit+0x4a6>
    1320:	42 c0       	rjmp	.+132    	; 0x13a6 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1322:	8e 01       	movw	r16, r28
    1324:	0c 5b       	subi	r16, 0xBC	; 188
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	fe 01       	movw	r30, r28
    132a:	ea 5b       	subi	r30, 0xBA	; 186
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	f8 01       	movw	r30, r16
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
    1344:	de 01       	movw	r26, r28
    1346:	a0 5c       	subi	r26, 0xC0	; 192
    1348:	bf 4f       	sbci	r27, 0xFF	; 255
    134a:	fe 01       	movw	r30, r28
    134c:	ec 5b       	subi	r30, 0xBC	; 188
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	11 96       	adiw	r26, 0x01	; 1
    1356:	9c 93       	st	X, r25
    1358:	8e 93       	st	-X, r24
    135a:	fe 01       	movw	r30, r28
    135c:	e0 5c       	subi	r30, 0xC0	; 192
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <HLCD_voidInit+0x536>
    1368:	fe 01       	movw	r30, r28
    136a:	e0 5c       	subi	r30, 0xC0	; 192
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
    1372:	19 c0       	rjmp	.+50     	; 0x13a6 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1374:	8e 01       	movw	r16, r28
    1376:	02 5b       	subi	r16, 0xB2	; 178
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	fe 01       	movw	r30, r28
    137c:	e1 5b       	subi	r30, 0xB1	; 177
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	60 81       	ld	r22, Z
    1382:	71 81       	ldd	r23, Z+1	; 0x01
    1384:	82 81       	ldd	r24, Z+2	; 0x02
    1386:	93 81       	ldd	r25, Z+3	; 0x03
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	f8 01       	movw	r30, r16
    1392:	80 83       	st	Z, r24
    1394:	fe 01       	movw	r30, r28
    1396:	e2 5b       	subi	r30, 0xB2	; 178
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    139e:	8f ad       	ldd	r24, Y+63	; 0x3f
    13a0:	8a 95       	dec	r24
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <HLCD_voidInit+0x572>
    13a4:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    13a6:	88 e2       	ldi	r24, 0x28	; 40
    13a8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a8 ec       	ldi	r26, 0xC8	; 200
    13b2:	b2 e4       	ldi	r27, 0x42	; 66
    13b4:	8b af       	std	Y+59, r24	; 0x3b
    13b6:	9c af       	std	Y+60, r25	; 0x3c
    13b8:	ad af       	std	Y+61, r26	; 0x3d
    13ba:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    13be:	7c ad       	ldd	r23, Y+60	; 0x3c
    13c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13c4:	2b ea       	ldi	r18, 0xAB	; 171
    13c6:	3a ea       	ldi	r19, 0xAA	; 170
    13c8:	4a e2       	ldi	r20, 0x2A	; 42
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8f ab       	std	Y+55, r24	; 0x37
    13d6:	98 af       	std	Y+56, r25	; 0x38
    13d8:	a9 af       	std	Y+57, r26	; 0x39
    13da:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    13dc:	6f a9       	ldd	r22, Y+55	; 0x37
    13de:	78 ad       	ldd	r23, Y+56	; 0x38
    13e0:	89 ad       	ldd	r24, Y+57	; 0x39
    13e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	1c f4       	brge	.+6      	; 0x13fa <HLCD_voidInit+0x5cc>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	8e ab       	std	Y+54, r24	; 0x36
    13f8:	91 c0       	rjmp	.+290    	; 0x151c <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    13fa:	6f a9       	ldd	r22, Y+55	; 0x37
    13fc:	78 ad       	ldd	r23, Y+56	; 0x38
    13fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1400:	9a ad       	ldd	r25, Y+58	; 0x3a
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	53 e4       	ldi	r21, 0x43	; 67
    140a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	0c f0       	brlt	.+2      	; 0x1414 <HLCD_voidInit+0x5e6>
    1412:	7b c0       	rjmp	.+246    	; 0x150a <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    1414:	6b ad       	ldd	r22, Y+59	; 0x3b
    1416:	7c ad       	ldd	r23, Y+60	; 0x3c
    1418:	8d ad       	ldd	r24, Y+61	; 0x3d
    141a:	9e ad       	ldd	r25, Y+62	; 0x3e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8a ab       	std	Y+50, r24	; 0x32
    142e:	9b ab       	std	Y+51, r25	; 0x33
    1430:	ac ab       	std	Y+52, r26	; 0x34
    1432:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6a a9       	ldd	r22, Y+50	; 0x32
    1436:	7b a9       	ldd	r23, Y+51	; 0x33
    1438:	8c a9       	ldd	r24, Y+52	; 0x34
    143a:	9d a9       	ldd	r25, Y+53	; 0x35
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8e a7       	std	Y+46, r24	; 0x2e
    144e:	9f a7       	std	Y+47, r25	; 0x2f
    1450:	a8 ab       	std	Y+48, r26	; 0x30
    1452:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1454:	6e a5       	ldd	r22, Y+46	; 0x2e
    1456:	7f a5       	ldd	r23, Y+47	; 0x2f
    1458:	88 a9       	ldd	r24, Y+48	; 0x30
    145a:	99 a9       	ldd	r25, Y+49	; 0x31
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <HLCD_voidInit+0x648>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9d a7       	std	Y+45, r25	; 0x2d
    1472:	8c a7       	std	Y+44, r24	; 0x2c
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    1476:	6e a5       	ldd	r22, Y+46	; 0x2e
    1478:	7f a5       	ldd	r23, Y+47	; 0x2f
    147a:	88 a9       	ldd	r24, Y+48	; 0x30
    147c:	99 a9       	ldd	r25, Y+49	; 0x31
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6a a9       	ldd	r22, Y+50	; 0x32
    1490:	7b a9       	ldd	r23, Y+51	; 0x33
    1492:	8c a9       	ldd	r24, Y+52	; 0x34
    1494:	9d a9       	ldd	r25, Y+53	; 0x35
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9d a7       	std	Y+45, r25	; 0x2d
    14b4:	8c a7       	std	Y+44, r24	; 0x2c
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <HLCD_voidInit+0x6a8>
    14b8:	88 ec       	ldi	r24, 0xC8	; 200
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9b a7       	std	Y+43, r25	; 0x2b
    14be:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    14c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <HLCD_voidInit+0x696>
    14c8:	9b a7       	std	Y+43, r25	; 0x2b
    14ca:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    14ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9d a7       	std	Y+45, r25	; 0x2d
    14d4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    14d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <HLCD_voidInit+0x68a>
    14de:	24 c0       	rjmp	.+72     	; 0x1528 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6e a5       	ldd	r22, Y+46	; 0x2e
    14e2:	7f a5       	ldd	r23, Y+47	; 0x2f
    14e4:	88 a9       	ldd	r24, Y+48	; 0x30
    14e6:	99 a9       	ldd	r25, Y+49	; 0x31
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9d a7       	std	Y+45, r25	; 0x2d
    14f2:	8c a7       	std	Y+44, r24	; 0x2c
    14f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    14f8:	99 a7       	std	Y+41, r25	; 0x29
    14fa:	88 a7       	std	Y+40, r24	; 0x28
    14fc:	88 a5       	ldd	r24, Y+40	; 0x28
    14fe:	99 a5       	ldd	r25, Y+41	; 0x29
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <HLCD_voidInit+0x6d2>
    1504:	99 a7       	std	Y+41, r25	; 0x29
    1506:	88 a7       	std	Y+40, r24	; 0x28
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    150a:	6f a9       	ldd	r22, Y+55	; 0x37
    150c:	78 ad       	ldd	r23, Y+56	; 0x38
    150e:	89 ad       	ldd	r24, Y+57	; 0x39
    1510:	9a ad       	ldd	r25, Y+58	; 0x3a
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	8e ab       	std	Y+54, r24	; 0x36
    151c:	8e a9       	ldd	r24, Y+54	; 0x36
    151e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1520:	8f a1       	ldd	r24, Y+39	; 0x27
    1522:	8a 95       	dec	r24
    1524:	f1 f7       	brne	.-4      	; 0x1522 <HLCD_voidInit+0x6f4>
    1526:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    1528:	8c e0       	ldi	r24, 0x0C	; 12
    152a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a8 e4       	ldi	r26, 0x48	; 72
    1534:	b3 e4       	ldi	r27, 0x43	; 67
    1536:	8b a3       	std	Y+35, r24	; 0x23
    1538:	9c a3       	std	Y+36, r25	; 0x24
    153a:	ad a3       	std	Y+37, r26	; 0x25
    153c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    153e:	6b a1       	ldd	r22, Y+35	; 0x23
    1540:	7c a1       	ldd	r23, Y+36	; 0x24
    1542:	8d a1       	ldd	r24, Y+37	; 0x25
    1544:	9e a1       	ldd	r25, Y+38	; 0x26
    1546:	2b ea       	ldi	r18, 0xAB	; 171
    1548:	3a ea       	ldi	r19, 0xAA	; 170
    154a:	4a e2       	ldi	r20, 0x2A	; 42
    154c:	50 e4       	ldi	r21, 0x40	; 64
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
    1558:	98 a3       	std	Y+32, r25	; 0x20
    155a:	a9 a3       	std	Y+33, r26	; 0x21
    155c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    155e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1560:	78 a1       	ldd	r23, Y+32	; 0x20
    1562:	89 a1       	ldd	r24, Y+33	; 0x21
    1564:	9a a1       	ldd	r25, Y+34	; 0x22
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	1c f4       	brge	.+6      	; 0x157c <HLCD_voidInit+0x74e>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	8e 8f       	std	Y+30, r24	; 0x1e
    157a:	91 c0       	rjmp	.+290    	; 0x169e <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    157c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    157e:	78 a1       	ldd	r23, Y+32	; 0x20
    1580:	89 a1       	ldd	r24, Y+33	; 0x21
    1582:	9a a1       	ldd	r25, Y+34	; 0x22
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	53 e4       	ldi	r21, 0x43	; 67
    158c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	0c f0       	brlt	.+2      	; 0x1596 <HLCD_voidInit+0x768>
    1594:	7b c0       	rjmp	.+246    	; 0x168c <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    1596:	6b a1       	ldd	r22, Y+35	; 0x23
    1598:	7c a1       	ldd	r23, Y+36	; 0x24
    159a:	8d a1       	ldd	r24, Y+37	; 0x25
    159c:	9e a1       	ldd	r25, Y+38	; 0x26
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a e7       	ldi	r20, 0x7A	; 122
    15a4:	54 e4       	ldi	r21, 0x44	; 68
    15a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	8a 8f       	std	Y+26, r24	; 0x1a
    15b0:	9b 8f       	std	Y+27, r25	; 0x1b
    15b2:	ac 8f       	std	Y+28, r26	; 0x1c
    15b4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a ef       	ldi	r20, 0xFA	; 250
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8e 8b       	std	Y+22, r24	; 0x16
    15d0:	9f 8b       	std	Y+23, r25	; 0x17
    15d2:	a8 8f       	std	Y+24, r26	; 0x18
    15d4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    15d6:	6e 89       	ldd	r22, Y+22	; 0x16
    15d8:	7f 89       	ldd	r23, Y+23	; 0x17
    15da:	88 8d       	ldd	r24, Y+24	; 0x18
    15dc:	99 8d       	ldd	r25, Y+25	; 0x19
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9d 8b       	std	Y+21, r25	; 0x15
    15f4:	8c 8b       	std	Y+20, r24	; 0x14
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    15f8:	6e 89       	ldd	r22, Y+22	; 0x16
    15fa:	7f 89       	ldd	r23, Y+23	; 0x17
    15fc:	88 8d       	ldd	r24, Y+24	; 0x18
    15fe:	99 8d       	ldd	r25, Y+25	; 0x19
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1612:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1614:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1616:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9d 8b       	std	Y+21, r25	; 0x15
    1636:	8c 8b       	std	Y+20, r24	; 0x14
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <HLCD_voidInit+0x82a>
    163a:	88 ec       	ldi	r24, 0xC8	; 200
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9b 8b       	std	Y+19, r25	; 0x13
    1640:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1642:	8a 89       	ldd	r24, Y+18	; 0x12
    1644:	9b 89       	ldd	r25, Y+19	; 0x13
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <HLCD_voidInit+0x818>
    164a:	9b 8b       	std	Y+19, r25	; 0x13
    164c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8c 89       	ldd	r24, Y+20	; 0x14
    1650:	9d 89       	ldd	r25, Y+21	; 0x15
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9d 8b       	std	Y+21, r25	; 0x15
    1656:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8c 89       	ldd	r24, Y+20	; 0x14
    165a:	9d 89       	ldd	r25, Y+21	; 0x15
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <HLCD_voidInit+0x80c>
    1660:	24 c0       	rjmp	.+72     	; 0x16aa <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6e 89       	ldd	r22, Y+22	; 0x16
    1664:	7f 89       	ldd	r23, Y+23	; 0x17
    1666:	88 8d       	ldd	r24, Y+24	; 0x18
    1668:	99 8d       	ldd	r25, Y+25	; 0x19
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9d 8b       	std	Y+21, r25	; 0x15
    1674:	8c 8b       	std	Y+20, r24	; 0x14
    1676:	8c 89       	ldd	r24, Y+20	; 0x14
    1678:	9d 89       	ldd	r25, Y+21	; 0x15
    167a:	99 8b       	std	Y+17, r25	; 0x11
    167c:	88 8b       	std	Y+16, r24	; 0x10
    167e:	88 89       	ldd	r24, Y+16	; 0x10
    1680:	99 89       	ldd	r25, Y+17	; 0x11
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <HLCD_voidInit+0x854>
    1686:	99 8b       	std	Y+17, r25	; 0x11
    1688:	88 8b       	std	Y+16, r24	; 0x10
    168a:	0f c0       	rjmp	.+30     	; 0x16aa <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    168c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    168e:	78 a1       	ldd	r23, Y+32	; 0x20
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	9a a1       	ldd	r25, Y+34	; 0x22
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8e 8f       	std	Y+30, r24	; 0x1e
    169e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a4:	8a 95       	dec	r24
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <HLCD_voidInit+0x876>
    16a8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    16aa:	86 e0       	ldi	r24, 0x06	; 6
    16ac:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    16b0:	8f e0       	ldi	r24, 0x0F	; 15
    16b2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a0 e0       	ldi	r26, 0x00	; 0
    16c2:	b0 e4       	ldi	r27, 0x40	; 64
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <HLCD_voidInit+0x8e0>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <HLCD_voidInit+0x940>
    1750:	88 ec       	ldi	r24, 0xC8	; 200
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <HLCD_voidInit+0x92e>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <HLCD_voidInit+0x922>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <HLCD_voidInit+0x96a>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    17a0:	ce 58       	subi	r28, 0x8E	; 142
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	c1 56       	subi	r28, 0x61	; 97
    17c6:	d0 40       	sbci	r29, 0x00	; 0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	fe 01       	movw	r30, r28
    17d4:	ef 59       	subi	r30, 0x9F	; 159
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    17f8:	fe 01       	movw	r30, r28
    17fa:	ef 59       	subi	r30, 0x9F	; 159
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	82 95       	swap	r24
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	81 70       	andi	r24, 0x01	; 1
    1806:	98 2f       	mov	r25, r24
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	64 e0       	ldi	r22, 0x04	; 4
    180e:	49 2f       	mov	r20, r25
    1810:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    1814:	fe 01       	movw	r30, r28
    1816:	ef 59       	subi	r30, 0x9F	; 159
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 81       	ld	r24, Z
    181c:	82 95       	swap	r24
    181e:	86 95       	lsr	r24
    1820:	87 70       	andi	r24, 0x07	; 7
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	98 2f       	mov	r25, r24
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	65 e0       	ldi	r22, 0x05	; 5
    182c:	49 2f       	mov	r20, r25
    182e:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    1832:	fe 01       	movw	r30, r28
    1834:	ef 59       	subi	r30, 0x9F	; 159
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	82 95       	swap	r24
    183c:	86 95       	lsr	r24
    183e:	86 95       	lsr	r24
    1840:	83 70       	andi	r24, 0x03	; 3
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	98 2f       	mov	r25, r24
    1846:	9f 5f       	subi	r25, 0xFF	; 255
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	66 e0       	ldi	r22, 0x06	; 6
    184c:	49 2f       	mov	r20, r25
    184e:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    1852:	fe 01       	movw	r30, r28
    1854:	ef 59       	subi	r30, 0x9F	; 159
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	80 81       	ld	r24, Z
    185a:	88 1f       	adc	r24, r24
    185c:	88 27       	eor	r24, r24
    185e:	88 1f       	adc	r24, r24
    1860:	98 2f       	mov	r25, r24
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	67 e0       	ldi	r22, 0x07	; 7
    1868:	49 2f       	mov	r20, r25
    186a:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	42 e0       	ldi	r20, 0x02	; 2
    1874:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    1878:	fe 01       	movw	r30, r28
    187a:	e3 5a       	subi	r30, 0xA3	; 163
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e2       	ldi	r26, 0x20	; 32
    1884:	b1 e4       	ldi	r27, 0x41	; 65
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    188e:	8e 01       	movw	r16, r28
    1890:	07 5a       	subi	r16, 0xA7	; 167
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	fe 01       	movw	r30, r28
    1896:	e3 5a       	subi	r30, 0xA3	; 163
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	2b ea       	ldi	r18, 0xAB	; 171
    18a4:	3a ea       	ldi	r19, 0xAA	; 170
    18a6:	4a e2       	ldi	r20, 0x2A	; 42
    18a8:	50 e4       	ldi	r21, 0x40	; 64
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	f8 01       	movw	r30, r16
    18b4:	80 83       	st	Z, r24
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	a2 83       	std	Z+2, r26	; 0x02
    18ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18bc:	fe 01       	movw	r30, r28
    18be:	e7 5a       	subi	r30, 0xA7	; 167
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	34 f4       	brge	.+12     	; 0x18e6 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    18da:	fe 01       	movw	r30, r28
    18dc:	e8 5a       	subi	r30, 0xA8	; 168
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 83       	st	Z, r24
    18e4:	e0 c0       	rjmp	.+448    	; 0x1aa6 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5a       	subi	r30, 0xA7	; 167
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4f e7       	ldi	r20, 0x7F	; 127
    18fa:	53 e4       	ldi	r21, 0x43	; 67
    18fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1900:	18 16       	cp	r1, r24
    1902:	0c f0       	brlt	.+2      	; 0x1906 <HLCD_voidSendCmd+0x14e>
    1904:	c0 c0       	rjmp	.+384    	; 0x1a86 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1906:	fe 01       	movw	r30, r28
    1908:	e3 5a       	subi	r30, 0xA3	; 163
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	fe 01       	movw	r30, r28
    1926:	ec 5a       	subi	r30, 0xAC	; 172
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 83       	st	Z, r24
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	a2 83       	std	Z+2, r26	; 0x02
    1930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	8e 01       	movw	r16, r28
    1934:	00 5b       	subi	r16, 0xB0	; 176
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	fe 01       	movw	r30, r28
    193a:	ec 5a       	subi	r30, 0xAC	; 172
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a ef       	ldi	r20, 0xFA	; 250
    194c:	54 e4       	ldi	r21, 0x44	; 68
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	f8 01       	movw	r30, r16
    1958:	80 83       	st	Z, r24
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	a2 83       	std	Z+2, r26	; 0x02
    195e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1960:	fe 01       	movw	r30, r28
    1962:	e0 5b       	subi	r30, 0xB0	; 176
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e8       	ldi	r20, 0x80	; 128
    1974:	5f e3       	ldi	r21, 0x3F	; 63
    1976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197a:	88 23       	and	r24, r24
    197c:	44 f4       	brge	.+16     	; 0x198e <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    197e:	fe 01       	movw	r30, r28
    1980:	e2 5b       	subi	r30, 0xB2	; 178
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	91 83       	std	Z+1, r25	; 0x01
    198a:	80 83       	st	Z, r24
    198c:	64 c0       	rjmp	.+200    	; 0x1a56 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    198e:	fe 01       	movw	r30, r28
    1990:	e0 5b       	subi	r30, 0xB0	; 176
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	0c f0       	brlt	.+2      	; 0x19ae <HLCD_voidSendCmd+0x1f6>
    19ac:	43 c0       	rjmp	.+134    	; 0x1a34 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ae:	fe 01       	movw	r30, r28
    19b0:	ec 5a       	subi	r30, 0xAC	; 172
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	60 81       	ld	r22, Z
    19b6:	71 81       	ldd	r23, Z+1	; 0x01
    19b8:	82 81       	ldd	r24, Z+2	; 0x02
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8e 01       	movw	r16, r28
    19ce:	02 5b       	subi	r16, 0xB2	; 178
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	1f c0       	rjmp	.+62     	; 0x1a24 <HLCD_voidSendCmd+0x26c>
    19e6:	fe 01       	movw	r30, r28
    19e8:	e4 5b       	subi	r30, 0xB4	; 180
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	88 ec       	ldi	r24, 0xC8	; 200
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
    19f4:	fe 01       	movw	r30, r28
    19f6:	e4 5b       	subi	r30, 0xB4	; 180
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 81       	ld	r24, Z
    19fc:	91 81       	ldd	r25, Z+1	; 0x01
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <HLCD_voidSendCmd+0x246>
    1a02:	fe 01       	movw	r30, r28
    1a04:	e4 5b       	subi	r30, 0xB4	; 180
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	91 83       	std	Z+1, r25	; 0x01
    1a0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	de 01       	movw	r26, r28
    1a0e:	a2 5b       	subi	r26, 0xB2	; 178
    1a10:	bf 4f       	sbci	r27, 0xFF	; 255
    1a12:	fe 01       	movw	r30, r28
    1a14:	e2 5b       	subi	r30, 0xB2	; 178
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	9c 93       	st	X, r25
    1a22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a24:	fe 01       	movw	r30, r28
    1a26:	e2 5b       	subi	r30, 0xB2	; 178
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	d1 f6       	brne	.-76     	; 0x19e6 <HLCD_voidSendCmd+0x22e>
    1a32:	4b c0       	rjmp	.+150    	; 0x1aca <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	8e 01       	movw	r16, r28
    1a36:	02 5b       	subi	r16, 0xB2	; 178
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e0 5b       	subi	r30, 0xB0	; 176
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	de 01       	movw	r26, r28
    1a58:	a6 5b       	subi	r26, 0xB6	; 182
    1a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e2 5b       	subi	r30, 0xB2	; 178
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	11 96       	adiw	r26, 0x01	; 1
    1a68:	9c 93       	st	X, r25
    1a6a:	8e 93       	st	-X, r24
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e6 5b       	subi	r30, 0xB6	; 182
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <HLCD_voidSendCmd+0x2be>
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e6 5b       	subi	r30, 0xB6	; 182
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	91 83       	std	Z+1, r25	; 0x01
    1a82:	80 83       	st	Z, r24
    1a84:	22 c0       	rjmp	.+68     	; 0x1aca <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a86:	8e 01       	movw	r16, r28
    1a88:	08 5a       	subi	r16, 0xA8	; 168
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e7 5a       	subi	r30, 0xA7	; 167
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	80 83       	st	Z, r24
    1aa6:	de 01       	movw	r26, r28
    1aa8:	a7 5b       	subi	r26, 0xB7	; 183
    1aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    1aac:	fe 01       	movw	r30, r28
    1aae:	e8 5a       	subi	r30, 0xA8	; 168
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5b       	subi	r30, 0xB7	; 183
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	8a 95       	dec	r24
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <HLCD_voidSendCmd+0x306>
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e7 5b       	subi	r30, 0xB7	; 183
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	62 e0       	ldi	r22, 0x02	; 2
    1ace:	41 e0       	ldi	r20, 0x01	; 1
    1ad0:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	eb 5b       	subi	r30, 0xBB	; 187
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a8 ec       	ldi	r26, 0xC8	; 200
    1ae0:	b2 e4       	ldi	r27, 0x42	; 66
    1ae2:	80 83       	st	Z, r24
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	a2 83       	std	Z+2, r26	; 0x02
    1ae8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5b       	subi	r16, 0xBF	; 191
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	eb 5b       	subi	r30, 0xBB	; 187
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	2b ea       	ldi	r18, 0xAB	; 171
    1b00:	3a ea       	ldi	r19, 0xAA	; 170
    1b02:	4a e2       	ldi	r20, 0x2A	; 42
    1b04:	50 e4       	ldi	r21, 0x40	; 64
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	f8 01       	movw	r30, r16
    1b10:	80 83       	st	Z, r24
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	a2 83       	std	Z+2, r26	; 0x02
    1b16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ef 5b       	subi	r30, 0xBF	; 191
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	34 f4       	brge	.+12     	; 0x1b42 <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e0 5c       	subi	r30, 0xC0	; 192
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 83       	st	Z, r24
    1b40:	9d c0       	rjmp	.+314    	; 0x1c7c <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    1b42:	fe 01       	movw	r30, r28
    1b44:	ef 5b       	subi	r30, 0xBF	; 191
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	4f e7       	ldi	r20, 0x7F	; 127
    1b56:	53 e4       	ldi	r21, 0x43	; 67
    1b58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5c:	18 16       	cp	r1, r24
    1b5e:	0c f0       	brlt	.+2      	; 0x1b62 <HLCD_voidSendCmd+0x3aa>
    1b60:	7e c0       	rjmp	.+252    	; 0x1c5e <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    1b62:	fe 01       	movw	r30, r28
    1b64:	eb 5b       	subi	r30, 0xBB	; 187
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	82 81       	ldd	r24, Z+2	; 0x02
    1b6e:	93 81       	ldd	r25, Z+3	; 0x03
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	54 e4       	ldi	r21, 0x44	; 68
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8c af       	std	Y+60, r24	; 0x3c
    1b82:	9d af       	std	Y+61, r25	; 0x3d
    1b84:	ae af       	std	Y+62, r26	; 0x3e
    1b86:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a ef       	ldi	r20, 0xFA	; 250
    1b96:	54 e4       	ldi	r21, 0x44	; 68
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	88 af       	std	Y+56, r24	; 0x38
    1ba2:	99 af       	std	Y+57, r25	; 0x39
    1ba4:	aa af       	std	Y+58, r26	; 0x3a
    1ba6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1ba8:	68 ad       	ldd	r22, Y+56	; 0x38
    1baa:	79 ad       	ldd	r23, Y+57	; 0x39
    1bac:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bae:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9f ab       	std	Y+55, r25	; 0x37
    1bc6:	8e ab       	std	Y+54, r24	; 0x36
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1bca:	68 ad       	ldd	r22, Y+56	; 0x38
    1bcc:	79 ad       	ldd	r23, Y+57	; 0x39
    1bce:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bd0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1be4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1be6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1be8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9f ab       	std	Y+55, r25	; 0x37
    1c08:	8e ab       	std	Y+54, r24	; 0x36
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <HLCD_voidSendCmd+0x472>
    1c0c:	88 ec       	ldi	r24, 0xC8	; 200
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9d ab       	std	Y+53, r25	; 0x35
    1c12:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c14:	8c a9       	ldd	r24, Y+52	; 0x34
    1c16:	9d a9       	ldd	r25, Y+53	; 0x35
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <HLCD_voidSendCmd+0x460>
    1c1c:	9d ab       	std	Y+53, r25	; 0x35
    1c1e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8e a9       	ldd	r24, Y+54	; 0x36
    1c22:	9f a9       	ldd	r25, Y+55	; 0x37
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9f ab       	std	Y+55, r25	; 0x37
    1c28:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c2c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <HLCD_voidSendCmd+0x454>
    1c32:	2d c0       	rjmp	.+90     	; 0x1c8e <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	68 ad       	ldd	r22, Y+56	; 0x38
    1c36:	79 ad       	ldd	r23, Y+57	; 0x39
    1c38:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c3a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9f ab       	std	Y+55, r25	; 0x37
    1c46:	8e ab       	std	Y+54, r24	; 0x36
    1c48:	8e a9       	ldd	r24, Y+54	; 0x36
    1c4a:	9f a9       	ldd	r25, Y+55	; 0x37
    1c4c:	9b ab       	std	Y+51, r25	; 0x33
    1c4e:	8a ab       	std	Y+50, r24	; 0x32
    1c50:	8a a9       	ldd	r24, Y+50	; 0x32
    1c52:	9b a9       	ldd	r25, Y+51	; 0x33
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <HLCD_voidSendCmd+0x49c>
    1c58:	9b ab       	std	Y+51, r25	; 0x33
    1c5a:	8a ab       	std	Y+50, r24	; 0x32
    1c5c:	18 c0       	rjmp	.+48     	; 0x1c8e <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ef 5b       	subi	r30, 0xBF	; 191
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	fe 01       	movw	r30, r28
    1c76:	e0 5c       	subi	r30, 0xC0	; 192
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 83       	st	Z, r24
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e0 5c       	subi	r30, 0xC0	; 192
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c86:	89 a9       	ldd	r24, Y+49	; 0x31
    1c88:	8a 95       	dec	r24
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <HLCD_voidSendCmd+0x4d0>
    1c8c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 59       	subi	r30, 0x9F	; 159
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	81 70       	andi	r24, 0x01	; 1
    1c98:	98 2f       	mov	r25, r24
    1c9a:	9f 5f       	subi	r25, 0xFF	; 255
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	49 2f       	mov	r20, r25
    1ca2:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ef 59       	subi	r30, 0x9F	; 159
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	86 95       	lsr	r24
    1cb0:	81 70       	andi	r24, 0x01	; 1
    1cb2:	98 2f       	mov	r25, r24
    1cb4:	9f 5f       	subi	r25, 0xFF	; 255
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	65 e0       	ldi	r22, 0x05	; 5
    1cba:	49 2f       	mov	r20, r25
    1cbc:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 59       	subi	r30, 0x9F	; 159
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	86 95       	lsr	r24
    1cca:	86 95       	lsr	r24
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	98 2f       	mov	r25, r24
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	66 e0       	ldi	r22, 0x06	; 6
    1cd6:	49 2f       	mov	r20, r25
    1cd8:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1cdc:	fe 01       	movw	r30, r28
    1cde:	ef 59       	subi	r30, 0x9F	; 159
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	86 95       	lsr	r24
    1ce6:	86 95       	lsr	r24
    1ce8:	86 95       	lsr	r24
    1cea:	81 70       	andi	r24, 0x01	; 1
    1cec:	98 2f       	mov	r25, r24
    1cee:	9f 5f       	subi	r25, 0xFF	; 255
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	67 e0       	ldi	r22, 0x07	; 7
    1cf4:	49 2f       	mov	r20, r25
    1cf6:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	62 e0       	ldi	r22, 0x02	; 2
    1cfe:	42 e0       	ldi	r20, 0x02	; 2
    1d00:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e2       	ldi	r26, 0x20	; 32
    1d0a:	b1 e4       	ldi	r27, 0x41	; 65
    1d0c:	8d a7       	std	Y+45, r24	; 0x2d
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	af a7       	std	Y+47, r26	; 0x2f
    1d12:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d14:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d16:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	2b ea       	ldi	r18, 0xAB	; 171
    1d1e:	3a ea       	ldi	r19, 0xAA	; 170
    1d20:	4a e2       	ldi	r20, 0x2A	; 42
    1d22:	50 e4       	ldi	r21, 0x40	; 64
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	89 a7       	std	Y+41, r24	; 0x29
    1d2e:	9a a7       	std	Y+42, r25	; 0x2a
    1d30:	ab a7       	std	Y+43, r26	; 0x2b
    1d32:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d34:	69 a5       	ldd	r22, Y+41	; 0x29
    1d36:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	1c f4       	brge	.+6      	; 0x1d52 <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	88 a7       	std	Y+40, r24	; 0x28
    1d50:	91 c0       	rjmp	.+290    	; 0x1e74 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1d52:	69 a5       	ldd	r22, Y+41	; 0x29
    1d54:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <HLCD_voidSendCmd+0x5b4>
    1d6a:	7b c0       	rjmp	.+246    	; 0x1e62 <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1d6c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d6e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d70:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d72:	98 a9       	ldd	r25, Y+48	; 0x30
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a e7       	ldi	r20, 0x7A	; 122
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8c a3       	std	Y+36, r24	; 0x24
    1d86:	9d a3       	std	Y+37, r25	; 0x25
    1d88:	ae a3       	std	Y+38, r26	; 0x26
    1d8a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8c:	6c a1       	ldd	r22, Y+36	; 0x24
    1d8e:	7d a1       	ldd	r23, Y+37	; 0x25
    1d90:	8e a1       	ldd	r24, Y+38	; 0x26
    1d92:	9f a1       	ldd	r25, Y+39	; 0x27
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a ef       	ldi	r20, 0xFA	; 250
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	88 a3       	std	Y+32, r24	; 0x20
    1da6:	99 a3       	std	Y+33, r25	; 0x21
    1da8:	aa a3       	std	Y+34, r26	; 0x22
    1daa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1dac:	68 a1       	ldd	r22, Y+32	; 0x20
    1dae:	79 a1       	ldd	r23, Y+33	; 0x21
    1db0:	8a a1       	ldd	r24, Y+34	; 0x22
    1db2:	9b a1       	ldd	r25, Y+35	; 0x23
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e8       	ldi	r20, 0x80	; 128
    1dba:	5f e3       	ldi	r21, 0x3F	; 63
    1dbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc0:	88 23       	and	r24, r24
    1dc2:	2c f4       	brge	.+10     	; 0x1dce <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9f 8f       	std	Y+31, r25	; 0x1f
    1dca:	8e 8f       	std	Y+30, r24	; 0x1e
    1dcc:	3f c0       	rjmp	.+126    	; 0x1e4c <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1dce:	68 a1       	ldd	r22, Y+32	; 0x20
    1dd0:	79 a1       	ldd	r23, Y+33	; 0x21
    1dd2:	8a a1       	ldd	r24, Y+34	; 0x22
    1dd4:	9b a1       	ldd	r25, Y+35	; 0x23
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	4c f5       	brge	.+82     	; 0x1e38 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	6c a1       	ldd	r22, Y+36	; 0x24
    1de8:	7d a1       	ldd	r23, Y+37	; 0x25
    1dea:	8e a1       	ldd	r24, Y+38	; 0x26
    1dec:	9f a1       	ldd	r25, Y+39	; 0x27
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e2       	ldi	r20, 0x20	; 32
    1df4:	51 e4       	ldi	r21, 0x41	; 65
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	bc 01       	movw	r22, r24
    1e00:	cd 01       	movw	r24, r26
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <HLCD_voidSendCmd+0x676>
    1e10:	88 ec       	ldi	r24, 0xC8	; 200
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	9d 8f       	std	Y+29, r25	; 0x1d
    1e16:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e18:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <HLCD_voidSendCmd+0x664>
    1e20:	9d 8f       	std	Y+29, r25	; 0x1d
    1e22:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e26:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e2c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e30:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <HLCD_voidSendCmd+0x658>
    1e36:	24 c0       	rjmp	.+72     	; 0x1e80 <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e38:	68 a1       	ldd	r22, Y+32	; 0x20
    1e3a:	79 a1       	ldd	r23, Y+33	; 0x21
    1e3c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e3e:	9b a1       	ldd	r25, Y+35	; 0x23
    1e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	9f 8f       	std	Y+31, r25	; 0x1f
    1e4a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e50:	9b 8f       	std	Y+27, r25	; 0x1b
    1e52:	8a 8f       	std	Y+26, r24	; 0x1a
    1e54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <HLCD_voidSendCmd+0x6a0>
    1e5c:	9b 8f       	std	Y+27, r25	; 0x1b
    1e5e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e62:	69 a5       	ldd	r22, Y+41	; 0x29
    1e64:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	88 a7       	std	Y+40, r24	; 0x28
    1e74:	88 a5       	ldd	r24, Y+40	; 0x28
    1e76:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e78:	89 8d       	ldd	r24, Y+25	; 0x19
    1e7a:	8a 95       	dec	r24
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <HLCD_voidSendCmd+0x6c2>
    1e7e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a8 ec       	ldi	r26, 0xC8	; 200
    1e90:	b2 e4       	ldi	r27, 0x42	; 66
    1e92:	8d 8b       	std	Y+21, r24	; 0x15
    1e94:	9e 8b       	std	Y+22, r25	; 0x16
    1e96:	af 8b       	std	Y+23, r26	; 0x17
    1e98:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea2:	2b ea       	ldi	r18, 0xAB	; 171
    1ea4:	3a ea       	ldi	r19, 0xAA	; 170
    1ea6:	4a e2       	ldi	r20, 0x2A	; 42
    1ea8:	50 e4       	ldi	r21, 0x40	; 64
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
    1eb4:	9a 8b       	std	Y+18, r25	; 0x12
    1eb6:	ab 8b       	std	Y+19, r26	; 0x13
    1eb8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eba:	69 89       	ldd	r22, Y+17	; 0x11
    1ebc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	1c f4       	brge	.+6      	; 0x1ed8 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	88 8b       	std	Y+16, r24	; 0x10
    1ed6:	91 c0       	rjmp	.+290    	; 0x1ffa <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    1ed8:	69 89       	ldd	r22, Y+17	; 0x11
    1eda:	7a 89       	ldd	r23, Y+18	; 0x12
    1edc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ede:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	53 e4       	ldi	r21, 0x43	; 67
    1ee8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	0c f0       	brlt	.+2      	; 0x1ef2 <HLCD_voidSendCmd+0x73a>
    1ef0:	7b c0       	rjmp	.+246    	; 0x1fe8 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a e7       	ldi	r20, 0x7A	; 122
    1f00:	54 e4       	ldi	r21, 0x44	; 68
    1f02:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8c 87       	std	Y+12, r24	; 0x0c
    1f0c:	9d 87       	std	Y+13, r25	; 0x0d
    1f0e:	ae 87       	std	Y+14, r26	; 0x0e
    1f10:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f14:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f16:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f18:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a ef       	ldi	r20, 0xFA	; 250
    1f20:	54 e4       	ldi	r21, 0x44	; 68
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	88 87       	std	Y+8, r24	; 0x08
    1f2c:	99 87       	std	Y+9, r25	; 0x09
    1f2e:	aa 87       	std	Y+10, r26	; 0x0a
    1f30:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f32:	68 85       	ldd	r22, Y+8	; 0x08
    1f34:	79 85       	ldd	r23, Y+9	; 0x09
    1f36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9f 83       	std	Y+7, r25	; 0x07
    1f50:	8e 83       	std	Y+6, r24	; 0x06
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    1f54:	68 85       	ldd	r22, Y+8	; 0x08
    1f56:	79 85       	ldd	r23, Y+9	; 0x09
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f70:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f72:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9f 83       	std	Y+7, r25	; 0x07
    1f92:	8e 83       	std	Y+6, r24	; 0x06
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <HLCD_voidSendCmd+0x7fc>
    1f96:	88 ec       	ldi	r24, 0xC8	; 200
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9d 83       	std	Y+5, r25	; 0x05
    1f9c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <HLCD_voidSendCmd+0x7ea>
    1fa6:	9d 83       	std	Y+5, r25	; 0x05
    1fa8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8e 81       	ldd	r24, Y+6	; 0x06
    1fac:	9f 81       	ldd	r25, Y+7	; 0x07
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9f 83       	std	Y+7, r25	; 0x07
    1fb2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <HLCD_voidSendCmd+0x7de>
    1fbc:	24 c0       	rjmp	.+72     	; 0x2006 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	68 85       	ldd	r22, Y+8	; 0x08
    1fc0:	79 85       	ldd	r23, Y+9	; 0x09
    1fc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9f 83       	std	Y+7, r25	; 0x07
    1fd0:	8e 83       	std	Y+6, r24	; 0x06
    1fd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd6:	9b 83       	std	Y+3, r25	; 0x03
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <HLCD_voidSendCmd+0x826>
    1fe2:	9b 83       	std	Y+3, r25	; 0x03
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe8:	69 89       	ldd	r22, Y+17	; 0x11
    1fea:	7a 89       	ldd	r23, Y+18	; 0x12
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	88 8b       	std	Y+16, r24	; 0x10
    1ffa:	88 89       	ldd	r24, Y+16	; 0x10
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8a 95       	dec	r24
    2002:	f1 f7       	brne	.-4      	; 0x2000 <HLCD_voidSendCmd+0x848>
    2004:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    2006:	cf 59       	subi	r28, 0x9F	; 159
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	c1 56       	subi	r28, 0x61	; 97
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	fe 01       	movw	r30, r28
    203a:	ef 59       	subi	r30, 0x9F	; 159
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	42 e0       	ldi	r20, 0x02	; 2
    2046:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    205e:	fe 01       	movw	r30, r28
    2060:	ef 59       	subi	r30, 0x9F	; 159
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	82 95       	swap	r24
    2068:	8f 70       	andi	r24, 0x0F	; 15
    206a:	81 70       	andi	r24, 0x01	; 1
    206c:	98 2f       	mov	r25, r24
    206e:	9f 5f       	subi	r25, 0xFF	; 255
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	64 e0       	ldi	r22, 0x04	; 4
    2074:	49 2f       	mov	r20, r25
    2076:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    207a:	fe 01       	movw	r30, r28
    207c:	ef 59       	subi	r30, 0x9F	; 159
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	82 95       	swap	r24
    2084:	86 95       	lsr	r24
    2086:	87 70       	andi	r24, 0x07	; 7
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	98 2f       	mov	r25, r24
    208c:	9f 5f       	subi	r25, 0xFF	; 255
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	65 e0       	ldi	r22, 0x05	; 5
    2092:	49 2f       	mov	r20, r25
    2094:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    2098:	fe 01       	movw	r30, r28
    209a:	ef 59       	subi	r30, 0x9F	; 159
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	82 95       	swap	r24
    20a2:	86 95       	lsr	r24
    20a4:	86 95       	lsr	r24
    20a6:	83 70       	andi	r24, 0x03	; 3
    20a8:	81 70       	andi	r24, 0x01	; 1
    20aa:	98 2f       	mov	r25, r24
    20ac:	9f 5f       	subi	r25, 0xFF	; 255
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	66 e0       	ldi	r22, 0x06	; 6
    20b2:	49 2f       	mov	r20, r25
    20b4:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    20b8:	fe 01       	movw	r30, r28
    20ba:	ef 59       	subi	r30, 0x9F	; 159
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	88 1f       	adc	r24, r24
    20c2:	88 27       	eor	r24, r24
    20c4:	88 1f       	adc	r24, r24
    20c6:	98 2f       	mov	r25, r24
    20c8:	9f 5f       	subi	r25, 0xFF	; 255
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	67 e0       	ldi	r22, 0x07	; 7
    20ce:	49 2f       	mov	r20, r25
    20d0:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	62 e0       	ldi	r22, 0x02	; 2
    20d8:	42 e0       	ldi	r20, 0x02	; 2
    20da:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    20de:	fe 01       	movw	r30, r28
    20e0:	e3 5a       	subi	r30, 0xA3	; 163
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	a0 e2       	ldi	r26, 0x20	; 32
    20ea:	b1 e4       	ldi	r27, 0x41	; 65
    20ec:	80 83       	st	Z, r24
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	a2 83       	std	Z+2, r26	; 0x02
    20f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f4:	8e 01       	movw	r16, r28
    20f6:	07 5a       	subi	r16, 0xA7	; 167
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	e3 5a       	subi	r30, 0xA3	; 163
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	2b ea       	ldi	r18, 0xAB	; 171
    210a:	3a ea       	ldi	r19, 0xAA	; 170
    210c:	4a e2       	ldi	r20, 0x2A	; 42
    210e:	50 e4       	ldi	r21, 0x40	; 64
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	80 83       	st	Z, r24
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	a2 83       	std	Z+2, r26	; 0x02
    2120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2122:	fe 01       	movw	r30, r28
    2124:	e7 5a       	subi	r30, 0xA7	; 167
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	34 f4       	brge	.+12     	; 0x214c <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    2140:	fe 01       	movw	r30, r28
    2142:	e8 5a       	subi	r30, 0xA8	; 168
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 83       	st	Z, r24
    214a:	e0 c0       	rjmp	.+448    	; 0x230c <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5a       	subi	r30, 0xA7	; 167
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4f e7       	ldi	r20, 0x7F	; 127
    2160:	53 e4       	ldi	r21, 0x43	; 67
    2162:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2166:	18 16       	cp	r1, r24
    2168:	0c f0       	brlt	.+2      	; 0x216c <HLCD_voidSendChar+0x14e>
    216a:	c0 c0       	rjmp	.+384    	; 0x22ec <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    216c:	fe 01       	movw	r30, r28
    216e:	e3 5a       	subi	r30, 0xA3	; 163
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	fe 01       	movw	r30, r28
    218c:	ec 5a       	subi	r30, 0xAC	; 172
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 83       	st	Z, r24
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	a2 83       	std	Z+2, r26	; 0x02
    2196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2198:	8e 01       	movw	r16, r28
    219a:	00 5b       	subi	r16, 0xB0	; 176
    219c:	1f 4f       	sbci	r17, 0xFF	; 255
    219e:	fe 01       	movw	r30, r28
    21a0:	ec 5a       	subi	r30, 0xAC	; 172
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	f8 01       	movw	r30, r16
    21be:	80 83       	st	Z, r24
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	a2 83       	std	Z+2, r26	; 0x02
    21c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c6:	fe 01       	movw	r30, r28
    21c8:	e0 5b       	subi	r30, 0xB0	; 176
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	44 f4       	brge	.+16     	; 0x21f4 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    21e4:	fe 01       	movw	r30, r28
    21e6:	e2 5b       	subi	r30, 0xB2	; 178
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
    21f2:	64 c0       	rjmp	.+200    	; 0x22bc <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    21f4:	fe 01       	movw	r30, r28
    21f6:	e0 5b       	subi	r30, 0xB0	; 176
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	60 81       	ld	r22, Z
    21fc:	71 81       	ldd	r23, Z+1	; 0x01
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	0c f0       	brlt	.+2      	; 0x2214 <HLCD_voidSendChar+0x1f6>
    2212:	43 c0       	rjmp	.+134    	; 0x229a <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	fe 01       	movw	r30, r28
    2216:	ec 5a       	subi	r30, 0xAC	; 172
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8e 01       	movw	r16, r28
    2234:	02 5b       	subi	r16, 0xB2	; 178
    2236:	1f 4f       	sbci	r17, 0xFF	; 255
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    224a:	1f c0       	rjmp	.+62     	; 0x228a <HLCD_voidSendChar+0x26c>
    224c:	fe 01       	movw	r30, r28
    224e:	e4 5b       	subi	r30, 0xB4	; 180
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    225a:	fe 01       	movw	r30, r28
    225c:	e4 5b       	subi	r30, 0xB4	; 180
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <HLCD_voidSendChar+0x246>
    2268:	fe 01       	movw	r30, r28
    226a:	e4 5b       	subi	r30, 0xB4	; 180
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	de 01       	movw	r26, r28
    2274:	a2 5b       	subi	r26, 0xB2	; 178
    2276:	bf 4f       	sbci	r27, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e2 5b       	subi	r30, 0xB2	; 178
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	9c 93       	st	X, r25
    2288:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228a:	fe 01       	movw	r30, r28
    228c:	e2 5b       	subi	r30, 0xB2	; 178
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	91 81       	ldd	r25, Z+1	; 0x01
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	d1 f6       	brne	.-76     	; 0x224c <HLCD_voidSendChar+0x22e>
    2298:	4b c0       	rjmp	.+150    	; 0x2330 <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	8e 01       	movw	r16, r28
    229c:	02 5b       	subi	r16, 0xB2	; 178
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	e0 5b       	subi	r30, 0xB0	; 176
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	60 81       	ld	r22, Z
    22a8:	71 81       	ldd	r23, Z+1	; 0x01
    22aa:	82 81       	ldd	r24, Z+2	; 0x02
    22ac:	93 81       	ldd	r25, Z+3	; 0x03
    22ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	f8 01       	movw	r30, r16
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	de 01       	movw	r26, r28
    22be:	a6 5b       	subi	r26, 0xB6	; 182
    22c0:	bf 4f       	sbci	r27, 0xFF	; 255
    22c2:	fe 01       	movw	r30, r28
    22c4:	e2 5b       	subi	r30, 0xB2	; 178
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	11 96       	adiw	r26, 0x01	; 1
    22ce:	9c 93       	st	X, r25
    22d0:	8e 93       	st	-X, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e6 5b       	subi	r30, 0xB6	; 182
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <HLCD_voidSendChar+0x2be>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e6 5b       	subi	r30, 0xB6	; 182
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
    22ea:	22 c0       	rjmp	.+68     	; 0x2330 <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ec:	8e 01       	movw	r16, r28
    22ee:	08 5a       	subi	r16, 0xA8	; 168
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	fe 01       	movw	r30, r28
    22f4:	e7 5a       	subi	r30, 0xA7	; 167
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	f8 01       	movw	r30, r16
    230a:	80 83       	st	Z, r24
    230c:	de 01       	movw	r26, r28
    230e:	a7 5b       	subi	r26, 0xB7	; 183
    2310:	bf 4f       	sbci	r27, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	e8 5a       	subi	r30, 0xA8	; 168
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231c:	fe 01       	movw	r30, r28
    231e:	e7 5b       	subi	r30, 0xB7	; 183
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	80 81       	ld	r24, Z
    2324:	8a 95       	dec	r24
    2326:	f1 f7       	brne	.-4      	; 0x2324 <HLCD_voidSendChar+0x306>
    2328:	fe 01       	movw	r30, r28
    232a:	e7 5b       	subi	r30, 0xB7	; 183
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	62 e0       	ldi	r22, 0x02	; 2
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    233a:	fe 01       	movw	r30, r28
    233c:	eb 5b       	subi	r30, 0xBB	; 187
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a8 ec       	ldi	r26, 0xC8	; 200
    2346:	b2 e4       	ldi	r27, 0x42	; 66
    2348:	80 83       	st	Z, r24
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	a2 83       	std	Z+2, r26	; 0x02
    234e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2350:	8e 01       	movw	r16, r28
    2352:	0f 5b       	subi	r16, 0xBF	; 191
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	fe 01       	movw	r30, r28
    2358:	eb 5b       	subi	r30, 0xBB	; 187
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	60 81       	ld	r22, Z
    235e:	71 81       	ldd	r23, Z+1	; 0x01
    2360:	82 81       	ldd	r24, Z+2	; 0x02
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	2b ea       	ldi	r18, 0xAB	; 171
    2366:	3a ea       	ldi	r19, 0xAA	; 170
    2368:	4a e2       	ldi	r20, 0x2A	; 42
    236a:	50 e4       	ldi	r21, 0x40	; 64
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	f8 01       	movw	r30, r16
    2376:	80 83       	st	Z, r24
    2378:	91 83       	std	Z+1, r25	; 0x01
    237a:	a2 83       	std	Z+2, r26	; 0x02
    237c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237e:	fe 01       	movw	r30, r28
    2380:	ef 5b       	subi	r30, 0xBF	; 191
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	34 f4       	brge	.+12     	; 0x23a8 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	fe 01       	movw	r30, r28
    23a0:	e0 5c       	subi	r30, 0xC0	; 192
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 83       	st	Z, r24
    23a6:	9d c0       	rjmp	.+314    	; 0x24e2 <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    23a8:	fe 01       	movw	r30, r28
    23aa:	ef 5b       	subi	r30, 0xBF	; 191
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	53 e4       	ldi	r21, 0x43	; 67
    23be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	0c f0       	brlt	.+2      	; 0x23c8 <HLCD_voidSendChar+0x3aa>
    23c6:	7e c0       	rjmp	.+252    	; 0x24c4 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    23c8:	fe 01       	movw	r30, r28
    23ca:	eb 5b       	subi	r30, 0xBB	; 187
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a e7       	ldi	r20, 0x7A	; 122
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8c af       	std	Y+60, r24	; 0x3c
    23e8:	9d af       	std	Y+61, r25	; 0x3d
    23ea:	ae af       	std	Y+62, r26	; 0x3e
    23ec:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    23f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	88 af       	std	Y+56, r24	; 0x38
    2408:	99 af       	std	Y+57, r25	; 0x39
    240a:	aa af       	std	Y+58, r26	; 0x3a
    240c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    240e:	68 ad       	ldd	r22, Y+56	; 0x38
    2410:	79 ad       	ldd	r23, Y+57	; 0x39
    2412:	8a ad       	ldd	r24, Y+58	; 0x3a
    2414:	9b ad       	ldd	r25, Y+59	; 0x3b
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <HLCD_voidSendChar+0x412>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9f ab       	std	Y+55, r25	; 0x37
    242c:	8e ab       	std	Y+54, r24	; 0x36
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    2430:	68 ad       	ldd	r22, Y+56	; 0x38
    2432:	79 ad       	ldd	r23, Y+57	; 0x39
    2434:	8a ad       	ldd	r24, Y+58	; 0x3a
    2436:	9b ad       	ldd	r25, Y+59	; 0x3b
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6c ad       	ldd	r22, Y+60	; 0x3c
    244a:	7d ad       	ldd	r23, Y+61	; 0x3d
    244c:	8e ad       	ldd	r24, Y+62	; 0x3e
    244e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9f ab       	std	Y+55, r25	; 0x37
    246e:	8e ab       	std	Y+54, r24	; 0x36
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <HLCD_voidSendChar+0x472>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9d ab       	std	Y+53, r25	; 0x35
    2478:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    247a:	8c a9       	ldd	r24, Y+52	; 0x34
    247c:	9d a9       	ldd	r25, Y+53	; 0x35
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <HLCD_voidSendChar+0x460>
    2482:	9d ab       	std	Y+53, r25	; 0x35
    2484:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8e a9       	ldd	r24, Y+54	; 0x36
    2488:	9f a9       	ldd	r25, Y+55	; 0x37
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9f ab       	std	Y+55, r25	; 0x37
    248e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8e a9       	ldd	r24, Y+54	; 0x36
    2492:	9f a9       	ldd	r25, Y+55	; 0x37
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <HLCD_voidSendChar+0x454>
    2498:	2d c0       	rjmp	.+90     	; 0x24f4 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	68 ad       	ldd	r22, Y+56	; 0x38
    249c:	79 ad       	ldd	r23, Y+57	; 0x39
    249e:	8a ad       	ldd	r24, Y+58	; 0x3a
    24a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9f ab       	std	Y+55, r25	; 0x37
    24ac:	8e ab       	std	Y+54, r24	; 0x36
    24ae:	8e a9       	ldd	r24, Y+54	; 0x36
    24b0:	9f a9       	ldd	r25, Y+55	; 0x37
    24b2:	9b ab       	std	Y+51, r25	; 0x33
    24b4:	8a ab       	std	Y+50, r24	; 0x32
    24b6:	8a a9       	ldd	r24, Y+50	; 0x32
    24b8:	9b a9       	ldd	r25, Y+51	; 0x33
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <HLCD_voidSendChar+0x49c>
    24be:	9b ab       	std	Y+51, r25	; 0x33
    24c0:	8a ab       	std	Y+50, r24	; 0x32
    24c2:	18 c0       	rjmp	.+48     	; 0x24f4 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c4:	fe 01       	movw	r30, r28
    24c6:	ef 5b       	subi	r30, 0xBF	; 191
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	fe 01       	movw	r30, r28
    24dc:	e0 5c       	subi	r30, 0xC0	; 192
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 83       	st	Z, r24
    24e2:	fe 01       	movw	r30, r28
    24e4:	e0 5c       	subi	r30, 0xC0	; 192
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24ec:	89 a9       	ldd	r24, Y+49	; 0x31
    24ee:	8a 95       	dec	r24
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <HLCD_voidSendChar+0x4d0>
    24f2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    24f4:	fe 01       	movw	r30, r28
    24f6:	ef 59       	subi	r30, 0x9F	; 159
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	81 70       	andi	r24, 0x01	; 1
    24fe:	98 2f       	mov	r25, r24
    2500:	9f 5f       	subi	r25, 0xFF	; 255
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	64 e0       	ldi	r22, 0x04	; 4
    2506:	49 2f       	mov	r20, r25
    2508:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    250c:	fe 01       	movw	r30, r28
    250e:	ef 59       	subi	r30, 0x9F	; 159
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	86 95       	lsr	r24
    2516:	81 70       	andi	r24, 0x01	; 1
    2518:	98 2f       	mov	r25, r24
    251a:	9f 5f       	subi	r25, 0xFF	; 255
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	49 2f       	mov	r20, r25
    2522:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    2526:	fe 01       	movw	r30, r28
    2528:	ef 59       	subi	r30, 0x9F	; 159
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	86 95       	lsr	r24
    2530:	86 95       	lsr	r24
    2532:	81 70       	andi	r24, 0x01	; 1
    2534:	98 2f       	mov	r25, r24
    2536:	9f 5f       	subi	r25, 0xFF	; 255
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	66 e0       	ldi	r22, 0x06	; 6
    253c:	49 2f       	mov	r20, r25
    253e:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    2542:	fe 01       	movw	r30, r28
    2544:	ef 59       	subi	r30, 0x9F	; 159
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	86 95       	lsr	r24
    254c:	86 95       	lsr	r24
    254e:	86 95       	lsr	r24
    2550:	81 70       	andi	r24, 0x01	; 1
    2552:	98 2f       	mov	r25, r24
    2554:	9f 5f       	subi	r25, 0xFF	; 255
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	67 e0       	ldi	r22, 0x07	; 7
    255a:	49 2f       	mov	r20, r25
    255c:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	62 e0       	ldi	r22, 0x02	; 2
    2564:	42 e0       	ldi	r20, 0x02	; 2
    2566:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	a0 e2       	ldi	r26, 0x20	; 32
    2570:	b1 e4       	ldi	r27, 0x41	; 65
    2572:	8d a7       	std	Y+45, r24	; 0x2d
    2574:	9e a7       	std	Y+46, r25	; 0x2e
    2576:	af a7       	std	Y+47, r26	; 0x2f
    2578:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    257a:	6d a5       	ldd	r22, Y+45	; 0x2d
    257c:	7e a5       	ldd	r23, Y+46	; 0x2e
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	2b ea       	ldi	r18, 0xAB	; 171
    2584:	3a ea       	ldi	r19, 0xAA	; 170
    2586:	4a e2       	ldi	r20, 0x2A	; 42
    2588:	50 e4       	ldi	r21, 0x40	; 64
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	89 a7       	std	Y+41, r24	; 0x29
    2594:	9a a7       	std	Y+42, r25	; 0x2a
    2596:	ab a7       	std	Y+43, r26	; 0x2b
    2598:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    259a:	69 a5       	ldd	r22, Y+41	; 0x29
    259c:	7a a5       	ldd	r23, Y+42	; 0x2a
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e8       	ldi	r20, 0x80	; 128
    25a8:	5f e3       	ldi	r21, 0x3F	; 63
    25aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	1c f4       	brge	.+6      	; 0x25b8 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	88 a7       	std	Y+40, r24	; 0x28
    25b6:	91 c0       	rjmp	.+290    	; 0x26da <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    25b8:	69 a5       	ldd	r22, Y+41	; 0x29
    25ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    25bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25be:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4f e7       	ldi	r20, 0x7F	; 127
    25c6:	53 e4       	ldi	r21, 0x43	; 67
    25c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25cc:	18 16       	cp	r1, r24
    25ce:	0c f0       	brlt	.+2      	; 0x25d2 <HLCD_voidSendChar+0x5b4>
    25d0:	7b c0       	rjmp	.+246    	; 0x26c8 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    25d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    25d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    25d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d8:	98 a9       	ldd	r25, Y+48	; 0x30
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a e7       	ldi	r20, 0x7A	; 122
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8c a3       	std	Y+36, r24	; 0x24
    25ec:	9d a3       	std	Y+37, r25	; 0x25
    25ee:	ae a3       	std	Y+38, r26	; 0x26
    25f0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	6c a1       	ldd	r22, Y+36	; 0x24
    25f4:	7d a1       	ldd	r23, Y+37	; 0x25
    25f6:	8e a1       	ldd	r24, Y+38	; 0x26
    25f8:	9f a1       	ldd	r25, Y+39	; 0x27
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a ef       	ldi	r20, 0xFA	; 250
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	88 a3       	std	Y+32, r24	; 0x20
    260c:	99 a3       	std	Y+33, r25	; 0x21
    260e:	aa a3       	std	Y+34, r26	; 0x22
    2610:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2612:	68 a1       	ldd	r22, Y+32	; 0x20
    2614:	79 a1       	ldd	r23, Y+33	; 0x21
    2616:	8a a1       	ldd	r24, Y+34	; 0x22
    2618:	9b a1       	ldd	r25, Y+35	; 0x23
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	9f 8f       	std	Y+31, r25	; 0x1f
    2630:	8e 8f       	std	Y+30, r24	; 0x1e
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    2634:	68 a1       	ldd	r22, Y+32	; 0x20
    2636:	79 a1       	ldd	r23, Y+33	; 0x21
    2638:	8a a1       	ldd	r24, Y+34	; 0x22
    263a:	9b a1       	ldd	r25, Y+35	; 0x23
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	6c a1       	ldd	r22, Y+36	; 0x24
    264e:	7d a1       	ldd	r23, Y+37	; 0x25
    2650:	8e a1       	ldd	r24, Y+38	; 0x26
    2652:	9f a1       	ldd	r25, Y+39	; 0x27
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9f 8f       	std	Y+31, r25	; 0x1f
    2672:	8e 8f       	std	Y+30, r24	; 0x1e
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <HLCD_voidSendChar+0x676>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9d 8f       	std	Y+29, r25	; 0x1d
    267c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2680:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <HLCD_voidSendChar+0x664>
    2686:	9d 8f       	std	Y+29, r25	; 0x1d
    2688:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    268c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9f 8f       	std	Y+31, r25	; 0x1f
    2692:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2696:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <HLCD_voidSendChar+0x658>
    269c:	24 c0       	rjmp	.+72     	; 0x26e6 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	68 a1       	ldd	r22, Y+32	; 0x20
    26a0:	79 a1       	ldd	r23, Y+33	; 0x21
    26a2:	8a a1       	ldd	r24, Y+34	; 0x22
    26a4:	9b a1       	ldd	r25, Y+35	; 0x23
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9f 8f       	std	Y+31, r25	; 0x1f
    26b0:	8e 8f       	std	Y+30, r24	; 0x1e
    26b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b6:	9b 8f       	std	Y+27, r25	; 0x1b
    26b8:	8a 8f       	std	Y+26, r24	; 0x1a
    26ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <HLCD_voidSendChar+0x6a0>
    26c2:	9b 8f       	std	Y+27, r25	; 0x1b
    26c4:	8a 8f       	std	Y+26, r24	; 0x1a
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c8:	69 a5       	ldd	r22, Y+41	; 0x29
    26ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    26cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	88 a7       	std	Y+40, r24	; 0x28
    26da:	88 a5       	ldd	r24, Y+40	; 0x28
    26dc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26de:	89 8d       	ldd	r24, Y+25	; 0x19
    26e0:	8a 95       	dec	r24
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <HLCD_voidSendChar+0x6c2>
    26e4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	62 e0       	ldi	r22, 0x02	; 2
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 95 19 	call	0x332a	; 0x332a <MDIO_stderrSetPinValue>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a8 ec       	ldi	r26, 0xC8	; 200
    26f6:	b2 e4       	ldi	r27, 0x42	; 66
    26f8:	8d 8b       	std	Y+21, r24	; 0x15
    26fa:	9e 8b       	std	Y+22, r25	; 0x16
    26fc:	af 8b       	std	Y+23, r26	; 0x17
    26fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2700:	6d 89       	ldd	r22, Y+21	; 0x15
    2702:	7e 89       	ldd	r23, Y+22	; 0x16
    2704:	8f 89       	ldd	r24, Y+23	; 0x17
    2706:	98 8d       	ldd	r25, Y+24	; 0x18
    2708:	2b ea       	ldi	r18, 0xAB	; 171
    270a:	3a ea       	ldi	r19, 0xAA	; 170
    270c:	4a e2       	ldi	r20, 0x2A	; 42
    270e:	50 e4       	ldi	r21, 0x40	; 64
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	89 8b       	std	Y+17, r24	; 0x11
    271a:	9a 8b       	std	Y+18, r25	; 0x12
    271c:	ab 8b       	std	Y+19, r26	; 0x13
    271e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2720:	69 89       	ldd	r22, Y+17	; 0x11
    2722:	7a 89       	ldd	r23, Y+18	; 0x12
    2724:	8b 89       	ldd	r24, Y+19	; 0x13
    2726:	9c 89       	ldd	r25, Y+20	; 0x14
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	1c f4       	brge	.+6      	; 0x273e <HLCD_voidSendChar+0x720>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	88 8b       	std	Y+16, r24	; 0x10
    273c:	91 c0       	rjmp	.+290    	; 0x2860 <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    273e:	69 89       	ldd	r22, Y+17	; 0x11
    2740:	7a 89       	ldd	r23, Y+18	; 0x12
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	9c 89       	ldd	r25, Y+20	; 0x14
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	0c f0       	brlt	.+2      	; 0x2758 <HLCD_voidSendChar+0x73a>
    2756:	7b c0       	rjmp	.+246    	; 0x284e <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    2758:	6d 89       	ldd	r22, Y+21	; 0x15
    275a:	7e 89       	ldd	r23, Y+22	; 0x16
    275c:	8f 89       	ldd	r24, Y+23	; 0x17
    275e:	98 8d       	ldd	r25, Y+24	; 0x18
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a e7       	ldi	r20, 0x7A	; 122
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	8c 87       	std	Y+12, r24	; 0x0c
    2772:	9d 87       	std	Y+13, r25	; 0x0d
    2774:	ae 87       	std	Y+14, r26	; 0x0e
    2776:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2778:	6c 85       	ldd	r22, Y+12	; 0x0c
    277a:	7d 85       	ldd	r23, Y+13	; 0x0d
    277c:	8e 85       	ldd	r24, Y+14	; 0x0e
    277e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a ef       	ldi	r20, 0xFA	; 250
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	88 87       	std	Y+8, r24	; 0x08
    2792:	99 87       	std	Y+9, r25	; 0x09
    2794:	aa 87       	std	Y+10, r26	; 0x0a
    2796:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2798:	68 85       	ldd	r22, Y+8	; 0x08
    279a:	79 85       	ldd	r23, Y+9	; 0x09
    279c:	8a 85       	ldd	r24, Y+10	; 0x0a
    279e:	9b 85       	ldd	r25, Y+11	; 0x0b
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e8       	ldi	r20, 0x80	; 128
    27a6:	5f e3       	ldi	r21, 0x3F	; 63
    27a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ac:	88 23       	and	r24, r24
    27ae:	2c f4       	brge	.+10     	; 0x27ba <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	9f 83       	std	Y+7, r25	; 0x07
    27b6:	8e 83       	std	Y+6, r24	; 0x06
    27b8:	3f c0       	rjmp	.+126    	; 0x2838 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    27ba:	68 85       	ldd	r22, Y+8	; 0x08
    27bc:	79 85       	ldd	r23, Y+9	; 0x09
    27be:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	4f e7       	ldi	r20, 0x7F	; 127
    27c8:	57 e4       	ldi	r21, 0x47	; 71
    27ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ce:	18 16       	cp	r1, r24
    27d0:	4c f5       	brge	.+82     	; 0x2824 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e2       	ldi	r20, 0x20	; 32
    27e0:	51 e4       	ldi	r21, 0x41	; 65
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9f 83       	std	Y+7, r25	; 0x07
    27f8:	8e 83       	std	Y+6, r24	; 0x06
    27fa:	0f c0       	rjmp	.+30     	; 0x281a <HLCD_voidSendChar+0x7fc>
    27fc:	88 ec       	ldi	r24, 0xC8	; 200
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	9d 83       	std	Y+5, r25	; 0x05
    2802:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	9d 81       	ldd	r25, Y+5	; 0x05
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <HLCD_voidSendChar+0x7ea>
    280c:	9d 83       	std	Y+5, r25	; 0x05
    280e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	8e 81       	ldd	r24, Y+6	; 0x06
    2812:	9f 81       	ldd	r25, Y+7	; 0x07
    2814:	01 97       	sbiw	r24, 0x01	; 1
    2816:	9f 83       	std	Y+7, r25	; 0x07
    2818:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	8e 81       	ldd	r24, Y+6	; 0x06
    281c:	9f 81       	ldd	r25, Y+7	; 0x07
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	69 f7       	brne	.-38     	; 0x27fc <HLCD_voidSendChar+0x7de>
    2822:	24 c0       	rjmp	.+72     	; 0x286c <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2824:	68 85       	ldd	r22, Y+8	; 0x08
    2826:	79 85       	ldd	r23, Y+9	; 0x09
    2828:	8a 85       	ldd	r24, Y+10	; 0x0a
    282a:	9b 85       	ldd	r25, Y+11	; 0x0b
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	9f 83       	std	Y+7, r25	; 0x07
    2836:	8e 83       	std	Y+6, r24	; 0x06
    2838:	8e 81       	ldd	r24, Y+6	; 0x06
    283a:	9f 81       	ldd	r25, Y+7	; 0x07
    283c:	9b 83       	std	Y+3, r25	; 0x03
    283e:	8a 83       	std	Y+2, r24	; 0x02
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	9b 81       	ldd	r25, Y+3	; 0x03
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <HLCD_voidSendChar+0x826>
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	0f c0       	rjmp	.+30     	; 0x286c <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    284e:	69 89       	ldd	r22, Y+17	; 0x11
    2850:	7a 89       	ldd	r23, Y+18	; 0x12
    2852:	8b 89       	ldd	r24, Y+19	; 0x13
    2854:	9c 89       	ldd	r25, Y+20	; 0x14
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	88 8b       	std	Y+16, r24	; 0x10
    2860:	88 89       	ldd	r24, Y+16	; 0x10
    2862:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	8a 95       	dec	r24
    2868:	f1 f7       	brne	.-4      	; 0x2866 <HLCD_voidSendChar+0x848>
    286a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    286c:	cf 59       	subi	r28, 0x9F	; 159
    286e:	df 4f       	sbci	r29, 0xFF	; 255
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	08 95       	ret

00002884 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	29 97       	sbiw	r28, 0x09	; 9
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	99 87       	std	Y+9, r25	; 0x09
    289a:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    289c:	88 85       	ldd	r24, Y+8	; 0x08
    289e:	99 85       	ldd	r25, Y+9	; 0x09
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	21 f4       	brne	.+8      	; 0x28ac <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    28a4:	80 e3       	ldi	r24, 0x30	; 48
    28a6:	0e 94 0f 10 	call	0x201e	; 0x201e <HLCD_voidSendChar>
    28aa:	3d c0       	rjmp	.+122    	; 0x2926 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    28ac:	19 82       	std	Y+1, r1	; 0x01
    28ae:	20 c0       	rjmp	.+64     	; 0x28f0 <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	e8 2f       	mov	r30, r24
    28b4:	ff 27       	eor	r31, r31
    28b6:	e7 fd       	sbrc	r30, 7
    28b8:	f0 95       	com	r31
    28ba:	88 85       	ldd	r24, Y+8	; 0x08
    28bc:	99 85       	ldd	r25, Y+9	; 0x09
    28be:	2a e0       	ldi	r18, 0x0A	; 10
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	b9 01       	movw	r22, r18
    28c4:	0e 94 17 24 	call	0x482e	; 0x482e <__udivmodhi4>
    28c8:	28 2f       	mov	r18, r24
    28ca:	20 5d       	subi	r18, 0xD0	; 208
    28cc:	ce 01       	movw	r24, r28
    28ce:	02 96       	adiw	r24, 0x02	; 2
    28d0:	e8 0f       	add	r30, r24
    28d2:	f9 1f       	adc	r31, r25
    28d4:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    28d6:	88 85       	ldd	r24, Y+8	; 0x08
    28d8:	99 85       	ldd	r25, Y+9	; 0x09
    28da:	2a e0       	ldi	r18, 0x0A	; 10
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	b9 01       	movw	r22, r18
    28e0:	0e 94 17 24 	call	0x482e	; 0x482e <__udivmodhi4>
    28e4:	cb 01       	movw	r24, r22
    28e6:	99 87       	std	Y+9, r25	; 0x09
    28e8:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01
    28f0:	88 85       	ldd	r24, Y+8	; 0x08
    28f2:	99 85       	ldd	r25, Y+9	; 0x09
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	e1 f6       	brne	.-72     	; 0x28b0 <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	81 50       	subi	r24, 0x01	; 1
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	10 c0       	rjmp	.+32     	; 0x2920 <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	28 2f       	mov	r18, r24
    2904:	33 27       	eor	r19, r19
    2906:	27 fd       	sbrc	r18, 7
    2908:	30 95       	com	r19
    290a:	ce 01       	movw	r24, r28
    290c:	02 96       	adiw	r24, 0x02	; 2
    290e:	fc 01       	movw	r30, r24
    2910:	e2 0f       	add	r30, r18
    2912:	f3 1f       	adc	r31, r19
    2914:	80 81       	ld	r24, Z
    2916:	0e 94 0f 10 	call	0x201e	; 0x201e <HLCD_voidSendChar>
			L_s8Iterator--;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	81 50       	subi	r24, 0x01	; 1
    291e:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	8f 3f       	cpi	r24, 0xFF	; 255
    2924:	69 f7       	brne	.-38     	; 0x2900 <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    2926:	29 96       	adiw	r28, 0x09	; 9
    2928:	0f b6       	in	r0, 0x3f	; 63
    292a:	f8 94       	cli
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	cd bf       	out	0x3d, r28	; 61
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	08 95       	ret

00002938 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    2938:	df 93       	push	r29
    293a:	cf 93       	push	r28
    293c:	00 d0       	rcall	.+0      	; 0x293e <HLCD_voidSendString+0x6>
    293e:	0f 92       	push	r0
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	9b 83       	std	Y+3, r25	; 0x03
    2946:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	d1 f0       	breq	.+52     	; 0x2984 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    2950:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	28 2f       	mov	r18, r24
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	fc 01       	movw	r30, r24
    295e:	e2 0f       	add	r30, r18
    2960:	f3 1f       	adc	r31, r19
    2962:	80 81       	ld	r24, Z
    2964:	0e 94 0f 10 	call	0x201e	; 0x201e <HLCD_voidSendChar>
			L_u8Iterator++;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	9b 81       	ldd	r25, Y+3	; 0x03
    2978:	fc 01       	movw	r30, r24
    297a:	e2 0f       	add	r30, r18
    297c:	f3 1f       	adc	r31, r19
    297e:	80 81       	ld	r24, Z
    2980:	88 23       	and	r24, r24
    2982:	39 f7       	brne	.-50     	; 0x2952 <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	61 97       	sbiw	r28, 0x11	; 17
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	88 8b       	std	Y+16, r24	; 0x10
    29a6:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    29a8:	88 89       	ldd	r24, Y+16	; 0x10
    29aa:	98 2f       	mov	r25, r24
    29ac:	92 95       	swap	r25
    29ae:	99 0f       	add	r25, r25
    29b0:	99 0f       	add	r25, r25
    29b2:	90 7c       	andi	r25, 0xC0	; 192
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	89 2b       	or	r24, r25
    29b8:	80 68       	ori	r24, 0x80	; 128
    29ba:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    29bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    29be:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	a0 e8       	ldi	r26, 0x80	; 128
    29c8:	bf e3       	ldi	r27, 0x3F	; 63
    29ca:	8b 87       	std	Y+11, r24	; 0x0b
    29cc:	9c 87       	std	Y+12, r25	; 0x0c
    29ce:	ad 87       	std	Y+13, r26	; 0x0d
    29d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a ef       	ldi	r20, 0xFA	; 250
    29e0:	54 e4       	ldi	r21, 0x44	; 68
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	8f 83       	std	Y+7, r24	; 0x07
    29ec:	98 87       	std	Y+8, r25	; 0x08
    29ee:	a9 87       	std	Y+9, r26	; 0x09
    29f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e8       	ldi	r20, 0x80	; 128
    2a00:	5f e3       	ldi	r21, 0x3F	; 63
    2a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a06:	88 23       	and	r24, r24
    2a08:	2c f4       	brge	.+10     	; 0x2a14 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	3f c0       	rjmp	.+126    	; 0x2a92 <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2a14:	6f 81       	ldd	r22, Y+7	; 0x07
    2a16:	78 85       	ldd	r23, Y+8	; 0x08
    2a18:	89 85       	ldd	r24, Y+9	; 0x09
    2a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	4c f5       	brge	.+82     	; 0x2a7e <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e2       	ldi	r20, 0x20	; 32
    2a3a:	51 e4       	ldi	r21, 0x41	; 65
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <HLCD_voidSetCur+0xe4>
    2a56:	88 ec       	ldi	r24, 0xC8	; 200
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	f1 f7       	brne	.-4      	; 0x2a62 <HLCD_voidSetCur+0xd2>
    2a66:	9c 83       	std	Y+4, r25	; 0x04
    2a68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	9e 83       	std	Y+6, r25	; 0x06
    2a72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	8d 81       	ldd	r24, Y+5	; 0x05
    2a76:	9e 81       	ldd	r25, Y+6	; 0x06
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	69 f7       	brne	.-38     	; 0x2a56 <HLCD_voidSetCur+0xc6>
    2a7c:	14 c0       	rjmp	.+40     	; 0x2aa6 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a80:	78 85       	ldd	r23, Y+8	; 0x08
    2a82:	89 85       	ldd	r24, Y+9	; 0x09
    2a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9e 83       	std	Y+6, r25	; 0x06
    2a90:	8d 83       	std	Y+5, r24	; 0x05
    2a92:	8d 81       	ldd	r24, Y+5	; 0x05
    2a94:	9e 81       	ldd	r25, Y+6	; 0x06
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <HLCD_voidSetCur+0x10e>
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2aa6:	61 96       	adiw	r28, 0x11	; 17
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	de bf       	out	0x3e, r29	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <HLCD_voidSendCmd>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a ef       	ldi	r20, 0xFA	; 250
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <HLCD_voidClear+0xcc>
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <HLCD_voidClear+0xba>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <HLCD_voidClear+0xae>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <HLCD_voidClear+0xf6>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2bb6:	2e 96       	adiw	r28, 0x0e	; 14
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <MADC_stderrInit>:
/* SWC Includes */
#include "MADC_private.h"
#include "MADC_interface.h"

STD_error_t MADC_stderrInit(u8 ARG_u8VoltageReference, u8 ARG_u8Prescaler, u8 ARG_u8ADCAdjust)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <MADC_stderrInit+0x6>
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <MADC_stderrInit+0x8>
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
    2bd6:	6b 83       	std	Y+3, r22	; 0x03
    2bd8:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError =E_OK;
    2bda:	19 82       	std	Y+1, r1	; 0x01
	if(  (ARG_u8VoltageReference<=1 || 3==ARG_u8VoltageReference)   &&  ARG_u8Prescaler<=7 &&ARG_u8ADCAdjust<=MADC_ADJUST_LEFT )
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	82 30       	cpi	r24, 0x02	; 2
    2be0:	18 f0       	brcs	.+6      	; 0x2be8 <MADC_stderrInit+0x20>
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	83 30       	cpi	r24, 0x03	; 3
    2be6:	61 f5       	brne	.+88     	; 0x2c40 <MADC_stderrInit+0x78>
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	88 30       	cpi	r24, 0x08	; 8
    2bec:	48 f5       	brcc	.+82     	; 0x2c40 <MADC_stderrInit+0x78>
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	82 30       	cpi	r24, 0x02	; 2
    2bf2:	30 f5       	brcc	.+76     	; 0x2c40 <MADC_stderrInit+0x78>
	{
		/* mask Then OR with the needed val */
		ADMUX = ( ADMUX & 0x1F ) | (ARG_u8VoltageReference<<REFS0) | (ARG_u8ADCAdjust<<ADLAR) ; /* set voltage Ref, ADLAR=1 */
    2bf4:	a7 e2       	ldi	r26, 0x27	; 39
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	e7 e2       	ldi	r30, 0x27	; 39
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	28 2f       	mov	r18, r24
    2c00:	2f 71       	andi	r18, 0x1F	; 31
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	00 24       	eor	r0, r0
    2c0a:	96 95       	lsr	r25
    2c0c:	87 95       	ror	r24
    2c0e:	07 94       	ror	r0
    2c10:	96 95       	lsr	r25
    2c12:	87 95       	ror	r24
    2c14:	07 94       	ror	r0
    2c16:	98 2f       	mov	r25, r24
    2c18:	80 2d       	mov	r24, r0
    2c1a:	28 2b       	or	r18, r24
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	82 95       	swap	r24
    2c28:	92 95       	swap	r25
    2c2a:	90 7f       	andi	r25, 0xF0	; 240
    2c2c:	98 27       	eor	r25, r24
    2c2e:	80 7f       	andi	r24, 0xF0	; 240
    2c30:	98 27       	eor	r25, r24
    2c32:	82 2b       	or	r24, r18
    2c34:	8c 93       	st	X, r24
		ADCSRA = (ADLAR & 0xF8) | (ARG_u8Prescaler<<ADPS0) ; /* note ADPS0 is 0 not important, set prescaler */
    2c36:	e6 e2       	ldi	r30, 0x26	; 38
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	80 83       	st	Z, r24
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <MADC_stderrInit+0x7c>
	}
	else {
		L_stderrError =E_NOK;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <MADC_stderrReadADC>:

STD_error_t MADC_stderrReadADC(u16* ARG_u16pADCReading, u8 ARG_u8Channel)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <MADC_stderrReadADC+0x6>
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <MADC_stderrReadADC+0x8>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	8a 83       	std	Y+2, r24	; 0x02
    2c64:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2c66:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER != ARG_u16pADCReading)
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	b9 f0       	breq	.+46     	; 0x2c9e <MADC_stderrReadADC+0x4a>
	{	
		MADC_voidEnableADC(); /* enable ADC to convert */
    2c70:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <MADC_voidEnableADC>
		L_stderrError = MADC_stderrStartConversion(ARG_u8Channel);
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <MADC_stderrStartConversion>
    2c7a:	89 83       	std	Y+1, r24	; 0x01
		
		if(E_OK==L_stderrError)
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	88 23       	and	r24, r24
    2c80:	81 f4       	brne	.+32     	; 0x2ca2 <MADC_stderrReadADC+0x4e>
		{
			MADC_voidPollFlag(); /* polling wait flag ADIF be 1 */
    2c82:	0e 94 99 16 	call	0x2d32	; 0x2d32 <MADC_voidPollFlag>
			*ARG_u16pADCReading	= ADCH ; /* in this case we read the 8-MSB that mean we use 8 bit Resolution */
    2c86:	e5 e2       	ldi	r30, 0x25	; 37
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	88 2f       	mov	r24, r24
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	ea 81       	ldd	r30, Y+2	; 0x02
    2c92:	fb 81       	ldd	r31, Y+3	; 0x03
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
			MADC_voidClearFlag(); /* CLear flag by SW */	
    2c98:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <MADC_voidClearFlag>
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <MADC_stderrReadADC+0x4e>
		else{
			/*do nothing*/
		}
	}
	else{
		L_stderrError = E_NULL_POINTER;
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrError;
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
}		
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <MADC_stderrStartConversion>:
	
STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{	
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <MADC_stderrStartConversion+0x6>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError = E_OK;
    2cbe:	19 82       	std	Y+1, r1	; 0x01
    
    if (ARG_u8Channel <= 7) {
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	88 30       	cpi	r24, 0x08	; 8
    2cc4:	90 f4       	brcc	.+36     	; 0x2cea <MADC_stderrStartConversion+0x38>
        /* Select the channel using the ADMUX register */
        ADMUX = (ADMUX & 0xE0) | (ARG_u8Channel<<MUX0); /* note MUX0 is 0 not important*/
    2cc6:	a7 e2       	ldi	r26, 0x27	; 39
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e7 e2       	ldi	r30, 0x27	; 39
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	90 7e       	andi	r25, 0xE0	; 224
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	89 2b       	or	r24, r25
    2cd8:	8c 93       	st	X, r24
		/* Start the conversion by setting the ADSC bit */
		SET_BIT(ADCSRA,ADSC);	//ADCSRA |= (1 << ADSC);
    2cda:	a6 e2       	ldi	r26, 0x26	; 38
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e6 e2       	ldi	r30, 0x26	; 38
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 64       	ori	r24, 0x40	; 64
    2ce6:	8c 93       	st	X, r24
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <MADC_stderrStartConversion+0x3c>
    } else {
        L_stderrError = E_NOK;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	89 83       	std	Y+1, r24	; 0x01
    }
    return L_stderrError;
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <MADC_voidEnableADC>:

void MADC_voidEnableADC(void)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    2d02:	a6 e2       	ldi	r26, 0x26	; 38
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e6 e2       	ldi	r30, 0x26	; 38
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 68       	ori	r24, 0x80	; 128
    2d0e:	8c 93       	st	X, r24
}
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <MADC_voidDisableADC>:

void MADC_voidDisableADC(void)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
    2d1e:	a6 e2       	ldi	r26, 0x26	; 38
    2d20:	b0 e0       	ldi	r27, 0x00	; 0
    2d22:	e6 e2       	ldi	r30, 0x26	; 38
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	8f 77       	andi	r24, 0x7F	; 127
    2d2a:	8c 93       	st	X, r24
}
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	08 95       	ret

00002d32 <MADC_voidPollFlag>:

void MADC_voidPollFlag(void)
{
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF)); /* POLL , stuck while flag is low */
    2d3a:	e6 e2       	ldi	r30, 0x26	; 38
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	82 95       	swap	r24
    2d42:	8f 70       	andi	r24, 0x0F	; 15
    2d44:	88 2f       	mov	r24, r24
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	81 70       	andi	r24, 0x01	; 1
    2d4a:	90 70       	andi	r25, 0x00	; 0
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	a9 f3       	breq	.-22     	; 0x2d3a <MADC_voidPollFlag+0x8>
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <MADC_voidClearFlag>:

void MADC_voidClearFlag(void)
{
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF); /* Clear flag by set it */
    2d5e:	a6 e2       	ldi	r26, 0x26	; 38
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e6 e2       	ldi	r30, 0x26	; 38
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	80 61       	ori	r24, 0x10	; 16
    2d6a:	8c 93       	st	X, r24
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <MDIO_stderrSetPortDirection+0x6>
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <MDIO_stderrSetPortDirection+0x8>
    2d7a:	0f 92       	push	r0
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	8a 83       	std	Y+2, r24	; 0x02
    2d82:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2d84:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	3d 83       	std	Y+5, r19	; 0x05
    2d8e:	2c 83       	std	Y+4, r18	; 0x04
    2d90:	8c 81       	ldd	r24, Y+4	; 0x04
    2d92:	9d 81       	ldd	r25, Y+5	; 0x05
    2d94:	82 30       	cpi	r24, 0x02	; 2
    2d96:	91 05       	cpc	r25, r1
    2d98:	d9 f0       	breq	.+54     	; 0x2dd0 <MDIO_stderrSetPortDirection+0x5e>
    2d9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d9e:	23 30       	cpi	r18, 0x03	; 3
    2da0:	31 05       	cpc	r19, r1
    2da2:	34 f4       	brge	.+12     	; 0x2db0 <MDIO_stderrSetPortDirection+0x3e>
    2da4:	8c 81       	ldd	r24, Y+4	; 0x04
    2da6:	9d 81       	ldd	r25, Y+5	; 0x05
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	91 05       	cpc	r25, r1
    2dac:	61 f0       	breq	.+24     	; 0x2dc6 <MDIO_stderrSetPortDirection+0x54>
    2dae:	1f c0       	rjmp	.+62     	; 0x2dee <MDIO_stderrSetPortDirection+0x7c>
    2db0:	2c 81       	ldd	r18, Y+4	; 0x04
    2db2:	3d 81       	ldd	r19, Y+5	; 0x05
    2db4:	23 30       	cpi	r18, 0x03	; 3
    2db6:	31 05       	cpc	r19, r1
    2db8:	81 f0       	breq	.+32     	; 0x2dda <MDIO_stderrSetPortDirection+0x68>
    2dba:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbe:	84 30       	cpi	r24, 0x04	; 4
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	81 f0       	breq	.+32     	; 0x2de4 <MDIO_stderrSetPortDirection+0x72>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2dc6:	e9 e3       	ldi	r30, 0x39	; 57
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	81 83       	std	Z+1, r24	; 0x01
    2dce:	11 c0       	rjmp	.+34     	; 0x2df2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2dd0:	e6 e3       	ldi	r30, 0x36	; 54
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	81 83       	std	Z+1, r24	; 0x01
    2dd8:	0c c0       	rjmp	.+24     	; 0x2df2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2dda:	e3 e3       	ldi	r30, 0x33	; 51
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	81 83       	std	Z+1, r24	; 0x01
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2de4:	e0 e3       	ldi	r30, 0x30	; 48
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	81 83       	std	Z+1, r24	; 0x01
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <MDIO_stderrSetPortValue+0x6>
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <MDIO_stderrSetPortValue+0x8>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	8a 83       	std	Y+2, r24	; 0x02
    2e14:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2e16:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	3d 83       	std	Y+5, r19	; 0x05
    2e20:	2c 83       	std	Y+4, r18	; 0x04
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	82 30       	cpi	r24, 0x02	; 2
    2e28:	91 05       	cpc	r25, r1
    2e2a:	d9 f0       	breq	.+54     	; 0x2e62 <MDIO_stderrSetPortValue+0x5e>
    2e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e30:	23 30       	cpi	r18, 0x03	; 3
    2e32:	31 05       	cpc	r19, r1
    2e34:	34 f4       	brge	.+12     	; 0x2e42 <MDIO_stderrSetPortValue+0x3e>
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	61 f0       	breq	.+24     	; 0x2e58 <MDIO_stderrSetPortValue+0x54>
    2e40:	1f c0       	rjmp	.+62     	; 0x2e80 <MDIO_stderrSetPortValue+0x7c>
    2e42:	2c 81       	ldd	r18, Y+4	; 0x04
    2e44:	3d 81       	ldd	r19, Y+5	; 0x05
    2e46:	23 30       	cpi	r18, 0x03	; 3
    2e48:	31 05       	cpc	r19, r1
    2e4a:	81 f0       	breq	.+32     	; 0x2e6c <MDIO_stderrSetPortValue+0x68>
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e50:	84 30       	cpi	r24, 0x04	; 4
    2e52:	91 05       	cpc	r25, r1
    2e54:	81 f0       	breq	.+32     	; 0x2e76 <MDIO_stderrSetPortValue+0x72>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2e58:	e9 e3       	ldi	r30, 0x39	; 57
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5e:	82 83       	std	Z+2, r24	; 0x02
    2e60:	11 c0       	rjmp	.+34     	; 0x2e84 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2e62:	e6 e3       	ldi	r30, 0x36	; 54
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	82 83       	std	Z+2, r24	; 0x02
    2e6a:	0c c0       	rjmp	.+24     	; 0x2e84 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2e6c:	e3 e3       	ldi	r30, 0x33	; 51
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	82 83       	std	Z+2, r24	; 0x02
    2e74:	07 c0       	rjmp	.+14     	; 0x2e84 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2e76:	e0 e3       	ldi	r30, 0x30	; 48
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	82 83       	std	Z+2, r24	; 0x02
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <MDIO_stderrGetPortValue+0x6>
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <MDIO_stderrGetPortValue+0x8>
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <MDIO_stderrGetPortValue+0xa>
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2eaa:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3e 83       	std	Y+6, r19	; 0x06
    2eb4:	2d 83       	std	Y+5, r18	; 0x05
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	82 30       	cpi	r24, 0x02	; 2
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	e9 f0       	breq	.+58     	; 0x2efa <MDIO_stderrGetPortValue+0x64>
    2ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec4:	23 30       	cpi	r18, 0x03	; 3
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	34 f4       	brge	.+12     	; 0x2ed6 <MDIO_stderrGetPortValue+0x40>
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	61 f0       	breq	.+24     	; 0x2eec <MDIO_stderrGetPortValue+0x56>
    2ed4:	27 c0       	rjmp	.+78     	; 0x2f24 <MDIO_stderrGetPortValue+0x8e>
    2ed6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed8:	3e 81       	ldd	r19, Y+6	; 0x06
    2eda:	23 30       	cpi	r18, 0x03	; 3
    2edc:	31 05       	cpc	r19, r1
    2ede:	a1 f0       	breq	.+40     	; 0x2f08 <MDIO_stderrGetPortValue+0x72>
    2ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee4:	84 30       	cpi	r24, 0x04	; 4
    2ee6:	91 05       	cpc	r25, r1
    2ee8:	b1 f0       	breq	.+44     	; 0x2f16 <MDIO_stderrGetPortValue+0x80>
    2eea:	1c c0       	rjmp	.+56     	; 0x2f24 <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2eec:	e9 e3       	ldi	r30, 0x39	; 57
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef6:	80 83       	st	Z, r24
    2ef8:	17 c0       	rjmp	.+46     	; 0x2f28 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2efa:	e6 e3       	ldi	r30, 0x36	; 54
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	ea 81       	ldd	r30, Y+2	; 0x02
    2f02:	fb 81       	ldd	r31, Y+3	; 0x03
    2f04:	80 83       	st	Z, r24
    2f06:	10 c0       	rjmp	.+32     	; 0x2f28 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2f08:	e3 e3       	ldi	r30, 0x33	; 51
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2f10:	fb 81       	ldd	r31, Y+3	; 0x03
    2f12:	80 83       	st	Z, r24
    2f14:	09 c0       	rjmp	.+18     	; 0x2f28 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2f16:	e0 e3       	ldi	r30, 0x30	; 48
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f20:	80 83       	st	Z, r24
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2f28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f2a:	26 96       	adiw	r28, 0x06	; 6
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	2a 97       	sbiw	r28, 0x0a	; 10
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	8a 83       	std	Y+2, r24	; 0x02
    2f52:	6b 83       	std	Y+3, r22	; 0x03
    2f54:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2f56:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	88 30       	cpi	r24, 0x08	; 8
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <MDIO_stderrSetPinDirection+0x24>
    2f5e:	d9 c1       	rjmp	.+946    	; 0x3312 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	81 30       	cpi	r24, 0x01	; 1
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <MDIO_stderrSetPinDirection+0x2c>
    2f66:	7c c0       	rjmp	.+248    	; 0x3060 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	3a 87       	std	Y+10, r19	; 0x0a
    2f70:	29 87       	std	Y+9, r18	; 0x09
    2f72:	89 85       	ldd	r24, Y+9	; 0x09
    2f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f76:	82 30       	cpi	r24, 0x02	; 2
    2f78:	91 05       	cpc	r25, r1
    2f7a:	69 f1       	breq	.+90     	; 0x2fd6 <MDIO_stderrSetPinDirection+0x9a>
    2f7c:	29 85       	ldd	r18, Y+9	; 0x09
    2f7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f80:	23 30       	cpi	r18, 0x03	; 3
    2f82:	31 05       	cpc	r19, r1
    2f84:	34 f4       	brge	.+12     	; 0x2f92 <MDIO_stderrSetPinDirection+0x56>
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	81 30       	cpi	r24, 0x01	; 1
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	69 f0       	breq	.+26     	; 0x2faa <MDIO_stderrSetPinDirection+0x6e>
    2f90:	64 c0       	rjmp	.+200    	; 0x305a <MDIO_stderrSetPinDirection+0x11e>
    2f92:	29 85       	ldd	r18, Y+9	; 0x09
    2f94:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f96:	23 30       	cpi	r18, 0x03	; 3
    2f98:	31 05       	cpc	r19, r1
    2f9a:	99 f1       	breq	.+102    	; 0x3002 <MDIO_stderrSetPinDirection+0xc6>
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	84 30       	cpi	r24, 0x04	; 4
    2fa2:	91 05       	cpc	r25, r1
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <MDIO_stderrSetPinDirection+0x6c>
    2fa6:	43 c0       	rjmp	.+134    	; 0x302e <MDIO_stderrSetPinDirection+0xf2>
    2fa8:	58 c0       	rjmp	.+176    	; 0x305a <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2faa:	a9 e3       	ldi	r26, 0x39	; 57
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e9 e3       	ldi	r30, 0x39	; 57
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	81 81       	ldd	r24, Z+1	; 0x01
    2fb4:	48 2f       	mov	r20, r24
    2fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 2e       	mov	r0, r18
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <MDIO_stderrSetPinDirection+0x8c>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	0a 94       	dec	r0
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <MDIO_stderrSetPinDirection+0x88>
    2fcc:	84 2b       	or	r24, r20
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	8c 93       	st	X, r24
    2fd2:	11 97       	sbiw	r26, 0x01	; 1
    2fd4:	a0 c1       	rjmp	.+832    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2fd6:	a6 e3       	ldi	r26, 0x36	; 54
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e6 e3       	ldi	r30, 0x36	; 54
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	81 81       	ldd	r24, Z+1	; 0x01
    2fe0:	48 2f       	mov	r20, r24
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	02 2e       	mov	r0, r18
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <MDIO_stderrSetPinDirection+0xb8>
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	0a 94       	dec	r0
    2ff6:	e2 f7       	brpl	.-8      	; 0x2ff0 <MDIO_stderrSetPinDirection+0xb4>
    2ff8:	84 2b       	or	r24, r20
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	8c 93       	st	X, r24
    2ffe:	11 97       	sbiw	r26, 0x01	; 1
    3000:	8a c1       	rjmp	.+788    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    3002:	a3 e3       	ldi	r26, 0x33	; 51
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e3 e3       	ldi	r30, 0x33	; 51
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	81 81       	ldd	r24, Z+1	; 0x01
    300c:	48 2f       	mov	r20, r24
    300e:	8b 81       	ldd	r24, Y+3	; 0x03
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	02 2e       	mov	r0, r18
    301a:	02 c0       	rjmp	.+4      	; 0x3020 <MDIO_stderrSetPinDirection+0xe4>
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	0a 94       	dec	r0
    3022:	e2 f7       	brpl	.-8      	; 0x301c <MDIO_stderrSetPinDirection+0xe0>
    3024:	84 2b       	or	r24, r20
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	8c 93       	st	X, r24
    302a:	11 97       	sbiw	r26, 0x01	; 1
    302c:	74 c1       	rjmp	.+744    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    302e:	a0 e3       	ldi	r26, 0x30	; 48
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e0 e3       	ldi	r30, 0x30	; 48
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	81 81       	ldd	r24, Z+1	; 0x01
    3038:	48 2f       	mov	r20, r24
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	02 2e       	mov	r0, r18
    3046:	02 c0       	rjmp	.+4      	; 0x304c <MDIO_stderrSetPinDirection+0x110>
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	0a 94       	dec	r0
    304e:	e2 f7       	brpl	.-8      	; 0x3048 <MDIO_stderrSetPinDirection+0x10c>
    3050:	84 2b       	or	r24, r20
    3052:	11 96       	adiw	r26, 0x01	; 1
    3054:	8c 93       	st	X, r24
    3056:	11 97       	sbiw	r26, 0x01	; 1
    3058:	5e c1       	rjmp	.+700    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	5b c1       	rjmp	.+694    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    3060:	8c 81       	ldd	r24, Y+4	; 0x04
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	09 f0       	breq	.+2      	; 0x3068 <MDIO_stderrSetPinDirection+0x12c>
    3066:	80 c0       	rjmp	.+256    	; 0x3168 <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	38 87       	std	Y+8, r19	; 0x08
    3070:	2f 83       	std	Y+7, r18	; 0x07
    3072:	8f 81       	ldd	r24, Y+7	; 0x07
    3074:	98 85       	ldd	r25, Y+8	; 0x08
    3076:	82 30       	cpi	r24, 0x02	; 2
    3078:	91 05       	cpc	r25, r1
    307a:	71 f1       	breq	.+92     	; 0x30d8 <MDIO_stderrSetPinDirection+0x19c>
    307c:	2f 81       	ldd	r18, Y+7	; 0x07
    307e:	38 85       	ldd	r19, Y+8	; 0x08
    3080:	23 30       	cpi	r18, 0x03	; 3
    3082:	31 05       	cpc	r19, r1
    3084:	34 f4       	brge	.+12     	; 0x3092 <MDIO_stderrSetPinDirection+0x156>
    3086:	8f 81       	ldd	r24, Y+7	; 0x07
    3088:	98 85       	ldd	r25, Y+8	; 0x08
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	91 05       	cpc	r25, r1
    308e:	69 f0       	breq	.+26     	; 0x30aa <MDIO_stderrSetPinDirection+0x16e>
    3090:	68 c0       	rjmp	.+208    	; 0x3162 <MDIO_stderrSetPinDirection+0x226>
    3092:	2f 81       	ldd	r18, Y+7	; 0x07
    3094:	38 85       	ldd	r19, Y+8	; 0x08
    3096:	23 30       	cpi	r18, 0x03	; 3
    3098:	31 05       	cpc	r19, r1
    309a:	a9 f1       	breq	.+106    	; 0x3106 <MDIO_stderrSetPinDirection+0x1ca>
    309c:	8f 81       	ldd	r24, Y+7	; 0x07
    309e:	98 85       	ldd	r25, Y+8	; 0x08
    30a0:	84 30       	cpi	r24, 0x04	; 4
    30a2:	91 05       	cpc	r25, r1
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <MDIO_stderrSetPinDirection+0x16c>
    30a6:	46 c0       	rjmp	.+140    	; 0x3134 <MDIO_stderrSetPinDirection+0x1f8>
    30a8:	5c c0       	rjmp	.+184    	; 0x3162 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    30aa:	a9 e3       	ldi	r26, 0x39	; 57
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e9 e3       	ldi	r30, 0x39	; 57
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	81 81       	ldd	r24, Z+1	; 0x01
    30b4:	48 2f       	mov	r20, r24
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	02 2e       	mov	r0, r18
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <MDIO_stderrSetPinDirection+0x18c>
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	0a 94       	dec	r0
    30ca:	e2 f7       	brpl	.-8      	; 0x30c4 <MDIO_stderrSetPinDirection+0x188>
    30cc:	80 95       	com	r24
    30ce:	84 23       	and	r24, r20
    30d0:	11 96       	adiw	r26, 0x01	; 1
    30d2:	8c 93       	st	X, r24
    30d4:	11 97       	sbiw	r26, 0x01	; 1
    30d6:	1f c1       	rjmp	.+574    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    30d8:	a6 e3       	ldi	r26, 0x36	; 54
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e6 e3       	ldi	r30, 0x36	; 54
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	81 81       	ldd	r24, Z+1	; 0x01
    30e2:	48 2f       	mov	r20, r24
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	28 2f       	mov	r18, r24
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	02 2e       	mov	r0, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <MDIO_stderrSetPinDirection+0x1ba>
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	0a 94       	dec	r0
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <MDIO_stderrSetPinDirection+0x1b6>
    30fa:	80 95       	com	r24
    30fc:	84 23       	and	r24, r20
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	8c 93       	st	X, r24
    3102:	11 97       	sbiw	r26, 0x01	; 1
    3104:	08 c1       	rjmp	.+528    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    3106:	a3 e3       	ldi	r26, 0x33	; 51
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	e3 e3       	ldi	r30, 0x33	; 51
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	81 81       	ldd	r24, Z+1	; 0x01
    3110:	48 2f       	mov	r20, r24
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	02 2e       	mov	r0, r18
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <MDIO_stderrSetPinDirection+0x1e8>
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	0a 94       	dec	r0
    3126:	e2 f7       	brpl	.-8      	; 0x3120 <MDIO_stderrSetPinDirection+0x1e4>
    3128:	80 95       	com	r24
    312a:	84 23       	and	r24, r20
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	8c 93       	st	X, r24
    3130:	11 97       	sbiw	r26, 0x01	; 1
    3132:	f1 c0       	rjmp	.+482    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    3134:	a0 e3       	ldi	r26, 0x30	; 48
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e0 e3       	ldi	r30, 0x30	; 48
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	81 81       	ldd	r24, Z+1	; 0x01
    313e:	48 2f       	mov	r20, r24
    3140:	8b 81       	ldd	r24, Y+3	; 0x03
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	02 2e       	mov	r0, r18
    314c:	02 c0       	rjmp	.+4      	; 0x3152 <MDIO_stderrSetPinDirection+0x216>
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	0a 94       	dec	r0
    3154:	e2 f7       	brpl	.-8      	; 0x314e <MDIO_stderrSetPinDirection+0x212>
    3156:	80 95       	com	r24
    3158:	84 23       	and	r24, r20
    315a:	11 96       	adiw	r26, 0x01	; 1
    315c:	8c 93       	st	X, r24
    315e:	11 97       	sbiw	r26, 0x01	; 1
    3160:	da c0       	rjmp	.+436    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	89 83       	std	Y+1, r24	; 0x01
    3166:	d7 c0       	rjmp	.+430    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    3168:	8c 81       	ldd	r24, Y+4	; 0x04
    316a:	83 30       	cpi	r24, 0x03	; 3
    316c:	09 f0       	breq	.+2      	; 0x3170 <MDIO_stderrSetPinDirection+0x234>
    316e:	ce c0       	rjmp	.+412    	; 0x330c <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	3e 83       	std	Y+6, r19	; 0x06
    3178:	2d 83       	std	Y+5, r18	; 0x05
    317a:	8d 81       	ldd	r24, Y+5	; 0x05
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	82 30       	cpi	r24, 0x02	; 2
    3180:	91 05       	cpc	r25, r1
    3182:	09 f4       	brne	.+2      	; 0x3186 <MDIO_stderrSetPinDirection+0x24a>
    3184:	42 c0       	rjmp	.+132    	; 0x320a <MDIO_stderrSetPinDirection+0x2ce>
    3186:	2d 81       	ldd	r18, Y+5	; 0x05
    3188:	3e 81       	ldd	r19, Y+6	; 0x06
    318a:	23 30       	cpi	r18, 0x03	; 3
    318c:	31 05       	cpc	r19, r1
    318e:	34 f4       	brge	.+12     	; 0x319c <MDIO_stderrSetPinDirection+0x260>
    3190:	8d 81       	ldd	r24, Y+5	; 0x05
    3192:	9e 81       	ldd	r25, Y+6	; 0x06
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	91 05       	cpc	r25, r1
    3198:	71 f0       	breq	.+28     	; 0x31b6 <MDIO_stderrSetPinDirection+0x27a>
    319a:	b5 c0       	rjmp	.+362    	; 0x3306 <MDIO_stderrSetPinDirection+0x3ca>
    319c:	2d 81       	ldd	r18, Y+5	; 0x05
    319e:	3e 81       	ldd	r19, Y+6	; 0x06
    31a0:	23 30       	cpi	r18, 0x03	; 3
    31a2:	31 05       	cpc	r19, r1
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <MDIO_stderrSetPinDirection+0x26c>
    31a6:	5b c0       	rjmp	.+182    	; 0x325e <MDIO_stderrSetPinDirection+0x322>
    31a8:	8d 81       	ldd	r24, Y+5	; 0x05
    31aa:	9e 81       	ldd	r25, Y+6	; 0x06
    31ac:	84 30       	cpi	r24, 0x04	; 4
    31ae:	91 05       	cpc	r25, r1
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <MDIO_stderrSetPinDirection+0x278>
    31b2:	7f c0       	rjmp	.+254    	; 0x32b2 <MDIO_stderrSetPinDirection+0x376>
    31b4:	a8 c0       	rjmp	.+336    	; 0x3306 <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    31b6:	a9 e3       	ldi	r26, 0x39	; 57
    31b8:	b0 e0       	ldi	r27, 0x00	; 0
    31ba:	e9 e3       	ldi	r30, 0x39	; 57
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	81 81       	ldd	r24, Z+1	; 0x01
    31c0:	48 2f       	mov	r20, r24
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	28 2f       	mov	r18, r24
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <MDIO_stderrSetPinDirection+0x296>
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	2a 95       	dec	r18
    31d4:	e2 f7       	brpl	.-8      	; 0x31ce <MDIO_stderrSetPinDirection+0x292>
    31d6:	80 95       	com	r24
    31d8:	84 23       	and	r24, r20
    31da:	11 96       	adiw	r26, 0x01	; 1
    31dc:	8c 93       	st	X, r24
    31de:	a9 e3       	ldi	r26, 0x39	; 57
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	e9 e3       	ldi	r30, 0x39	; 57
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	48 2f       	mov	r20, r24
    31ea:	8b 81       	ldd	r24, Y+3	; 0x03
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	02 2e       	mov	r0, r18
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <MDIO_stderrSetPinDirection+0x2c0>
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	0a 94       	dec	r0
    31fe:	e2 f7       	brpl	.-8      	; 0x31f8 <MDIO_stderrSetPinDirection+0x2bc>
    3200:	84 2b       	or	r24, r20
    3202:	12 96       	adiw	r26, 0x02	; 2
    3204:	8c 93       	st	X, r24
    3206:	12 97       	sbiw	r26, 0x02	; 2
    3208:	86 c0       	rjmp	.+268    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    320a:	a6 e3       	ldi	r26, 0x36	; 54
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	e6 e3       	ldi	r30, 0x36	; 54
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	81 81       	ldd	r24, Z+1	; 0x01
    3214:	48 2f       	mov	r20, r24
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	28 2f       	mov	r18, r24
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <MDIO_stderrSetPinDirection+0x2ea>
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	2a 95       	dec	r18
    3228:	e2 f7       	brpl	.-8      	; 0x3222 <MDIO_stderrSetPinDirection+0x2e6>
    322a:	80 95       	com	r24
    322c:	84 23       	and	r24, r20
    322e:	11 96       	adiw	r26, 0x01	; 1
    3230:	8c 93       	st	X, r24
    3232:	a6 e3       	ldi	r26, 0x36	; 54
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e6 e3       	ldi	r30, 0x36	; 54
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	48 2f       	mov	r20, r24
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	02 2e       	mov	r0, r18
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <MDIO_stderrSetPinDirection+0x314>
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	0a 94       	dec	r0
    3252:	e2 f7       	brpl	.-8      	; 0x324c <MDIO_stderrSetPinDirection+0x310>
    3254:	84 2b       	or	r24, r20
    3256:	12 96       	adiw	r26, 0x02	; 2
    3258:	8c 93       	st	X, r24
    325a:	12 97       	sbiw	r26, 0x02	; 2
    325c:	5c c0       	rjmp	.+184    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    325e:	a3 e3       	ldi	r26, 0x33	; 51
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e3 e3       	ldi	r30, 0x33	; 51
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	81 81       	ldd	r24, Z+1	; 0x01
    3268:	48 2f       	mov	r20, r24
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	02 c0       	rjmp	.+4      	; 0x327a <MDIO_stderrSetPinDirection+0x33e>
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	2a 95       	dec	r18
    327c:	e2 f7       	brpl	.-8      	; 0x3276 <MDIO_stderrSetPinDirection+0x33a>
    327e:	80 95       	com	r24
    3280:	84 23       	and	r24, r20
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	8c 93       	st	X, r24
    3286:	a3 e3       	ldi	r26, 0x33	; 51
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e3 e3       	ldi	r30, 0x33	; 51
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	48 2f       	mov	r20, r24
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	02 2e       	mov	r0, r18
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <MDIO_stderrSetPinDirection+0x368>
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	0a 94       	dec	r0
    32a6:	e2 f7       	brpl	.-8      	; 0x32a0 <MDIO_stderrSetPinDirection+0x364>
    32a8:	84 2b       	or	r24, r20
    32aa:	12 96       	adiw	r26, 0x02	; 2
    32ac:	8c 93       	st	X, r24
    32ae:	12 97       	sbiw	r26, 0x02	; 2
    32b0:	32 c0       	rjmp	.+100    	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    32b2:	a0 e3       	ldi	r26, 0x30	; 48
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e0 e3       	ldi	r30, 0x30	; 48
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	81 81       	ldd	r24, Z+1	; 0x01
    32bc:	48 2f       	mov	r20, r24
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <MDIO_stderrSetPinDirection+0x392>
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	2a 95       	dec	r18
    32d0:	e2 f7       	brpl	.-8      	; 0x32ca <MDIO_stderrSetPinDirection+0x38e>
    32d2:	80 95       	com	r24
    32d4:	84 23       	and	r24, r20
    32d6:	11 96       	adiw	r26, 0x01	; 1
    32d8:	8c 93       	st	X, r24
    32da:	a0 e3       	ldi	r26, 0x30	; 48
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e0 e3       	ldi	r30, 0x30	; 48
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	48 2f       	mov	r20, r24
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	02 2e       	mov	r0, r18
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <MDIO_stderrSetPinDirection+0x3bc>
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	0a 94       	dec	r0
    32fa:	e2 f7       	brpl	.-8      	; 0x32f4 <MDIO_stderrSetPinDirection+0x3b8>
    32fc:	84 2b       	or	r24, r20
    32fe:	12 96       	adiw	r26, 0x02	; 2
    3300:	8c 93       	st	X, r24
    3302:	12 97       	sbiw	r26, 0x02	; 2
    3304:	08 c0       	rjmp	.+16     	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	89 83       	std	Y+1, r24	; 0x01
    330a:	05 c0       	rjmp	.+10     	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	89 83       	std	Y+1, r24	; 0x01
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3316:	89 81       	ldd	r24, Y+1	; 0x01
}
    3318:	2a 96       	adiw	r28, 0x0a	; 10
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	28 97       	sbiw	r28, 0x08	; 8
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	f8 94       	cli
    3338:	de bf       	out	0x3e, r29	; 62
    333a:	0f be       	out	0x3f, r0	; 63
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	8a 83       	std	Y+2, r24	; 0x02
    3340:	6b 83       	std	Y+3, r22	; 0x03
    3342:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    3344:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	88 30       	cpi	r24, 0x08	; 8
    334a:	08 f0       	brcs	.+2      	; 0x334e <MDIO_stderrSetPinValue+0x24>
    334c:	07 c1       	rjmp	.+526    	; 0x355c <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    334e:	8c 81       	ldd	r24, Y+4	; 0x04
    3350:	82 30       	cpi	r24, 0x02	; 2
    3352:	09 f0       	breq	.+2      	; 0x3356 <MDIO_stderrSetPinValue+0x2c>
    3354:	7c c0       	rjmp	.+248    	; 0x344e <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	38 87       	std	Y+8, r19	; 0x08
    335e:	2f 83       	std	Y+7, r18	; 0x07
    3360:	8f 81       	ldd	r24, Y+7	; 0x07
    3362:	98 85       	ldd	r25, Y+8	; 0x08
    3364:	82 30       	cpi	r24, 0x02	; 2
    3366:	91 05       	cpc	r25, r1
    3368:	69 f1       	breq	.+90     	; 0x33c4 <MDIO_stderrSetPinValue+0x9a>
    336a:	2f 81       	ldd	r18, Y+7	; 0x07
    336c:	38 85       	ldd	r19, Y+8	; 0x08
    336e:	23 30       	cpi	r18, 0x03	; 3
    3370:	31 05       	cpc	r19, r1
    3372:	34 f4       	brge	.+12     	; 0x3380 <MDIO_stderrSetPinValue+0x56>
    3374:	8f 81       	ldd	r24, Y+7	; 0x07
    3376:	98 85       	ldd	r25, Y+8	; 0x08
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	91 05       	cpc	r25, r1
    337c:	69 f0       	breq	.+26     	; 0x3398 <MDIO_stderrSetPinValue+0x6e>
    337e:	64 c0       	rjmp	.+200    	; 0x3448 <MDIO_stderrSetPinValue+0x11e>
    3380:	2f 81       	ldd	r18, Y+7	; 0x07
    3382:	38 85       	ldd	r19, Y+8	; 0x08
    3384:	23 30       	cpi	r18, 0x03	; 3
    3386:	31 05       	cpc	r19, r1
    3388:	99 f1       	breq	.+102    	; 0x33f0 <MDIO_stderrSetPinValue+0xc6>
    338a:	8f 81       	ldd	r24, Y+7	; 0x07
    338c:	98 85       	ldd	r25, Y+8	; 0x08
    338e:	84 30       	cpi	r24, 0x04	; 4
    3390:	91 05       	cpc	r25, r1
    3392:	09 f4       	brne	.+2      	; 0x3396 <MDIO_stderrSetPinValue+0x6c>
    3394:	43 c0       	rjmp	.+134    	; 0x341c <MDIO_stderrSetPinValue+0xf2>
    3396:	58 c0       	rjmp	.+176    	; 0x3448 <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3398:	a9 e3       	ldi	r26, 0x39	; 57
    339a:	b0 e0       	ldi	r27, 0x00	; 0
    339c:	e9 e3       	ldi	r30, 0x39	; 57
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	82 81       	ldd	r24, Z+2	; 0x02
    33a2:	48 2f       	mov	r20, r24
    33a4:	8b 81       	ldd	r24, Y+3	; 0x03
    33a6:	28 2f       	mov	r18, r24
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	02 2e       	mov	r0, r18
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <MDIO_stderrSetPinValue+0x8c>
    33b2:	88 0f       	add	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	0a 94       	dec	r0
    33b8:	e2 f7       	brpl	.-8      	; 0x33b2 <MDIO_stderrSetPinValue+0x88>
    33ba:	84 2b       	or	r24, r20
    33bc:	12 96       	adiw	r26, 0x02	; 2
    33be:	8c 93       	st	X, r24
    33c0:	12 97       	sbiw	r26, 0x02	; 2
    33c2:	ce c0       	rjmp	.+412    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    33c4:	a6 e3       	ldi	r26, 0x36	; 54
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e6 e3       	ldi	r30, 0x36	; 54
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	48 2f       	mov	r20, r24
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	02 2e       	mov	r0, r18
    33dc:	02 c0       	rjmp	.+4      	; 0x33e2 <MDIO_stderrSetPinValue+0xb8>
    33de:	88 0f       	add	r24, r24
    33e0:	99 1f       	adc	r25, r25
    33e2:	0a 94       	dec	r0
    33e4:	e2 f7       	brpl	.-8      	; 0x33de <MDIO_stderrSetPinValue+0xb4>
    33e6:	84 2b       	or	r24, r20
    33e8:	12 96       	adiw	r26, 0x02	; 2
    33ea:	8c 93       	st	X, r24
    33ec:	12 97       	sbiw	r26, 0x02	; 2
    33ee:	b8 c0       	rjmp	.+368    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    33f0:	a3 e3       	ldi	r26, 0x33	; 51
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e3 e3       	ldi	r30, 0x33	; 51
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	82 81       	ldd	r24, Z+2	; 0x02
    33fa:	48 2f       	mov	r20, r24
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	02 2e       	mov	r0, r18
    3408:	02 c0       	rjmp	.+4      	; 0x340e <MDIO_stderrSetPinValue+0xe4>
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	0a 94       	dec	r0
    3410:	e2 f7       	brpl	.-8      	; 0x340a <MDIO_stderrSetPinValue+0xe0>
    3412:	84 2b       	or	r24, r20
    3414:	12 96       	adiw	r26, 0x02	; 2
    3416:	8c 93       	st	X, r24
    3418:	12 97       	sbiw	r26, 0x02	; 2
    341a:	a2 c0       	rjmp	.+324    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    341c:	a0 e3       	ldi	r26, 0x30	; 48
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e0 e3       	ldi	r30, 0x30	; 48
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	82 81       	ldd	r24, Z+2	; 0x02
    3426:	48 2f       	mov	r20, r24
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	28 2f       	mov	r18, r24
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	02 2e       	mov	r0, r18
    3434:	02 c0       	rjmp	.+4      	; 0x343a <MDIO_stderrSetPinValue+0x110>
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	0a 94       	dec	r0
    343c:	e2 f7       	brpl	.-8      	; 0x3436 <MDIO_stderrSetPinValue+0x10c>
    343e:	84 2b       	or	r24, r20
    3440:	12 96       	adiw	r26, 0x02	; 2
    3442:	8c 93       	st	X, r24
    3444:	12 97       	sbiw	r26, 0x02	; 2
    3446:	8c c0       	rjmp	.+280    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	89 c0       	rjmp	.+274    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    344e:	8c 81       	ldd	r24, Y+4	; 0x04
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	09 f0       	breq	.+2      	; 0x3456 <MDIO_stderrSetPinValue+0x12c>
    3454:	80 c0       	rjmp	.+256    	; 0x3556 <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	3e 83       	std	Y+6, r19	; 0x06
    345e:	2d 83       	std	Y+5, r18	; 0x05
    3460:	8d 81       	ldd	r24, Y+5	; 0x05
    3462:	9e 81       	ldd	r25, Y+6	; 0x06
    3464:	82 30       	cpi	r24, 0x02	; 2
    3466:	91 05       	cpc	r25, r1
    3468:	71 f1       	breq	.+92     	; 0x34c6 <MDIO_stderrSetPinValue+0x19c>
    346a:	2d 81       	ldd	r18, Y+5	; 0x05
    346c:	3e 81       	ldd	r19, Y+6	; 0x06
    346e:	23 30       	cpi	r18, 0x03	; 3
    3470:	31 05       	cpc	r19, r1
    3472:	34 f4       	brge	.+12     	; 0x3480 <MDIO_stderrSetPinValue+0x156>
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	81 30       	cpi	r24, 0x01	; 1
    347a:	91 05       	cpc	r25, r1
    347c:	69 f0       	breq	.+26     	; 0x3498 <MDIO_stderrSetPinValue+0x16e>
    347e:	68 c0       	rjmp	.+208    	; 0x3550 <MDIO_stderrSetPinValue+0x226>
    3480:	2d 81       	ldd	r18, Y+5	; 0x05
    3482:	3e 81       	ldd	r19, Y+6	; 0x06
    3484:	23 30       	cpi	r18, 0x03	; 3
    3486:	31 05       	cpc	r19, r1
    3488:	a9 f1       	breq	.+106    	; 0x34f4 <MDIO_stderrSetPinValue+0x1ca>
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	84 30       	cpi	r24, 0x04	; 4
    3490:	91 05       	cpc	r25, r1
    3492:	09 f4       	brne	.+2      	; 0x3496 <MDIO_stderrSetPinValue+0x16c>
    3494:	46 c0       	rjmp	.+140    	; 0x3522 <MDIO_stderrSetPinValue+0x1f8>
    3496:	5c c0       	rjmp	.+184    	; 0x3550 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3498:	a9 e3       	ldi	r26, 0x39	; 57
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e9 e3       	ldi	r30, 0x39	; 57
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	48 2f       	mov	r20, r24
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	28 2f       	mov	r18, r24
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	02 2e       	mov	r0, r18
    34b0:	02 c0       	rjmp	.+4      	; 0x34b6 <MDIO_stderrSetPinValue+0x18c>
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	0a 94       	dec	r0
    34b8:	e2 f7       	brpl	.-8      	; 0x34b2 <MDIO_stderrSetPinValue+0x188>
    34ba:	80 95       	com	r24
    34bc:	84 23       	and	r24, r20
    34be:	12 96       	adiw	r26, 0x02	; 2
    34c0:	8c 93       	st	X, r24
    34c2:	12 97       	sbiw	r26, 0x02	; 2
    34c4:	4d c0       	rjmp	.+154    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    34c6:	a6 e3       	ldi	r26, 0x36	; 54
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e6 e3       	ldi	r30, 0x36	; 54
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	48 2f       	mov	r20, r24
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	02 2e       	mov	r0, r18
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <MDIO_stderrSetPinValue+0x1ba>
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	0a 94       	dec	r0
    34e6:	e2 f7       	brpl	.-8      	; 0x34e0 <MDIO_stderrSetPinValue+0x1b6>
    34e8:	80 95       	com	r24
    34ea:	84 23       	and	r24, r20
    34ec:	12 96       	adiw	r26, 0x02	; 2
    34ee:	8c 93       	st	X, r24
    34f0:	12 97       	sbiw	r26, 0x02	; 2
    34f2:	36 c0       	rjmp	.+108    	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    34f4:	a3 e3       	ldi	r26, 0x33	; 51
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e3 e3       	ldi	r30, 0x33	; 51
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	48 2f       	mov	r20, r24
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	02 2e       	mov	r0, r18
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <MDIO_stderrSetPinValue+0x1e8>
    350e:	88 0f       	add	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	0a 94       	dec	r0
    3514:	e2 f7       	brpl	.-8      	; 0x350e <MDIO_stderrSetPinValue+0x1e4>
    3516:	80 95       	com	r24
    3518:	84 23       	and	r24, r20
    351a:	12 96       	adiw	r26, 0x02	; 2
    351c:	8c 93       	st	X, r24
    351e:	12 97       	sbiw	r26, 0x02	; 2
    3520:	1f c0       	rjmp	.+62     	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    3522:	a0 e3       	ldi	r26, 0x30	; 48
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e0 e3       	ldi	r30, 0x30	; 48
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	48 2f       	mov	r20, r24
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	28 2f       	mov	r18, r24
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	02 2e       	mov	r0, r18
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <MDIO_stderrSetPinValue+0x216>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	0a 94       	dec	r0
    3542:	e2 f7       	brpl	.-8      	; 0x353c <MDIO_stderrSetPinValue+0x212>
    3544:	80 95       	com	r24
    3546:	84 23       	and	r24, r20
    3548:	12 96       	adiw	r26, 0x02	; 2
    354a:	8c 93       	st	X, r24
    354c:	12 97       	sbiw	r26, 0x02	; 2
    354e:	08 c0       	rjmp	.+16     	; 0x3560 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3560:	89 81       	ldd	r24, Y+1	; 0x01
}
    3562:	28 96       	adiw	r28, 0x08	; 8
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	27 97       	sbiw	r28, 0x07	; 7
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	9b 83       	std	Y+3, r25	; 0x03
    358a:	8a 83       	std	Y+2, r24	; 0x02
    358c:	6c 83       	std	Y+4, r22	; 0x04
    358e:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    3590:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	9b 81       	ldd	r25, Y+3	; 0x03
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	19 f4       	brne	.+6      	; 0x35a0 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	7a c0       	rjmp	.+244    	; 0x3694 <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    35a0:	8d 81       	ldd	r24, Y+5	; 0x05
    35a2:	88 30       	cpi	r24, 0x08	; 8
    35a4:	08 f0       	brcs	.+2      	; 0x35a8 <MDIO_stderrGetPinValue+0x34>
    35a6:	74 c0       	rjmp	.+232    	; 0x3690 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    35a8:	8c 81       	ldd	r24, Y+4	; 0x04
    35aa:	28 2f       	mov	r18, r24
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	3f 83       	std	Y+7, r19	; 0x07
    35b0:	2e 83       	std	Y+6, r18	; 0x06
    35b2:	4e 81       	ldd	r20, Y+6	; 0x06
    35b4:	5f 81       	ldd	r21, Y+7	; 0x07
    35b6:	42 30       	cpi	r20, 0x02	; 2
    35b8:	51 05       	cpc	r21, r1
    35ba:	59 f1       	breq	.+86     	; 0x3612 <MDIO_stderrGetPinValue+0x9e>
    35bc:	8e 81       	ldd	r24, Y+6	; 0x06
    35be:	9f 81       	ldd	r25, Y+7	; 0x07
    35c0:	83 30       	cpi	r24, 0x03	; 3
    35c2:	91 05       	cpc	r25, r1
    35c4:	34 f4       	brge	.+12     	; 0x35d2 <MDIO_stderrGetPinValue+0x5e>
    35c6:	2e 81       	ldd	r18, Y+6	; 0x06
    35c8:	3f 81       	ldd	r19, Y+7	; 0x07
    35ca:	21 30       	cpi	r18, 0x01	; 1
    35cc:	31 05       	cpc	r19, r1
    35ce:	69 f0       	breq	.+26     	; 0x35ea <MDIO_stderrGetPinValue+0x76>
    35d0:	5c c0       	rjmp	.+184    	; 0x368a <MDIO_stderrGetPinValue+0x116>
    35d2:	4e 81       	ldd	r20, Y+6	; 0x06
    35d4:	5f 81       	ldd	r21, Y+7	; 0x07
    35d6:	43 30       	cpi	r20, 0x03	; 3
    35d8:	51 05       	cpc	r21, r1
    35da:	79 f1       	breq	.+94     	; 0x363a <MDIO_stderrGetPinValue+0xc6>
    35dc:	8e 81       	ldd	r24, Y+6	; 0x06
    35de:	9f 81       	ldd	r25, Y+7	; 0x07
    35e0:	84 30       	cpi	r24, 0x04	; 4
    35e2:	91 05       	cpc	r25, r1
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <MDIO_stderrGetPinValue+0x74>
    35e6:	3d c0       	rjmp	.+122    	; 0x3662 <MDIO_stderrGetPinValue+0xee>
    35e8:	50 c0       	rjmp	.+160    	; 0x368a <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    35ea:	e9 e3       	ldi	r30, 0x39	; 57
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	28 2f       	mov	r18, r24
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	8d 81       	ldd	r24, Y+5	; 0x05
    35f6:	88 2f       	mov	r24, r24
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a9 01       	movw	r20, r18
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <MDIO_stderrGetPinValue+0x8e>
    35fe:	55 95       	asr	r21
    3600:	47 95       	ror	r20
    3602:	8a 95       	dec	r24
    3604:	e2 f7       	brpl	.-8      	; 0x35fe <MDIO_stderrGetPinValue+0x8a>
    3606:	ca 01       	movw	r24, r20
    3608:	81 70       	andi	r24, 0x01	; 1
    360a:	ea 81       	ldd	r30, Y+2	; 0x02
    360c:	fb 81       	ldd	r31, Y+3	; 0x03
    360e:	80 83       	st	Z, r24
    3610:	41 c0       	rjmp	.+130    	; 0x3694 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    3612:	e6 e3       	ldi	r30, 0x36	; 54
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	88 2f       	mov	r24, r24
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a9 01       	movw	r20, r18
    3624:	02 c0       	rjmp	.+4      	; 0x362a <MDIO_stderrGetPinValue+0xb6>
    3626:	55 95       	asr	r21
    3628:	47 95       	ror	r20
    362a:	8a 95       	dec	r24
    362c:	e2 f7       	brpl	.-8      	; 0x3626 <MDIO_stderrGetPinValue+0xb2>
    362e:	ca 01       	movw	r24, r20
    3630:	81 70       	andi	r24, 0x01	; 1
    3632:	ea 81       	ldd	r30, Y+2	; 0x02
    3634:	fb 81       	ldd	r31, Y+3	; 0x03
    3636:	80 83       	st	Z, r24
    3638:	2d c0       	rjmp	.+90     	; 0x3694 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    363a:	e3 e3       	ldi	r30, 0x33	; 51
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	a9 01       	movw	r20, r18
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <MDIO_stderrGetPinValue+0xde>
    364e:	55 95       	asr	r21
    3650:	47 95       	ror	r20
    3652:	8a 95       	dec	r24
    3654:	e2 f7       	brpl	.-8      	; 0x364e <MDIO_stderrGetPinValue+0xda>
    3656:	ca 01       	movw	r24, r20
    3658:	81 70       	andi	r24, 0x01	; 1
    365a:	ea 81       	ldd	r30, Y+2	; 0x02
    365c:	fb 81       	ldd	r31, Y+3	; 0x03
    365e:	80 83       	st	Z, r24
    3660:	19 c0       	rjmp	.+50     	; 0x3694 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    3662:	e0 e3       	ldi	r30, 0x30	; 48
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	80 81       	ld	r24, Z
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	8d 81       	ldd	r24, Y+5	; 0x05
    366e:	88 2f       	mov	r24, r24
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	a9 01       	movw	r20, r18
    3674:	02 c0       	rjmp	.+4      	; 0x367a <MDIO_stderrGetPinValue+0x106>
    3676:	55 95       	asr	r21
    3678:	47 95       	ror	r20
    367a:	8a 95       	dec	r24
    367c:	e2 f7       	brpl	.-8      	; 0x3676 <MDIO_stderrGetPinValue+0x102>
    367e:	ca 01       	movw	r24, r20
    3680:	81 70       	andi	r24, 0x01	; 1
    3682:	ea 81       	ldd	r30, Y+2	; 0x02
    3684:	fb 81       	ldd	r31, Y+3	; 0x03
    3686:	80 83       	st	Z, r24
    3688:	05 c0       	rjmp	.+10     	; 0x3694 <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3694:	89 81       	ldd	r24, Y+1	; 0x01
}
    3696:	27 96       	adiw	r28, 0x07	; 7
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <MDIO_stderrTogglePinValue+0x6>
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <MDIO_stderrTogglePinValue+0x8>
    36b0:	0f 92       	push	r0
    36b2:	cd b7       	in	r28, 0x3d	; 61
    36b4:	de b7       	in	r29, 0x3e	; 62
    36b6:	8a 83       	std	Y+2, r24	; 0x02
    36b8:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    36ba:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    36bc:	8b 81       	ldd	r24, Y+3	; 0x03
    36be:	88 30       	cpi	r24, 0x08	; 8
    36c0:	08 f0       	brcs	.+2      	; 0x36c4 <MDIO_stderrTogglePinValue+0x1c>
    36c2:	7c c0       	rjmp	.+248    	; 0x37bc <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	28 2f       	mov	r18, r24
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	3d 83       	std	Y+5, r19	; 0x05
    36cc:	2c 83       	std	Y+4, r18	; 0x04
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	82 30       	cpi	r24, 0x02	; 2
    36d4:	91 05       	cpc	r25, r1
    36d6:	69 f1       	breq	.+90     	; 0x3732 <MDIO_stderrTogglePinValue+0x8a>
    36d8:	2c 81       	ldd	r18, Y+4	; 0x04
    36da:	3d 81       	ldd	r19, Y+5	; 0x05
    36dc:	23 30       	cpi	r18, 0x03	; 3
    36de:	31 05       	cpc	r19, r1
    36e0:	34 f4       	brge	.+12     	; 0x36ee <MDIO_stderrTogglePinValue+0x46>
    36e2:	8c 81       	ldd	r24, Y+4	; 0x04
    36e4:	9d 81       	ldd	r25, Y+5	; 0x05
    36e6:	81 30       	cpi	r24, 0x01	; 1
    36e8:	91 05       	cpc	r25, r1
    36ea:	69 f0       	breq	.+26     	; 0x3706 <MDIO_stderrTogglePinValue+0x5e>
    36ec:	64 c0       	rjmp	.+200    	; 0x37b6 <MDIO_stderrTogglePinValue+0x10e>
    36ee:	2c 81       	ldd	r18, Y+4	; 0x04
    36f0:	3d 81       	ldd	r19, Y+5	; 0x05
    36f2:	23 30       	cpi	r18, 0x03	; 3
    36f4:	31 05       	cpc	r19, r1
    36f6:	99 f1       	breq	.+102    	; 0x375e <MDIO_stderrTogglePinValue+0xb6>
    36f8:	8c 81       	ldd	r24, Y+4	; 0x04
    36fa:	9d 81       	ldd	r25, Y+5	; 0x05
    36fc:	84 30       	cpi	r24, 0x04	; 4
    36fe:	91 05       	cpc	r25, r1
    3700:	09 f4       	brne	.+2      	; 0x3704 <MDIO_stderrTogglePinValue+0x5c>
    3702:	43 c0       	rjmp	.+134    	; 0x378a <MDIO_stderrTogglePinValue+0xe2>
    3704:	58 c0       	rjmp	.+176    	; 0x37b6 <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    3706:	a9 e3       	ldi	r26, 0x39	; 57
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	e9 e3       	ldi	r30, 0x39	; 57
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	48 2f       	mov	r20, r24
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	28 2f       	mov	r18, r24
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	02 2e       	mov	r0, r18
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <MDIO_stderrTogglePinValue+0x7c>
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	0a 94       	dec	r0
    3726:	e2 f7       	brpl	.-8      	; 0x3720 <MDIO_stderrTogglePinValue+0x78>
    3728:	84 27       	eor	r24, r20
    372a:	12 96       	adiw	r26, 0x02	; 2
    372c:	8c 93       	st	X, r24
    372e:	12 97       	sbiw	r26, 0x02	; 2
    3730:	47 c0       	rjmp	.+142    	; 0x37c0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    3732:	a6 e3       	ldi	r26, 0x36	; 54
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	e6 e3       	ldi	r30, 0x36	; 54
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	82 81       	ldd	r24, Z+2	; 0x02
    373c:	48 2f       	mov	r20, r24
    373e:	8b 81       	ldd	r24, Y+3	; 0x03
    3740:	28 2f       	mov	r18, r24
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	02 2e       	mov	r0, r18
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <MDIO_stderrTogglePinValue+0xa8>
    374c:	88 0f       	add	r24, r24
    374e:	99 1f       	adc	r25, r25
    3750:	0a 94       	dec	r0
    3752:	e2 f7       	brpl	.-8      	; 0x374c <MDIO_stderrTogglePinValue+0xa4>
    3754:	84 27       	eor	r24, r20
    3756:	12 96       	adiw	r26, 0x02	; 2
    3758:	8c 93       	st	X, r24
    375a:	12 97       	sbiw	r26, 0x02	; 2
    375c:	31 c0       	rjmp	.+98     	; 0x37c0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    375e:	a3 e3       	ldi	r26, 0x33	; 51
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e3 e3       	ldi	r30, 0x33	; 51
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	48 2f       	mov	r20, r24
    376a:	8b 81       	ldd	r24, Y+3	; 0x03
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	02 2e       	mov	r0, r18
    3776:	02 c0       	rjmp	.+4      	; 0x377c <MDIO_stderrTogglePinValue+0xd4>
    3778:	88 0f       	add	r24, r24
    377a:	99 1f       	adc	r25, r25
    377c:	0a 94       	dec	r0
    377e:	e2 f7       	brpl	.-8      	; 0x3778 <MDIO_stderrTogglePinValue+0xd0>
    3780:	84 27       	eor	r24, r20
    3782:	12 96       	adiw	r26, 0x02	; 2
    3784:	8c 93       	st	X, r24
    3786:	12 97       	sbiw	r26, 0x02	; 2
    3788:	1b c0       	rjmp	.+54     	; 0x37c0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    378a:	a0 e3       	ldi	r26, 0x30	; 48
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e0 e3       	ldi	r30, 0x30	; 48
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	82 81       	ldd	r24, Z+2	; 0x02
    3794:	48 2f       	mov	r20, r24
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	28 2f       	mov	r18, r24
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	02 2e       	mov	r0, r18
    37a2:	02 c0       	rjmp	.+4      	; 0x37a8 <MDIO_stderrTogglePinValue+0x100>
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	0a 94       	dec	r0
    37aa:	e2 f7       	brpl	.-8      	; 0x37a4 <MDIO_stderrTogglePinValue+0xfc>
    37ac:	84 27       	eor	r24, r20
    37ae:	12 96       	adiw	r26, 0x02	; 2
    37b0:	8c 93       	st	X, r24
    37b2:	12 97       	sbiw	r26, 0x02	; 2
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	02 c0       	rjmp	.+4      	; 0x37c0 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37c2:	0f 90       	pop	r0
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <MEXTI_stderrInit>:

/*Global Array of Pointers to function to take The CallBack Functions*/
static void (*MEXTI_pvoidUserFunction[3])(void)={NULL_POINTER, NULL_POINTER, NULL_POINTER};

STD_error_t MEXTI_stderrInit(u8 ARG_u8InterruptNo,u8 ARG_u8SenseMode)
{	
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	27 97       	sbiw	r28, 0x07	; 7
    37dc:	0f b6       	in	r0, 0x3f	; 63
    37de:	f8 94       	cli
    37e0:	de bf       	out	0x3e, r29	; 62
    37e2:	0f be       	out	0x3f, r0	; 63
    37e4:	cd bf       	out	0x3d, r28	; 61
    37e6:	8a 83       	std	Y+2, r24	; 0x02
    37e8:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError =E_OK;
    37ea:	19 82       	std	Y+1, r1	; 0x01
	switch( ARG_u8InterruptNo )
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	28 2f       	mov	r18, r24
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	3f 83       	std	Y+7, r19	; 0x07
    37f4:	2e 83       	std	Y+6, r18	; 0x06
    37f6:	8e 81       	ldd	r24, Y+6	; 0x06
    37f8:	9f 81       	ldd	r25, Y+7	; 0x07
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	91 05       	cpc	r25, r1
    37fe:	d1 f0       	breq	.+52     	; 0x3834 <MEXTI_stderrInit+0x62>
    3800:	2e 81       	ldd	r18, Y+6	; 0x06
    3802:	3f 81       	ldd	r19, Y+7	; 0x07
    3804:	22 30       	cpi	r18, 0x02	; 2
    3806:	31 05       	cpc	r19, r1
    3808:	61 f1       	breq	.+88     	; 0x3862 <MEXTI_stderrInit+0x90>
    380a:	8e 81       	ldd	r24, Y+6	; 0x06
    380c:	9f 81       	ldd	r25, Y+7	; 0x07
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	09 f0       	breq	.+2      	; 0x3814 <MEXTI_stderrInit+0x42>
    3812:	4a c0       	rjmp	.+148    	; 0x38a8 <MEXTI_stderrInit+0xd6>
	{
	case MEXTI_INT0: MCUCR &=~(3<<ISC00);  MCUCR |=(ARG_u8SenseMode<<ISC00);  break; 
    3814:	a5 e5       	ldi	r26, 0x55	; 85
    3816:	b0 e0       	ldi	r27, 0x00	; 0
    3818:	e5 e5       	ldi	r30, 0x55	; 85
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	80 81       	ld	r24, Z
    381e:	8c 7f       	andi	r24, 0xFC	; 252
    3820:	8c 93       	st	X, r24
    3822:	a5 e5       	ldi	r26, 0x55	; 85
    3824:	b0 e0       	ldi	r27, 0x00	; 0
    3826:	e5 e5       	ldi	r30, 0x55	; 85
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	90 81       	ld	r25, Z
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	89 2b       	or	r24, r25
    3830:	8c 93       	st	X, r24
    3832:	3c c0       	rjmp	.+120    	; 0x38ac <MEXTI_stderrInit+0xda>
	case MEXTI_INT1: MCUCR &=~(3<<ISC10);  MCUCR |=(ARG_u8SenseMode<<ISC10);  break; 
    3834:	a5 e5       	ldi	r26, 0x55	; 85
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e5 e5       	ldi	r30, 0x55	; 85
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	83 7f       	andi	r24, 0xF3	; 243
    3840:	8c 93       	st	X, r24
    3842:	a5 e5       	ldi	r26, 0x55	; 85
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e5 e5       	ldi	r30, 0x55	; 85
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	28 2f       	mov	r18, r24
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	88 2f       	mov	r24, r24
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	88 0f       	add	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	82 2b       	or	r24, r18
    385e:	8c 93       	st	X, r24
    3860:	25 c0       	rjmp	.+74     	; 0x38ac <MEXTI_stderrInit+0xda>
	case MEXTI_INT2:  
		switch(ARG_u8SenseMode){
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	28 2f       	mov	r18, r24
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	3d 83       	std	Y+5, r19	; 0x05
    386a:	2c 83       	std	Y+4, r18	; 0x04
    386c:	8c 81       	ldd	r24, Y+4	; 0x04
    386e:	9d 81       	ldd	r25, Y+5	; 0x05
    3870:	82 30       	cpi	r24, 0x02	; 2
    3872:	91 05       	cpc	r25, r1
    3874:	31 f0       	breq	.+12     	; 0x3882 <MEXTI_stderrInit+0xb0>
    3876:	2c 81       	ldd	r18, Y+4	; 0x04
    3878:	3d 81       	ldd	r19, Y+5	; 0x05
    387a:	23 30       	cpi	r18, 0x03	; 3
    387c:	31 05       	cpc	r19, r1
    387e:	49 f0       	breq	.+18     	; 0x3892 <MEXTI_stderrInit+0xc0>
    3880:	10 c0       	rjmp	.+32     	; 0x38a2 <MEXTI_stderrInit+0xd0>
		case MEXTI_MODE_FALLING:CLEAR_BIT(MCUCSR,ISC2); break;
    3882:	a4 e5       	ldi	r26, 0x54	; 84
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	e4 e5       	ldi	r30, 0x54	; 84
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	8f 7b       	andi	r24, 0xBF	; 191
    388e:	8c 93       	st	X, r24
    3890:	0d c0       	rjmp	.+26     	; 0x38ac <MEXTI_stderrInit+0xda>
		case MEXTI_MODE_RISING: SET_BIT(MCUCSR,ISC2); break;
    3892:	a4 e5       	ldi	r26, 0x54	; 84
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e4 e5       	ldi	r30, 0x54	; 84
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	80 64       	ori	r24, 0x40	; 64
    389e:	8c 93       	st	X, r24
    38a0:	05 c0       	rjmp	.+10     	; 0x38ac <MEXTI_stderrInit+0xda>
		default: L_stderrError=E_NOK; break;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <MEXTI_stderrInit+0xda>
		}
	break; 
	default: L_stderrError=E_NOK; break; 
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    38ae:	27 96       	adiw	r28, 0x07	; 7
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <MEXTI_stderrCallBack>:

STD_error_t MEXTI_stderrCallBack(void (*ARG_pvoidUserFunction)(void), u8 ARG_u8InterruptNo )
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	00 d0       	rcall	.+0      	; 0x38c6 <MEXTI_stderrCallBack+0x6>
    38c6:	00 d0       	rcall	.+0      	; 0x38c8 <MEXTI_stderrCallBack+0x8>
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    38cc:	9b 83       	std	Y+3, r25	; 0x03
    38ce:	8a 83       	std	Y+2, r24	; 0x02
    38d0:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError =E_OK;
    38d2:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER == ARG_pvoidUserFunction  ) 
    38d4:	8a 81       	ldd	r24, Y+2	; 0x02
    38d6:	9b 81       	ldd	r25, Y+3	; 0x03
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	19 f4       	brne	.+6      	; 0x38e2 <MEXTI_stderrCallBack+0x22>
	{
		L_stderrError = E_NULL_POINTER;
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	89 83       	std	Y+1, r24	; 0x01
    38e0:	12 c0       	rjmp	.+36     	; 0x3906 <MEXTI_stderrCallBack+0x46>
	}
	else if(ARG_u8InterruptNo >= MEXTI_INT0  &&  ARG_u8InterruptNo <= MEXTI_INT2 ){
    38e2:	8c 81       	ldd	r24, Y+4	; 0x04
    38e4:	83 30       	cpi	r24, 0x03	; 3
    38e6:	68 f4       	brcc	.+26     	; 0x3902 <MEXTI_stderrCallBack+0x42>
		MEXTI_pvoidUserFunction[ARG_u8InterruptNo]=ARG_pvoidUserFunction;
    38e8:	8c 81       	ldd	r24, Y+4	; 0x04
    38ea:	88 2f       	mov	r24, r24
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	fc 01       	movw	r30, r24
    38f4:	e4 57       	subi	r30, 0x74	; 116
    38f6:	fe 4f       	sbci	r31, 0xFE	; 254
    38f8:	8a 81       	ldd	r24, Y+2	; 0x02
    38fa:	9b 81       	ldd	r25, Y+3	; 0x03
    38fc:	91 83       	std	Z+1, r25	; 0x01
    38fe:	80 83       	st	Z, r24
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <MEXTI_stderrCallBack+0x46>
	}
	else{
		L_stderrError=E_NOK;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3906:	89 81       	ldd	r24, Y+1	; 0x01
}
    3908:	0f 90       	pop	r0
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <MEXTI_stderrEnable>:

/*
 * Enable INT Function
 */
STD_error_t MEXTI_stderrEnable(u8 ARG_u8InterruptNo)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	00 d0       	rcall	.+0      	; 0x391c <MEXTI_stderrEnable+0x6>
    391c:	00 d0       	rcall	.+0      	; 0x391e <MEXTI_stderrEnable+0x8>
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError =E_OK;
    3924:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8InterruptNo){
    3926:	8a 81       	ldd	r24, Y+2	; 0x02
    3928:	28 2f       	mov	r18, r24
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	3c 83       	std	Y+4, r19	; 0x04
    392e:	2b 83       	std	Y+3, r18	; 0x03
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	9c 81       	ldd	r25, Y+4	; 0x04
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	91 05       	cpc	r25, r1
    3938:	89 f0       	breq	.+34     	; 0x395c <MEXTI_stderrEnable+0x46>
    393a:	2b 81       	ldd	r18, Y+3	; 0x03
    393c:	3c 81       	ldd	r19, Y+4	; 0x04
    393e:	22 30       	cpi	r18, 0x02	; 2
    3940:	31 05       	cpc	r19, r1
    3942:	a1 f0       	breq	.+40     	; 0x396c <MEXTI_stderrEnable+0x56>
    3944:	8b 81       	ldd	r24, Y+3	; 0x03
    3946:	9c 81       	ldd	r25, Y+4	; 0x04
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	c1 f4       	brne	.+48     	; 0x397c <MEXTI_stderrEnable+0x66>
		case MEXTI_INT0:	SET_BIT(GICR, INT0); break;
    394c:	ab e5       	ldi	r26, 0x5B	; 91
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	eb e5       	ldi	r30, 0x5B	; 91
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	80 64       	ori	r24, 0x40	; 64
    3958:	8c 93       	st	X, r24
    395a:	12 c0       	rjmp	.+36     	; 0x3980 <MEXTI_stderrEnable+0x6a>
		case MEXTI_INT1:    SET_BIT(GICR, INT1); break;
    395c:	ab e5       	ldi	r26, 0x5B	; 91
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	eb e5       	ldi	r30, 0x5B	; 91
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	80 68       	ori	r24, 0x80	; 128
    3968:	8c 93       	st	X, r24
    396a:	0a c0       	rjmp	.+20     	; 0x3980 <MEXTI_stderrEnable+0x6a>
		case MEXTI_INT2:    SET_BIT(GICR, INT2); break;
    396c:	ab e5       	ldi	r26, 0x5B	; 91
    396e:	b0 e0       	ldi	r27, 0x00	; 0
    3970:	eb e5       	ldi	r30, 0x5B	; 91
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	80 62       	ori	r24, 0x20	; 32
    3978:	8c 93       	st	X, r24
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <MEXTI_stderrEnable+0x6a>
		default: L_stderrError=E_NOK; break;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3980:	89 81       	ldd	r24, Y+1	; 0x01
}
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	0f 90       	pop	r0
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <MEXTI_stderrDisable>:

/*
 * Disable INT Function
 */
STD_error_t MEXTI_stderrDisable(u8 ARG_u8InterruptNo)
{
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	00 d0       	rcall	.+0      	; 0x3996 <MEXTI_stderrDisable+0x6>
    3996:	00 d0       	rcall	.+0      	; 0x3998 <MEXTI_stderrDisable+0x8>
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
    399c:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError =E_OK;
    399e:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8InterruptNo){
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	28 2f       	mov	r18, r24
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	3c 83       	std	Y+4, r19	; 0x04
    39a8:	2b 83       	std	Y+3, r18	; 0x03
    39aa:	8b 81       	ldd	r24, Y+3	; 0x03
    39ac:	9c 81       	ldd	r25, Y+4	; 0x04
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	91 05       	cpc	r25, r1
    39b2:	89 f0       	breq	.+34     	; 0x39d6 <MEXTI_stderrDisable+0x46>
    39b4:	2b 81       	ldd	r18, Y+3	; 0x03
    39b6:	3c 81       	ldd	r19, Y+4	; 0x04
    39b8:	22 30       	cpi	r18, 0x02	; 2
    39ba:	31 05       	cpc	r19, r1
    39bc:	a1 f0       	breq	.+40     	; 0x39e6 <MEXTI_stderrDisable+0x56>
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	9c 81       	ldd	r25, Y+4	; 0x04
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	c1 f4       	brne	.+48     	; 0x39f6 <MEXTI_stderrDisable+0x66>
		case MEXTI_INT0:	CLEAR_BIT(GICR, INT0); break;
    39c6:	ab e5       	ldi	r26, 0x5B	; 91
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	eb e5       	ldi	r30, 0x5B	; 91
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	8f 7b       	andi	r24, 0xBF	; 191
    39d2:	8c 93       	st	X, r24
    39d4:	12 c0       	rjmp	.+36     	; 0x39fa <MEXTI_stderrDisable+0x6a>
		case MEXTI_INT1:    CLEAR_BIT(GICR, INT1); break;
    39d6:	ab e5       	ldi	r26, 0x5B	; 91
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	eb e5       	ldi	r30, 0x5B	; 91
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	8f 77       	andi	r24, 0x7F	; 127
    39e2:	8c 93       	st	X, r24
    39e4:	0a c0       	rjmp	.+20     	; 0x39fa <MEXTI_stderrDisable+0x6a>
		case MEXTI_INT2:    CLEAR_BIT(GICR, INT2); break;
    39e6:	ab e5       	ldi	r26, 0x5B	; 91
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	eb e5       	ldi	r30, 0x5B	; 91
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	8f 7d       	andi	r24, 0xDF	; 223
    39f2:	8c 93       	st	X, r24
    39f4:	02 c0       	rjmp	.+4      	; 0x39fa <MEXTI_stderrDisable+0x6a>
		default: L_stderrError=E_NOK; break;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	cf 91       	pop	r28
    3a06:	df 91       	pop	r29
    3a08:	08 95       	ret

00003a0a <__vector_1>:

/* ISR INT0 INT 1 INT2 */

void __vector_1(void) __attribute__((signal)); /* This line is not prototype */
void __vector_1(void)
{
    3a0a:	1f 92       	push	r1
    3a0c:	0f 92       	push	r0
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	0f 92       	push	r0
    3a12:	11 24       	eor	r1, r1
    3a14:	2f 93       	push	r18
    3a16:	3f 93       	push	r19
    3a18:	4f 93       	push	r20
    3a1a:	5f 93       	push	r21
    3a1c:	6f 93       	push	r22
    3a1e:	7f 93       	push	r23
    3a20:	8f 93       	push	r24
    3a22:	9f 93       	push	r25
    3a24:	af 93       	push	r26
    3a26:	bf 93       	push	r27
    3a28:	ef 93       	push	r30
    3a2a:	ff 93       	push	r31
    3a2c:	df 93       	push	r29
    3a2e:	cf 93       	push	r28
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT0]();
    3a34:	e0 91 8c 01 	lds	r30, 0x018C
    3a38:	f0 91 8d 01 	lds	r31, 0x018D
    3a3c:	09 95       	icall
}
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	ff 91       	pop	r31
    3a44:	ef 91       	pop	r30
    3a46:	bf 91       	pop	r27
    3a48:	af 91       	pop	r26
    3a4a:	9f 91       	pop	r25
    3a4c:	8f 91       	pop	r24
    3a4e:	7f 91       	pop	r23
    3a50:	6f 91       	pop	r22
    3a52:	5f 91       	pop	r21
    3a54:	4f 91       	pop	r20
    3a56:	3f 91       	pop	r19
    3a58:	2f 91       	pop	r18
    3a5a:	0f 90       	pop	r0
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	0f 90       	pop	r0
    3a60:	1f 90       	pop	r1
    3a62:	18 95       	reti

00003a64 <__vector_2>:

void __vector_2(void) __attribute__((signal)); /* This line is not prototype */
void __vector_2(void)
{
    3a64:	1f 92       	push	r1
    3a66:	0f 92       	push	r0
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	0f 92       	push	r0
    3a6c:	11 24       	eor	r1, r1
    3a6e:	2f 93       	push	r18
    3a70:	3f 93       	push	r19
    3a72:	4f 93       	push	r20
    3a74:	5f 93       	push	r21
    3a76:	6f 93       	push	r22
    3a78:	7f 93       	push	r23
    3a7a:	8f 93       	push	r24
    3a7c:	9f 93       	push	r25
    3a7e:	af 93       	push	r26
    3a80:	bf 93       	push	r27
    3a82:	ef 93       	push	r30
    3a84:	ff 93       	push	r31
    3a86:	df 93       	push	r29
    3a88:	cf 93       	push	r28
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT1]();
    3a8e:	e0 91 8e 01 	lds	r30, 0x018E
    3a92:	f0 91 8f 01 	lds	r31, 0x018F
    3a96:	09 95       	icall
}
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	ff 91       	pop	r31
    3a9e:	ef 91       	pop	r30
    3aa0:	bf 91       	pop	r27
    3aa2:	af 91       	pop	r26
    3aa4:	9f 91       	pop	r25
    3aa6:	8f 91       	pop	r24
    3aa8:	7f 91       	pop	r23
    3aaa:	6f 91       	pop	r22
    3aac:	5f 91       	pop	r21
    3aae:	4f 91       	pop	r20
    3ab0:	3f 91       	pop	r19
    3ab2:	2f 91       	pop	r18
    3ab4:	0f 90       	pop	r0
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	0f 90       	pop	r0
    3aba:	1f 90       	pop	r1
    3abc:	18 95       	reti

00003abe <__vector_3>:

void __vector_3(void) __attribute__((signal)); /* This line is not prototype */
void __vector_3(void)
{
    3abe:	1f 92       	push	r1
    3ac0:	0f 92       	push	r0
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	0f 92       	push	r0
    3ac6:	11 24       	eor	r1, r1
    3ac8:	2f 93       	push	r18
    3aca:	3f 93       	push	r19
    3acc:	4f 93       	push	r20
    3ace:	5f 93       	push	r21
    3ad0:	6f 93       	push	r22
    3ad2:	7f 93       	push	r23
    3ad4:	8f 93       	push	r24
    3ad6:	9f 93       	push	r25
    3ad8:	af 93       	push	r26
    3ada:	bf 93       	push	r27
    3adc:	ef 93       	push	r30
    3ade:	ff 93       	push	r31
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT2]();
    3ae8:	e0 91 90 01 	lds	r30, 0x0190
    3aec:	f0 91 91 01 	lds	r31, 0x0191
    3af0:	09 95       	icall
}
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	ff 91       	pop	r31
    3af8:	ef 91       	pop	r30
    3afa:	bf 91       	pop	r27
    3afc:	af 91       	pop	r26
    3afe:	9f 91       	pop	r25
    3b00:	8f 91       	pop	r24
    3b02:	7f 91       	pop	r23
    3b04:	6f 91       	pop	r22
    3b06:	5f 91       	pop	r21
    3b08:	4f 91       	pop	r20
    3b0a:	3f 91       	pop	r19
    3b0c:	2f 91       	pop	r18
    3b0e:	0f 90       	pop	r0
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	0f 90       	pop	r0
    3b14:	1f 90       	pop	r1
    3b16:	18 95       	reti

00003b18 <MGIE_voidEnableGI>:
#include "LBIT_math.h"

/* SWC Includes */
#include "MGIE_private.h"

void MGIE_voidEnableGI(void){
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG,I_BIT);
    3b20:	af e5       	ldi	r26, 0x5F	; 95
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	ef e5       	ldi	r30, 0x5F	; 95
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	80 81       	ld	r24, Z
    3b2a:	80 68       	ori	r24, 0x80	; 128
    3b2c:	8c 93       	st	X, r24
	
}
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <MGIE_voidDisableGI>:
void MGIE_voidDisableGI(void){
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I_BIT);
    3b3c:	af e5       	ldi	r26, 0x5F	; 95
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	ef e5       	ldi	r30, 0x5F	; 95
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	8f 77       	andi	r24, 0x7F	; 127
    3b48:	8c 93       	st	X, r24
}
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <MTIM_stderrInit>:

void (*MTIM_pvoidfUserFunctionT0OVF)(void)=NULL_POINTER;
void (*MTIM_pvoidfUserFunctionT0OCM)(void)=NULL_POINTER;

STD_error_t MTIM_stderrInit(u8 ARG_u8TimerNo,u8 ARG_u8ClockSource,u8 ARG_u8u8Mode ,u8 ARG_u8HWPinMode)
{
    3b50:	df 93       	push	r29
    3b52:	cf 93       	push	r28
    3b54:	cd b7       	in	r28, 0x3d	; 61
    3b56:	de b7       	in	r29, 0x3e	; 62
    3b58:	29 97       	sbiw	r28, 0x09	; 9
    3b5a:	0f b6       	in	r0, 0x3f	; 63
    3b5c:	f8 94       	cli
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	0f be       	out	0x3f, r0	; 63
    3b62:	cd bf       	out	0x3d, r28	; 61
    3b64:	8a 83       	std	Y+2, r24	; 0x02
    3b66:	6b 83       	std	Y+3, r22	; 0x03
    3b68:	4c 83       	std	Y+4, r20	; 0x04
    3b6a:	2d 83       	std	Y+5, r18	; 0x05
	STD_error_t L_stderrState=E_OK;
    3b6c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8TimerNo<=2 &&ARG_u8ClockSource<=7 && ARG_u8u8Mode<=3 && ARG_u8HWPinMode<=3)
    3b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b70:	83 30       	cpi	r24, 0x03	; 3
    3b72:	08 f0       	brcs	.+2      	; 0x3b76 <MTIM_stderrInit+0x26>
    3b74:	d2 c0       	rjmp	.+420    	; 0x3d1a <MTIM_stderrInit+0x1ca>
    3b76:	8b 81       	ldd	r24, Y+3	; 0x03
    3b78:	88 30       	cpi	r24, 0x08	; 8
    3b7a:	08 f0       	brcs	.+2      	; 0x3b7e <MTIM_stderrInit+0x2e>
    3b7c:	ce c0       	rjmp	.+412    	; 0x3d1a <MTIM_stderrInit+0x1ca>
    3b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b80:	84 30       	cpi	r24, 0x04	; 4
    3b82:	08 f0       	brcs	.+2      	; 0x3b86 <MTIM_stderrInit+0x36>
    3b84:	ca c0       	rjmp	.+404    	; 0x3d1a <MTIM_stderrInit+0x1ca>
    3b86:	8d 81       	ldd	r24, Y+5	; 0x05
    3b88:	84 30       	cpi	r24, 0x04	; 4
    3b8a:	08 f0       	brcs	.+2      	; 0x3b8e <MTIM_stderrInit+0x3e>
    3b8c:	c6 c0       	rjmp	.+396    	; 0x3d1a <MTIM_stderrInit+0x1ca>
	{
		switch(ARG_u8TimerNo)
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	28 2f       	mov	r18, r24
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	39 87       	std	Y+9, r19	; 0x09
    3b96:	28 87       	std	Y+8, r18	; 0x08
    3b98:	88 85       	ldd	r24, Y+8	; 0x08
    3b9a:	99 85       	ldd	r25, Y+9	; 0x09
    3b9c:	81 30       	cpi	r24, 0x01	; 1
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <MTIM_stderrInit+0x54>
    3ba2:	7e c0       	rjmp	.+252    	; 0x3ca0 <MTIM_stderrInit+0x150>
    3ba4:	28 85       	ldd	r18, Y+8	; 0x08
    3ba6:	39 85       	ldd	r19, Y+9	; 0x09
    3ba8:	22 30       	cpi	r18, 0x02	; 2
    3baa:	31 05       	cpc	r19, r1
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <MTIM_stderrInit+0x60>
    3bae:	b7 c0       	rjmp	.+366    	; 0x3d1e <MTIM_stderrInit+0x1ce>
    3bb0:	88 85       	ldd	r24, Y+8	; 0x08
    3bb2:	99 85       	ldd	r25, Y+9	; 0x09
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	09 f0       	breq	.+2      	; 0x3bba <MTIM_stderrInit+0x6a>
    3bb8:	ad c0       	rjmp	.+346    	; 0x3d14 <MTIM_stderrInit+0x1c4>
		{
			case MTIM_TIMER0:
				switch(ARG_u8u8Mode)
    3bba:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	3f 83       	std	Y+7, r19	; 0x07
    3bc2:	2e 83       	std	Y+6, r18	; 0x06
    3bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    3bc8:	81 30       	cpi	r24, 0x01	; 1
    3bca:	91 05       	cpc	r25, r1
    3bcc:	21 f1       	breq	.+72     	; 0x3c16 <MTIM_stderrInit+0xc6>
    3bce:	2e 81       	ldd	r18, Y+6	; 0x06
    3bd0:	3f 81       	ldd	r19, Y+7	; 0x07
    3bd2:	22 30       	cpi	r18, 0x02	; 2
    3bd4:	31 05       	cpc	r19, r1
    3bd6:	2c f4       	brge	.+10     	; 0x3be2 <MTIM_stderrInit+0x92>
    3bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bda:	9f 81       	ldd	r25, Y+7	; 0x07
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	61 f0       	breq	.+24     	; 0x3bf8 <MTIM_stderrInit+0xa8>
    3be0:	47 c0       	rjmp	.+142    	; 0x3c70 <MTIM_stderrInit+0x120>
    3be2:	2e 81       	ldd	r18, Y+6	; 0x06
    3be4:	3f 81       	ldd	r19, Y+7	; 0x07
    3be6:	22 30       	cpi	r18, 0x02	; 2
    3be8:	31 05       	cpc	r19, r1
    3bea:	21 f1       	breq	.+72     	; 0x3c34 <MTIM_stderrInit+0xe4>
    3bec:	8e 81       	ldd	r24, Y+6	; 0x06
    3bee:	9f 81       	ldd	r25, Y+7	; 0x07
    3bf0:	83 30       	cpi	r24, 0x03	; 3
    3bf2:	91 05       	cpc	r25, r1
    3bf4:	71 f1       	breq	.+92     	; 0x3c52 <MTIM_stderrInit+0x102>
    3bf6:	3c c0       	rjmp	.+120    	; 0x3c70 <MTIM_stderrInit+0x120>
				{
					case MTIM_MODE_T0_NORMAL:
						CLEAR_BIT(TCCR0,WGM01);
    3bf8:	a3 e5       	ldi	r26, 0x53	; 83
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	e3 e5       	ldi	r30, 0x53	; 83
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	87 7f       	andi	r24, 0xF7	; 247
    3c04:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    3c06:	a3 e5       	ldi	r26, 0x53	; 83
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	e3 e5       	ldi	r30, 0x53	; 83
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	8f 7b       	andi	r24, 0xBF	; 191
    3c12:	8c 93       	st	X, r24
    3c14:	2f c0       	rjmp	.+94     	; 0x3c74 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_T0_CTC:
						SET_BIT(TCCR0,WGM01);
    3c16:	a3 e5       	ldi	r26, 0x53	; 83
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e3 e5       	ldi	r30, 0x53	; 83
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	88 60       	ori	r24, 0x08	; 8
    3c22:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    3c24:	a3 e5       	ldi	r26, 0x53	; 83
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	e3 e5       	ldi	r30, 0x53	; 83
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	8f 7b       	andi	r24, 0xBF	; 191
    3c30:	8c 93       	st	X, r24
    3c32:	20 c0       	rjmp	.+64     	; 0x3c74 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_T0_FASTPWM:
						SET_BIT(TCCR0,WGM01);
    3c34:	a3 e5       	ldi	r26, 0x53	; 83
    3c36:	b0 e0       	ldi	r27, 0x00	; 0
    3c38:	e3 e5       	ldi	r30, 0x53	; 83
    3c3a:	f0 e0       	ldi	r31, 0x00	; 0
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 60       	ori	r24, 0x08	; 8
    3c40:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM00);
    3c42:	a3 e5       	ldi	r26, 0x53	; 83
    3c44:	b0 e0       	ldi	r27, 0x00	; 0
    3c46:	e3 e5       	ldi	r30, 0x53	; 83
    3c48:	f0 e0       	ldi	r31, 0x00	; 0
    3c4a:	80 81       	ld	r24, Z
    3c4c:	80 64       	ori	r24, 0x40	; 64
    3c4e:	8c 93       	st	X, r24
    3c50:	11 c0       	rjmp	.+34     	; 0x3c74 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_T0_PHASECORRECTPWM:
						SET_BIT(TCCR0,WGM00);
    3c52:	a3 e5       	ldi	r26, 0x53	; 83
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	e3 e5       	ldi	r30, 0x53	; 83
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	80 64       	ori	r24, 0x40	; 64
    3c5e:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM01);
    3c60:	a3 e5       	ldi	r26, 0x53	; 83
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	e3 e5       	ldi	r30, 0x53	; 83
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	87 7f       	andi	r24, 0xF7	; 247
    3c6c:	8c 93       	st	X, r24
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <MTIM_stderrInit+0x124>
					break;
					default: L_stderrState=E_NOK; break;
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	89 83       	std	Y+1, r24	; 0x01
				}
				TCCR0 = (TCCR0&0xCF) | (ARG_u8HWPinMode<<4);
    3c74:	a3 e5       	ldi	r26, 0x53	; 83
    3c76:	b0 e0       	ldi	r27, 0x00	; 0
    3c78:	e3 e5       	ldi	r30, 0x53	; 83
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	28 2f       	mov	r18, r24
    3c80:	2f 7c       	andi	r18, 0xCF	; 207
    3c82:	8d 81       	ldd	r24, Y+5	; 0x05
    3c84:	88 2f       	mov	r24, r24
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	82 95       	swap	r24
    3c8a:	92 95       	swap	r25
    3c8c:	90 7f       	andi	r25, 0xF0	; 240
    3c8e:	98 27       	eor	r25, r24
    3c90:	80 7f       	andi	r24, 0xF0	; 240
    3c92:	98 27       	eor	r25, r24
    3c94:	82 2b       	or	r24, r18
    3c96:	8c 93       	st	X, r24
				MTIM_u8Timer0Clock = ARG_u8ClockSource; /* assign it to global var*/
    3c98:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9a:	80 93 98 01 	sts	0x0198, r24
    3c9e:	3f c0       	rjmp	.+126    	; 0x3d1e <MTIM_stderrInit+0x1ce>
			break;
			case MTIM_TIMER1:
				switch(ARG_u8u8Mode)
    3ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca2:	88 2f       	mov	r24, r24
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	e9 f4       	brne	.+58     	; 0x3ce4 <MTIM_stderrInit+0x194>
				{
					case MTIM_MODE_T1_NORMAL:
						CLEAR_BIT(TCCR1A,WGM10);
    3caa:	af e4       	ldi	r26, 0x4F	; 79
    3cac:	b0 e0       	ldi	r27, 0x00	; 0
    3cae:	ef e4       	ldi	r30, 0x4F	; 79
    3cb0:	f0 e0       	ldi	r31, 0x00	; 0
    3cb2:	80 81       	ld	r24, Z
    3cb4:	8e 7f       	andi	r24, 0xFE	; 254
    3cb6:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR1A,WGM11);
    3cb8:	af e4       	ldi	r26, 0x4F	; 79
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	ef e4       	ldi	r30, 0x4F	; 79
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	80 81       	ld	r24, Z
    3cc2:	8d 7f       	andi	r24, 0xFD	; 253
    3cc4:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR1B,WGM12);
    3cc6:	ae e4       	ldi	r26, 0x4E	; 78
    3cc8:	b0 e0       	ldi	r27, 0x00	; 0
    3cca:	ee e4       	ldi	r30, 0x4E	; 78
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	87 7f       	andi	r24, 0xF7	; 247
    3cd2:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR1B,WGM13);
    3cd4:	ae e4       	ldi	r26, 0x4E	; 78
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	ee e4       	ldi	r30, 0x4E	; 78
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	8f 7e       	andi	r24, 0xEF	; 239
    3ce0:	8c 93       	st	X, r24
    3ce2:	02 c0       	rjmp	.+4      	; 0x3ce8 <MTIM_stderrInit+0x198>
					break;
					default: L_stderrState=E_NOK; break;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
    3ce6:	89 83       	std	Y+1, r24	; 0x01
				}
				TCCR1A = (TCCR1A&0x0F) | (ARG_u8HWPinMode<<4);
    3ce8:	af e4       	ldi	r26, 0x4F	; 79
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	ef e4       	ldi	r30, 0x4F	; 79
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	28 2f       	mov	r18, r24
    3cf4:	2f 70       	andi	r18, 0x0F	; 15
    3cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf8:	88 2f       	mov	r24, r24
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	82 95       	swap	r24
    3cfe:	92 95       	swap	r25
    3d00:	90 7f       	andi	r25, 0xF0	; 240
    3d02:	98 27       	eor	r25, r24
    3d04:	80 7f       	andi	r24, 0xF0	; 240
    3d06:	98 27       	eor	r25, r24
    3d08:	82 2b       	or	r24, r18
    3d0a:	8c 93       	st	X, r24
				MTIM_u8Timer1Clock = ARG_u8ClockSource; /* assign it to global var*/
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	80 93 99 01 	sts	0x0199, r24
    3d12:	05 c0       	rjmp	.+10     	; 0x3d1e <MTIM_stderrInit+0x1ce>
			break;
			case MTIM_TIMER2: break;
			default: L_stderrState=E_NOK; break;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	89 83       	std	Y+1, r24	; 0x01
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <MTIM_stderrInit+0x1ce>
		}
	}
	else
	{
		L_stderrState=E_NOK;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d20:	29 96       	adiw	r28, 0x09	; 9
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	08 95       	ret

00003d32 <MTIM_voidForceOutputCompare>:

void MTIM_voidForceOutputCompare(void)
{
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,FOC0);
    3d3a:	a3 e5       	ldi	r26, 0x53	; 83
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	e3 e5       	ldi	r30, 0x53	; 83
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	80 68       	ori	r24, 0x80	; 128
    3d46:	8c 93       	st	X, r24
}
    3d48:	cf 91       	pop	r28
    3d4a:	df 91       	pop	r29
    3d4c:	08 95       	ret

00003d4e <MTIM_stderrEnableInterrupt>:

STD_error_t MTIM_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	00 d0       	rcall	.+0      	; 0x3d54 <MTIM_stderrEnableInterrupt+0x6>
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3d5a:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	88 30       	cpi	r24, 0x08	; 8
    3d60:	a0 f4       	brcc	.+40     	; 0x3d8a <MTIM_stderrEnableInterrupt+0x3c>
	{
		SET_BIT(TIMSK, ARG_u8InterruptSource);
    3d62:	a9 e5       	ldi	r26, 0x59	; 89
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	e9 e5       	ldi	r30, 0x59	; 89
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	48 2f       	mov	r20, r24
    3d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d70:	28 2f       	mov	r18, r24
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	02 2e       	mov	r0, r18
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <MTIM_stderrEnableInterrupt+0x32>
    3d7c:	88 0f       	add	r24, r24
    3d7e:	99 1f       	adc	r25, r25
    3d80:	0a 94       	dec	r0
    3d82:	e2 f7       	brpl	.-8      	; 0x3d7c <MTIM_stderrEnableInterrupt+0x2e>
    3d84:	84 2b       	or	r24, r20
    3d86:	8c 93       	st	X, r24
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <MTIM_stderrEnableInterrupt+0x40>
	}
	else
	{
		L_stderrState=E_NOK;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <MTIM_stderrDisableInterrupt>:

STD_error_t MTIM_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <MTIM_stderrDisableInterrupt+0x6>
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3da6:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	88 30       	cpi	r24, 0x08	; 8
    3dac:	a8 f4       	brcc	.+42     	; 0x3dd8 <MTIM_stderrDisableInterrupt+0x3e>
	{
		CLEAR_BIT(TIMSK, ARG_u8InterruptSource);
    3dae:	a9 e5       	ldi	r26, 0x59	; 89
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	e9 e5       	ldi	r30, 0x59	; 89
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	48 2f       	mov	r20, r24
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	28 2f       	mov	r18, r24
    3dbe:	30 e0       	ldi	r19, 0x00	; 0
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	02 2e       	mov	r0, r18
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <MTIM_stderrDisableInterrupt+0x32>
    3dc8:	88 0f       	add	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	0a 94       	dec	r0
    3dce:	e2 f7       	brpl	.-8      	; 0x3dc8 <MTIM_stderrDisableInterrupt+0x2e>
    3dd0:	80 95       	com	r24
    3dd2:	84 23       	and	r24, r20
    3dd4:	8c 93       	st	X, r24
    3dd6:	02 c0       	rjmp	.+4      	; 0x3ddc <MTIM_stderrDisableInterrupt+0x42>
	}
	else
	{
		L_stderrState=E_NOK;
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	08 95       	ret

00003de8 <MTIM_stderrSetCallBack>:

STD_error_t MTIM_stderrSetCallBack(void(*ARG_pvoidfUserFunction)(void), u8 ARG_u8InterruptSource)
{
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <MTIM_stderrSetCallBack+0x6>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <MTIM_stderrSetCallBack+0x8>
    3df0:	00 d0       	rcall	.+0      	; 0x3df2 <MTIM_stderrSetCallBack+0xa>
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
    3df6:	9b 83       	std	Y+3, r25	; 0x03
    3df8:	8a 83       	std	Y+2, r24	; 0x02
    3dfa:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    3dfc:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL_POINTER )
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	9b 81       	ldd	r25, Y+3	; 0x03
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	01 f1       	breq	.+64     	; 0x3e46 <MTIM_stderrSetCallBack+0x5e>
	{
		switch(ARG_u8InterruptSource)
    3e06:	8c 81       	ldd	r24, Y+4	; 0x04
    3e08:	28 2f       	mov	r18, r24
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	3e 83       	std	Y+6, r19	; 0x06
    3e0e:	2d 83       	std	Y+5, r18	; 0x05
    3e10:	8d 81       	ldd	r24, Y+5	; 0x05
    3e12:	9e 81       	ldd	r25, Y+6	; 0x06
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	31 f0       	breq	.+12     	; 0x3e24 <MTIM_stderrSetCallBack+0x3c>
    3e18:	2d 81       	ldd	r18, Y+5	; 0x05
    3e1a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e1c:	21 30       	cpi	r18, 0x01	; 1
    3e1e:	31 05       	cpc	r19, r1
    3e20:	41 f0       	breq	.+16     	; 0x3e32 <MTIM_stderrSetCallBack+0x4a>
    3e22:	0e c0       	rjmp	.+28     	; 0x3e40 <MTIM_stderrSetCallBack+0x58>
		{
			case MTIM_INTERRUPT_T0_OVF:	MTIM_pvoidfUserFunctionT0OVF=ARG_pvoidfUserFunction; break;
    3e24:	8a 81       	ldd	r24, Y+2	; 0x02
    3e26:	9b 81       	ldd	r25, Y+3	; 0x03
    3e28:	90 93 93 01 	sts	0x0193, r25
    3e2c:	80 93 92 01 	sts	0x0192, r24
    3e30:	0c c0       	rjmp	.+24     	; 0x3e4a <MTIM_stderrSetCallBack+0x62>
			case MTIM_INTERRUPT_T0_OCM:	MTIM_pvoidfUserFunctionT0OCM=ARG_pvoidfUserFunction; break;
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	9b 81       	ldd	r25, Y+3	; 0x03
    3e36:	90 93 95 01 	sts	0x0195, r25
    3e3a:	80 93 94 01 	sts	0x0194, r24
    3e3e:	05 c0       	rjmp	.+10     	; 0x3e4a <MTIM_stderrSetCallBack+0x62>
			default: L_stderrState=E_NOK; break;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	89 83       	std	Y+1, r24	; 0x01
    3e44:	02 c0       	rjmp	.+4      	; 0x3e4a <MTIM_stderrSetCallBack+0x62>
		}
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    3e46:	82 e0       	ldi	r24, 0x02	; 2
    3e48:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e4c:	26 96       	adiw	r28, 0x06	; 6
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	cf 91       	pop	r28
    3e5a:	df 91       	pop	r29
    3e5c:	08 95       	ret

00003e5e <MTIM_stderrStartTimer>:

STD_error_t MTIM_stderrStartTimer(u8 ARG_u8TimerNo)
{
    3e5e:	df 93       	push	r29
    3e60:	cf 93       	push	r28
    3e62:	00 d0       	rcall	.+0      	; 0x3e64 <MTIM_stderrStartTimer+0x6>
    3e64:	00 d0       	rcall	.+0      	; 0x3e66 <MTIM_stderrStartTimer+0x8>
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3e6c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    3e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e70:	28 2f       	mov	r18, r24
    3e72:	30 e0       	ldi	r19, 0x00	; 0
    3e74:	3c 83       	std	Y+4, r19	; 0x04
    3e76:	2b 83       	std	Y+3, r18	; 0x03
    3e78:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7c:	81 30       	cpi	r24, 0x01	; 1
    3e7e:	91 05       	cpc	r25, r1
    3e80:	a9 f0       	breq	.+42     	; 0x3eac <MTIM_stderrStartTimer+0x4e>
    3e82:	2b 81       	ldd	r18, Y+3	; 0x03
    3e84:	3c 81       	ldd	r19, Y+4	; 0x04
    3e86:	22 30       	cpi	r18, 0x02	; 2
    3e88:	31 05       	cpc	r19, r1
    3e8a:	f1 f0       	breq	.+60     	; 0x3ec8 <MTIM_stderrStartTimer+0x6a>
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	c1 f4       	brne	.+48     	; 0x3ec4 <MTIM_stderrStartTimer+0x66>
	{
		case MTIM_TIMER0: TCCR0  = (TCCR0 & 0xF8)  | MTIM_u8Timer0Clock; break;
    3e94:	a3 e5       	ldi	r26, 0x53	; 83
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	e3 e5       	ldi	r30, 0x53	; 83
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	98 2f       	mov	r25, r24
    3ea0:	98 7f       	andi	r25, 0xF8	; 248
    3ea2:	80 91 98 01 	lds	r24, 0x0198
    3ea6:	89 2b       	or	r24, r25
    3ea8:	8c 93       	st	X, r24
    3eaa:	0e c0       	rjmp	.+28     	; 0x3ec8 <MTIM_stderrStartTimer+0x6a>
		case MTIM_TIMER1: TCCR1B = (TCCR1B & 0xF8) | MTIM_u8Timer1Clock; break;
    3eac:	ae e4       	ldi	r26, 0x4E	; 78
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	ee e4       	ldi	r30, 0x4E	; 78
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	80 81       	ld	r24, Z
    3eb6:	98 2f       	mov	r25, r24
    3eb8:	98 7f       	andi	r25, 0xF8	; 248
    3eba:	80 91 99 01 	lds	r24, 0x0199
    3ebe:	89 2b       	or	r24, r25
    3ec0:	8c 93       	st	X, r24
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <MTIM_stderrStartTimer+0x6a>
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	cf 91       	pop	r28
    3ed4:	df 91       	pop	r29
    3ed6:	08 95       	ret

00003ed8 <MTIM_stderrStopTimer>:

STD_error_t MTIM_stderrStopTimer(u8 ARG_u8TimerNo)
{
    3ed8:	df 93       	push	r29
    3eda:	cf 93       	push	r28
    3edc:	00 d0       	rcall	.+0      	; 0x3ede <MTIM_stderrStopTimer+0x6>
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <MTIM_stderrStopTimer+0x8>
    3ee0:	cd b7       	in	r28, 0x3d	; 61
    3ee2:	de b7       	in	r29, 0x3e	; 62
    3ee4:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3ee6:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    3ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eea:	28 2f       	mov	r18, r24
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	3c 83       	std	Y+4, r19	; 0x04
    3ef0:	2b 83       	std	Y+3, r18	; 0x03
    3ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef6:	81 30       	cpi	r24, 0x01	; 1
    3ef8:	91 05       	cpc	r25, r1
    3efa:	89 f0       	breq	.+34     	; 0x3f1e <MTIM_stderrStopTimer+0x46>
    3efc:	2b 81       	ldd	r18, Y+3	; 0x03
    3efe:	3c 81       	ldd	r19, Y+4	; 0x04
    3f00:	22 30       	cpi	r18, 0x02	; 2
    3f02:	31 05       	cpc	r19, r1
    3f04:	b1 f0       	breq	.+44     	; 0x3f32 <MTIM_stderrStopTimer+0x5a>
    3f06:	8b 81       	ldd	r24, Y+3	; 0x03
    3f08:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	81 f4       	brne	.+32     	; 0x3f2e <MTIM_stderrStopTimer+0x56>
	{
		case MTIM_TIMER0: TCCR0  = (TCCR0 & 0xF8)  | MTIM_CS_NO_CLOCK; break;
    3f0e:	a3 e5       	ldi	r26, 0x53	; 83
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	e3 e5       	ldi	r30, 0x53	; 83
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	80 81       	ld	r24, Z
    3f18:	88 7f       	andi	r24, 0xF8	; 248
    3f1a:	8c 93       	st	X, r24
    3f1c:	0a c0       	rjmp	.+20     	; 0x3f32 <MTIM_stderrStopTimer+0x5a>
		case MTIM_TIMER1: TCCR1B = (TCCR1B & 0xF8) | MTIM_CS_NO_CLOCK; break;
    3f1e:	ae e4       	ldi	r26, 0x4E	; 78
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	ee e4       	ldi	r30, 0x4E	; 78
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	88 7f       	andi	r24, 0xF8	; 248
    3f2a:	8c 93       	st	X, r24
    3f2c:	02 c0       	rjmp	.+4      	; 0x3f32 <MTIM_stderrStopTimer+0x5a>
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3f32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f34:	0f 90       	pop	r0
    3f36:	0f 90       	pop	r0
    3f38:	0f 90       	pop	r0
    3f3a:	0f 90       	pop	r0
    3f3c:	cf 91       	pop	r28
    3f3e:	df 91       	pop	r29
    3f40:	08 95       	ret

00003f42 <MTIM_stderrSetOCR>:

STD_error_t MTIM_stderrSetOCR(u8 ARG_u8TimerNo,u16 ARG_u16OCRValue)
{
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	00 d0       	rcall	.+0      	; 0x3f48 <MTIM_stderrSetOCR+0x6>
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <MTIM_stderrSetOCR+0x8>
    3f4a:	00 d0       	rcall	.+0      	; 0x3f4c <MTIM_stderrSetOCR+0xa>
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	8a 83       	std	Y+2, r24	; 0x02
    3f52:	7c 83       	std	Y+4, r23	; 0x04
    3f54:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    3f56:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    3f58:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	3e 83       	std	Y+6, r19	; 0x06
    3f60:	2d 83       	std	Y+5, r18	; 0x05
    3f62:	8d 81       	ldd	r24, Y+5	; 0x05
    3f64:	9e 81       	ldd	r25, Y+6	; 0x06
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	91 05       	cpc	r25, r1
    3f6a:	81 f0       	breq	.+32     	; 0x3f8c <MTIM_stderrSetOCR+0x4a>
    3f6c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f6e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f70:	22 30       	cpi	r18, 0x02	; 2
    3f72:	31 05       	cpc	r19, r1
    3f74:	59 f0       	breq	.+22     	; 0x3f8c <MTIM_stderrSetOCR+0x4a>
    3f76:	8d 81       	ldd	r24, Y+5	; 0x05
    3f78:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7a:	00 97       	sbiw	r24, 0x00	; 0
    3f7c:	29 f4       	brne	.+10     	; 0x3f88 <MTIM_stderrSetOCR+0x46>
	{
		case MTIM_TIMER0:	OCR0 = ARG_u16OCRValue; break;
    3f7e:	ec e5       	ldi	r30, 0x5C	; 92
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	8b 81       	ldd	r24, Y+3	; 0x03
    3f84:	80 83       	st	Z, r24
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <MTIM_stderrSetOCR+0x4a>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f8e:	26 96       	adiw	r28, 0x06	; 6
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	cf 91       	pop	r28
    3f9c:	df 91       	pop	r29
    3f9e:	08 95       	ret

00003fa0 <MTIM_stderrGetTimerValue>:

STD_error_t MTIM_stderrGetTimerValue(u16* ARG_u16TimerValue, u8 ARG_u8TimerNo)
{
    3fa0:	df 93       	push	r29
    3fa2:	cf 93       	push	r28
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <MTIM_stderrGetTimerValue+0x6>
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <MTIM_stderrGetTimerValue+0x8>
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <MTIM_stderrGetTimerValue+0xa>
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	9b 83       	std	Y+3, r25	; 0x03
    3fb0:	8a 83       	std	Y+2, r24	; 0x02
    3fb2:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    3fb4:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    3fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb8:	28 2f       	mov	r18, r24
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	3e 83       	std	Y+6, r19	; 0x06
    3fbe:	2d 83       	std	Y+5, r18	; 0x05
    3fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc4:	81 30       	cpi	r24, 0x01	; 1
    3fc6:	91 05       	cpc	r25, r1
    3fc8:	99 f0       	breq	.+38     	; 0x3ff0 <MTIM_stderrGetTimerValue+0x50>
    3fca:	2d 81       	ldd	r18, Y+5	; 0x05
    3fcc:	3e 81       	ldd	r19, Y+6	; 0x06
    3fce:	22 30       	cpi	r18, 0x02	; 2
    3fd0:	31 05       	cpc	r19, r1
    3fd2:	c9 f0       	breq	.+50     	; 0x4006 <MTIM_stderrGetTimerValue+0x66>
    3fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	99 f4       	brne	.+38     	; 0x4002 <MTIM_stderrGetTimerValue+0x62>
	{
		case MTIM_TIMER0:	*ARG_u16TimerValue = TCNT0; break;
    3fdc:	e2 e5       	ldi	r30, 0x52	; 82
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	88 2f       	mov	r24, r24
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    3fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
    3fee:	0b c0       	rjmp	.+22     	; 0x4006 <MTIM_stderrGetTimerValue+0x66>
		case MTIM_TIMER1: 	*ARG_u16TimerValue = TCNT1; break;
    3ff0:	ec e4       	ldi	r30, 0x4C	; 76
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	91 81       	ldd	r25, Z+1	; 0x01
    3ff8:	ea 81       	ldd	r30, Y+2	; 0x02
    3ffa:	fb 81       	ldd	r31, Y+3	; 0x03
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	80 83       	st	Z, r24
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <MTIM_stderrGetTimerValue+0x66>
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    4006:	89 81       	ldd	r24, Y+1	; 0x01
}
    4008:	26 96       	adiw	r28, 0x06	; 6
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	cf 91       	pop	r28
    4016:	df 91       	pop	r29
    4018:	08 95       	ret

0000401a <MTIM_stderrSetTimerValue>:

STD_error_t MTIM_stderrSetTimerValue(u8 ARG_u8TimerNo, u16 ARG_u16TimerValue)
{
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	00 d0       	rcall	.+0      	; 0x4020 <MTIM_stderrSetTimerValue+0x6>
    4020:	00 d0       	rcall	.+0      	; 0x4022 <MTIM_stderrSetTimerValue+0x8>
    4022:	00 d0       	rcall	.+0      	; 0x4024 <MTIM_stderrSetTimerValue+0xa>
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	8a 83       	std	Y+2, r24	; 0x02
    402a:	7c 83       	std	Y+4, r23	; 0x04
    402c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    402e:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    4030:	8a 81       	ldd	r24, Y+2	; 0x02
    4032:	28 2f       	mov	r18, r24
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	3e 83       	std	Y+6, r19	; 0x06
    4038:	2d 83       	std	Y+5, r18	; 0x05
    403a:	8d 81       	ldd	r24, Y+5	; 0x05
    403c:	9e 81       	ldd	r25, Y+6	; 0x06
    403e:	81 30       	cpi	r24, 0x01	; 1
    4040:	91 05       	cpc	r25, r1
    4042:	71 f0       	breq	.+28     	; 0x4060 <MTIM_stderrSetTimerValue+0x46>
    4044:	2d 81       	ldd	r18, Y+5	; 0x05
    4046:	3e 81       	ldd	r19, Y+6	; 0x06
    4048:	22 30       	cpi	r18, 0x02	; 2
    404a:	31 05       	cpc	r19, r1
    404c:	91 f0       	breq	.+36     	; 0x4072 <MTIM_stderrSetTimerValue+0x58>
    404e:	8d 81       	ldd	r24, Y+5	; 0x05
    4050:	9e 81       	ldd	r25, Y+6	; 0x06
    4052:	00 97       	sbiw	r24, 0x00	; 0
    4054:	61 f4       	brne	.+24     	; 0x406e <MTIM_stderrSetTimerValue+0x54>
	{
		case MTIM_TIMER0:	TCNT0 = ARG_u16TimerValue; break;
    4056:	e2 e5       	ldi	r30, 0x52	; 82
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	8b 81       	ldd	r24, Y+3	; 0x03
    405c:	80 83       	st	Z, r24
    405e:	09 c0       	rjmp	.+18     	; 0x4072 <MTIM_stderrSetTimerValue+0x58>
		case MTIM_TIMER1: 	TCNT1 = ARG_u16TimerValue; break;
    4060:	ec e4       	ldi	r30, 0x4C	; 76
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	9c 81       	ldd	r25, Y+4	; 0x04
    4068:	91 83       	std	Z+1, r25	; 0x01
    406a:	80 83       	st	Z, r24
    406c:	02 c0       	rjmp	.+4      	; 0x4072 <MTIM_stderrSetTimerValue+0x58>
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	89 83       	std	Y+1, r24	; 0x01
	}

	return L_stderrState;
    4072:	89 81       	ldd	r24, Y+1	; 0x01
}
    4074:	26 96       	adiw	r28, 0x06	; 6
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	f8 94       	cli
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	cd bf       	out	0x3d, r28	; 61
    4080:	cf 91       	pop	r28
    4082:	df 91       	pop	r29
    4084:	08 95       	ret

00004086 <MTIM_stderrTimerDelay>:

STD_error_t MTIM_stderrTimerDelay(u8 ARG_u8TimerNo, u32 ARG_u32Delay)
{
    4086:	ef 92       	push	r14
    4088:	ff 92       	push	r15
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	66 97       	sbiw	r28, 0x16	; 22
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	8c 87       	std	Y+12, r24	; 0x0c
    40a4:	4d 87       	std	Y+13, r20	; 0x0d
    40a6:	5e 87       	std	Y+14, r21	; 0x0e
    40a8:	6f 87       	std	Y+15, r22	; 0x0f
    40aa:	78 8b       	std	Y+16, r23	; 0x10
	STD_error_t L_stderrState=E_OK;
    40ac:	1b 86       	std	Y+11, r1	; 0x0b
	f32 L_f32TickTime,L_f32OVFTime;
	u16 L_u16Prscaler;
	switch(ARG_u8TimerNo){
    40ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    40b0:	28 2f       	mov	r18, r24
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	3e 8b       	std	Y+22, r19	; 0x16
    40b6:	2d 8b       	std	Y+21, r18	; 0x15
    40b8:	8d 89       	ldd	r24, Y+21	; 0x15
    40ba:	9e 89       	ldd	r25, Y+22	; 0x16
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	91 05       	cpc	r25, r1
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <MTIM_stderrTimerDelay+0x3e>
    40c2:	c2 c0       	rjmp	.+388    	; 0x4248 <MTIM_stderrTimerDelay+0x1c2>
    40c4:	2d 89       	ldd	r18, Y+21	; 0x15
    40c6:	3e 89       	ldd	r19, Y+22	; 0x16
    40c8:	22 30       	cpi	r18, 0x02	; 2
    40ca:	31 05       	cpc	r19, r1
    40cc:	09 f4       	brne	.+2      	; 0x40d0 <MTIM_stderrTimerDelay+0x4a>
    40ce:	7b c1       	rjmp	.+758    	; 0x43c6 <MTIM_stderrTimerDelay+0x340>
    40d0:	8d 89       	ldd	r24, Y+21	; 0x15
    40d2:	9e 89       	ldd	r25, Y+22	; 0x16
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	09 f0       	breq	.+2      	; 0x40da <MTIM_stderrTimerDelay+0x54>
    40d8:	74 c1       	rjmp	.+744    	; 0x43c2 <MTIM_stderrTimerDelay+0x33c>
		case MTIM_TIMER0:
			switch(MTIM_u8Timer0Clock){
    40da:	80 91 98 01 	lds	r24, 0x0198
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	3c 8b       	std	Y+20, r19	; 0x14
    40e4:	2b 8b       	std	Y+19, r18	; 0x13
    40e6:	8b 89       	ldd	r24, Y+19	; 0x13
    40e8:	9c 89       	ldd	r25, Y+20	; 0x14
    40ea:	83 30       	cpi	r24, 0x03	; 3
    40ec:	91 05       	cpc	r25, r1
    40ee:	29 f1       	breq	.+74     	; 0x413a <MTIM_stderrTimerDelay+0xb4>
    40f0:	2b 89       	ldd	r18, Y+19	; 0x13
    40f2:	3c 89       	ldd	r19, Y+20	; 0x14
    40f4:	24 30       	cpi	r18, 0x04	; 4
    40f6:	31 05       	cpc	r19, r1
    40f8:	5c f4       	brge	.+22     	; 0x4110 <MTIM_stderrTimerDelay+0x8a>
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	81 30       	cpi	r24, 0x01	; 1
    4100:	91 05       	cpc	r25, r1
    4102:	89 f0       	breq	.+34     	; 0x4126 <MTIM_stderrTimerDelay+0xa0>
    4104:	2b 89       	ldd	r18, Y+19	; 0x13
    4106:	3c 89       	ldd	r19, Y+20	; 0x14
    4108:	22 30       	cpi	r18, 0x02	; 2
    410a:	31 05       	cpc	r19, r1
    410c:	89 f0       	breq	.+34     	; 0x4130 <MTIM_stderrTimerDelay+0xaa>
    410e:	24 c0       	rjmp	.+72     	; 0x4158 <MTIM_stderrTimerDelay+0xd2>
    4110:	8b 89       	ldd	r24, Y+19	; 0x13
    4112:	9c 89       	ldd	r25, Y+20	; 0x14
    4114:	84 30       	cpi	r24, 0x04	; 4
    4116:	91 05       	cpc	r25, r1
    4118:	a9 f0       	breq	.+42     	; 0x4144 <MTIM_stderrTimerDelay+0xbe>
    411a:	2b 89       	ldd	r18, Y+19	; 0x13
    411c:	3c 89       	ldd	r19, Y+20	; 0x14
    411e:	25 30       	cpi	r18, 0x05	; 5
    4120:	31 05       	cpc	r19, r1
    4122:	a9 f0       	breq	.+42     	; 0x414e <MTIM_stderrTimerDelay+0xc8>
    4124:	19 c0       	rjmp	.+50     	; 0x4158 <MTIM_stderrTimerDelay+0xd2>
				case MTIM_CS_PRESCALER_1 	:L_u16Prscaler = 1; break;
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	9a 83       	std	Y+2, r25	; 0x02
    412c:	89 83       	std	Y+1, r24	; 0x01
    412e:	16 c0       	rjmp	.+44     	; 0x415c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_8 	:L_u16Prscaler = 8; break;
    4130:	88 e0       	ldi	r24, 0x08	; 8
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	9a 83       	std	Y+2, r25	; 0x02
    4136:	89 83       	std	Y+1, r24	; 0x01
    4138:	11 c0       	rjmp	.+34     	; 0x415c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_64 	:L_u16Prscaler = 64; break;
    413a:	80 e4       	ldi	r24, 0x40	; 64
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	9a 83       	std	Y+2, r25	; 0x02
    4140:	89 83       	std	Y+1, r24	; 0x01
    4142:	0c c0       	rjmp	.+24     	; 0x415c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_256 	:L_u16Prscaler = 256; break;
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	91 e0       	ldi	r25, 0x01	; 1
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
    414c:	07 c0       	rjmp	.+14     	; 0x415c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_1024 :L_u16Prscaler = 1024; break;
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	94 e0       	ldi	r25, 0x04	; 4
    4152:	9a 83       	std	Y+2, r25	; 0x02
    4154:	89 83       	std	Y+1, r24	; 0x01
    4156:	02 c0       	rjmp	.+4      	; 0x415c <MTIM_stderrTimerDelay+0xd6>
				default: L_stderrState=E_NOK; break;
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	8b 87       	std	Y+11, r24	; 0x0b
			}
			L_f32TickTime = (f32)L_u16Prscaler/ F_CPU;
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	9a 81       	ldd	r25, Y+2	; 0x02
    4160:	cc 01       	movw	r24, r24
    4162:	a0 e0       	ldi	r26, 0x00	; 0
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	bc 01       	movw	r22, r24
    4168:	cd 01       	movw	r24, r26
    416a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	34 e2       	ldi	r19, 0x24	; 36
    417a:	44 ef       	ldi	r20, 0xF4	; 244
    417c:	5a e4       	ldi	r21, 0x4A	; 74
    417e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	8f 83       	std	Y+7, r24	; 0x07
    4188:	98 87       	std	Y+8, r25	; 0x08
    418a:	a9 87       	std	Y+9, r26	; 0x09
    418c:	ba 87       	std	Y+10, r27	; 0x0a
			L_f32OVFTime = L_f32TickTime * 256;
    418e:	6f 81       	ldd	r22, Y+7	; 0x07
    4190:	78 85       	ldd	r23, Y+8	; 0x08
    4192:	89 85       	ldd	r24, Y+9	; 0x09
    4194:	9a 85       	ldd	r25, Y+10	; 0x0a
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e8       	ldi	r20, 0x80	; 128
    419c:	53 e4       	ldi	r21, 0x43	; 67
    419e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	8b 83       	std	Y+3, r24	; 0x03
    41a8:	9c 83       	std	Y+4, r25	; 0x04
    41aa:	ad 83       	std	Y+5, r26	; 0x05
    41ac:	be 83       	std	Y+6, r27	; 0x06
			MTIM_u16Timer0OVFCount = ((f32)ARG_u32Delay/1000) / L_f32OVFTime;
    41ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    41b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    41b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b4:	98 89       	ldd	r25, Y+16	; 0x10
    41b6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    41ba:	dc 01       	movw	r26, r24
    41bc:	cb 01       	movw	r24, r22
    41be:	bc 01       	movw	r22, r24
    41c0:	cd 01       	movw	r24, r26
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	4a e7       	ldi	r20, 0x7A	; 122
    41c8:	54 e4       	ldi	r21, 0x44	; 68
    41ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	bc 01       	movw	r22, r24
    41d4:	cd 01       	movw	r24, r26
    41d6:	2b 81       	ldd	r18, Y+3	; 0x03
    41d8:	3c 81       	ldd	r19, Y+4	; 0x04
    41da:	4d 81       	ldd	r20, Y+5	; 0x05
    41dc:	5e 81       	ldd	r21, Y+6	; 0x06
    41de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	90 93 9b 01 	sts	0x019B, r25
    41f6:	80 93 9a 01 	sts	0x019A, r24
			MTIM_u8Timer0Preload = 256 - ((ARG_u32Delay / 1000) % (u32)L_f32OVFTime);
    41fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fe:	af 85       	ldd	r26, Y+15	; 0x0f
    4200:	b8 89       	ldd	r27, Y+16	; 0x10
    4202:	28 ee       	ldi	r18, 0xE8	; 232
    4204:	33 e0       	ldi	r19, 0x03	; 3
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	50 e0       	ldi	r21, 0x00	; 0
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	0e 94 2b 24 	call	0x4856	; 0x4856 <__udivmodsi4>
    4212:	da 01       	movw	r26, r20
    4214:	c9 01       	movw	r24, r18
    4216:	7c 01       	movw	r14, r24
    4218:	8d 01       	movw	r16, r26
    421a:	6b 81       	ldd	r22, Y+3	; 0x03
    421c:	7c 81       	ldd	r23, Y+4	; 0x04
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4226:	9b 01       	movw	r18, r22
    4228:	ac 01       	movw	r20, r24
    422a:	c8 01       	movw	r24, r16
    422c:	b7 01       	movw	r22, r14
    422e:	0e 94 2b 24 	call	0x4856	; 0x4856 <__udivmodsi4>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	81 95       	neg	r24
    4238:	80 93 9c 01 	sts	0x019C, r24
			TCNT0= MTIM_u8Timer0Preload;
    423c:	e2 e5       	ldi	r30, 0x52	; 82
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 91 9c 01 	lds	r24, 0x019C
    4244:	80 83       	st	Z, r24
    4246:	bf c0       	rjmp	.+382    	; 0x43c6 <MTIM_stderrTimerDelay+0x340>
		break;
		case MTIM_TIMER1:
			switch(MTIM_u8Timer1Clock){
    4248:	80 91 99 01 	lds	r24, 0x0199
    424c:	28 2f       	mov	r18, r24
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	3a 8b       	std	Y+18, r19	; 0x12
    4252:	29 8b       	std	Y+17, r18	; 0x11
    4254:	89 89       	ldd	r24, Y+17	; 0x11
    4256:	9a 89       	ldd	r25, Y+18	; 0x12
    4258:	83 30       	cpi	r24, 0x03	; 3
    425a:	91 05       	cpc	r25, r1
    425c:	29 f1       	breq	.+74     	; 0x42a8 <MTIM_stderrTimerDelay+0x222>
    425e:	29 89       	ldd	r18, Y+17	; 0x11
    4260:	3a 89       	ldd	r19, Y+18	; 0x12
    4262:	24 30       	cpi	r18, 0x04	; 4
    4264:	31 05       	cpc	r19, r1
    4266:	5c f4       	brge	.+22     	; 0x427e <MTIM_stderrTimerDelay+0x1f8>
    4268:	89 89       	ldd	r24, Y+17	; 0x11
    426a:	9a 89       	ldd	r25, Y+18	; 0x12
    426c:	81 30       	cpi	r24, 0x01	; 1
    426e:	91 05       	cpc	r25, r1
    4270:	89 f0       	breq	.+34     	; 0x4294 <MTIM_stderrTimerDelay+0x20e>
    4272:	29 89       	ldd	r18, Y+17	; 0x11
    4274:	3a 89       	ldd	r19, Y+18	; 0x12
    4276:	22 30       	cpi	r18, 0x02	; 2
    4278:	31 05       	cpc	r19, r1
    427a:	89 f0       	breq	.+34     	; 0x429e <MTIM_stderrTimerDelay+0x218>
    427c:	24 c0       	rjmp	.+72     	; 0x42c6 <MTIM_stderrTimerDelay+0x240>
    427e:	89 89       	ldd	r24, Y+17	; 0x11
    4280:	9a 89       	ldd	r25, Y+18	; 0x12
    4282:	84 30       	cpi	r24, 0x04	; 4
    4284:	91 05       	cpc	r25, r1
    4286:	a9 f0       	breq	.+42     	; 0x42b2 <MTIM_stderrTimerDelay+0x22c>
    4288:	29 89       	ldd	r18, Y+17	; 0x11
    428a:	3a 89       	ldd	r19, Y+18	; 0x12
    428c:	25 30       	cpi	r18, 0x05	; 5
    428e:	31 05       	cpc	r19, r1
    4290:	a9 f0       	breq	.+42     	; 0x42bc <MTIM_stderrTimerDelay+0x236>
    4292:	19 c0       	rjmp	.+50     	; 0x42c6 <MTIM_stderrTimerDelay+0x240>
				case MTIM_CS_PRESCALER_1 	:L_u16Prscaler = 1; break;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	9a 83       	std	Y+2, r25	; 0x02
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	16 c0       	rjmp	.+44     	; 0x42ca <MTIM_stderrTimerDelay+0x244>
				case MTIM_CS_PRESCALER_8 	:L_u16Prscaler = 8; break;
    429e:	88 e0       	ldi	r24, 0x08	; 8
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9a 83       	std	Y+2, r25	; 0x02
    42a4:	89 83       	std	Y+1, r24	; 0x01
    42a6:	11 c0       	rjmp	.+34     	; 0x42ca <MTIM_stderrTimerDelay+0x244>
				case MTIM_CS_PRESCALER_64 	:L_u16Prscaler = 64; break;
    42a8:	80 e4       	ldi	r24, 0x40	; 64
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	9a 83       	std	Y+2, r25	; 0x02
    42ae:	89 83       	std	Y+1, r24	; 0x01
    42b0:	0c c0       	rjmp	.+24     	; 0x42ca <MTIM_stderrTimerDelay+0x244>
				case MTIM_CS_PRESCALER_256 	:L_u16Prscaler = 256; break;
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	91 e0       	ldi	r25, 0x01	; 1
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	07 c0       	rjmp	.+14     	; 0x42ca <MTIM_stderrTimerDelay+0x244>
				case MTIM_CS_PRESCALER_1024 :L_u16Prscaler = 1024; break;
    42bc:	80 e0       	ldi	r24, 0x00	; 0
    42be:	94 e0       	ldi	r25, 0x04	; 4
    42c0:	9a 83       	std	Y+2, r25	; 0x02
    42c2:	89 83       	std	Y+1, r24	; 0x01
    42c4:	02 c0       	rjmp	.+4      	; 0x42ca <MTIM_stderrTimerDelay+0x244>
				default: L_stderrState=E_NOK; break;
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	8b 87       	std	Y+11, r24	; 0x0b
			}
			L_f32TickTime = (f32)L_u16Prscaler/ F_CPU;
    42ca:	89 81       	ldd	r24, Y+1	; 0x01
    42cc:	9a 81       	ldd	r25, Y+2	; 0x02
    42ce:	cc 01       	movw	r24, r24
    42d0:	a0 e0       	ldi	r26, 0x00	; 0
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	bc 01       	movw	r22, r24
    42d6:	cd 01       	movw	r24, r26
    42d8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	bc 01       	movw	r22, r24
    42e2:	cd 01       	movw	r24, r26
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	34 e2       	ldi	r19, 0x24	; 36
    42e8:	44 ef       	ldi	r20, 0xF4	; 244
    42ea:	5a e4       	ldi	r21, 0x4A	; 74
    42ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8f 83       	std	Y+7, r24	; 0x07
    42f6:	98 87       	std	Y+8, r25	; 0x08
    42f8:	a9 87       	std	Y+9, r26	; 0x09
    42fa:	ba 87       	std	Y+10, r27	; 0x0a
			L_f32OVFTime = L_f32TickTime * 65535;
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	89 85       	ldd	r24, Y+9	; 0x09
    4302:	9a 85       	ldd	r25, Y+10	; 0x0a
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	3f ef       	ldi	r19, 0xFF	; 255
    4308:	4f e7       	ldi	r20, 0x7F	; 127
    430a:	57 e4       	ldi	r21, 0x47	; 71
    430c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	8b 83       	std	Y+3, r24	; 0x03
    4316:	9c 83       	std	Y+4, r25	; 0x04
    4318:	ad 83       	std	Y+5, r26	; 0x05
    431a:	be 83       	std	Y+6, r27	; 0x06
			MTIM_u16Timer1OVFCount = ((f32)ARG_u32Delay/1000) / L_f32OVFTime;
    431c:	6d 85       	ldd	r22, Y+13	; 0x0d
    431e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4320:	8f 85       	ldd	r24, Y+15	; 0x0f
    4322:	98 89       	ldd	r25, Y+16	; 0x10
    4324:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4a e7       	ldi	r20, 0x7A	; 122
    4336:	54 e4       	ldi	r21, 0x44	; 68
    4338:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	bc 01       	movw	r22, r24
    4342:	cd 01       	movw	r24, r26
    4344:	2b 81       	ldd	r18, Y+3	; 0x03
    4346:	3c 81       	ldd	r19, Y+4	; 0x04
    4348:	4d 81       	ldd	r20, Y+5	; 0x05
    434a:	5e 81       	ldd	r21, Y+6	; 0x06
    434c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	90 93 9e 01 	sts	0x019E, r25
    4364:	80 93 9d 01 	sts	0x019D, r24
			MTIM_u16Timer1Preload = 65535 - ((ARG_u32Delay / 1000) % (u32)L_f32OVFTime);
    4368:	8d 85       	ldd	r24, Y+13	; 0x0d
    436a:	9e 85       	ldd	r25, Y+14	; 0x0e
    436c:	af 85       	ldd	r26, Y+15	; 0x0f
    436e:	b8 89       	ldd	r27, Y+16	; 0x10
    4370:	28 ee       	ldi	r18, 0xE8	; 232
    4372:	33 e0       	ldi	r19, 0x03	; 3
    4374:	40 e0       	ldi	r20, 0x00	; 0
    4376:	50 e0       	ldi	r21, 0x00	; 0
    4378:	bc 01       	movw	r22, r24
    437a:	cd 01       	movw	r24, r26
    437c:	0e 94 2b 24 	call	0x4856	; 0x4856 <__udivmodsi4>
    4380:	da 01       	movw	r26, r20
    4382:	c9 01       	movw	r24, r18
    4384:	7c 01       	movw	r14, r24
    4386:	8d 01       	movw	r16, r26
    4388:	6b 81       	ldd	r22, Y+3	; 0x03
    438a:	7c 81       	ldd	r23, Y+4	; 0x04
    438c:	8d 81       	ldd	r24, Y+5	; 0x05
    438e:	9e 81       	ldd	r25, Y+6	; 0x06
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	9b 01       	movw	r18, r22
    4396:	ac 01       	movw	r20, r24
    4398:	c8 01       	movw	r24, r16
    439a:	b7 01       	movw	r22, r14
    439c:	0e 94 2b 24 	call	0x4856	; 0x4856 <__udivmodsi4>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	80 95       	com	r24
    43a6:	90 95       	com	r25
    43a8:	90 93 a0 01 	sts	0x01A0, r25
    43ac:	80 93 9f 01 	sts	0x019F, r24
			TCNT1= MTIM_u16Timer1Preload;
    43b0:	ec e4       	ldi	r30, 0x4C	; 76
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 91 9f 01 	lds	r24, 0x019F
    43b8:	90 91 a0 01 	lds	r25, 0x01A0
    43bc:	91 83       	std	Z+1, r25	; 0x01
    43be:	80 83       	st	Z, r24
    43c0:	02 c0       	rjmp	.+4      	; 0x43c6 <MTIM_stderrTimerDelay+0x340>
		break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	8b 87       	std	Y+11, r24	; 0x0b
	}

	return L_stderrState;
    43c6:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    43c8:	66 96       	adiw	r28, 0x16	; 22
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	ff 90       	pop	r15
    43de:	ef 90       	pop	r14
    43e0:	08 95       	ret

000043e2 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    43e2:	1f 92       	push	r1
    43e4:	0f 92       	push	r0
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	0f 92       	push	r0
    43ea:	11 24       	eor	r1, r1
    43ec:	2f 93       	push	r18
    43ee:	3f 93       	push	r19
    43f0:	4f 93       	push	r20
    43f2:	5f 93       	push	r21
    43f4:	6f 93       	push	r22
    43f6:	7f 93       	push	r23
    43f8:	8f 93       	push	r24
    43fa:	9f 93       	push	r25
    43fc:	af 93       	push	r26
    43fe:	bf 93       	push	r27
    4400:	ef 93       	push	r30
    4402:	ff 93       	push	r31
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
	if(NULL_POINTER != MTIM_pvoidfUserFunctionT0OVF)
    440c:	80 91 92 01 	lds	r24, 0x0192
    4410:	90 91 93 01 	lds	r25, 0x0193
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	29 f0       	breq	.+10     	; 0x4422 <__vector_10+0x40>
	{
		(*MTIM_pvoidfUserFunctionT0OCM)();
    4418:	e0 91 94 01 	lds	r30, 0x0194
    441c:	f0 91 95 01 	lds	r31, 0x0195
    4420:	09 95       	icall
	}
	else
	{
		/* do nothing */
	}
}
    4422:	cf 91       	pop	r28
    4424:	df 91       	pop	r29
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	0f 90       	pop	r0
    4444:	1f 90       	pop	r1
    4446:	18 95       	reti

00004448 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    4448:	1f 92       	push	r1
    444a:	0f 92       	push	r0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	2f 93       	push	r18
    4454:	3f 93       	push	r19
    4456:	4f 93       	push	r20
    4458:	5f 93       	push	r21
    445a:	6f 93       	push	r22
    445c:	7f 93       	push	r23
    445e:	8f 93       	push	r24
    4460:	9f 93       	push	r25
    4462:	af 93       	push	r26
    4464:	bf 93       	push	r27
    4466:	ef 93       	push	r30
    4468:	ff 93       	push	r31
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62

	if(NULL_POINTER != MTIM_pvoidfUserFunctionT0OVF)
    4472:	80 91 92 01 	lds	r24, 0x0192
    4476:	90 91 93 01 	lds	r25, 0x0193
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	29 f1       	breq	.+74     	; 0x44c8 <__vector_11+0x80>
	{
		volatile static u16 L_u16OVFCounter = 0;
		L_u16OVFCounter++;
    447e:	80 91 96 01 	lds	r24, 0x0196
    4482:	90 91 97 01 	lds	r25, 0x0197
    4486:	01 96       	adiw	r24, 0x01	; 1
    4488:	90 93 97 01 	sts	0x0197, r25
    448c:	80 93 96 01 	sts	0x0196, r24
		if(L_u16OVFCounter==(MTIM_u16Timer0OVFCount+1))
    4490:	80 91 9a 01 	lds	r24, 0x019A
    4494:	90 91 9b 01 	lds	r25, 0x019B
    4498:	9c 01       	movw	r18, r24
    449a:	2f 5f       	subi	r18, 0xFF	; 255
    449c:	3f 4f       	sbci	r19, 0xFF	; 255
    449e:	80 91 96 01 	lds	r24, 0x0196
    44a2:	90 91 97 01 	lds	r25, 0x0197
    44a6:	28 17       	cp	r18, r24
    44a8:	39 07       	cpc	r19, r25
    44aa:	71 f4       	brne	.+28     	; 0x44c8 <__vector_11+0x80>
		{
			L_u16OVFCounter =0;
    44ac:	10 92 97 01 	sts	0x0197, r1
    44b0:	10 92 96 01 	sts	0x0196, r1
			TCNT0=MTIM_u8Timer0Preload;
    44b4:	e2 e5       	ldi	r30, 0x52	; 82
    44b6:	f0 e0       	ldi	r31, 0x00	; 0
    44b8:	80 91 9c 01 	lds	r24, 0x019C
    44bc:	80 83       	st	Z, r24
			(*MTIM_pvoidfUserFunctionT0OVF)();
    44be:	e0 91 92 01 	lds	r30, 0x0192
    44c2:	f0 91 93 01 	lds	r31, 0x0193
    44c6:	09 95       	icall
	else
	{
		/* do nothing */
	}

}
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	ff 91       	pop	r31
    44ce:	ef 91       	pop	r30
    44d0:	bf 91       	pop	r27
    44d2:	af 91       	pop	r26
    44d4:	9f 91       	pop	r25
    44d6:	8f 91       	pop	r24
    44d8:	7f 91       	pop	r23
    44da:	6f 91       	pop	r22
    44dc:	5f 91       	pop	r21
    44de:	4f 91       	pop	r20
    44e0:	3f 91       	pop	r19
    44e2:	2f 91       	pop	r18
    44e4:	0f 90       	pop	r0
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	0f 90       	pop	r0
    44ea:	1f 90       	pop	r1
    44ec:	18 95       	reti

000044ee <main>:
u16 G_u16Period;
u16	G_u16Frequency;
u8  G_u8DutyCycle;

int main (void)
{
    44ee:	ef 92       	push	r14
    44f0:	ff 92       	push	r15
    44f2:	0f 93       	push	r16
    44f4:	1f 93       	push	r17
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	60 97       	sbiw	r28, 0x10	; 16
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
	/* Initialization  (Run Once)  */
	u16 L_ADCValue=0;
    450a:	18 8a       	std	Y+16, r1	; 0x10
    450c:	1f 86       	std	Y+15, r1	; 0x0f
	/* PWM0 pin */
	MDIO_stderrSetPinDirection(MDIO_PORTB,MDIO_PIN3,MDIO_OUTPUT);
    450e:	82 e0       	ldi	r24, 0x02	; 2
    4510:	63 e0       	ldi	r22, 0x03	; 3
    4512:	41 e0       	ldi	r20, 0x01	; 1
    4514:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <MDIO_stderrSetPinDirection>

	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_2,MADC_ADJUST_LEFT);
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	61 e0       	ldi	r22, 0x01	; 1
    451c:	41 e0       	ldi	r20, 0x01	; 1
    451e:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <MADC_stderrInit>
	MADC_voidEnableADC();
    4522:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <MADC_voidEnableADC>
	MTIM_stderrInit(MTIM_TIMER0, MTIM_CS_PRESCALER_256,MTIM_MODE_T0_PHASECORRECTPWM,MTIM_HWPIN_T0_NONINVERTING_PWM);
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	64 e0       	ldi	r22, 0x04	; 4
    452a:	43 e0       	ldi	r20, 0x03	; 3
    452c:	22 e0       	ldi	r18, 0x02	; 2
    452e:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <MTIM_stderrInit>
	MTIM_stderrStartTimer(MTIM_TIMER0);
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <MTIM_stderrStartTimer>

	HLCD_voidInit();
    4538:	0e 94 17 07 	call	0xe2e	; 0xe2e <HLCD_voidInit>

	HLCD_voidSetCur(0,0);
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
	HLCD_voidSendString("Freq: ");
    4544:	80 e6       	ldi	r24, 0x60	; 96
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 9c 14 	call	0x2938	; 0x2938 <HLCD_voidSendString>
	HLCD_voidSetCur(1,0);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	60 e0       	ldi	r22, 0x00	; 0
    4550:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
	HLCD_voidSendString("Duty: ");
    4554:	87 e6       	ldi	r24, 0x67	; 103
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	0e 94 9c 14 	call	0x2938	; 0x2938 <HLCD_voidSendString>

	MTIM_stderrInit(MTIM_TIMER1, MTIM_CS_PRESCALER_8,MTIM_MODE_T1_NORMAL,MTIM_HWPIN_T1_OC1ADISCON_OC1B_DISCON);
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	62 e0       	ldi	r22, 0x02	; 2
    4560:	40 e0       	ldi	r20, 0x00	; 0
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <MTIM_stderrInit>

	MEXTI_stderrInit(MEXTI_INT0, MEXTI_MODE_RISING);
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	63 e0       	ldi	r22, 0x03	; 3
    456c:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <MEXTI_stderrInit>
	MEXTI_stderrCallBack(Step1, MEXTI_INT0);
    4570:	81 ed       	ldi	r24, 0xD1	; 209
    4572:	93 e2       	ldi	r25, 0x23	; 35
    4574:	60 e0       	ldi	r22, 0x00	; 0
    4576:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <MEXTI_stderrCallBack>
	MEXTI_stderrEnable(MEXTI_INT0);
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <MEXTI_stderrEnable>

	MGIE_voidEnableGI();
    4580:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <MGIE_voidEnableGI>

	while(1)
	{
		MADC_stderrReadADC(&L_ADCValue,MADC_SCHANNEL_ADC0);
    4584:	ce 01       	movw	r24, r28
    4586:	0f 96       	adiw	r24, 0x0f	; 15
    4588:	60 e0       	ldi	r22, 0x00	; 0
    458a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <MADC_stderrReadADC>
		MTIM_stderrSetOCR(MTIM_TIMER0,L_ADCValue);
    458e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4590:	38 89       	ldd	r19, Y+16	; 0x10
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	b9 01       	movw	r22, r18
    4596:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <MTIM_stderrSetOCR>

		if(1==G_u8Ready)
    459a:	80 91 a1 01 	lds	r24, 0x01A1
    459e:	81 30       	cpi	r24, 0x01	; 1
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <main+0xb6>
    45a2:	8c c0       	rjmp	.+280    	; 0x46bc <main+0x1ce>
		{
			G_u16Frequency = ( 1.0/(f32)(G_u16Period/1000) ) * 1000 ; // convert period to Sec then 1.0/(Period/1000) == (1.0/Period)*1000
    45a4:	80 91 a9 01 	lds	r24, 0x01A9
    45a8:	90 91 aa 01 	lds	r25, 0x01AA
    45ac:	28 ee       	ldi	r18, 0xE8	; 232
    45ae:	33 e0       	ldi	r19, 0x03	; 3
    45b0:	b9 01       	movw	r22, r18
    45b2:	0e 94 17 24 	call	0x482e	; 0x482e <__udivmodhi4>
    45b6:	cb 01       	movw	r24, r22
    45b8:	cc 01       	movw	r24, r24
    45ba:	a0 e0       	ldi	r26, 0x00	; 0
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	bc 01       	movw	r22, r24
    45c0:	cd 01       	movw	r24, r26
    45c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    45c6:	9b 01       	movw	r18, r22
    45c8:	ac 01       	movw	r20, r24
    45ca:	60 e0       	ldi	r22, 0x00	; 0
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	80 e8       	ldi	r24, 0x80	; 128
    45d0:	9f e3       	ldi	r25, 0x3F	; 63
    45d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	bc 01       	movw	r22, r24
    45dc:	cd 01       	movw	r24, r26
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	4a e7       	ldi	r20, 0x7A	; 122
    45e4:	54 e4       	ldi	r21, 0x44	; 68
    45e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	bc 01       	movw	r22, r24
    45f0:	cd 01       	movw	r24, r26
    45f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f6:	dc 01       	movw	r26, r24
    45f8:	cb 01       	movw	r24, r22
    45fa:	90 93 a4 01 	sts	0x01A4, r25
    45fe:	80 93 a3 01 	sts	0x01A3, r24
			G_u8DutyCycle = ((f32)G_u16Ton/G_u16Period) * 100;
    4602:	80 91 a5 01 	lds	r24, 0x01A5
    4606:	90 91 a6 01 	lds	r25, 0x01A6
    460a:	cc 01       	movw	r24, r24
    460c:	a0 e0       	ldi	r26, 0x00	; 0
    460e:	b0 e0       	ldi	r27, 0x00	; 0
    4610:	bc 01       	movw	r22, r24
    4612:	cd 01       	movw	r24, r26
    4614:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4618:	7b 01       	movw	r14, r22
    461a:	8c 01       	movw	r16, r24
    461c:	80 91 a9 01 	lds	r24, 0x01A9
    4620:	90 91 aa 01 	lds	r25, 0x01AA
    4624:	cc 01       	movw	r24, r24
    4626:	a0 e0       	ldi	r26, 0x00	; 0
    4628:	b0 e0       	ldi	r27, 0x00	; 0
    462a:	bc 01       	movw	r22, r24
    462c:	cd 01       	movw	r24, r26
    462e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4632:	9b 01       	movw	r18, r22
    4634:	ac 01       	movw	r20, r24
    4636:	c8 01       	movw	r24, r16
    4638:	b7 01       	movw	r22, r14
    463a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	bc 01       	movw	r22, r24
    4644:	cd 01       	movw	r24, r26
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	48 ec       	ldi	r20, 0xC8	; 200
    464c:	52 e4       	ldi	r21, 0x42	; 66
    464e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	bc 01       	movw	r22, r24
    4658:	cd 01       	movw	r24, r26
    465a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465e:	dc 01       	movw	r26, r24
    4660:	cb 01       	movw	r24, r22
    4662:	80 93 a2 01 	sts	0x01A2, r24
			HLCD_voidSetCur(0,6);
    4666:	80 e0       	ldi	r24, 0x00	; 0
    4668:	66 e0       	ldi	r22, 0x06	; 6
    466a:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
			HLCD_voidSendString("        ");
    466e:	8e e6       	ldi	r24, 0x6E	; 110
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	0e 94 9c 14 	call	0x2938	; 0x2938 <HLCD_voidSendString>
			HLCD_voidSetCur(0,6);
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	66 e0       	ldi	r22, 0x06	; 6
    467a:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
			HLCD_voidSendNum(G_u16Frequency);
    467e:	80 91 a3 01 	lds	r24, 0x01A3
    4682:	90 91 a4 01 	lds	r25, 0x01A4
    4686:	0e 94 42 14 	call	0x2884	; 0x2884 <HLCD_voidSendNum>
			HLCD_voidSendString("Hz.");
    468a:	87 e7       	ldi	r24, 0x77	; 119
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	0e 94 9c 14 	call	0x2938	; 0x2938 <HLCD_voidSendString>
			HLCD_voidSetCur(1,6);
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	66 e0       	ldi	r22, 0x06	; 6
    4696:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
			HLCD_voidSendString("       ");
    469a:	8b e7       	ldi	r24, 0x7B	; 123
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	0e 94 9c 14 	call	0x2938	; 0x2938 <HLCD_voidSendString>
			HLCD_voidSetCur(1,6);
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	66 e0       	ldi	r22, 0x06	; 6
    46a6:	0e 94 c8 14 	call	0x2990	; 0x2990 <HLCD_voidSetCur>
			HLCD_voidSendNum(G_u8DutyCycle);
    46aa:	80 91 a2 01 	lds	r24, 0x01A2
    46ae:	88 2f       	mov	r24, r24
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 42 14 	call	0x2884	; 0x2884 <HLCD_voidSendNum>
			HLCD_voidSendChar('%');
    46b6:	85 e2       	ldi	r24, 0x25	; 37
    46b8:	0e 94 0f 10 	call	0x201e	; 0x201e <HLCD_voidSendChar>
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	aa e7       	ldi	r26, 0x7A	; 122
    46c2:	b4 e4       	ldi	r27, 0x44	; 68
    46c4:	8b 87       	std	Y+11, r24	; 0x0b
    46c6:	9c 87       	std	Y+12, r25	; 0x0c
    46c8:	ad 87       	std	Y+13, r26	; 0x0d
    46ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    46d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	4a ef       	ldi	r20, 0xFA	; 250
    46da:	54 e4       	ldi	r21, 0x44	; 68
    46dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	8f 83       	std	Y+7, r24	; 0x07
    46e6:	98 87       	std	Y+8, r25	; 0x08
    46e8:	a9 87       	std	Y+9, r26	; 0x09
    46ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46ec:	6f 81       	ldd	r22, Y+7	; 0x07
    46ee:	78 85       	ldd	r23, Y+8	; 0x08
    46f0:	89 85       	ldd	r24, Y+9	; 0x09
    46f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	40 e8       	ldi	r20, 0x80	; 128
    46fa:	5f e3       	ldi	r21, 0x3F	; 63
    46fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4700:	88 23       	and	r24, r24
    4702:	2c f4       	brge	.+10     	; 0x470e <main+0x220>
		__ticks = 1;
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	9e 83       	std	Y+6, r25	; 0x06
    470a:	8d 83       	std	Y+5, r24	; 0x05
    470c:	3f c0       	rjmp	.+126    	; 0x478c <main+0x29e>
	else if (__tmp > 65535)
    470e:	6f 81       	ldd	r22, Y+7	; 0x07
    4710:	78 85       	ldd	r23, Y+8	; 0x08
    4712:	89 85       	ldd	r24, Y+9	; 0x09
    4714:	9a 85       	ldd	r25, Y+10	; 0x0a
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	3f ef       	ldi	r19, 0xFF	; 255
    471a:	4f e7       	ldi	r20, 0x7F	; 127
    471c:	57 e4       	ldi	r21, 0x47	; 71
    471e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4722:	18 16       	cp	r1, r24
    4724:	4c f5       	brge	.+82     	; 0x4778 <main+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4726:	6b 85       	ldd	r22, Y+11	; 0x0b
    4728:	7c 85       	ldd	r23, Y+12	; 0x0c
    472a:	8d 85       	ldd	r24, Y+13	; 0x0d
    472c:	9e 85       	ldd	r25, Y+14	; 0x0e
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 e2       	ldi	r20, 0x20	; 32
    4734:	51 e4       	ldi	r21, 0x41	; 65
    4736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    473a:	dc 01       	movw	r26, r24
    473c:	cb 01       	movw	r24, r22
    473e:	bc 01       	movw	r22, r24
    4740:	cd 01       	movw	r24, r26
    4742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4746:	dc 01       	movw	r26, r24
    4748:	cb 01       	movw	r24, r22
    474a:	9e 83       	std	Y+6, r25	; 0x06
    474c:	8d 83       	std	Y+5, r24	; 0x05
    474e:	0f c0       	rjmp	.+30     	; 0x476e <main+0x280>
    4750:	88 ec       	ldi	r24, 0xC8	; 200
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	9c 83       	std	Y+4, r25	; 0x04
    4756:	8b 83       	std	Y+3, r24	; 0x03
    4758:	8b 81       	ldd	r24, Y+3	; 0x03
    475a:	9c 81       	ldd	r25, Y+4	; 0x04
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	f1 f7       	brne	.-4      	; 0x475c <main+0x26e>
    4760:	9c 83       	std	Y+4, r25	; 0x04
    4762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4764:	8d 81       	ldd	r24, Y+5	; 0x05
    4766:	9e 81       	ldd	r25, Y+6	; 0x06
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	9e 83       	std	Y+6, r25	; 0x06
    476c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    476e:	8d 81       	ldd	r24, Y+5	; 0x05
    4770:	9e 81       	ldd	r25, Y+6	; 0x06
    4772:	00 97       	sbiw	r24, 0x00	; 0
    4774:	69 f7       	brne	.-38     	; 0x4750 <main+0x262>
    4776:	06 cf       	rjmp	.-500    	; 0x4584 <main+0x96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4778:	6f 81       	ldd	r22, Y+7	; 0x07
    477a:	78 85       	ldd	r23, Y+8	; 0x08
    477c:	89 85       	ldd	r24, Y+9	; 0x09
    477e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	9e 83       	std	Y+6, r25	; 0x06
    478a:	8d 83       	std	Y+5, r24	; 0x05
    478c:	8d 81       	ldd	r24, Y+5	; 0x05
    478e:	9e 81       	ldd	r25, Y+6	; 0x06
    4790:	9a 83       	std	Y+2, r25	; 0x02
    4792:	89 83       	std	Y+1, r24	; 0x01
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	9a 81       	ldd	r25, Y+2	; 0x02
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	f1 f7       	brne	.-4      	; 0x4798 <main+0x2aa>
    479c:	9a 83       	std	Y+2, r25	; 0x02
    479e:	89 83       	std	Y+1, r24	; 0x01
    47a0:	f1 ce       	rjmp	.-542    	; 0x4584 <main+0x96>

000047a2 <Step1>:
	}
	return 0 ;
}

void Step1(void)
{
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
	MTIM_stderrStartTimer(MTIM_TIMER1);
    47aa:	81 e0       	ldi	r24, 0x01	; 1
    47ac:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <MTIM_stderrStartTimer>
	MEXTI_stderrInit(MEXTI_INT0, MEXTI_MODE_FALLING);
    47b0:	80 e0       	ldi	r24, 0x00	; 0
    47b2:	62 e0       	ldi	r22, 0x02	; 2
    47b4:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <MEXTI_stderrInit>
	MEXTI_stderrCallBack(Step2, MEXTI_INT0);
    47b8:	84 ee       	ldi	r24, 0xE4	; 228
    47ba:	93 e2       	ldi	r25, 0x23	; 35
    47bc:	60 e0       	ldi	r22, 0x00	; 0
    47be:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <MEXTI_stderrCallBack>
}
    47c2:	cf 91       	pop	r28
    47c4:	df 91       	pop	r29
    47c6:	08 95       	ret

000047c8 <Step2>:
void Step2(void)
{
    47c8:	df 93       	push	r29
    47ca:	cf 93       	push	r28
    47cc:	cd b7       	in	r28, 0x3d	; 61
    47ce:	de b7       	in	r29, 0x3e	; 62
	MTIM_stderrGetTimerValue(&G_u16Ton, MTIM_TIMER1);
    47d0:	85 ea       	ldi	r24, 0xA5	; 165
    47d2:	91 e0       	ldi	r25, 0x01	; 1
    47d4:	61 e0       	ldi	r22, 0x01	; 1
    47d6:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <MTIM_stderrGetTimerValue>
	//MTIM_stderrSetTimerValue(MTIM_TIMER1, 0x0000);
	MEXTI_stderrInit(MEXTI_INT0, MEXTI_MODE_RISING);
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	63 e0       	ldi	r22, 0x03	; 3
    47de:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <MEXTI_stderrInit>
	MEXTI_stderrCallBack(Step3, MEXTI_INT0);
    47e2:	8b ef       	ldi	r24, 0xFB	; 251
    47e4:	93 e2       	ldi	r25, 0x23	; 35
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <MEXTI_stderrCallBack>
	G_u8Ready=0;
    47ec:	10 92 a1 01 	sts	0x01A1, r1
}
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	08 95       	ret

000047f6 <Step3>:
void Step3(void){
    47f6:	df 93       	push	r29
    47f8:	cf 93       	push	r28
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
//	MTIM_stderrGetTimerValue(&G_u16Toff, MTIM_TIMER1);
	MTIM_stderrGetTimerValue(&G_u16Period, MTIM_TIMER1);
    47fe:	89 ea       	ldi	r24, 0xA9	; 169
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	61 e0       	ldi	r22, 0x01	; 1
    4804:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <MTIM_stderrGetTimerValue>
	MTIM_stderrSetTimerValue(MTIM_TIMER1, 0x0000);
    4808:	81 e0       	ldi	r24, 0x01	; 1
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	70 e0       	ldi	r23, 0x00	; 0
    480e:	0e 94 0d 20 	call	0x401a	; 0x401a <MTIM_stderrSetTimerValue>
	MTIM_stderrStopTimer(MTIM_TIMER1);
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <MTIM_stderrStopTimer>
	MEXTI_stderrCallBack(Step1, MEXTI_INT0);
    4818:	81 ed       	ldi	r24, 0xD1	; 209
    481a:	93 e2       	ldi	r25, 0x23	; 35
    481c:	60 e0       	ldi	r22, 0x00	; 0
    481e:	0e 94 60 1c 	call	0x38c0	; 0x38c0 <MEXTI_stderrCallBack>
	G_u8Ready=1;
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	80 93 a1 01 	sts	0x01A1, r24
}
    4828:	cf 91       	pop	r28
    482a:	df 91       	pop	r29
    482c:	08 95       	ret

0000482e <__udivmodhi4>:
    482e:	aa 1b       	sub	r26, r26
    4830:	bb 1b       	sub	r27, r27
    4832:	51 e1       	ldi	r21, 0x11	; 17
    4834:	07 c0       	rjmp	.+14     	; 0x4844 <__udivmodhi4_ep>

00004836 <__udivmodhi4_loop>:
    4836:	aa 1f       	adc	r26, r26
    4838:	bb 1f       	adc	r27, r27
    483a:	a6 17       	cp	r26, r22
    483c:	b7 07       	cpc	r27, r23
    483e:	10 f0       	brcs	.+4      	; 0x4844 <__udivmodhi4_ep>
    4840:	a6 1b       	sub	r26, r22
    4842:	b7 0b       	sbc	r27, r23

00004844 <__udivmodhi4_ep>:
    4844:	88 1f       	adc	r24, r24
    4846:	99 1f       	adc	r25, r25
    4848:	5a 95       	dec	r21
    484a:	a9 f7       	brne	.-22     	; 0x4836 <__udivmodhi4_loop>
    484c:	80 95       	com	r24
    484e:	90 95       	com	r25
    4850:	bc 01       	movw	r22, r24
    4852:	cd 01       	movw	r24, r26
    4854:	08 95       	ret

00004856 <__udivmodsi4>:
    4856:	a1 e2       	ldi	r26, 0x21	; 33
    4858:	1a 2e       	mov	r1, r26
    485a:	aa 1b       	sub	r26, r26
    485c:	bb 1b       	sub	r27, r27
    485e:	fd 01       	movw	r30, r26
    4860:	0d c0       	rjmp	.+26     	; 0x487c <__udivmodsi4_ep>

00004862 <__udivmodsi4_loop>:
    4862:	aa 1f       	adc	r26, r26
    4864:	bb 1f       	adc	r27, r27
    4866:	ee 1f       	adc	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	a2 17       	cp	r26, r18
    486c:	b3 07       	cpc	r27, r19
    486e:	e4 07       	cpc	r30, r20
    4870:	f5 07       	cpc	r31, r21
    4872:	20 f0       	brcs	.+8      	; 0x487c <__udivmodsi4_ep>
    4874:	a2 1b       	sub	r26, r18
    4876:	b3 0b       	sbc	r27, r19
    4878:	e4 0b       	sbc	r30, r20
    487a:	f5 0b       	sbc	r31, r21

0000487c <__udivmodsi4_ep>:
    487c:	66 1f       	adc	r22, r22
    487e:	77 1f       	adc	r23, r23
    4880:	88 1f       	adc	r24, r24
    4882:	99 1f       	adc	r25, r25
    4884:	1a 94       	dec	r1
    4886:	69 f7       	brne	.-38     	; 0x4862 <__udivmodsi4_loop>
    4888:	60 95       	com	r22
    488a:	70 95       	com	r23
    488c:	80 95       	com	r24
    488e:	90 95       	com	r25
    4890:	9b 01       	movw	r18, r22
    4892:	ac 01       	movw	r20, r24
    4894:	bd 01       	movw	r22, r26
    4896:	cf 01       	movw	r24, r30
    4898:	08 95       	ret

0000489a <__prologue_saves__>:
    489a:	2f 92       	push	r2
    489c:	3f 92       	push	r3
    489e:	4f 92       	push	r4
    48a0:	5f 92       	push	r5
    48a2:	6f 92       	push	r6
    48a4:	7f 92       	push	r7
    48a6:	8f 92       	push	r8
    48a8:	9f 92       	push	r9
    48aa:	af 92       	push	r10
    48ac:	bf 92       	push	r11
    48ae:	cf 92       	push	r12
    48b0:	df 92       	push	r13
    48b2:	ef 92       	push	r14
    48b4:	ff 92       	push	r15
    48b6:	0f 93       	push	r16
    48b8:	1f 93       	push	r17
    48ba:	cf 93       	push	r28
    48bc:	df 93       	push	r29
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
    48c2:	ca 1b       	sub	r28, r26
    48c4:	db 0b       	sbc	r29, r27
    48c6:	0f b6       	in	r0, 0x3f	; 63
    48c8:	f8 94       	cli
    48ca:	de bf       	out	0x3e, r29	; 62
    48cc:	0f be       	out	0x3f, r0	; 63
    48ce:	cd bf       	out	0x3d, r28	; 61
    48d0:	09 94       	ijmp

000048d2 <__epilogue_restores__>:
    48d2:	2a 88       	ldd	r2, Y+18	; 0x12
    48d4:	39 88       	ldd	r3, Y+17	; 0x11
    48d6:	48 88       	ldd	r4, Y+16	; 0x10
    48d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    48da:	6e 84       	ldd	r6, Y+14	; 0x0e
    48dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    48de:	8c 84       	ldd	r8, Y+12	; 0x0c
    48e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    48e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    48e4:	b9 84       	ldd	r11, Y+9	; 0x09
    48e6:	c8 84       	ldd	r12, Y+8	; 0x08
    48e8:	df 80       	ldd	r13, Y+7	; 0x07
    48ea:	ee 80       	ldd	r14, Y+6	; 0x06
    48ec:	fd 80       	ldd	r15, Y+5	; 0x05
    48ee:	0c 81       	ldd	r16, Y+4	; 0x04
    48f0:	1b 81       	ldd	r17, Y+3	; 0x03
    48f2:	aa 81       	ldd	r26, Y+2	; 0x02
    48f4:	b9 81       	ldd	r27, Y+1	; 0x01
    48f6:	ce 0f       	add	r28, r30
    48f8:	d1 1d       	adc	r29, r1
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	ed 01       	movw	r28, r26
    4906:	08 95       	ret

00004908 <_exit>:
    4908:	f8 94       	cli

0000490a <__stop_program>:
    490a:	ff cf       	rjmp	.-2      	; 0x490a <__stop_program>
