
LCD_DisplayTime_First_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004764  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00004764  000047f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080019c  0080019c  00004934  2**0
                  ALLOC
  3 .stab         000037f8  00000000  00000000  00004934  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010db  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009207  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000093a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009599  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000df00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__vector_1>
       8:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__vector_2>
       c:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 44 20 	jmp	0x4088	; 0x4088 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 22 	call	0x4454	; 0x4454 <main>
      8a:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 23 	jmp	0x472a	; 0x472a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 23 	jmp	0x46f2	; 0x46f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 23 	jmp	0x472a	; 0x472a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 23 	jmp	0x470a	; 0x470a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 23 	jmp	0x4712	; 0x4712 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 81 23 	jmp	0x4702	; 0x4702 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9d 23 	jmp	0x473a	; 0x473a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 57       	subi	r30, 0x74	; 116
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <HKPD_charGetKey>:
#include "HKEYPAD_private.h"
#include "HKEYPAD_interface.h"

const char HKPD_charKeypad[HKPD_ROW_NUM][HKPD_COL_NUM]= HKPD_ARR_VAL;

char HKPD_charGetKey(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <HKPD_charGetKey+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <HKPD_charGetKey+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <HKPD_charGetKey+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8Row,L_u8Col;
	//	COLs   OP from PC4-PC7  , ROWs IP from PC0-PC3
	MDIO_stderrSetPortDirection(HKPD_PORT,0xF0);
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	60 ef       	ldi	r22, 0xF0	; 240
     e40:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <MDIO_stderrSetPortDirection>
	//	COLs   OP value: 0000   , ROWs IP PULLUP 1111
	MDIO_stderrSetPortValue(HKPD_PORT,0x0F);
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	6f e0       	ldi	r22, 0x0F	; 15
     e48:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <MDIO_stderrSetPortValue>

	do{
		MDIO_stderrGetPortValue(&L_u8Row,HKPD_PORT);
     e4c:	ce 01       	movw	r24, r28
     e4e:	01 96       	adiw	r24, 0x01	; 1
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <MDIO_stderrGetPortValue>
		L_u8Row = (~L_u8Row) & 0x0F; // row value inverted 1 be 0  then read only 4-LS bits
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	80 95       	com	r24
     e5a:	8f 70       	andi	r24, 0x0F	; 15
     e5c:	89 83       	std	Y+1, r24	; 0x01
	}while(0==L_u8Row); // polling
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 23       	and	r24, r24
     e62:	a1 f3       	breq	.-24     	; 0xe4c <HKPD_charGetKey+0x1e>


	MDIO_stderrSetPortDirection(HKPD_PORT,0x0F);
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	6f e0       	ldi	r22, 0x0F	; 15
     e68:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <MDIO_stderrSetPortDirection>
	MDIO_stderrSetPortValue(HKPD_PORT,0xF0);
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	60 ef       	ldi	r22, 0xF0	; 240
     e70:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <MDIO_stderrSetPortValue>

	MDIO_stderrGetPortValue(&L_u8Col,HKPD_PORT );
     e74:	ce 01       	movw	r24, r28
     e76:	02 96       	adiw	r24, 0x02	; 2
     e78:	63 e0       	ldi	r22, 0x03	; 3
     e7a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <MDIO_stderrGetPortValue>

	L_u8Col = ((~L_u8Col) & 0xF0) >>4; // Cols value inverted 1 be 0  then read only 4-MS bits and shift right by 4 to start from b0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 95       	com	r24
     e86:	90 95       	com	r25
     e88:	80 7f       	andi	r24, 0xF0	; 240
     e8a:	90 70       	andi	r25, 0x00	; 0
     e8c:	95 95       	asr	r25
     e8e:	87 95       	ror	r24
     e90:	95 95       	asr	r25
     e92:	87 95       	ror	r24
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	8a 83       	std	Y+2, r24	; 0x02


	switch(L_u8Row){
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3e 83       	std	Y+6, r19	; 0x06
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	c1 f0       	breq	.+48     	; 0xee2 <HKPD_charGetKey+0xb4>
     eb2:	2d 81       	ldd	r18, Y+5	; 0x05
     eb4:	3e 81       	ldd	r19, Y+6	; 0x06
     eb6:	23 30       	cpi	r18, 0x03	; 3
     eb8:	31 05       	cpc	r19, r1
     eba:	34 f4       	brge	.+12     	; 0xec8 <HKPD_charGetKey+0x9a>
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	61 f0       	breq	.+24     	; 0xede <HKPD_charGetKey+0xb0>
     ec6:	15 c0       	rjmp	.+42     	; 0xef2 <HKPD_charGetKey+0xc4>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	24 30       	cpi	r18, 0x04	; 4
     ece:	31 05       	cpc	r19, r1
     ed0:	59 f0       	breq	.+22     	; 0xee8 <HKPD_charGetKey+0xba>
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	88 30       	cpi	r24, 0x08	; 8
     ed8:	91 05       	cpc	r25, r1
     eda:	49 f0       	breq	.+18     	; 0xeee <HKPD_charGetKey+0xc0>
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <HKPD_charGetKey+0xc4>
	case 1: L_u8Row=0;break;
     ede:	19 82       	std	Y+1, r1	; 0x01
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <HKPD_charGetKey+0xc4>
	case 2: L_u8Row=1;break;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <HKPD_charGetKey+0xc4>
	case 4: L_u8Row=2;break;
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <HKPD_charGetKey+0xc4>
	case 8:	L_u8Row=3;break;
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(L_u8Col){
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3c 83       	std	Y+4, r19	; 0x04
     efa:	2b 83       	std	Y+3, r18	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	91 05       	cpc	r25, r1
     f04:	c1 f0       	breq	.+48     	; 0xf36 <HKPD_charGetKey+0x108>
     f06:	2b 81       	ldd	r18, Y+3	; 0x03
     f08:	3c 81       	ldd	r19, Y+4	; 0x04
     f0a:	23 30       	cpi	r18, 0x03	; 3
     f0c:	31 05       	cpc	r19, r1
     f0e:	34 f4       	brge	.+12     	; 0xf1c <HKPD_charGetKey+0xee>
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	61 f0       	breq	.+24     	; 0xf32 <HKPD_charGetKey+0x104>
     f1a:	15 c0       	rjmp	.+42     	; 0xf46 <HKPD_charGetKey+0x118>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	24 30       	cpi	r18, 0x04	; 4
     f22:	31 05       	cpc	r19, r1
     f24:	59 f0       	breq	.+22     	; 0xf3c <HKPD_charGetKey+0x10e>
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	88 30       	cpi	r24, 0x08	; 8
     f2c:	91 05       	cpc	r25, r1
     f2e:	49 f0       	breq	.+18     	; 0xf42 <HKPD_charGetKey+0x114>
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <HKPD_charGetKey+0x118>
	case 1: L_u8Col=0;break;
     f32:	1a 82       	std	Y+2, r1	; 0x02
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <HKPD_charGetKey+0x118>
	case 2: L_u8Col=1;break;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <HKPD_charGetKey+0x118>
	case 4: L_u8Col=2;break;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	8a 83       	std	Y+2, r24	; 0x02
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <HKPD_charGetKey+0x118>
	case 8:	L_u8Col=3;break;
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	8a 83       	std	Y+2, r24	; 0x02
	}


	return HKPD_charKeypad[L_u8Row][L_u8Col];
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	48 2f       	mov	r20, r24
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	ca 01       	movw	r24, r20
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	fc 01       	movw	r30, r24
     f62:	e4 57       	subi	r30, 0x74	; 116
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	80 81       	ld	r24, Z
}
     f68:	26 96       	adiw	r28, 0x06	; 6
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	c2 57       	subi	r28, 0x72	; 114
     f88:	d0 40       	sbci	r29, 0x00	; 0
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	64 e0       	ldi	r22, 0x04	; 4
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	65 e0       	ldi	r22, 0x05	; 5
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	66 e0       	ldi	r22, 0x06	; 6
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	67 e0       	ldi	r22, 0x07	; 7
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
     fda:	fe 01       	movw	r30, r28
     fdc:	e1 59       	subi	r30, 0x91	; 145
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e2       	ldi	r26, 0x20	; 32
     fe6:	b2 e4       	ldi	r27, 0x42	; 66
     fe8:	80 83       	st	Z, r24
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	a2 83       	std	Z+2, r26	; 0x02
     fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	8e 01       	movw	r16, r28
     ff2:	05 59       	subi	r16, 0x95	; 149
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	e1 59       	subi	r30, 0x91	; 145
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	60 81       	ld	r22, Z
     ffe:	71 81       	ldd	r23, Z+1	; 0x01
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	93 81       	ldd	r25, Z+3	; 0x03
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	4a ef       	ldi	r20, 0xFA	; 250
    100a:	54 e4       	ldi	r21, 0x44	; 68
    100c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	f8 01       	movw	r30, r16
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101e:	fe 01       	movw	r30, r28
    1020:	e5 59       	subi	r30, 0x95	; 149
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e8       	ldi	r20, 0x80	; 128
    1032:	5f e3       	ldi	r21, 0x3F	; 63
    1034:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1038:	88 23       	and	r24, r24
    103a:	44 f4       	brge	.+16     	; 0x104c <HLCD_voidInit+0xd2>
		__ticks = 1;
    103c:	fe 01       	movw	r30, r28
    103e:	e7 59       	subi	r30, 0x97	; 151
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	80 83       	st	Z, r24
    104a:	64 c0       	rjmp	.+200    	; 0x1114 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
    104c:	fe 01       	movw	r30, r28
    104e:	e5 59       	subi	r30, 0x95	; 149
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	0c f0       	brlt	.+2      	; 0x106c <HLCD_voidInit+0xf2>
    106a:	43 c0       	rjmp	.+134    	; 0x10f2 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106c:	fe 01       	movw	r30, r28
    106e:	e1 59       	subi	r30, 0x91	; 145
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	60 81       	ld	r22, Z
    1074:	71 81       	ldd	r23, Z+1	; 0x01
    1076:	82 81       	ldd	r24, Z+2	; 0x02
    1078:	93 81       	ldd	r25, Z+3	; 0x03
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	8e 01       	movw	r16, r28
    108c:	07 59       	subi	r16, 0x97	; 151
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	f8 01       	movw	r30, r16
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	80 83       	st	Z, r24
    10a2:	1f c0       	rjmp	.+62     	; 0x10e2 <HLCD_voidInit+0x168>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e9 59       	subi	r30, 0x99	; 153
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10b2:	fe 01       	movw	r30, r28
    10b4:	e9 59       	subi	r30, 0x99	; 153
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <HLCD_voidInit+0x142>
    10c0:	fe 01       	movw	r30, r28
    10c2:	e9 59       	subi	r30, 0x99	; 153
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	de 01       	movw	r26, r28
    10cc:	a7 59       	subi	r26, 0x97	; 151
    10ce:	bf 4f       	sbci	r27, 0xFF	; 255
    10d0:	fe 01       	movw	r30, r28
    10d2:	e7 59       	subi	r30, 0x97	; 151
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	91 81       	ldd	r25, Z+1	; 0x01
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 59       	subi	r30, 0x97	; 151
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	d1 f6       	brne	.-76     	; 0x10a4 <HLCD_voidInit+0x12a>
    10f0:	27 c0       	rjmp	.+78     	; 0x1140 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	8e 01       	movw	r16, r28
    10f4:	07 59       	subi	r16, 0x97	; 151
    10f6:	1f 4f       	sbci	r17, 0xFF	; 255
    10f8:	fe 01       	movw	r30, r28
    10fa:	e5 59       	subi	r30, 0x95	; 149
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	de 01       	movw	r26, r28
    1116:	ab 59       	subi	r26, 0x9B	; 155
    1118:	bf 4f       	sbci	r27, 0xFF	; 255
    111a:	fe 01       	movw	r30, r28
    111c:	e7 59       	subi	r30, 0x97	; 151
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	8d 93       	st	X+, r24
    1126:	9c 93       	st	X, r25
    1128:	fe 01       	movw	r30, r28
    112a:	eb 59       	subi	r30, 0x9B	; 155
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <HLCD_voidInit+0x1b8>
    1136:	fe 01       	movw	r30, r28
    1138:	eb 59       	subi	r30, 0x9B	; 155
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
    1140:	83 e3       	ldi	r24, 0x33	; 51
    1142:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    1146:	fe 01       	movw	r30, r28
    1148:	ef 59       	subi	r30, 0x9F	; 159
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 ea       	ldi	r26, 0xA0	; 160
    1152:	b0 e4       	ldi	r27, 0x40	; 64
    1154:	80 83       	st	Z, r24
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	a2 83       	std	Z+2, r26	; 0x02
    115a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115c:	8e 01       	movw	r16, r28
    115e:	03 5a       	subi	r16, 0xA3	; 163
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	fe 01       	movw	r30, r28
    1164:	ef 59       	subi	r30, 0x9F	; 159
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	f8 01       	movw	r30, r16
    1182:	80 83       	st	Z, r24
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	a2 83       	std	Z+2, r26	; 0x02
    1188:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    118a:	fe 01       	movw	r30, r28
    118c:	e3 5a       	subi	r30, 0xA3	; 163
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	5f e3       	ldi	r21, 0x3F	; 63
    11a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	44 f4       	brge	.+16     	; 0x11b8 <HLCD_voidInit+0x23e>
		__ticks = 1;
    11a8:	fe 01       	movw	r30, r28
    11aa:	e5 5a       	subi	r30, 0xA5	; 165
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	64 c0       	rjmp	.+200    	; 0x1280 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
    11b8:	fe 01       	movw	r30, r28
    11ba:	e3 5a       	subi	r30, 0xA3	; 163
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	60 81       	ld	r22, Z
    11c0:	71 81       	ldd	r23, Z+1	; 0x01
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	57 e4       	ldi	r21, 0x47	; 71
    11ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	0c f0       	brlt	.+2      	; 0x11d8 <HLCD_voidInit+0x25e>
    11d6:	43 c0       	rjmp	.+134    	; 0x125e <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d8:	fe 01       	movw	r30, r28
    11da:	ef 59       	subi	r30, 0x9F	; 159
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e2       	ldi	r20, 0x20	; 32
    11ec:	51 e4       	ldi	r21, 0x41	; 65
    11ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	8e 01       	movw	r16, r28
    11f8:	05 5a       	subi	r16, 0xA5	; 165
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	f8 01       	movw	r30, r16
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	1f c0       	rjmp	.+62     	; 0x124e <HLCD_voidInit+0x2d4>
    1210:	fe 01       	movw	r30, r28
    1212:	e7 5a       	subi	r30, 0xA7	; 167
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	88 ec       	ldi	r24, 0xC8	; 200
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	80 83       	st	Z, r24
    121e:	fe 01       	movw	r30, r28
    1220:	e7 5a       	subi	r30, 0xA7	; 167
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <HLCD_voidInit+0x2ae>
    122c:	fe 01       	movw	r30, r28
    122e:	e7 5a       	subi	r30, 0xA7	; 167
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	de 01       	movw	r26, r28
    1238:	a5 5a       	subi	r26, 0xA5	; 165
    123a:	bf 4f       	sbci	r27, 0xFF	; 255
    123c:	fe 01       	movw	r30, r28
    123e:	e5 5a       	subi	r30, 0xA5	; 165
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	11 96       	adiw	r26, 0x01	; 1
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124e:	fe 01       	movw	r30, r28
    1250:	e5 5a       	subi	r30, 0xA5	; 165
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	d1 f6       	brne	.-76     	; 0x1210 <HLCD_voidInit+0x296>
    125c:	27 c0       	rjmp	.+78     	; 0x12ac <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	8e 01       	movw	r16, r28
    1260:	05 5a       	subi	r16, 0xA5	; 165
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	fe 01       	movw	r30, r28
    1266:	e3 5a       	subi	r30, 0xA3	; 163
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	60 81       	ld	r22, Z
    126c:	71 81       	ldd	r23, Z+1	; 0x01
    126e:	82 81       	ldd	r24, Z+2	; 0x02
    1270:	93 81       	ldd	r25, Z+3	; 0x03
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	f8 01       	movw	r30, r16
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
    1280:	de 01       	movw	r26, r28
    1282:	a9 5a       	subi	r26, 0xA9	; 169
    1284:	bf 4f       	sbci	r27, 0xFF	; 255
    1286:	fe 01       	movw	r30, r28
    1288:	e5 5a       	subi	r30, 0xA5	; 165
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	8d 93       	st	X+, r24
    1292:	9c 93       	st	X, r25
    1294:	fe 01       	movw	r30, r28
    1296:	e9 5a       	subi	r30, 0xA9	; 169
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <HLCD_voidInit+0x324>
    12a2:	fe 01       	movw	r30, r28
    12a4:	e9 5a       	subi	r30, 0xA9	; 169
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
    12ac:	82 e3       	ldi	r24, 0x32	; 50
    12ae:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    12b2:	fe 01       	movw	r30, r28
    12b4:	ed 5a       	subi	r30, 0xAD	; 173
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	a8 ec       	ldi	r26, 0xC8	; 200
    12be:	b2 e4       	ldi	r27, 0x42	; 66
    12c0:	80 83       	st	Z, r24
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	a2 83       	std	Z+2, r26	; 0x02
    12c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12c8:	8e 01       	movw	r16, r28
    12ca:	01 5b       	subi	r16, 0xB1	; 177
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	fe 01       	movw	r30, r28
    12d0:	ed 5a       	subi	r30, 0xAD	; 173
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	2b ea       	ldi	r18, 0xAB	; 171
    12de:	3a ea       	ldi	r19, 0xAA	; 170
    12e0:	4a e2       	ldi	r20, 0x2A	; 42
    12e2:	50 e4       	ldi	r21, 0x40	; 64
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	f8 01       	movw	r30, r16
    12ee:	80 83       	st	Z, r24
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	a2 83       	std	Z+2, r26	; 0x02
    12f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12f6:	fe 01       	movw	r30, r28
    12f8:	e1 5b       	subi	r30, 0xB1	; 177
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	34 f4       	brge	.+12     	; 0x1320 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    1314:	fe 01       	movw	r30, r28
    1316:	e2 5b       	subi	r30, 0xB2	; 178
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 83       	st	Z, r24
    131e:	e0 c0       	rjmp	.+448    	; 0x14e0 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    1320:	fe 01       	movw	r30, r28
    1322:	e1 5b       	subi	r30, 0xB1	; 177
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	53 e4       	ldi	r21, 0x43	; 67
    1336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	0c f0       	brlt	.+2      	; 0x1340 <HLCD_voidInit+0x3c6>
    133e:	c0 c0       	rjmp	.+384    	; 0x14c0 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1340:	fe 01       	movw	r30, r28
    1342:	ed 5a       	subi	r30, 0xAD	; 173
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a e7       	ldi	r20, 0x7A	; 122
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	fe 01       	movw	r30, r28
    1360:	e6 5b       	subi	r30, 0xB6	; 182
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 83       	st	Z, r24
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	a2 83       	std	Z+2, r26	; 0x02
    136a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	8e 01       	movw	r16, r28
    136e:	0a 5b       	subi	r16, 0xBA	; 186
    1370:	1f 4f       	sbci	r17, 0xFF	; 255
    1372:	fe 01       	movw	r30, r28
    1374:	e6 5b       	subi	r30, 0xB6	; 182
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	60 81       	ld	r22, Z
    137a:	71 81       	ldd	r23, Z+1	; 0x01
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	93 81       	ldd	r25, Z+3	; 0x03
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	f8 01       	movw	r30, r16
    1392:	80 83       	st	Z, r24
    1394:	91 83       	std	Z+1, r25	; 0x01
    1396:	a2 83       	std	Z+2, r26	; 0x02
    1398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    139a:	fe 01       	movw	r30, r28
    139c:	ea 5b       	subi	r30, 0xBA	; 186
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	44 f4       	brge	.+16     	; 0x13c8 <HLCD_voidInit+0x44e>
		__ticks = 1;
    13b8:	fe 01       	movw	r30, r28
    13ba:	ec 5b       	subi	r30, 0xBC	; 188
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
    13c6:	64 c0       	rjmp	.+200    	; 0x1490 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    13c8:	fe 01       	movw	r30, r28
    13ca:	ea 5b       	subi	r30, 0xBA	; 186
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	0c f0       	brlt	.+2      	; 0x13e8 <HLCD_voidInit+0x46e>
    13e6:	43 c0       	rjmp	.+134    	; 0x146e <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	fe 01       	movw	r30, r28
    13ea:	e6 5b       	subi	r30, 0xB6	; 182
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e2       	ldi	r20, 0x20	; 32
    13fc:	51 e4       	ldi	r21, 0x41	; 65
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8e 01       	movw	r16, r28
    1408:	0c 5b       	subi	r16, 0xBC	; 188
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	f8 01       	movw	r30, r16
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	80 83       	st	Z, r24
    141e:	1f c0       	rjmp	.+62     	; 0x145e <HLCD_voidInit+0x4e4>
    1420:	fe 01       	movw	r30, r28
    1422:	ee 5b       	subi	r30, 0xBE	; 190
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	88 ec       	ldi	r24, 0xC8	; 200
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
    142e:	fe 01       	movw	r30, r28
    1430:	ee 5b       	subi	r30, 0xBE	; 190
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	91 81       	ldd	r25, Z+1	; 0x01
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <HLCD_voidInit+0x4be>
    143c:	fe 01       	movw	r30, r28
    143e:	ee 5b       	subi	r30, 0xBE	; 190
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1446:	de 01       	movw	r26, r28
    1448:	ac 5b       	subi	r26, 0xBC	; 188
    144a:	bf 4f       	sbci	r27, 0xFF	; 255
    144c:	fe 01       	movw	r30, r28
    144e:	ec 5b       	subi	r30, 0xBC	; 188
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	9c 93       	st	X, r25
    145c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145e:	fe 01       	movw	r30, r28
    1460:	ec 5b       	subi	r30, 0xBC	; 188
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	d1 f6       	brne	.-76     	; 0x1420 <HLCD_voidInit+0x4a6>
    146c:	42 c0       	rjmp	.+132    	; 0x14f2 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146e:	8e 01       	movw	r16, r28
    1470:	0c 5b       	subi	r16, 0xBC	; 188
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	fe 01       	movw	r30, r28
    1476:	ea 5b       	subi	r30, 0xBA	; 186
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	f8 01       	movw	r30, r16
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	80 83       	st	Z, r24
    1490:	de 01       	movw	r26, r28
    1492:	a0 5c       	subi	r26, 0xC0	; 192
    1494:	bf 4f       	sbci	r27, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	ec 5b       	subi	r30, 0xBC	; 188
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	91 81       	ldd	r25, Z+1	; 0x01
    14a0:	11 96       	adiw	r26, 0x01	; 1
    14a2:	9c 93       	st	X, r25
    14a4:	8e 93       	st	-X, r24
    14a6:	fe 01       	movw	r30, r28
    14a8:	e0 5c       	subi	r30, 0xC0	; 192
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <HLCD_voidInit+0x536>
    14b4:	fe 01       	movw	r30, r28
    14b6:	e0 5c       	subi	r30, 0xC0	; 192
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	19 c0       	rjmp	.+50     	; 0x14f2 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14c0:	8e 01       	movw	r16, r28
    14c2:	02 5b       	subi	r16, 0xB2	; 178
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	fe 01       	movw	r30, r28
    14c8:	e1 5b       	subi	r30, 0xB1	; 177
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	f8 01       	movw	r30, r16
    14de:	80 83       	st	Z, r24
    14e0:	fe 01       	movw	r30, r28
    14e2:	e2 5b       	subi	r30, 0xB2	; 178
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    14ec:	8a 95       	dec	r24
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <HLCD_voidInit+0x572>
    14f0:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    14f2:	88 e2       	ldi	r24, 0x28	; 40
    14f4:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a8 ec       	ldi	r26, 0xC8	; 200
    14fe:	b2 e4       	ldi	r27, 0x42	; 66
    1500:	8b af       	std	Y+59, r24	; 0x3b
    1502:	9c af       	std	Y+60, r25	; 0x3c
    1504:	ad af       	std	Y+61, r26	; 0x3d
    1506:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1508:	6b ad       	ldd	r22, Y+59	; 0x3b
    150a:	7c ad       	ldd	r23, Y+60	; 0x3c
    150c:	8d ad       	ldd	r24, Y+61	; 0x3d
    150e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1510:	2b ea       	ldi	r18, 0xAB	; 171
    1512:	3a ea       	ldi	r19, 0xAA	; 170
    1514:	4a e2       	ldi	r20, 0x2A	; 42
    1516:	50 e4       	ldi	r21, 0x40	; 64
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8f ab       	std	Y+55, r24	; 0x37
    1522:	98 af       	std	Y+56, r25	; 0x38
    1524:	a9 af       	std	Y+57, r26	; 0x39
    1526:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1528:	6f a9       	ldd	r22, Y+55	; 0x37
    152a:	78 ad       	ldd	r23, Y+56	; 0x38
    152c:	89 ad       	ldd	r24, Y+57	; 0x39
    152e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	1c f4       	brge	.+6      	; 0x1546 <HLCD_voidInit+0x5cc>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	8e ab       	std	Y+54, r24	; 0x36
    1544:	91 c0       	rjmp	.+290    	; 0x1668 <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    1546:	6f a9       	ldd	r22, Y+55	; 0x37
    1548:	78 ad       	ldd	r23, Y+56	; 0x38
    154a:	89 ad       	ldd	r24, Y+57	; 0x39
    154c:	9a ad       	ldd	r25, Y+58	; 0x3a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	0c f0       	brlt	.+2      	; 0x1560 <HLCD_voidInit+0x5e6>
    155e:	7b c0       	rjmp	.+246    	; 0x1656 <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    1560:	6b ad       	ldd	r22, Y+59	; 0x3b
    1562:	7c ad       	ldd	r23, Y+60	; 0x3c
    1564:	8d ad       	ldd	r24, Y+61	; 0x3d
    1566:	9e ad       	ldd	r25, Y+62	; 0x3e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a e7       	ldi	r20, 0x7A	; 122
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8a ab       	std	Y+50, r24	; 0x32
    157a:	9b ab       	std	Y+51, r25	; 0x33
    157c:	ac ab       	std	Y+52, r26	; 0x34
    157e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1580:	6a a9       	ldd	r22, Y+50	; 0x32
    1582:	7b a9       	ldd	r23, Y+51	; 0x33
    1584:	8c a9       	ldd	r24, Y+52	; 0x34
    1586:	9d a9       	ldd	r25, Y+53	; 0x35
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	4a ef       	ldi	r20, 0xFA	; 250
    158e:	54 e4       	ldi	r21, 0x44	; 68
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	8e a7       	std	Y+46, r24	; 0x2e
    159a:	9f a7       	std	Y+47, r25	; 0x2f
    159c:	a8 ab       	std	Y+48, r26	; 0x30
    159e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15a0:	6e a5       	ldd	r22, Y+46	; 0x2e
    15a2:	7f a5       	ldd	r23, Y+47	; 0x2f
    15a4:	88 a9       	ldd	r24, Y+48	; 0x30
    15a6:	99 a9       	ldd	r25, Y+49	; 0x31
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e8       	ldi	r20, 0x80	; 128
    15ae:	5f e3       	ldi	r21, 0x3F	; 63
    15b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <HLCD_voidInit+0x648>
		__ticks = 1;
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9d a7       	std	Y+45, r25	; 0x2d
    15be:	8c a7       	std	Y+44, r24	; 0x2c
    15c0:	3f c0       	rjmp	.+126    	; 0x1640 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    15c2:	6e a5       	ldd	r22, Y+46	; 0x2e
    15c4:	7f a5       	ldd	r23, Y+47	; 0x2f
    15c6:	88 a9       	ldd	r24, Y+48	; 0x30
    15c8:	99 a9       	ldd	r25, Y+49	; 0x31
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	3f ef       	ldi	r19, 0xFF	; 255
    15ce:	4f e7       	ldi	r20, 0x7F	; 127
    15d0:	57 e4       	ldi	r21, 0x47	; 71
    15d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d6:	18 16       	cp	r1, r24
    15d8:	4c f5       	brge	.+82     	; 0x162c <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15da:	6a a9       	ldd	r22, Y+50	; 0x32
    15dc:	7b a9       	ldd	r23, Y+51	; 0x33
    15de:	8c a9       	ldd	r24, Y+52	; 0x34
    15e0:	9d a9       	ldd	r25, Y+53	; 0x35
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e2       	ldi	r20, 0x20	; 32
    15e8:	51 e4       	ldi	r21, 0x41	; 65
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9d a7       	std	Y+45, r25	; 0x2d
    1600:	8c a7       	std	Y+44, r24	; 0x2c
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <HLCD_voidInit+0x6a8>
    1604:	88 ec       	ldi	r24, 0xC8	; 200
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9b a7       	std	Y+43, r25	; 0x2b
    160a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    160c:	8a a5       	ldd	r24, Y+42	; 0x2a
    160e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <HLCD_voidInit+0x696>
    1614:	9b a7       	std	Y+43, r25	; 0x2b
    1616:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1618:	8c a5       	ldd	r24, Y+44	; 0x2c
    161a:	9d a5       	ldd	r25, Y+45	; 0x2d
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	9d a7       	std	Y+45, r25	; 0x2d
    1620:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	8c a5       	ldd	r24, Y+44	; 0x2c
    1624:	9d a5       	ldd	r25, Y+45	; 0x2d
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	69 f7       	brne	.-38     	; 0x1604 <HLCD_voidInit+0x68a>
    162a:	24 c0       	rjmp	.+72     	; 0x1674 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162c:	6e a5       	ldd	r22, Y+46	; 0x2e
    162e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1630:	88 a9       	ldd	r24, Y+48	; 0x30
    1632:	99 a9       	ldd	r25, Y+49	; 0x31
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9d a7       	std	Y+45, r25	; 0x2d
    163e:	8c a7       	std	Y+44, r24	; 0x2c
    1640:	8c a5       	ldd	r24, Y+44	; 0x2c
    1642:	9d a5       	ldd	r25, Y+45	; 0x2d
    1644:	99 a7       	std	Y+41, r25	; 0x29
    1646:	88 a7       	std	Y+40, r24	; 0x28
    1648:	88 a5       	ldd	r24, Y+40	; 0x28
    164a:	99 a5       	ldd	r25, Y+41	; 0x29
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <HLCD_voidInit+0x6d2>
    1650:	99 a7       	std	Y+41, r25	; 0x29
    1652:	88 a7       	std	Y+40, r24	; 0x28
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1656:	6f a9       	ldd	r22, Y+55	; 0x37
    1658:	78 ad       	ldd	r23, Y+56	; 0x38
    165a:	89 ad       	ldd	r24, Y+57	; 0x39
    165c:	9a ad       	ldd	r25, Y+58	; 0x3a
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8e ab       	std	Y+54, r24	; 0x36
    1668:	8e a9       	ldd	r24, Y+54	; 0x36
    166a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    166c:	8f a1       	ldd	r24, Y+39	; 0x27
    166e:	8a 95       	dec	r24
    1670:	f1 f7       	brne	.-4      	; 0x166e <HLCD_voidInit+0x6f4>
    1672:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    1674:	8c e0       	ldi	r24, 0x0C	; 12
    1676:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a8 e4       	ldi	r26, 0x48	; 72
    1680:	b3 e4       	ldi	r27, 0x43	; 67
    1682:	8b a3       	std	Y+35, r24	; 0x23
    1684:	9c a3       	std	Y+36, r25	; 0x24
    1686:	ad a3       	std	Y+37, r26	; 0x25
    1688:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    168a:	6b a1       	ldd	r22, Y+35	; 0x23
    168c:	7c a1       	ldd	r23, Y+36	; 0x24
    168e:	8d a1       	ldd	r24, Y+37	; 0x25
    1690:	9e a1       	ldd	r25, Y+38	; 0x26
    1692:	2b ea       	ldi	r18, 0xAB	; 171
    1694:	3a ea       	ldi	r19, 0xAA	; 170
    1696:	4a e2       	ldi	r20, 0x2A	; 42
    1698:	50 e4       	ldi	r21, 0x40	; 64
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8f 8f       	std	Y+31, r24	; 0x1f
    16a4:	98 a3       	std	Y+32, r25	; 0x20
    16a6:	a9 a3       	std	Y+33, r26	; 0x21
    16a8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16ac:	78 a1       	ldd	r23, Y+32	; 0x20
    16ae:	89 a1       	ldd	r24, Y+33	; 0x21
    16b0:	9a a1       	ldd	r25, Y+34	; 0x22
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	1c f4       	brge	.+6      	; 0x16c8 <HLCD_voidInit+0x74e>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	8e 8f       	std	Y+30, r24	; 0x1e
    16c6:	91 c0       	rjmp	.+290    	; 0x17ea <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    16c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16ca:	78 a1       	ldd	r23, Y+32	; 0x20
    16cc:	89 a1       	ldd	r24, Y+33	; 0x21
    16ce:	9a a1       	ldd	r25, Y+34	; 0x22
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	53 e4       	ldi	r21, 0x43	; 67
    16d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	0c f0       	brlt	.+2      	; 0x16e2 <HLCD_voidInit+0x768>
    16e0:	7b c0       	rjmp	.+246    	; 0x17d8 <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    16e2:	6b a1       	ldd	r22, Y+35	; 0x23
    16e4:	7c a1       	ldd	r23, Y+36	; 0x24
    16e6:	8d a1       	ldd	r24, Y+37	; 0x25
    16e8:	9e a1       	ldd	r25, Y+38	; 0x26
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a e7       	ldi	r20, 0x7A	; 122
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8a 8f       	std	Y+26, r24	; 0x1a
    16fc:	9b 8f       	std	Y+27, r25	; 0x1b
    16fe:	ac 8f       	std	Y+28, r26	; 0x1c
    1700:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1704:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1706:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1708:	9d 8d       	ldd	r25, Y+29	; 0x1d
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	4a ef       	ldi	r20, 0xFA	; 250
    1710:	54 e4       	ldi	r21, 0x44	; 68
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8e 8b       	std	Y+22, r24	; 0x16
    171c:	9f 8b       	std	Y+23, r25	; 0x17
    171e:	a8 8f       	std	Y+24, r26	; 0x18
    1720:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1722:	6e 89       	ldd	r22, Y+22	; 0x16
    1724:	7f 89       	ldd	r23, Y+23	; 0x17
    1726:	88 8d       	ldd	r24, Y+24	; 0x18
    1728:	99 8d       	ldd	r25, Y+25	; 0x19
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	2c f4       	brge	.+10     	; 0x1744 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9d 8b       	std	Y+21, r25	; 0x15
    1740:	8c 8b       	std	Y+20, r24	; 0x14
    1742:	3f c0       	rjmp	.+126    	; 0x17c2 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    1744:	6e 89       	ldd	r22, Y+22	; 0x16
    1746:	7f 89       	ldd	r23, Y+23	; 0x17
    1748:	88 8d       	ldd	r24, Y+24	; 0x18
    174a:	99 8d       	ldd	r25, Y+25	; 0x19
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	3f ef       	ldi	r19, 0xFF	; 255
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	57 e4       	ldi	r21, 0x47	; 71
    1754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	4c f5       	brge	.+82     	; 0x17ae <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    175e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1760:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1762:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e2       	ldi	r20, 0x20	; 32
    176a:	51 e4       	ldi	r21, 0x41	; 65
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9d 8b       	std	Y+21, r25	; 0x15
    1782:	8c 8b       	std	Y+20, r24	; 0x14
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <HLCD_voidInit+0x82a>
    1786:	88 ec       	ldi	r24, 0xC8	; 200
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9b 8b       	std	Y+19, r25	; 0x13
    178c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178e:	8a 89       	ldd	r24, Y+18	; 0x12
    1790:	9b 89       	ldd	r25, Y+19	; 0x13
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <HLCD_voidInit+0x818>
    1796:	9b 8b       	std	Y+19, r25	; 0x13
    1798:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179a:	8c 89       	ldd	r24, Y+20	; 0x14
    179c:	9d 89       	ldd	r25, Y+21	; 0x15
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	9d 8b       	std	Y+21, r25	; 0x15
    17a2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a4:	8c 89       	ldd	r24, Y+20	; 0x14
    17a6:	9d 89       	ldd	r25, Y+21	; 0x15
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	69 f7       	brne	.-38     	; 0x1786 <HLCD_voidInit+0x80c>
    17ac:	24 c0       	rjmp	.+72     	; 0x17f6 <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ae:	6e 89       	ldd	r22, Y+22	; 0x16
    17b0:	7f 89       	ldd	r23, Y+23	; 0x17
    17b2:	88 8d       	ldd	r24, Y+24	; 0x18
    17b4:	99 8d       	ldd	r25, Y+25	; 0x19
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9d 8b       	std	Y+21, r25	; 0x15
    17c0:	8c 8b       	std	Y+20, r24	; 0x14
    17c2:	8c 89       	ldd	r24, Y+20	; 0x14
    17c4:	9d 89       	ldd	r25, Y+21	; 0x15
    17c6:	99 8b       	std	Y+17, r25	; 0x11
    17c8:	88 8b       	std	Y+16, r24	; 0x10
    17ca:	88 89       	ldd	r24, Y+16	; 0x10
    17cc:	99 89       	ldd	r25, Y+17	; 0x11
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <HLCD_voidInit+0x854>
    17d2:	99 8b       	std	Y+17, r25	; 0x11
    17d4:	88 8b       	std	Y+16, r24	; 0x10
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17da:	78 a1       	ldd	r23, Y+32	; 0x20
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8e 8f       	std	Y+30, r24	; 0x1e
    17ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ec:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f0:	8a 95       	dec	r24
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <HLCD_voidInit+0x876>
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    17f6:	86 e0       	ldi	r24, 0x06	; 6
    17f8:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    17fc:	8f e0       	ldi	r24, 0x0F	; 15
    17fe:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e4       	ldi	r27, 0x40	; 64
    1810:	8b 87       	std	Y+11, r24	; 0x0b
    1812:	9c 87       	std	Y+12, r25	; 0x0c
    1814:	ad 87       	std	Y+13, r26	; 0x0d
    1816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1818:	6b 85       	ldd	r22, Y+11	; 0x0b
    181a:	7c 85       	ldd	r23, Y+12	; 0x0c
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	4a ef       	ldi	r20, 0xFA	; 250
    1826:	54 e4       	ldi	r21, 0x44	; 68
    1828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	8f 83       	std	Y+7, r24	; 0x07
    1832:	98 87       	std	Y+8, r25	; 0x08
    1834:	a9 87       	std	Y+9, r26	; 0x09
    1836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1838:	6f 81       	ldd	r22, Y+7	; 0x07
    183a:	78 85       	ldd	r23, Y+8	; 0x08
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e8       	ldi	r20, 0x80	; 128
    1846:	5f e3       	ldi	r21, 0x3F	; 63
    1848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184c:	88 23       	and	r24, r24
    184e:	2c f4       	brge	.+10     	; 0x185a <HLCD_voidInit+0x8e0>
		__ticks = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9e 83       	std	Y+6, r25	; 0x06
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	3f c0       	rjmp	.+126    	; 0x18d8 <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    185a:	6f 81       	ldd	r22, Y+7	; 0x07
    185c:	78 85       	ldd	r23, Y+8	; 0x08
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	9a 85       	ldd	r25, Y+10	; 0x0a
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	3f ef       	ldi	r19, 0xFF	; 255
    1866:	4f e7       	ldi	r20, 0x7F	; 127
    1868:	57 e4       	ldi	r21, 0x47	; 71
    186a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    186e:	18 16       	cp	r1, r24
    1870:	4c f5       	brge	.+82     	; 0x18c4 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	51 e4       	ldi	r21, 0x41	; 65
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	bc 01       	movw	r22, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	0f c0       	rjmp	.+30     	; 0x18ba <HLCD_voidInit+0x940>
    189c:	88 ec       	ldi	r24, 0xC8	; 200
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <HLCD_voidInit+0x92e>
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	69 f7       	brne	.-38     	; 0x189c <HLCD_voidInit+0x922>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c4:	6f 81       	ldd	r22, Y+7	; 0x07
    18c6:	78 85       	ldd	r23, Y+8	; 0x08
    18c8:	89 85       	ldd	r24, Y+9	; 0x09
    18ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9e 83       	std	Y+6, r25	; 0x06
    18d6:	8d 83       	std	Y+5, r24	; 0x05
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <HLCD_voidInit+0x96a>
    18e8:	9a 83       	std	Y+2, r25	; 0x02
    18ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    18ec:	ce 58       	subi	r28, 0x8E	; 142
    18ee:	df 4f       	sbci	r29, 0xFF	; 255
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	c1 56       	subi	r28, 0x61	; 97
    1912:	d0 40       	sbci	r29, 0x00	; 0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	fe 01       	movw	r30, r28
    1920:	ef 59       	subi	r30, 0x9F	; 159
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    1944:	fe 01       	movw	r30, r28
    1946:	ef 59       	subi	r30, 0x9F	; 159
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	82 95       	swap	r24
    194e:	8f 70       	andi	r24, 0x0F	; 15
    1950:	81 70       	andi	r24, 0x01	; 1
    1952:	98 2f       	mov	r25, r24
    1954:	9f 5f       	subi	r25, 0xFF	; 255
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	64 e0       	ldi	r22, 0x04	; 4
    195a:	49 2f       	mov	r20, r25
    195c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    1960:	fe 01       	movw	r30, r28
    1962:	ef 59       	subi	r30, 0x9F	; 159
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 81       	ld	r24, Z
    1968:	82 95       	swap	r24
    196a:	86 95       	lsr	r24
    196c:	87 70       	andi	r24, 0x07	; 7
    196e:	81 70       	andi	r24, 0x01	; 1
    1970:	98 2f       	mov	r25, r24
    1972:	9f 5f       	subi	r25, 0xFF	; 255
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	65 e0       	ldi	r22, 0x05	; 5
    1978:	49 2f       	mov	r20, r25
    197a:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    197e:	fe 01       	movw	r30, r28
    1980:	ef 59       	subi	r30, 0x9F	; 159
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	82 95       	swap	r24
    1988:	86 95       	lsr	r24
    198a:	86 95       	lsr	r24
    198c:	83 70       	andi	r24, 0x03	; 3
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	98 2f       	mov	r25, r24
    1992:	9f 5f       	subi	r25, 0xFF	; 255
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	66 e0       	ldi	r22, 0x06	; 6
    1998:	49 2f       	mov	r20, r25
    199a:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 59       	subi	r30, 0x9F	; 159
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	88 1f       	adc	r24, r24
    19a8:	88 27       	eor	r24, r24
    19aa:	88 1f       	adc	r24, r24
    19ac:	98 2f       	mov	r25, r24
    19ae:	9f 5f       	subi	r25, 0xFF	; 255
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	49 2f       	mov	r20, r25
    19b6:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	42 e0       	ldi	r20, 0x02	; 2
    19c0:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    19c4:	fe 01       	movw	r30, r28
    19c6:	e3 5a       	subi	r30, 0xA3	; 163
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e2       	ldi	r26, 0x20	; 32
    19d0:	b1 e4       	ldi	r27, 0x41	; 65
    19d2:	80 83       	st	Z, r24
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	a2 83       	std	Z+2, r26	; 0x02
    19d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19da:	8e 01       	movw	r16, r28
    19dc:	07 5a       	subi	r16, 0xA7	; 167
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	e3 5a       	subi	r30, 0xA3	; 163
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	2b ea       	ldi	r18, 0xAB	; 171
    19f0:	3a ea       	ldi	r19, 0xAA	; 170
    19f2:	4a e2       	ldi	r20, 0x2A	; 42
    19f4:	50 e4       	ldi	r21, 0x40	; 64
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	a2 83       	std	Z+2, r26	; 0x02
    1a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e7 5a       	subi	r30, 0xA7	; 167
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a22:	88 23       	and	r24, r24
    1a24:	34 f4       	brge	.+12     	; 0x1a32 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    1a26:	fe 01       	movw	r30, r28
    1a28:	e8 5a       	subi	r30, 0xA8	; 168
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 83       	st	Z, r24
    1a30:	e0 c0       	rjmp	.+448    	; 0x1bf2 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e7 5a       	subi	r30, 0xA7	; 167
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	53 e4       	ldi	r21, 0x43	; 67
    1a48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <HLCD_voidSendCmd+0x14e>
    1a50:	c0 c0       	rjmp	.+384    	; 0x1bd2 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1a52:	fe 01       	movw	r30, r28
    1a54:	e3 5a       	subi	r30, 0xA3	; 163
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a e7       	ldi	r20, 0x7A	; 122
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	fe 01       	movw	r30, r28
    1a72:	ec 5a       	subi	r30, 0xAC	; 172
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	a2 83       	std	Z+2, r26	; 0x02
    1a7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	8e 01       	movw	r16, r28
    1a80:	00 5b       	subi	r16, 0xB0	; 176
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	fe 01       	movw	r30, r28
    1a86:	ec 5a       	subi	r30, 0xAC	; 172
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	4a ef       	ldi	r20, 0xFA	; 250
    1a98:	54 e4       	ldi	r21, 0x44	; 68
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	80 83       	st	Z, r24
    1aa6:	91 83       	std	Z+1, r25	; 0x01
    1aa8:	a2 83       	std	Z+2, r26	; 0x02
    1aaa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aac:	fe 01       	movw	r30, r28
    1aae:	e0 5b       	subi	r30, 0xB0	; 176
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	44 f4       	brge	.+16     	; 0x1ada <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    1aca:	fe 01       	movw	r30, r28
    1acc:	e2 5b       	subi	r30, 0xB2	; 178
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	80 83       	st	Z, r24
    1ad8:	64 c0       	rjmp	.+200    	; 0x1ba2 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    1ada:	fe 01       	movw	r30, r28
    1adc:	e0 5b       	subi	r30, 0xB0	; 176
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	0c f0       	brlt	.+2      	; 0x1afa <HLCD_voidSendCmd+0x1f6>
    1af8:	43 c0       	rjmp	.+134    	; 0x1b80 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	fe 01       	movw	r30, r28
    1afc:	ec 5a       	subi	r30, 0xAC	; 172
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	60 81       	ld	r22, Z
    1b02:	71 81       	ldd	r23, Z+1	; 0x01
    1b04:	82 81       	ldd	r24, Z+2	; 0x02
    1b06:	93 81       	ldd	r25, Z+3	; 0x03
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8e 01       	movw	r16, r28
    1b1a:	02 5b       	subi	r16, 0xB2	; 178
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1e:	bc 01       	movw	r22, r24
    1b20:	cd 01       	movw	r24, r26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
    1b30:	1f c0       	rjmp	.+62     	; 0x1b70 <HLCD_voidSendCmd+0x26c>
    1b32:	fe 01       	movw	r30, r28
    1b34:	e4 5b       	subi	r30, 0xB4	; 180
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	91 83       	std	Z+1, r25	; 0x01
    1b3e:	80 83       	st	Z, r24
    1b40:	fe 01       	movw	r30, r28
    1b42:	e4 5b       	subi	r30, 0xB4	; 180
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <HLCD_voidSendCmd+0x246>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e4 5b       	subi	r30, 0xB4	; 180
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	de 01       	movw	r26, r28
    1b5a:	a2 5b       	subi	r26, 0xB2	; 178
    1b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e2 5b       	subi	r30, 0xB2	; 178
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	9c 93       	st	X, r25
    1b6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	fe 01       	movw	r30, r28
    1b72:	e2 5b       	subi	r30, 0xB2	; 178
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	d1 f6       	brne	.-76     	; 0x1b32 <HLCD_voidSendCmd+0x22e>
    1b7e:	4b c0       	rjmp	.+150    	; 0x1c16 <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b80:	8e 01       	movw	r16, r28
    1b82:	02 5b       	subi	r16, 0xB2	; 178
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e0 5b       	subi	r30, 0xB0	; 176
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	91 83       	std	Z+1, r25	; 0x01
    1ba0:	80 83       	st	Z, r24
    1ba2:	de 01       	movw	r26, r28
    1ba4:	a6 5b       	subi	r26, 0xB6	; 182
    1ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e2 5b       	subi	r30, 0xB2	; 178
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 81       	ld	r24, Z
    1bb0:	91 81       	ldd	r25, Z+1	; 0x01
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	9c 93       	st	X, r25
    1bb6:	8e 93       	st	-X, r24
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e6 5b       	subi	r30, 0xB6	; 182
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	91 81       	ldd	r25, Z+1	; 0x01
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <HLCD_voidSendCmd+0x2be>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e6 5b       	subi	r30, 0xB6	; 182
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	80 83       	st	Z, r24
    1bd0:	22 c0       	rjmp	.+68     	; 0x1c16 <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	08 5a       	subi	r16, 0xA8	; 168
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 5a       	subi	r30, 0xA7	; 167
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	f8 01       	movw	r30, r16
    1bf0:	80 83       	st	Z, r24
    1bf2:	de 01       	movw	r26, r28
    1bf4:	a7 5b       	subi	r26, 0xB7	; 183
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	e8 5a       	subi	r30, 0xA8	; 168
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 5b       	subi	r30, 0xB7	; 183
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	8a 95       	dec	r24
    1c0c:	f1 f7       	brne	.-4      	; 0x1c0a <HLCD_voidSendCmd+0x306>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e7 5b       	subi	r30, 0xB7	; 183
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    1c20:	fe 01       	movw	r30, r28
    1c22:	eb 5b       	subi	r30, 0xBB	; 187
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a8 ec       	ldi	r26, 0xC8	; 200
    1c2c:	b2 e4       	ldi	r27, 0x42	; 66
    1c2e:	80 83       	st	Z, r24
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	a2 83       	std	Z+2, r26	; 0x02
    1c34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c36:	8e 01       	movw	r16, r28
    1c38:	0f 5b       	subi	r16, 0xBF	; 191
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	eb 5b       	subi	r30, 0xBB	; 187
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	82 81       	ldd	r24, Z+2	; 0x02
    1c48:	93 81       	ldd	r25, Z+3	; 0x03
    1c4a:	2b ea       	ldi	r18, 0xAB	; 171
    1c4c:	3a ea       	ldi	r19, 0xAA	; 170
    1c4e:	4a e2       	ldi	r20, 0x2A	; 42
    1c50:	50 e4       	ldi	r21, 0x40	; 64
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c64:	fe 01       	movw	r30, r28
    1c66:	ef 5b       	subi	r30, 0xBF	; 191
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	fe 01       	movw	r30, r28
    1c86:	e0 5c       	subi	r30, 0xC0	; 192
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 83       	st	Z, r24
    1c8c:	9d c0       	rjmp	.+314    	; 0x1dc8 <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ef 5b       	subi	r30, 0xBF	; 191
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	53 e4       	ldi	r21, 0x43	; 67
    1ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	0c f0       	brlt	.+2      	; 0x1cae <HLCD_voidSendCmd+0x3aa>
    1cac:	7e c0       	rjmp	.+252    	; 0x1daa <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    1cae:	fe 01       	movw	r30, r28
    1cb0:	eb 5b       	subi	r30, 0xBB	; 187
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a e7       	ldi	r20, 0x7A	; 122
    1cc2:	54 e4       	ldi	r21, 0x44	; 68
    1cc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8c af       	std	Y+60, r24	; 0x3c
    1cce:	9d af       	std	Y+61, r25	; 0x3d
    1cd0:	ae af       	std	Y+62, r26	; 0x3e
    1cd2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cd6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	54 e4       	ldi	r21, 0x44	; 68
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	88 af       	std	Y+56, r24	; 0x38
    1cee:	99 af       	std	Y+57, r25	; 0x39
    1cf0:	aa af       	std	Y+58, r26	; 0x3a
    1cf2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1cf4:	68 ad       	ldd	r22, Y+56	; 0x38
    1cf6:	79 ad       	ldd	r23, Y+57	; 0x39
    1cf8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cfa:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9f ab       	std	Y+55, r25	; 0x37
    1d12:	8e ab       	std	Y+54, r24	; 0x36
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1d16:	68 ad       	ldd	r22, Y+56	; 0x38
    1d18:	79 ad       	ldd	r23, Y+57	; 0x39
    1d1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d1c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d30:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d32:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d34:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9f ab       	std	Y+55, r25	; 0x37
    1d54:	8e ab       	std	Y+54, r24	; 0x36
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <HLCD_voidSendCmd+0x472>
    1d58:	88 ec       	ldi	r24, 0xC8	; 200
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9d ab       	std	Y+53, r25	; 0x35
    1d5e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d60:	8c a9       	ldd	r24, Y+52	; 0x34
    1d62:	9d a9       	ldd	r25, Y+53	; 0x35
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <HLCD_voidSendCmd+0x460>
    1d68:	9d ab       	std	Y+53, r25	; 0x35
    1d6a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8e a9       	ldd	r24, Y+54	; 0x36
    1d6e:	9f a9       	ldd	r25, Y+55	; 0x37
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9f ab       	std	Y+55, r25	; 0x37
    1d74:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8e a9       	ldd	r24, Y+54	; 0x36
    1d78:	9f a9       	ldd	r25, Y+55	; 0x37
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <HLCD_voidSendCmd+0x454>
    1d7e:	2d c0       	rjmp	.+90     	; 0x1dda <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	68 ad       	ldd	r22, Y+56	; 0x38
    1d82:	79 ad       	ldd	r23, Y+57	; 0x39
    1d84:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d86:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9f ab       	std	Y+55, r25	; 0x37
    1d92:	8e ab       	std	Y+54, r24	; 0x36
    1d94:	8e a9       	ldd	r24, Y+54	; 0x36
    1d96:	9f a9       	ldd	r25, Y+55	; 0x37
    1d98:	9b ab       	std	Y+51, r25	; 0x33
    1d9a:	8a ab       	std	Y+50, r24	; 0x32
    1d9c:	8a a9       	ldd	r24, Y+50	; 0x32
    1d9e:	9b a9       	ldd	r25, Y+51	; 0x33
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <HLCD_voidSendCmd+0x49c>
    1da4:	9b ab       	std	Y+51, r25	; 0x33
    1da6:	8a ab       	std	Y+50, r24	; 0x32
    1da8:	18 c0       	rjmp	.+48     	; 0x1dda <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1daa:	fe 01       	movw	r30, r28
    1dac:	ef 5b       	subi	r30, 0xBF	; 191
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e0 5c       	subi	r30, 0xC0	; 192
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 83       	st	Z, r24
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e0 5c       	subi	r30, 0xC0	; 192
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd2:	89 a9       	ldd	r24, Y+49	; 0x31
    1dd4:	8a 95       	dec	r24
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <HLCD_voidSendCmd+0x4d0>
    1dd8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ef 59       	subi	r30, 0x9F	; 159
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	81 70       	andi	r24, 0x01	; 1
    1de4:	98 2f       	mov	r25, r24
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	64 e0       	ldi	r22, 0x04	; 4
    1dec:	49 2f       	mov	r20, r25
    1dee:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1df2:	fe 01       	movw	r30, r28
    1df4:	ef 59       	subi	r30, 0x9F	; 159
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	86 95       	lsr	r24
    1dfc:	81 70       	andi	r24, 0x01	; 1
    1dfe:	98 2f       	mov	r25, r24
    1e00:	9f 5f       	subi	r25, 0xFF	; 255
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	65 e0       	ldi	r22, 0x05	; 5
    1e06:	49 2f       	mov	r20, r25
    1e08:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ef 59       	subi	r30, 0x9F	; 159
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	86 95       	lsr	r24
    1e16:	86 95       	lsr	r24
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	9f 5f       	subi	r25, 0xFF	; 255
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	66 e0       	ldi	r22, 0x06	; 6
    1e22:	49 2f       	mov	r20, r25
    1e24:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ef 59       	subi	r30, 0x9F	; 159
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	86 95       	lsr	r24
    1e32:	86 95       	lsr	r24
    1e34:	86 95       	lsr	r24
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	98 2f       	mov	r25, r24
    1e3a:	9f 5f       	subi	r25, 0xFF	; 255
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	67 e0       	ldi	r22, 0x07	; 7
    1e40:	49 2f       	mov	r20, r25
    1e42:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	42 e0       	ldi	r20, 0x02	; 2
    1e4c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e2       	ldi	r26, 0x20	; 32
    1e56:	b1 e4       	ldi	r27, 0x41	; 65
    1e58:	8d a7       	std	Y+45, r24	; 0x2d
    1e5a:	9e a7       	std	Y+46, r25	; 0x2e
    1e5c:	af a7       	std	Y+47, r26	; 0x2f
    1e5e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e60:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e62:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	2b ea       	ldi	r18, 0xAB	; 171
    1e6a:	3a ea       	ldi	r19, 0xAA	; 170
    1e6c:	4a e2       	ldi	r20, 0x2A	; 42
    1e6e:	50 e4       	ldi	r21, 0x40	; 64
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	89 a7       	std	Y+41, r24	; 0x29
    1e7a:	9a a7       	std	Y+42, r25	; 0x2a
    1e7c:	ab a7       	std	Y+43, r26	; 0x2b
    1e7e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e80:	69 a5       	ldd	r22, Y+41	; 0x29
    1e82:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e84:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e86:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	1c f4       	brge	.+6      	; 0x1e9e <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	88 a7       	std	Y+40, r24	; 0x28
    1e9c:	91 c0       	rjmp	.+290    	; 0x1fc0 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1e9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1ea0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	53 e4       	ldi	r21, 0x43	; 67
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	0c f0       	brlt	.+2      	; 0x1eb8 <HLCD_voidSendCmd+0x5b4>
    1eb6:	7b c0       	rjmp	.+246    	; 0x1fae <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1eb8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eba:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a e7       	ldi	r20, 0x7A	; 122
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8c a3       	std	Y+36, r24	; 0x24
    1ed2:	9d a3       	std	Y+37, r25	; 0x25
    1ed4:	ae a3       	std	Y+38, r26	; 0x26
    1ed6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eda:	7d a1       	ldd	r23, Y+37	; 0x25
    1edc:	8e a1       	ldd	r24, Y+38	; 0x26
    1ede:	9f a1       	ldd	r25, Y+39	; 0x27
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	88 a3       	std	Y+32, r24	; 0x20
    1ef2:	99 a3       	std	Y+33, r25	; 0x21
    1ef4:	aa a3       	std	Y+34, r26	; 0x22
    1ef6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ef8:	68 a1       	ldd	r22, Y+32	; 0x20
    1efa:	79 a1       	ldd	r23, Y+33	; 0x21
    1efc:	8a a1       	ldd	r24, Y+34	; 0x22
    1efe:	9b a1       	ldd	r25, Y+35	; 0x23
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9f 8f       	std	Y+31, r25	; 0x1f
    1f16:	8e 8f       	std	Y+30, r24	; 0x1e
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1f1a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f1c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f1e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f20:	9b a1       	ldd	r25, Y+35	; 0x23
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	6c a1       	ldd	r22, Y+36	; 0x24
    1f34:	7d a1       	ldd	r23, Y+37	; 0x25
    1f36:	8e a1       	ldd	r24, Y+38	; 0x26
    1f38:	9f a1       	ldd	r25, Y+39	; 0x27
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9f 8f       	std	Y+31, r25	; 0x1f
    1f58:	8e 8f       	std	Y+30, r24	; 0x1e
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <HLCD_voidSendCmd+0x676>
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9d 8f       	std	Y+29, r25	; 0x1d
    1f62:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f66:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <HLCD_voidSendCmd+0x664>
    1f6c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f6e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9f 8f       	std	Y+31, r25	; 0x1f
    1f78:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f7c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <HLCD_voidSendCmd+0x658>
    1f82:	24 c0       	rjmp	.+72     	; 0x1fcc <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	68 a1       	ldd	r22, Y+32	; 0x20
    1f86:	79 a1       	ldd	r23, Y+33	; 0x21
    1f88:	8a a1       	ldd	r24, Y+34	; 0x22
    1f8a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9f 8f       	std	Y+31, r25	; 0x1f
    1f96:	8e 8f       	std	Y+30, r24	; 0x1e
    1f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f9c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f9e:	8a 8f       	std	Y+26, r24	; 0x1a
    1fa0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fa2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <HLCD_voidSendCmd+0x6a0>
    1fa8:	9b 8f       	std	Y+27, r25	; 0x1b
    1faa:	8a 8f       	std	Y+26, r24	; 0x1a
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fae:	69 a5       	ldd	r22, Y+41	; 0x29
    1fb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	88 a7       	std	Y+40, r24	; 0x28
    1fc0:	88 a5       	ldd	r24, Y+40	; 0x28
    1fc2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fc4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fc6:	8a 95       	dec	r24
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <HLCD_voidSendCmd+0x6c2>
    1fca:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	62 e0       	ldi	r22, 0x02	; 2
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a8 ec       	ldi	r26, 0xC8	; 200
    1fdc:	b2 e4       	ldi	r27, 0x42	; 66
    1fde:	8d 8b       	std	Y+21, r24	; 0x15
    1fe0:	9e 8b       	std	Y+22, r25	; 0x16
    1fe2:	af 8b       	std	Y+23, r26	; 0x17
    1fe4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	2b ea       	ldi	r18, 0xAB	; 171
    1ff0:	3a ea       	ldi	r19, 0xAA	; 170
    1ff2:	4a e2       	ldi	r20, 0x2A	; 42
    1ff4:	50 e4       	ldi	r21, 0x40	; 64
    1ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	89 8b       	std	Y+17, r24	; 0x11
    2000:	9a 8b       	std	Y+18, r25	; 0x12
    2002:	ab 8b       	std	Y+19, r26	; 0x13
    2004:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2006:	69 89       	ldd	r22, Y+17	; 0x11
    2008:	7a 89       	ldd	r23, Y+18	; 0x12
    200a:	8b 89       	ldd	r24, Y+19	; 0x13
    200c:	9c 89       	ldd	r25, Y+20	; 0x14
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	1c f4       	brge	.+6      	; 0x2024 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	88 8b       	std	Y+16, r24	; 0x10
    2022:	91 c0       	rjmp	.+290    	; 0x2146 <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    2024:	69 89       	ldd	r22, Y+17	; 0x11
    2026:	7a 89       	ldd	r23, Y+18	; 0x12
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	53 e4       	ldi	r21, 0x43	; 67
    2034:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	0c f0       	brlt	.+2      	; 0x203e <HLCD_voidSendCmd+0x73a>
    203c:	7b c0       	rjmp	.+246    	; 0x2134 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8c 87       	std	Y+12, r24	; 0x0c
    2058:	9d 87       	std	Y+13, r25	; 0x0d
    205a:	ae 87       	std	Y+14, r26	; 0x0e
    205c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2060:	7d 85       	ldd	r23, Y+13	; 0x0d
    2062:	8e 85       	ldd	r24, Y+14	; 0x0e
    2064:	9f 85       	ldd	r25, Y+15	; 0x0f
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a ef       	ldi	r20, 0xFA	; 250
    206c:	54 e4       	ldi	r21, 0x44	; 68
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	88 87       	std	Y+8, r24	; 0x08
    2078:	99 87       	std	Y+9, r25	; 0x09
    207a:	aa 87       	std	Y+10, r26	; 0x0a
    207c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    207e:	68 85       	ldd	r22, Y+8	; 0x08
    2080:	79 85       	ldd	r23, Y+9	; 0x09
    2082:	8a 85       	ldd	r24, Y+10	; 0x0a
    2084:	9b 85       	ldd	r25, Y+11	; 0x0b
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9f 83       	std	Y+7, r25	; 0x07
    209c:	8e 83       	std	Y+6, r24	; 0x06
    209e:	3f c0       	rjmp	.+126    	; 0x211e <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    20a0:	68 85       	ldd	r22, Y+8	; 0x08
    20a2:	79 85       	ldd	r23, Y+9	; 0x09
    20a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    20bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    20be:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9f 83       	std	Y+7, r25	; 0x07
    20de:	8e 83       	std	Y+6, r24	; 0x06
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <HLCD_voidSendCmd+0x7fc>
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9d 83       	std	Y+5, r25	; 0x05
    20e8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <HLCD_voidSendCmd+0x7ea>
    20f2:	9d 83       	std	Y+5, r25	; 0x05
    20f4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9f 83       	std	Y+7, r25	; 0x07
    20fe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	8e 81       	ldd	r24, Y+6	; 0x06
    2102:	9f 81       	ldd	r25, Y+7	; 0x07
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <HLCD_voidSendCmd+0x7de>
    2108:	24 c0       	rjmp	.+72     	; 0x2152 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	68 85       	ldd	r22, Y+8	; 0x08
    210c:	79 85       	ldd	r23, Y+9	; 0x09
    210e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2110:	9b 85       	ldd	r25, Y+11	; 0x0b
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9f 83       	std	Y+7, r25	; 0x07
    211c:	8e 83       	std	Y+6, r24	; 0x06
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	9b 83       	std	Y+3, r25	; 0x03
    2124:	8a 83       	std	Y+2, r24	; 0x02
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <HLCD_voidSendCmd+0x826>
    212e:	9b 83       	std	Y+3, r25	; 0x03
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2134:	69 89       	ldd	r22, Y+17	; 0x11
    2136:	7a 89       	ldd	r23, Y+18	; 0x12
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	88 8b       	std	Y+16, r24	; 0x10
    2146:	88 89       	ldd	r24, Y+16	; 0x10
    2148:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	8a 95       	dec	r24
    214e:	f1 f7       	brne	.-4      	; 0x214c <HLCD_voidSendCmd+0x848>
    2150:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    2152:	cf 59       	subi	r28, 0x9F	; 159
    2154:	df 4f       	sbci	r29, 0xFF	; 255
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	08 95       	ret

0000216a <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	c1 56       	subi	r28, 0x61	; 97
    2178:	d0 40       	sbci	r29, 0x00	; 0
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	fe 01       	movw	r30, r28
    2186:	ef 59       	subi	r30, 0x9F	; 159
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	42 e0       	ldi	r20, 0x02	; 2
    2192:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    21aa:	fe 01       	movw	r30, r28
    21ac:	ef 59       	subi	r30, 0x9F	; 159
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	82 95       	swap	r24
    21b4:	8f 70       	andi	r24, 0x0F	; 15
    21b6:	81 70       	andi	r24, 0x01	; 1
    21b8:	98 2f       	mov	r25, r24
    21ba:	9f 5f       	subi	r25, 0xFF	; 255
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	64 e0       	ldi	r22, 0x04	; 4
    21c0:	49 2f       	mov	r20, r25
    21c2:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    21c6:	fe 01       	movw	r30, r28
    21c8:	ef 59       	subi	r30, 0x9F	; 159
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	82 95       	swap	r24
    21d0:	86 95       	lsr	r24
    21d2:	87 70       	andi	r24, 0x07	; 7
    21d4:	81 70       	andi	r24, 0x01	; 1
    21d6:	98 2f       	mov	r25, r24
    21d8:	9f 5f       	subi	r25, 0xFF	; 255
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	65 e0       	ldi	r22, 0x05	; 5
    21de:	49 2f       	mov	r20, r25
    21e0:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    21e4:	fe 01       	movw	r30, r28
    21e6:	ef 59       	subi	r30, 0x9F	; 159
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	82 95       	swap	r24
    21ee:	86 95       	lsr	r24
    21f0:	86 95       	lsr	r24
    21f2:	83 70       	andi	r24, 0x03	; 3
    21f4:	81 70       	andi	r24, 0x01	; 1
    21f6:	98 2f       	mov	r25, r24
    21f8:	9f 5f       	subi	r25, 0xFF	; 255
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	66 e0       	ldi	r22, 0x06	; 6
    21fe:	49 2f       	mov	r20, r25
    2200:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    2204:	fe 01       	movw	r30, r28
    2206:	ef 59       	subi	r30, 0x9F	; 159
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	88 1f       	adc	r24, r24
    220e:	88 27       	eor	r24, r24
    2210:	88 1f       	adc	r24, r24
    2212:	98 2f       	mov	r25, r24
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	67 e0       	ldi	r22, 0x07	; 7
    221a:	49 2f       	mov	r20, r25
    221c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	62 e0       	ldi	r22, 0x02	; 2
    2224:	42 e0       	ldi	r20, 0x02	; 2
    2226:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    222a:	fe 01       	movw	r30, r28
    222c:	e3 5a       	subi	r30, 0xA3	; 163
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e2       	ldi	r26, 0x20	; 32
    2236:	b1 e4       	ldi	r27, 0x41	; 65
    2238:	80 83       	st	Z, r24
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	a2 83       	std	Z+2, r26	; 0x02
    223e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2240:	8e 01       	movw	r16, r28
    2242:	07 5a       	subi	r16, 0xA7	; 167
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e3 5a       	subi	r30, 0xA3	; 163
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	2b ea       	ldi	r18, 0xAB	; 171
    2256:	3a ea       	ldi	r19, 0xAA	; 170
    2258:	4a e2       	ldi	r20, 0x2A	; 42
    225a:	50 e4       	ldi	r21, 0x40	; 64
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	80 83       	st	Z, r24
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	a2 83       	std	Z+2, r26	; 0x02
    226c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5a       	subi	r30, 0xA7	; 167
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	34 f4       	brge	.+12     	; 0x2298 <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    228c:	fe 01       	movw	r30, r28
    228e:	e8 5a       	subi	r30, 0xA8	; 168
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
    2296:	e0 c0       	rjmp	.+448    	; 0x2458 <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    2298:	fe 01       	movw	r30, r28
    229a:	e7 5a       	subi	r30, 0xA7	; 167
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	53 e4       	ldi	r21, 0x43	; 67
    22ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	0c f0       	brlt	.+2      	; 0x22b8 <HLCD_voidSendChar+0x14e>
    22b6:	c0 c0       	rjmp	.+384    	; 0x2438 <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    22b8:	fe 01       	movw	r30, r28
    22ba:	e3 5a       	subi	r30, 0xA3	; 163
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	fe 01       	movw	r30, r28
    22d8:	ec 5a       	subi	r30, 0xAC	; 172
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 83       	st	Z, r24
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	a2 83       	std	Z+2, r26	; 0x02
    22e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e4:	8e 01       	movw	r16, r28
    22e6:	00 5b       	subi	r16, 0xB0	; 176
    22e8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ea:	fe 01       	movw	r30, r28
    22ec:	ec 5a       	subi	r30, 0xAC	; 172
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	60 81       	ld	r22, Z
    22f2:	71 81       	ldd	r23, Z+1	; 0x01
    22f4:	82 81       	ldd	r24, Z+2	; 0x02
    22f6:	93 81       	ldd	r25, Z+3	; 0x03
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	f8 01       	movw	r30, r16
    230a:	80 83       	st	Z, r24
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	a2 83       	std	Z+2, r26	; 0x02
    2310:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2312:	fe 01       	movw	r30, r28
    2314:	e0 5b       	subi	r30, 0xB0	; 176
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	44 f4       	brge	.+16     	; 0x2340 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    2330:	fe 01       	movw	r30, r28
    2332:	e2 5b       	subi	r30, 0xB2	; 178
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
    233e:	64 c0       	rjmp	.+200    	; 0x2408 <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    2340:	fe 01       	movw	r30, r28
    2342:	e0 5b       	subi	r30, 0xB0	; 176
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	3f ef       	ldi	r19, 0xFF	; 255
    2352:	4f e7       	ldi	r20, 0x7F	; 127
    2354:	57 e4       	ldi	r21, 0x47	; 71
    2356:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235a:	18 16       	cp	r1, r24
    235c:	0c f0       	brlt	.+2      	; 0x2360 <HLCD_voidSendChar+0x1f6>
    235e:	43 c0       	rjmp	.+134    	; 0x23e6 <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	fe 01       	movw	r30, r28
    2362:	ec 5a       	subi	r30, 0xAC	; 172
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8e 01       	movw	r16, r28
    2380:	02 5b       	subi	r16, 0xB2	; 178
    2382:	1f 4f       	sbci	r17, 0xFF	; 255
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	f8 01       	movw	r30, r16
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    2396:	1f c0       	rjmp	.+62     	; 0x23d6 <HLCD_voidSendChar+0x26c>
    2398:	fe 01       	movw	r30, r28
    239a:	e4 5b       	subi	r30, 0xB4	; 180
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a6:	fe 01       	movw	r30, r28
    23a8:	e4 5b       	subi	r30, 0xB4	; 180
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <HLCD_voidSendChar+0x246>
    23b4:	fe 01       	movw	r30, r28
    23b6:	e4 5b       	subi	r30, 0xB4	; 180
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	de 01       	movw	r26, r28
    23c0:	a2 5b       	subi	r26, 0xB2	; 178
    23c2:	bf 4f       	sbci	r27, 0xFF	; 255
    23c4:	fe 01       	movw	r30, r28
    23c6:	e2 5b       	subi	r30, 0xB2	; 178
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	11 96       	adiw	r26, 0x01	; 1
    23d2:	9c 93       	st	X, r25
    23d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	fe 01       	movw	r30, r28
    23d8:	e2 5b       	subi	r30, 0xB2	; 178
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	d1 f6       	brne	.-76     	; 0x2398 <HLCD_voidSendChar+0x22e>
    23e4:	4b c0       	rjmp	.+150    	; 0x247c <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	8e 01       	movw	r16, r28
    23e8:	02 5b       	subi	r16, 0xB2	; 178
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	fe 01       	movw	r30, r28
    23ee:	e0 5b       	subi	r30, 0xB0	; 176
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	f8 01       	movw	r30, r16
    2404:	91 83       	std	Z+1, r25	; 0x01
    2406:	80 83       	st	Z, r24
    2408:	de 01       	movw	r26, r28
    240a:	a6 5b       	subi	r26, 0xB6	; 182
    240c:	bf 4f       	sbci	r27, 0xFF	; 255
    240e:	fe 01       	movw	r30, r28
    2410:	e2 5b       	subi	r30, 0xB2	; 178
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 81       	ld	r24, Z
    2416:	91 81       	ldd	r25, Z+1	; 0x01
    2418:	11 96       	adiw	r26, 0x01	; 1
    241a:	9c 93       	st	X, r25
    241c:	8e 93       	st	-X, r24
    241e:	fe 01       	movw	r30, r28
    2420:	e6 5b       	subi	r30, 0xB6	; 182
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <HLCD_voidSendChar+0x2be>
    242c:	fe 01       	movw	r30, r28
    242e:	e6 5b       	subi	r30, 0xB6	; 182
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    2436:	22 c0       	rjmp	.+68     	; 0x247c <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2438:	8e 01       	movw	r16, r28
    243a:	08 5a       	subi	r16, 0xA8	; 168
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	e7 5a       	subi	r30, 0xA7	; 167
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	f8 01       	movw	r30, r16
    2456:	80 83       	st	Z, r24
    2458:	de 01       	movw	r26, r28
    245a:	a7 5b       	subi	r26, 0xB7	; 183
    245c:	bf 4f       	sbci	r27, 0xFF	; 255
    245e:	fe 01       	movw	r30, r28
    2460:	e8 5a       	subi	r30, 0xA8	; 168
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2468:	fe 01       	movw	r30, r28
    246a:	e7 5b       	subi	r30, 0xB7	; 183
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 81       	ld	r24, Z
    2470:	8a 95       	dec	r24
    2472:	f1 f7       	brne	.-4      	; 0x2470 <HLCD_voidSendChar+0x306>
    2474:	fe 01       	movw	r30, r28
    2476:	e7 5b       	subi	r30, 0xB7	; 183
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	62 e0       	ldi	r22, 0x02	; 2
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    2486:	fe 01       	movw	r30, r28
    2488:	eb 5b       	subi	r30, 0xBB	; 187
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a8 ec       	ldi	r26, 0xC8	; 200
    2492:	b2 e4       	ldi	r27, 0x42	; 66
    2494:	80 83       	st	Z, r24
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	a2 83       	std	Z+2, r26	; 0x02
    249a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    249c:	8e 01       	movw	r16, r28
    249e:	0f 5b       	subi	r16, 0xBF	; 191
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	fe 01       	movw	r30, r28
    24a4:	eb 5b       	subi	r30, 0xBB	; 187
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	2b ea       	ldi	r18, 0xAB	; 171
    24b2:	3a ea       	ldi	r19, 0xAA	; 170
    24b4:	4a e2       	ldi	r20, 0x2A	; 42
    24b6:	50 e4       	ldi	r21, 0x40	; 64
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	80 83       	st	Z, r24
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	a2 83       	std	Z+2, r26	; 0x02
    24c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ca:	fe 01       	movw	r30, r28
    24cc:	ef 5b       	subi	r30, 0xBF	; 191
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e8       	ldi	r20, 0x80	; 128
    24de:	5f e3       	ldi	r21, 0x3F	; 63
    24e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e4:	88 23       	and	r24, r24
    24e6:	34 f4       	brge	.+12     	; 0x24f4 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	fe 01       	movw	r30, r28
    24ec:	e0 5c       	subi	r30, 0xC0	; 192
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 83       	st	Z, r24
    24f2:	9d c0       	rjmp	.+314    	; 0x262e <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    24f4:	fe 01       	movw	r30, r28
    24f6:	ef 5b       	subi	r30, 0xBF	; 191
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	93 81       	ldd	r25, Z+3	; 0x03
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	53 e4       	ldi	r21, 0x43	; 67
    250a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	0c f0       	brlt	.+2      	; 0x2514 <HLCD_voidSendChar+0x3aa>
    2512:	7e c0       	rjmp	.+252    	; 0x2610 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    2514:	fe 01       	movw	r30, r28
    2516:	eb 5b       	subi	r30, 0xBB	; 187
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a e7       	ldi	r20, 0x7A	; 122
    2528:	54 e4       	ldi	r21, 0x44	; 68
    252a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8c af       	std	Y+60, r24	; 0x3c
    2534:	9d af       	std	Y+61, r25	; 0x3d
    2536:	ae af       	std	Y+62, r26	; 0x3e
    2538:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6c ad       	ldd	r22, Y+60	; 0x3c
    253c:	7d ad       	ldd	r23, Y+61	; 0x3d
    253e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2540:	9f ad       	ldd	r25, Y+63	; 0x3f
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	88 af       	std	Y+56, r24	; 0x38
    2554:	99 af       	std	Y+57, r25	; 0x39
    2556:	aa af       	std	Y+58, r26	; 0x3a
    2558:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    255a:	68 ad       	ldd	r22, Y+56	; 0x38
    255c:	79 ad       	ldd	r23, Y+57	; 0x39
    255e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2560:	9b ad       	ldd	r25, Y+59	; 0x3b
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <HLCD_voidSendChar+0x412>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9f ab       	std	Y+55, r25	; 0x37
    2578:	8e ab       	std	Y+54, r24	; 0x36
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    257c:	68 ad       	ldd	r22, Y+56	; 0x38
    257e:	79 ad       	ldd	r23, Y+57	; 0x39
    2580:	8a ad       	ldd	r24, Y+58	; 0x3a
    2582:	9b ad       	ldd	r25, Y+59	; 0x3b
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6c ad       	ldd	r22, Y+60	; 0x3c
    2596:	7d ad       	ldd	r23, Y+61	; 0x3d
    2598:	8e ad       	ldd	r24, Y+62	; 0x3e
    259a:	9f ad       	ldd	r25, Y+63	; 0x3f
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9f ab       	std	Y+55, r25	; 0x37
    25ba:	8e ab       	std	Y+54, r24	; 0x36
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <HLCD_voidSendChar+0x472>
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9d ab       	std	Y+53, r25	; 0x35
    25c4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c6:	8c a9       	ldd	r24, Y+52	; 0x34
    25c8:	9d a9       	ldd	r25, Y+53	; 0x35
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <HLCD_voidSendChar+0x460>
    25ce:	9d ab       	std	Y+53, r25	; 0x35
    25d0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8e a9       	ldd	r24, Y+54	; 0x36
    25d4:	9f a9       	ldd	r25, Y+55	; 0x37
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9f ab       	std	Y+55, r25	; 0x37
    25da:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8e a9       	ldd	r24, Y+54	; 0x36
    25de:	9f a9       	ldd	r25, Y+55	; 0x37
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <HLCD_voidSendChar+0x454>
    25e4:	2d c0       	rjmp	.+90     	; 0x2640 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	68 ad       	ldd	r22, Y+56	; 0x38
    25e8:	79 ad       	ldd	r23, Y+57	; 0x39
    25ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ec:	9b ad       	ldd	r25, Y+59	; 0x3b
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9f ab       	std	Y+55, r25	; 0x37
    25f8:	8e ab       	std	Y+54, r24	; 0x36
    25fa:	8e a9       	ldd	r24, Y+54	; 0x36
    25fc:	9f a9       	ldd	r25, Y+55	; 0x37
    25fe:	9b ab       	std	Y+51, r25	; 0x33
    2600:	8a ab       	std	Y+50, r24	; 0x32
    2602:	8a a9       	ldd	r24, Y+50	; 0x32
    2604:	9b a9       	ldd	r25, Y+51	; 0x33
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <HLCD_voidSendChar+0x49c>
    260a:	9b ab       	std	Y+51, r25	; 0x33
    260c:	8a ab       	std	Y+50, r24	; 0x32
    260e:	18 c0       	rjmp	.+48     	; 0x2640 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2610:	fe 01       	movw	r30, r28
    2612:	ef 5b       	subi	r30, 0xBF	; 191
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	fe 01       	movw	r30, r28
    2628:	e0 5c       	subi	r30, 0xC0	; 192
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 83       	st	Z, r24
    262e:	fe 01       	movw	r30, r28
    2630:	e0 5c       	subi	r30, 0xC0	; 192
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2638:	89 a9       	ldd	r24, Y+49	; 0x31
    263a:	8a 95       	dec	r24
    263c:	f1 f7       	brne	.-4      	; 0x263a <HLCD_voidSendChar+0x4d0>
    263e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    2640:	fe 01       	movw	r30, r28
    2642:	ef 59       	subi	r30, 0x9F	; 159
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	81 70       	andi	r24, 0x01	; 1
    264a:	98 2f       	mov	r25, r24
    264c:	9f 5f       	subi	r25, 0xFF	; 255
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	64 e0       	ldi	r22, 0x04	; 4
    2652:	49 2f       	mov	r20, r25
    2654:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    2658:	fe 01       	movw	r30, r28
    265a:	ef 59       	subi	r30, 0x9F	; 159
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	86 95       	lsr	r24
    2662:	81 70       	andi	r24, 0x01	; 1
    2664:	98 2f       	mov	r25, r24
    2666:	9f 5f       	subi	r25, 0xFF	; 255
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	65 e0       	ldi	r22, 0x05	; 5
    266c:	49 2f       	mov	r20, r25
    266e:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    2672:	fe 01       	movw	r30, r28
    2674:	ef 59       	subi	r30, 0x9F	; 159
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	86 95       	lsr	r24
    267c:	86 95       	lsr	r24
    267e:	81 70       	andi	r24, 0x01	; 1
    2680:	98 2f       	mov	r25, r24
    2682:	9f 5f       	subi	r25, 0xFF	; 255
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	66 e0       	ldi	r22, 0x06	; 6
    2688:	49 2f       	mov	r20, r25
    268a:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    268e:	fe 01       	movw	r30, r28
    2690:	ef 59       	subi	r30, 0x9F	; 159
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	86 95       	lsr	r24
    2698:	86 95       	lsr	r24
    269a:	86 95       	lsr	r24
    269c:	81 70       	andi	r24, 0x01	; 1
    269e:	98 2f       	mov	r25, r24
    26a0:	9f 5f       	subi	r25, 0xFF	; 255
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	67 e0       	ldi	r22, 0x07	; 7
    26a6:	49 2f       	mov	r20, r25
    26a8:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	42 e0       	ldi	r20, 0x02	; 2
    26b2:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a0 e2       	ldi	r26, 0x20	; 32
    26bc:	b1 e4       	ldi	r27, 0x41	; 65
    26be:	8d a7       	std	Y+45, r24	; 0x2d
    26c0:	9e a7       	std	Y+46, r25	; 0x2e
    26c2:	af a7       	std	Y+47, r26	; 0x2f
    26c4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    26c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    26ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    26cc:	98 a9       	ldd	r25, Y+48	; 0x30
    26ce:	2b ea       	ldi	r18, 0xAB	; 171
    26d0:	3a ea       	ldi	r19, 0xAA	; 170
    26d2:	4a e2       	ldi	r20, 0x2A	; 42
    26d4:	50 e4       	ldi	r21, 0x40	; 64
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	89 a7       	std	Y+41, r24	; 0x29
    26e0:	9a a7       	std	Y+42, r25	; 0x2a
    26e2:	ab a7       	std	Y+43, r26	; 0x2b
    26e4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26e6:	69 a5       	ldd	r22, Y+41	; 0x29
    26e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    26ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	1c f4       	brge	.+6      	; 0x2704 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	88 a7       	std	Y+40, r24	; 0x28
    2702:	91 c0       	rjmp	.+290    	; 0x2826 <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    2704:	69 a5       	ldd	r22, Y+41	; 0x29
    2706:	7a a5       	ldd	r23, Y+42	; 0x2a
    2708:	8b a5       	ldd	r24, Y+43	; 0x2b
    270a:	9c a5       	ldd	r25, Y+44	; 0x2c
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	53 e4       	ldi	r21, 0x43	; 67
    2714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	0c f0       	brlt	.+2      	; 0x271e <HLCD_voidSendChar+0x5b4>
    271c:	7b c0       	rjmp	.+246    	; 0x2814 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    271e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2720:	7e a5       	ldd	r23, Y+46	; 0x2e
    2722:	8f a5       	ldd	r24, Y+47	; 0x2f
    2724:	98 a9       	ldd	r25, Y+48	; 0x30
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	54 e4       	ldi	r21, 0x44	; 68
    272e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8c a3       	std	Y+36, r24	; 0x24
    2738:	9d a3       	std	Y+37, r25	; 0x25
    273a:	ae a3       	std	Y+38, r26	; 0x26
    273c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6c a1       	ldd	r22, Y+36	; 0x24
    2740:	7d a1       	ldd	r23, Y+37	; 0x25
    2742:	8e a1       	ldd	r24, Y+38	; 0x26
    2744:	9f a1       	ldd	r25, Y+39	; 0x27
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a ef       	ldi	r20, 0xFA	; 250
    274c:	54 e4       	ldi	r21, 0x44	; 68
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	88 a3       	std	Y+32, r24	; 0x20
    2758:	99 a3       	std	Y+33, r25	; 0x21
    275a:	aa a3       	std	Y+34, r26	; 0x22
    275c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    275e:	68 a1       	ldd	r22, Y+32	; 0x20
    2760:	79 a1       	ldd	r23, Y+33	; 0x21
    2762:	8a a1       	ldd	r24, Y+34	; 0x22
    2764:	9b a1       	ldd	r25, Y+35	; 0x23
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9f 8f       	std	Y+31, r25	; 0x1f
    277c:	8e 8f       	std	Y+30, r24	; 0x1e
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    2780:	68 a1       	ldd	r22, Y+32	; 0x20
    2782:	79 a1       	ldd	r23, Y+33	; 0x21
    2784:	8a a1       	ldd	r24, Y+34	; 0x22
    2786:	9b a1       	ldd	r25, Y+35	; 0x23
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	6c a1       	ldd	r22, Y+36	; 0x24
    279a:	7d a1       	ldd	r23, Y+37	; 0x25
    279c:	8e a1       	ldd	r24, Y+38	; 0x26
    279e:	9f a1       	ldd	r25, Y+39	; 0x27
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9f 8f       	std	Y+31, r25	; 0x1f
    27be:	8e 8f       	std	Y+30, r24	; 0x1e
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <HLCD_voidSendChar+0x676>
    27c2:	88 ec       	ldi	r24, 0xC8	; 200
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9d 8f       	std	Y+29, r25	; 0x1d
    27c8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <HLCD_voidSendChar+0x664>
    27d2:	9d 8f       	std	Y+29, r25	; 0x1d
    27d4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9f 8f       	std	Y+31, r25	; 0x1f
    27de:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <HLCD_voidSendChar+0x658>
    27e8:	24 c0       	rjmp	.+72     	; 0x2832 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	68 a1       	ldd	r22, Y+32	; 0x20
    27ec:	79 a1       	ldd	r23, Y+33	; 0x21
    27ee:	8a a1       	ldd	r24, Y+34	; 0x22
    27f0:	9b a1       	ldd	r25, Y+35	; 0x23
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9f 8f       	std	Y+31, r25	; 0x1f
    27fc:	8e 8f       	std	Y+30, r24	; 0x1e
    27fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2800:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2802:	9b 8f       	std	Y+27, r25	; 0x1b
    2804:	8a 8f       	std	Y+26, r24	; 0x1a
    2806:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2808:	9b 8d       	ldd	r25, Y+27	; 0x1b
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <HLCD_voidSendChar+0x6a0>
    280e:	9b 8f       	std	Y+27, r25	; 0x1b
    2810:	8a 8f       	std	Y+26, r24	; 0x1a
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2814:	69 a5       	ldd	r22, Y+41	; 0x29
    2816:	7a a5       	ldd	r23, Y+42	; 0x2a
    2818:	8b a5       	ldd	r24, Y+43	; 0x2b
    281a:	9c a5       	ldd	r25, Y+44	; 0x2c
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	88 a7       	std	Y+40, r24	; 0x28
    2826:	88 a5       	ldd	r24, Y+40	; 0x28
    2828:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    282a:	89 8d       	ldd	r24, Y+25	; 0x19
    282c:	8a 95       	dec	r24
    282e:	f1 f7       	brne	.-4      	; 0x282c <HLCD_voidSendChar+0x6c2>
    2830:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	62 e0       	ldi	r22, 0x02	; 2
    2836:	41 e0       	ldi	r20, 0x01	; 1
    2838:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	a8 ec       	ldi	r26, 0xC8	; 200
    2842:	b2 e4       	ldi	r27, 0x42	; 66
    2844:	8d 8b       	std	Y+21, r24	; 0x15
    2846:	9e 8b       	std	Y+22, r25	; 0x16
    2848:	af 8b       	std	Y+23, r26	; 0x17
    284a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    284c:	6d 89       	ldd	r22, Y+21	; 0x15
    284e:	7e 89       	ldd	r23, Y+22	; 0x16
    2850:	8f 89       	ldd	r24, Y+23	; 0x17
    2852:	98 8d       	ldd	r25, Y+24	; 0x18
    2854:	2b ea       	ldi	r18, 0xAB	; 171
    2856:	3a ea       	ldi	r19, 0xAA	; 170
    2858:	4a e2       	ldi	r20, 0x2A	; 42
    285a:	50 e4       	ldi	r21, 0x40	; 64
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	89 8b       	std	Y+17, r24	; 0x11
    2866:	9a 8b       	std	Y+18, r25	; 0x12
    2868:	ab 8b       	std	Y+19, r26	; 0x13
    286a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    286c:	69 89       	ldd	r22, Y+17	; 0x11
    286e:	7a 89       	ldd	r23, Y+18	; 0x12
    2870:	8b 89       	ldd	r24, Y+19	; 0x13
    2872:	9c 89       	ldd	r25, Y+20	; 0x14
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	1c f4       	brge	.+6      	; 0x288a <HLCD_voidSendChar+0x720>
		__ticks = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	88 8b       	std	Y+16, r24	; 0x10
    2888:	91 c0       	rjmp	.+290    	; 0x29ac <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    288a:	69 89       	ldd	r22, Y+17	; 0x11
    288c:	7a 89       	ldd	r23, Y+18	; 0x12
    288e:	8b 89       	ldd	r24, Y+19	; 0x13
    2890:	9c 89       	ldd	r25, Y+20	; 0x14
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	53 e4       	ldi	r21, 0x43	; 67
    289a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	0c f0       	brlt	.+2      	; 0x28a4 <HLCD_voidSendChar+0x73a>
    28a2:	7b c0       	rjmp	.+246    	; 0x299a <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	4a e7       	ldi	r20, 0x7A	; 122
    28b2:	54 e4       	ldi	r21, 0x44	; 68
    28b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	8c 87       	std	Y+12, r24	; 0x0c
    28be:	9d 87       	std	Y+13, r25	; 0x0d
    28c0:	ae 87       	std	Y+14, r26	; 0x0e
    28c2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    28c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    28c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	88 87       	std	Y+8, r24	; 0x08
    28de:	99 87       	std	Y+9, r25	; 0x09
    28e0:	aa 87       	std	Y+10, r26	; 0x0a
    28e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28e4:	68 85       	ldd	r22, Y+8	; 0x08
    28e6:	79 85       	ldd	r23, Y+9	; 0x09
    28e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    2906:	68 85       	ldd	r22, Y+8	; 0x08
    2908:	79 85       	ldd	r23, Y+9	; 0x09
    290a:	8a 85       	ldd	r24, Y+10	; 0x0a
    290c:	9b 85       	ldd	r25, Y+11	; 0x0b
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2920:	7d 85       	ldd	r23, Y+13	; 0x0d
    2922:	8e 85       	ldd	r24, Y+14	; 0x0e
    2924:	9f 85       	ldd	r25, Y+15	; 0x0f
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9f 83       	std	Y+7, r25	; 0x07
    2944:	8e 83       	std	Y+6, r24	; 0x06
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <HLCD_voidSendChar+0x7fc>
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9d 83       	std	Y+5, r25	; 0x05
    294e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2950:	8c 81       	ldd	r24, Y+4	; 0x04
    2952:	9d 81       	ldd	r25, Y+5	; 0x05
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <HLCD_voidSendChar+0x7ea>
    2958:	9d 83       	std	Y+5, r25	; 0x05
    295a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	8e 81       	ldd	r24, Y+6	; 0x06
    295e:	9f 81       	ldd	r25, Y+7	; 0x07
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9f 83       	std	Y+7, r25	; 0x07
    2964:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	8e 81       	ldd	r24, Y+6	; 0x06
    2968:	9f 81       	ldd	r25, Y+7	; 0x07
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <HLCD_voidSendChar+0x7de>
    296e:	24 c0       	rjmp	.+72     	; 0x29b8 <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	68 85       	ldd	r22, Y+8	; 0x08
    2972:	79 85       	ldd	r23, Y+9	; 0x09
    2974:	8a 85       	ldd	r24, Y+10	; 0x0a
    2976:	9b 85       	ldd	r25, Y+11	; 0x0b
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9f 83       	std	Y+7, r25	; 0x07
    2982:	8e 83       	std	Y+6, r24	; 0x06
    2984:	8e 81       	ldd	r24, Y+6	; 0x06
    2986:	9f 81       	ldd	r25, Y+7	; 0x07
    2988:	9b 83       	std	Y+3, r25	; 0x03
    298a:	8a 83       	std	Y+2, r24	; 0x02
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <HLCD_voidSendChar+0x826>
    2994:	9b 83       	std	Y+3, r25	; 0x03
    2996:	8a 83       	std	Y+2, r24	; 0x02
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    299a:	69 89       	ldd	r22, Y+17	; 0x11
    299c:	7a 89       	ldd	r23, Y+18	; 0x12
    299e:	8b 89       	ldd	r24, Y+19	; 0x13
    29a0:	9c 89       	ldd	r25, Y+20	; 0x14
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	88 8b       	std	Y+16, r24	; 0x10
    29ac:	88 89       	ldd	r24, Y+16	; 0x10
    29ae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	8a 95       	dec	r24
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <HLCD_voidSendChar+0x848>
    29b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    29b8:	cf 59       	subi	r28, 0x9F	; 159
    29ba:	df 4f       	sbci	r29, 0xFF	; 255
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	08 95       	ret

000029d0 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	29 97       	sbiw	r28, 0x09	; 9
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	99 87       	std	Y+9, r25	; 0x09
    29e6:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    29e8:	88 85       	ldd	r24, Y+8	; 0x08
    29ea:	99 85       	ldd	r25, Y+9	; 0x09
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	21 f4       	brne	.+8      	; 0x29f8 <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    29f0:	80 e3       	ldi	r24, 0x30	; 48
    29f2:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
    29f6:	3d c0       	rjmp	.+122    	; 0x2a72 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	20 c0       	rjmp	.+64     	; 0x2a3c <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	e8 2f       	mov	r30, r24
    2a00:	ff 27       	eor	r31, r31
    2a02:	e7 fd       	sbrc	r30, 7
    2a04:	f0 95       	com	r31
    2a06:	88 85       	ldd	r24, Y+8	; 0x08
    2a08:	99 85       	ldd	r25, Y+9	; 0x09
    2a0a:	2a e0       	ldi	r18, 0x0A	; 10
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	b9 01       	movw	r22, r18
    2a10:	0e 94 43 23 	call	0x4686	; 0x4686 <__udivmodhi4>
    2a14:	28 2f       	mov	r18, r24
    2a16:	20 5d       	subi	r18, 0xD0	; 208
    2a18:	ce 01       	movw	r24, r28
    2a1a:	02 96       	adiw	r24, 0x02	; 2
    2a1c:	e8 0f       	add	r30, r24
    2a1e:	f9 1f       	adc	r31, r25
    2a20:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    2a22:	88 85       	ldd	r24, Y+8	; 0x08
    2a24:	99 85       	ldd	r25, Y+9	; 0x09
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	b9 01       	movw	r22, r18
    2a2c:	0e 94 43 23 	call	0x4686	; 0x4686 <__udivmodhi4>
    2a30:	cb 01       	movw	r24, r22
    2a32:	99 87       	std	Y+9, r25	; 0x09
    2a34:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	8f 5f       	subi	r24, 0xFF	; 255
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	88 85       	ldd	r24, Y+8	; 0x08
    2a3e:	99 85       	ldd	r25, Y+9	; 0x09
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	e1 f6       	brne	.-72     	; 0x29fc <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	10 c0       	rjmp	.+32     	; 0x2a6c <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	28 2f       	mov	r18, r24
    2a50:	33 27       	eor	r19, r19
    2a52:	27 fd       	sbrc	r18, 7
    2a54:	30 95       	com	r19
    2a56:	ce 01       	movw	r24, r28
    2a58:	02 96       	adiw	r24, 0x02	; 2
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
			L_s8Iterator--;
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	81 50       	subi	r24, 0x01	; 1
    2a6a:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    2a72:	29 96       	adiw	r28, 0x09	; 9
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <HLCD_voidSendString+0x6>
    2a8a:	0f 92       	push	r0
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9b 83       	std	Y+3, r25	; 0x03
    2a92:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	d1 f0       	breq	.+52     	; 0x2ad0 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    2a9c:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	e2 0f       	add	r30, r18
    2aac:	f3 1f       	adc	r31, r19
    2aae:	80 81       	ld	r24, Z
    2ab0:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
			L_u8Iterator++;
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	e2 0f       	add	r30, r18
    2ac8:	f3 1f       	adc	r31, r19
    2aca:	80 81       	ld	r24, Z
    2acc:	88 23       	and	r24, r24
    2ace:	39 f7       	brne	.-50     	; 0x2a9e <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	61 97       	sbiw	r28, 0x11	; 17
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	88 8b       	std	Y+16, r24	; 0x10
    2af2:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    2af4:	88 89       	ldd	r24, Y+16	; 0x10
    2af6:	98 2f       	mov	r25, r24
    2af8:	92 95       	swap	r25
    2afa:	99 0f       	add	r25, r25
    2afc:	99 0f       	add	r25, r25
    2afe:	90 7c       	andi	r25, 0xC0	; 192
    2b00:	89 89       	ldd	r24, Y+17	; 0x11
    2b02:	89 2b       	or	r24, r25
    2b04:	80 68       	ori	r24, 0x80	; 128
    2b06:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    2b08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0a:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e8       	ldi	r26, 0x80	; 128
    2b14:	bf e3       	ldi	r27, 0x3F	; 63
    2b16:	8b 87       	std	Y+11, r24	; 0x0b
    2b18:	9c 87       	std	Y+12, r25	; 0x0c
    2b1a:	ad 87       	std	Y+13, r26	; 0x0d
    2b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a ef       	ldi	r20, 0xFA	; 250
    2b2c:	54 e4       	ldi	r21, 0x44	; 68
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8f 83       	std	Y+7, r24	; 0x07
    2b38:	98 87       	std	Y+8, r25	; 0x08
    2b3a:	a9 87       	std	Y+9, r26	; 0x09
    2b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e 83       	std	Y+6, r25	; 0x06
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	3f c0       	rjmp	.+126    	; 0x2bde <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	4c f5       	brge	.+82     	; 0x2bca <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	0f c0       	rjmp	.+30     	; 0x2bc0 <HLCD_voidSetCur+0xe4>
    2ba2:	88 ec       	ldi	r24, 0xC8	; 200
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <HLCD_voidSetCur+0xd2>
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	69 f7       	brne	.-38     	; 0x2ba2 <HLCD_voidSetCur+0xc6>
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	9e 81       	ldd	r25, Y+6	; 0x06
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <HLCD_voidSetCur+0x10e>
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2bf2:	61 96       	adiw	r28, 0x11	; 17
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a0 e8       	ldi	r26, 0x80	; 128
    2c24:	bf e3       	ldi	r27, 0x3F	; 63
    2c26:	8b 87       	std	Y+11, r24	; 0x0b
    2c28:	9c 87       	std	Y+12, r25	; 0x0c
    2c2a:	ad 87       	std	Y+13, r26	; 0x0d
    2c2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a ef       	ldi	r20, 0xFA	; 250
    2c3c:	54 e4       	ldi	r21, 0x44	; 68
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8f 83       	std	Y+7, r24	; 0x07
    2c48:	98 87       	std	Y+8, r25	; 0x08
    2c4a:	a9 87       	std	Y+9, r26	; 0x09
    2c4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c50:	78 85       	ldd	r23, Y+8	; 0x08
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9e 83       	std	Y+6, r25	; 0x06
    2c6c:	8d 83       	std	Y+5, r24	; 0x05
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <HLCD_voidClear+0xcc>
    2cb2:	88 ec       	ldi	r24, 0xC8	; 200
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9c 83       	std	Y+4, r25	; 0x04
    2cb8:	8b 83       	std	Y+3, r24	; 0x03
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <HLCD_voidClear+0xba>
    2cc2:	9c 83       	std	Y+4, r25	; 0x04
    2cc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <HLCD_voidClear+0xae>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9e 83       	std	Y+6, r25	; 0x06
    2cec:	8d 83       	std	Y+5, r24	; 0x05
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	9a 83       	std	Y+2, r25	; 0x02
    2cf4:	89 83       	std	Y+1, r24	; 0x01
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
    2cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <HLCD_voidClear+0xf6>
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2d02:	2e 96       	adiw	r28, 0x0e	; 14
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <MDIO_stderrSetPortDirection+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <MDIO_stderrSetPortDirection+0x8>
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2d26:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	3d 83       	std	Y+5, r19	; 0x05
    2d30:	2c 83       	std	Y+4, r18	; 0x04
    2d32:	8c 81       	ldd	r24, Y+4	; 0x04
    2d34:	9d 81       	ldd	r25, Y+5	; 0x05
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	91 05       	cpc	r25, r1
    2d3a:	d9 f0       	breq	.+54     	; 0x2d72 <MDIO_stderrSetPortDirection+0x5e>
    2d3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d40:	23 30       	cpi	r18, 0x03	; 3
    2d42:	31 05       	cpc	r19, r1
    2d44:	34 f4       	brge	.+12     	; 0x2d52 <MDIO_stderrSetPortDirection+0x3e>
    2d46:	8c 81       	ldd	r24, Y+4	; 0x04
    2d48:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	61 f0       	breq	.+24     	; 0x2d68 <MDIO_stderrSetPortDirection+0x54>
    2d50:	1f c0       	rjmp	.+62     	; 0x2d90 <MDIO_stderrSetPortDirection+0x7c>
    2d52:	2c 81       	ldd	r18, Y+4	; 0x04
    2d54:	3d 81       	ldd	r19, Y+5	; 0x05
    2d56:	23 30       	cpi	r18, 0x03	; 3
    2d58:	31 05       	cpc	r19, r1
    2d5a:	81 f0       	breq	.+32     	; 0x2d7c <MDIO_stderrSetPortDirection+0x68>
    2d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d60:	84 30       	cpi	r24, 0x04	; 4
    2d62:	91 05       	cpc	r25, r1
    2d64:	81 f0       	breq	.+32     	; 0x2d86 <MDIO_stderrSetPortDirection+0x72>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2d68:	e9 e3       	ldi	r30, 0x39	; 57
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	81 83       	std	Z+1, r24	; 0x01
    2d70:	11 c0       	rjmp	.+34     	; 0x2d94 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2d72:	e6 e3       	ldi	r30, 0x36	; 54
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	81 83       	std	Z+1, r24	; 0x01
    2d7a:	0c c0       	rjmp	.+24     	; 0x2d94 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2d7c:	e3 e3       	ldi	r30, 0x33	; 51
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	81 83       	std	Z+1, r24	; 0x01
    2d84:	07 c0       	rjmp	.+14     	; 0x2d94 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2d86:	e0 e3       	ldi	r30, 0x30	; 48
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	81 83       	std	Z+1, r24	; 0x01
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <MDIO_stderrSetPortValue+0x6>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <MDIO_stderrSetPortValue+0x8>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2db8:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2dba:	8a 81       	ldd	r24, Y+2	; 0x02
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	3d 83       	std	Y+5, r19	; 0x05
    2dc2:	2c 83       	std	Y+4, r18	; 0x04
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	91 05       	cpc	r25, r1
    2dcc:	d9 f0       	breq	.+54     	; 0x2e04 <MDIO_stderrSetPortValue+0x5e>
    2dce:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd0:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd2:	23 30       	cpi	r18, 0x03	; 3
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	34 f4       	brge	.+12     	; 0x2de4 <MDIO_stderrSetPortValue+0x3e>
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	81 30       	cpi	r24, 0x01	; 1
    2dde:	91 05       	cpc	r25, r1
    2de0:	61 f0       	breq	.+24     	; 0x2dfa <MDIO_stderrSetPortValue+0x54>
    2de2:	1f c0       	rjmp	.+62     	; 0x2e22 <MDIO_stderrSetPortValue+0x7c>
    2de4:	2c 81       	ldd	r18, Y+4	; 0x04
    2de6:	3d 81       	ldd	r19, Y+5	; 0x05
    2de8:	23 30       	cpi	r18, 0x03	; 3
    2dea:	31 05       	cpc	r19, r1
    2dec:	81 f0       	breq	.+32     	; 0x2e0e <MDIO_stderrSetPortValue+0x68>
    2dee:	8c 81       	ldd	r24, Y+4	; 0x04
    2df0:	9d 81       	ldd	r25, Y+5	; 0x05
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	91 05       	cpc	r25, r1
    2df6:	81 f0       	breq	.+32     	; 0x2e18 <MDIO_stderrSetPortValue+0x72>
    2df8:	14 c0       	rjmp	.+40     	; 0x2e22 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2dfa:	e9 e3       	ldi	r30, 0x39	; 57
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	82 83       	std	Z+2, r24	; 0x02
    2e02:	11 c0       	rjmp	.+34     	; 0x2e26 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2e04:	e6 e3       	ldi	r30, 0x36	; 54
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	82 83       	std	Z+2, r24	; 0x02
    2e0c:	0c c0       	rjmp	.+24     	; 0x2e26 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2e0e:	e3 e3       	ldi	r30, 0x33	; 51
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	82 83       	std	Z+2, r24	; 0x02
    2e16:	07 c0       	rjmp	.+14     	; 0x2e26 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2e18:	e0 e3       	ldi	r30, 0x30	; 48
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	82 83       	std	Z+2, r24	; 0x02
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <MDIO_stderrGetPortValue+0x6>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <MDIO_stderrGetPortValue+0x8>
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <MDIO_stderrGetPortValue+0xa>
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	8a 83       	std	Y+2, r24	; 0x02
    2e4a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2e4c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	3e 83       	std	Y+6, r19	; 0x06
    2e56:	2d 83       	std	Y+5, r18	; 0x05
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	82 30       	cpi	r24, 0x02	; 2
    2e5e:	91 05       	cpc	r25, r1
    2e60:	e9 f0       	breq	.+58     	; 0x2e9c <MDIO_stderrGetPortValue+0x64>
    2e62:	2d 81       	ldd	r18, Y+5	; 0x05
    2e64:	3e 81       	ldd	r19, Y+6	; 0x06
    2e66:	23 30       	cpi	r18, 0x03	; 3
    2e68:	31 05       	cpc	r19, r1
    2e6a:	34 f4       	brge	.+12     	; 0x2e78 <MDIO_stderrGetPortValue+0x40>
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	91 05       	cpc	r25, r1
    2e74:	61 f0       	breq	.+24     	; 0x2e8e <MDIO_stderrGetPortValue+0x56>
    2e76:	27 c0       	rjmp	.+78     	; 0x2ec6 <MDIO_stderrGetPortValue+0x8e>
    2e78:	2d 81       	ldd	r18, Y+5	; 0x05
    2e7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e7c:	23 30       	cpi	r18, 0x03	; 3
    2e7e:	31 05       	cpc	r19, r1
    2e80:	a1 f0       	breq	.+40     	; 0x2eaa <MDIO_stderrGetPortValue+0x72>
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	84 30       	cpi	r24, 0x04	; 4
    2e88:	91 05       	cpc	r25, r1
    2e8a:	b1 f0       	breq	.+44     	; 0x2eb8 <MDIO_stderrGetPortValue+0x80>
    2e8c:	1c c0       	rjmp	.+56     	; 0x2ec6 <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2e8e:	e9 e3       	ldi	r30, 0x39	; 57
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	ea 81       	ldd	r30, Y+2	; 0x02
    2e96:	fb 81       	ldd	r31, Y+3	; 0x03
    2e98:	80 83       	st	Z, r24
    2e9a:	17 c0       	rjmp	.+46     	; 0x2eca <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2e9c:	e6 e3       	ldi	r30, 0x36	; 54
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea6:	80 83       	st	Z, r24
    2ea8:	10 c0       	rjmp	.+32     	; 0x2eca <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2eaa:	e3 e3       	ldi	r30, 0x33	; 51
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb4:	80 83       	st	Z, r24
    2eb6:	09 c0       	rjmp	.+18     	; 0x2eca <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2eb8:	e0 e3       	ldi	r30, 0x30	; 48
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    2ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ec2:	80 83       	st	Z, r24
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ecc:	26 96       	adiw	r28, 0x06	; 6
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	2a 97       	sbiw	r28, 0x0a	; 10
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	8a 83       	std	Y+2, r24	; 0x02
    2ef4:	6b 83       	std	Y+3, r22	; 0x03
    2ef6:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2ef8:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2efa:	8b 81       	ldd	r24, Y+3	; 0x03
    2efc:	88 30       	cpi	r24, 0x08	; 8
    2efe:	08 f0       	brcs	.+2      	; 0x2f02 <MDIO_stderrSetPinDirection+0x24>
    2f00:	d9 c1       	rjmp	.+946    	; 0x32b4 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <MDIO_stderrSetPinDirection+0x2c>
    2f08:	7c c0       	rjmp	.+248    	; 0x3002 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	3a 87       	std	Y+10, r19	; 0x0a
    2f12:	29 87       	std	Y+9, r18	; 0x09
    2f14:	89 85       	ldd	r24, Y+9	; 0x09
    2f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f18:	82 30       	cpi	r24, 0x02	; 2
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	69 f1       	breq	.+90     	; 0x2f78 <MDIO_stderrSetPinDirection+0x9a>
    2f1e:	29 85       	ldd	r18, Y+9	; 0x09
    2f20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f22:	23 30       	cpi	r18, 0x03	; 3
    2f24:	31 05       	cpc	r19, r1
    2f26:	34 f4       	brge	.+12     	; 0x2f34 <MDIO_stderrSetPinDirection+0x56>
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	91 05       	cpc	r25, r1
    2f30:	69 f0       	breq	.+26     	; 0x2f4c <MDIO_stderrSetPinDirection+0x6e>
    2f32:	64 c0       	rjmp	.+200    	; 0x2ffc <MDIO_stderrSetPinDirection+0x11e>
    2f34:	29 85       	ldd	r18, Y+9	; 0x09
    2f36:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f38:	23 30       	cpi	r18, 0x03	; 3
    2f3a:	31 05       	cpc	r19, r1
    2f3c:	99 f1       	breq	.+102    	; 0x2fa4 <MDIO_stderrSetPinDirection+0xc6>
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	84 30       	cpi	r24, 0x04	; 4
    2f44:	91 05       	cpc	r25, r1
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <MDIO_stderrSetPinDirection+0x6c>
    2f48:	43 c0       	rjmp	.+134    	; 0x2fd0 <MDIO_stderrSetPinDirection+0xf2>
    2f4a:	58 c0       	rjmp	.+176    	; 0x2ffc <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2f4c:	a9 e3       	ldi	r26, 0x39	; 57
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e9 e3       	ldi	r30, 0x39	; 57
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	81 81       	ldd	r24, Z+1	; 0x01
    2f56:	48 2f       	mov	r20, r24
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	02 2e       	mov	r0, r18
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <MDIO_stderrSetPinDirection+0x8c>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	0a 94       	dec	r0
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <MDIO_stderrSetPinDirection+0x88>
    2f6e:	84 2b       	or	r24, r20
    2f70:	11 96       	adiw	r26, 0x01	; 1
    2f72:	8c 93       	st	X, r24
    2f74:	11 97       	sbiw	r26, 0x01	; 1
    2f76:	a0 c1       	rjmp	.+832    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2f78:	a6 e3       	ldi	r26, 0x36	; 54
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	e6 e3       	ldi	r30, 0x36	; 54
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	81 81       	ldd	r24, Z+1	; 0x01
    2f82:	48 2f       	mov	r20, r24
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	02 2e       	mov	r0, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <MDIO_stderrSetPinDirection+0xb8>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	0a 94       	dec	r0
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <MDIO_stderrSetPinDirection+0xb4>
    2f9a:	84 2b       	or	r24, r20
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	8c 93       	st	X, r24
    2fa0:	11 97       	sbiw	r26, 0x01	; 1
    2fa2:	8a c1       	rjmp	.+788    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2fa4:	a3 e3       	ldi	r26, 0x33	; 51
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e3 e3       	ldi	r30, 0x33	; 51
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	81 81       	ldd	r24, Z+1	; 0x01
    2fae:	48 2f       	mov	r20, r24
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	02 2e       	mov	r0, r18
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <MDIO_stderrSetPinDirection+0xe4>
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	0a 94       	dec	r0
    2fc4:	e2 f7       	brpl	.-8      	; 0x2fbe <MDIO_stderrSetPinDirection+0xe0>
    2fc6:	84 2b       	or	r24, r20
    2fc8:	11 96       	adiw	r26, 0x01	; 1
    2fca:	8c 93       	st	X, r24
    2fcc:	11 97       	sbiw	r26, 0x01	; 1
    2fce:	74 c1       	rjmp	.+744    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    2fd0:	a0 e3       	ldi	r26, 0x30	; 48
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e0 e3       	ldi	r30, 0x30	; 48
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	81 81       	ldd	r24, Z+1	; 0x01
    2fda:	48 2f       	mov	r20, r24
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	02 2e       	mov	r0, r18
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <MDIO_stderrSetPinDirection+0x110>
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	0a 94       	dec	r0
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <MDIO_stderrSetPinDirection+0x10c>
    2ff2:	84 2b       	or	r24, r20
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	8c 93       	st	X, r24
    2ff8:	11 97       	sbiw	r26, 0x01	; 1
    2ffa:	5e c1       	rjmp	.+700    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    3000:	5b c1       	rjmp	.+694    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	09 f0       	breq	.+2      	; 0x300a <MDIO_stderrSetPinDirection+0x12c>
    3008:	80 c0       	rjmp	.+256    	; 0x310a <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	38 87       	std	Y+8, r19	; 0x08
    3012:	2f 83       	std	Y+7, r18	; 0x07
    3014:	8f 81       	ldd	r24, Y+7	; 0x07
    3016:	98 85       	ldd	r25, Y+8	; 0x08
    3018:	82 30       	cpi	r24, 0x02	; 2
    301a:	91 05       	cpc	r25, r1
    301c:	71 f1       	breq	.+92     	; 0x307a <MDIO_stderrSetPinDirection+0x19c>
    301e:	2f 81       	ldd	r18, Y+7	; 0x07
    3020:	38 85       	ldd	r19, Y+8	; 0x08
    3022:	23 30       	cpi	r18, 0x03	; 3
    3024:	31 05       	cpc	r19, r1
    3026:	34 f4       	brge	.+12     	; 0x3034 <MDIO_stderrSetPinDirection+0x156>
    3028:	8f 81       	ldd	r24, Y+7	; 0x07
    302a:	98 85       	ldd	r25, Y+8	; 0x08
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	91 05       	cpc	r25, r1
    3030:	69 f0       	breq	.+26     	; 0x304c <MDIO_stderrSetPinDirection+0x16e>
    3032:	68 c0       	rjmp	.+208    	; 0x3104 <MDIO_stderrSetPinDirection+0x226>
    3034:	2f 81       	ldd	r18, Y+7	; 0x07
    3036:	38 85       	ldd	r19, Y+8	; 0x08
    3038:	23 30       	cpi	r18, 0x03	; 3
    303a:	31 05       	cpc	r19, r1
    303c:	a9 f1       	breq	.+106    	; 0x30a8 <MDIO_stderrSetPinDirection+0x1ca>
    303e:	8f 81       	ldd	r24, Y+7	; 0x07
    3040:	98 85       	ldd	r25, Y+8	; 0x08
    3042:	84 30       	cpi	r24, 0x04	; 4
    3044:	91 05       	cpc	r25, r1
    3046:	09 f4       	brne	.+2      	; 0x304a <MDIO_stderrSetPinDirection+0x16c>
    3048:	46 c0       	rjmp	.+140    	; 0x30d6 <MDIO_stderrSetPinDirection+0x1f8>
    304a:	5c c0       	rjmp	.+184    	; 0x3104 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    304c:	a9 e3       	ldi	r26, 0x39	; 57
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e9 e3       	ldi	r30, 0x39	; 57
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	81 81       	ldd	r24, Z+1	; 0x01
    3056:	48 2f       	mov	r20, r24
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	02 2e       	mov	r0, r18
    3064:	02 c0       	rjmp	.+4      	; 0x306a <MDIO_stderrSetPinDirection+0x18c>
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	0a 94       	dec	r0
    306c:	e2 f7       	brpl	.-8      	; 0x3066 <MDIO_stderrSetPinDirection+0x188>
    306e:	80 95       	com	r24
    3070:	84 23       	and	r24, r20
    3072:	11 96       	adiw	r26, 0x01	; 1
    3074:	8c 93       	st	X, r24
    3076:	11 97       	sbiw	r26, 0x01	; 1
    3078:	1f c1       	rjmp	.+574    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    307a:	a6 e3       	ldi	r26, 0x36	; 54
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e6 e3       	ldi	r30, 0x36	; 54
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	81 81       	ldd	r24, Z+1	; 0x01
    3084:	48 2f       	mov	r20, r24
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 2e       	mov	r0, r18
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <MDIO_stderrSetPinDirection+0x1ba>
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <MDIO_stderrSetPinDirection+0x1b6>
    309c:	80 95       	com	r24
    309e:	84 23       	and	r24, r20
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	8c 93       	st	X, r24
    30a4:	11 97       	sbiw	r26, 0x01	; 1
    30a6:	08 c1       	rjmp	.+528    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    30a8:	a3 e3       	ldi	r26, 0x33	; 51
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e3 e3       	ldi	r30, 0x33	; 51
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	81 81       	ldd	r24, Z+1	; 0x01
    30b2:	48 2f       	mov	r20, r24
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	02 2e       	mov	r0, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <MDIO_stderrSetPinDirection+0x1e8>
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	0a 94       	dec	r0
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <MDIO_stderrSetPinDirection+0x1e4>
    30ca:	80 95       	com	r24
    30cc:	84 23       	and	r24, r20
    30ce:	11 96       	adiw	r26, 0x01	; 1
    30d0:	8c 93       	st	X, r24
    30d2:	11 97       	sbiw	r26, 0x01	; 1
    30d4:	f1 c0       	rjmp	.+482    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    30d6:	a0 e3       	ldi	r26, 0x30	; 48
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e0 e3       	ldi	r30, 0x30	; 48
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	81 81       	ldd	r24, Z+1	; 0x01
    30e0:	48 2f       	mov	r20, r24
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	02 2e       	mov	r0, r18
    30ee:	02 c0       	rjmp	.+4      	; 0x30f4 <MDIO_stderrSetPinDirection+0x216>
    30f0:	88 0f       	add	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	0a 94       	dec	r0
    30f6:	e2 f7       	brpl	.-8      	; 0x30f0 <MDIO_stderrSetPinDirection+0x212>
    30f8:	80 95       	com	r24
    30fa:	84 23       	and	r24, r20
    30fc:	11 96       	adiw	r26, 0x01	; 1
    30fe:	8c 93       	st	X, r24
    3100:	11 97       	sbiw	r26, 0x01	; 1
    3102:	da c0       	rjmp	.+436    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	d7 c0       	rjmp	.+430    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    310a:	8c 81       	ldd	r24, Y+4	; 0x04
    310c:	83 30       	cpi	r24, 0x03	; 3
    310e:	09 f0       	breq	.+2      	; 0x3112 <MDIO_stderrSetPinDirection+0x234>
    3110:	ce c0       	rjmp	.+412    	; 0x32ae <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	3e 83       	std	Y+6, r19	; 0x06
    311a:	2d 83       	std	Y+5, r18	; 0x05
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	9e 81       	ldd	r25, Y+6	; 0x06
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	91 05       	cpc	r25, r1
    3124:	09 f4       	brne	.+2      	; 0x3128 <MDIO_stderrSetPinDirection+0x24a>
    3126:	42 c0       	rjmp	.+132    	; 0x31ac <MDIO_stderrSetPinDirection+0x2ce>
    3128:	2d 81       	ldd	r18, Y+5	; 0x05
    312a:	3e 81       	ldd	r19, Y+6	; 0x06
    312c:	23 30       	cpi	r18, 0x03	; 3
    312e:	31 05       	cpc	r19, r1
    3130:	34 f4       	brge	.+12     	; 0x313e <MDIO_stderrSetPinDirection+0x260>
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	81 30       	cpi	r24, 0x01	; 1
    3138:	91 05       	cpc	r25, r1
    313a:	71 f0       	breq	.+28     	; 0x3158 <MDIO_stderrSetPinDirection+0x27a>
    313c:	b5 c0       	rjmp	.+362    	; 0x32a8 <MDIO_stderrSetPinDirection+0x3ca>
    313e:	2d 81       	ldd	r18, Y+5	; 0x05
    3140:	3e 81       	ldd	r19, Y+6	; 0x06
    3142:	23 30       	cpi	r18, 0x03	; 3
    3144:	31 05       	cpc	r19, r1
    3146:	09 f4       	brne	.+2      	; 0x314a <MDIO_stderrSetPinDirection+0x26c>
    3148:	5b c0       	rjmp	.+182    	; 0x3200 <MDIO_stderrSetPinDirection+0x322>
    314a:	8d 81       	ldd	r24, Y+5	; 0x05
    314c:	9e 81       	ldd	r25, Y+6	; 0x06
    314e:	84 30       	cpi	r24, 0x04	; 4
    3150:	91 05       	cpc	r25, r1
    3152:	09 f4       	brne	.+2      	; 0x3156 <MDIO_stderrSetPinDirection+0x278>
    3154:	7f c0       	rjmp	.+254    	; 0x3254 <MDIO_stderrSetPinDirection+0x376>
    3156:	a8 c0       	rjmp	.+336    	; 0x32a8 <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3158:	a9 e3       	ldi	r26, 0x39	; 57
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e9 e3       	ldi	r30, 0x39	; 57
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	81 81       	ldd	r24, Z+1	; 0x01
    3162:	48 2f       	mov	r20, r24
    3164:	8b 81       	ldd	r24, Y+3	; 0x03
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <MDIO_stderrSetPinDirection+0x296>
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	2a 95       	dec	r18
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <MDIO_stderrSetPinDirection+0x292>
    3178:	80 95       	com	r24
    317a:	84 23       	and	r24, r20
    317c:	11 96       	adiw	r26, 0x01	; 1
    317e:	8c 93       	st	X, r24
    3180:	a9 e3       	ldi	r26, 0x39	; 57
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e9 e3       	ldi	r30, 0x39	; 57
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	48 2f       	mov	r20, r24
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	02 2e       	mov	r0, r18
    3198:	02 c0       	rjmp	.+4      	; 0x319e <MDIO_stderrSetPinDirection+0x2c0>
    319a:	88 0f       	add	r24, r24
    319c:	99 1f       	adc	r25, r25
    319e:	0a 94       	dec	r0
    31a0:	e2 f7       	brpl	.-8      	; 0x319a <MDIO_stderrSetPinDirection+0x2bc>
    31a2:	84 2b       	or	r24, r20
    31a4:	12 96       	adiw	r26, 0x02	; 2
    31a6:	8c 93       	st	X, r24
    31a8:	12 97       	sbiw	r26, 0x02	; 2
    31aa:	86 c0       	rjmp	.+268    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    31ac:	a6 e3       	ldi	r26, 0x36	; 54
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e6 e3       	ldi	r30, 0x36	; 54
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	81 81       	ldd	r24, Z+1	; 0x01
    31b6:	48 2f       	mov	r20, r24
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <MDIO_stderrSetPinDirection+0x2ea>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	2a 95       	dec	r18
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <MDIO_stderrSetPinDirection+0x2e6>
    31cc:	80 95       	com	r24
    31ce:	84 23       	and	r24, r20
    31d0:	11 96       	adiw	r26, 0x01	; 1
    31d2:	8c 93       	st	X, r24
    31d4:	a6 e3       	ldi	r26, 0x36	; 54
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e6 e3       	ldi	r30, 0x36	; 54
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	48 2f       	mov	r20, r24
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	02 2e       	mov	r0, r18
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <MDIO_stderrSetPinDirection+0x314>
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	0a 94       	dec	r0
    31f4:	e2 f7       	brpl	.-8      	; 0x31ee <MDIO_stderrSetPinDirection+0x310>
    31f6:	84 2b       	or	r24, r20
    31f8:	12 96       	adiw	r26, 0x02	; 2
    31fa:	8c 93       	st	X, r24
    31fc:	12 97       	sbiw	r26, 0x02	; 2
    31fe:	5c c0       	rjmp	.+184    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    3200:	a3 e3       	ldi	r26, 0x33	; 51
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e3 e3       	ldi	r30, 0x33	; 51
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	81 81       	ldd	r24, Z+1	; 0x01
    320a:	48 2f       	mov	r20, r24
    320c:	8b 81       	ldd	r24, Y+3	; 0x03
    320e:	28 2f       	mov	r18, r24
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	02 c0       	rjmp	.+4      	; 0x321c <MDIO_stderrSetPinDirection+0x33e>
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	2a 95       	dec	r18
    321e:	e2 f7       	brpl	.-8      	; 0x3218 <MDIO_stderrSetPinDirection+0x33a>
    3220:	80 95       	com	r24
    3222:	84 23       	and	r24, r20
    3224:	11 96       	adiw	r26, 0x01	; 1
    3226:	8c 93       	st	X, r24
    3228:	a3 e3       	ldi	r26, 0x33	; 51
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	e3 e3       	ldi	r30, 0x33	; 51
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	82 81       	ldd	r24, Z+2	; 0x02
    3232:	48 2f       	mov	r20, r24
    3234:	8b 81       	ldd	r24, Y+3	; 0x03
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	02 2e       	mov	r0, r18
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <MDIO_stderrSetPinDirection+0x368>
    3242:	88 0f       	add	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	0a 94       	dec	r0
    3248:	e2 f7       	brpl	.-8      	; 0x3242 <MDIO_stderrSetPinDirection+0x364>
    324a:	84 2b       	or	r24, r20
    324c:	12 96       	adiw	r26, 0x02	; 2
    324e:	8c 93       	st	X, r24
    3250:	12 97       	sbiw	r26, 0x02	; 2
    3252:	32 c0       	rjmp	.+100    	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    3254:	a0 e3       	ldi	r26, 0x30	; 48
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	e0 e3       	ldi	r30, 0x30	; 48
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	81 81       	ldd	r24, Z+1	; 0x01
    325e:	48 2f       	mov	r20, r24
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <MDIO_stderrSetPinDirection+0x392>
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	2a 95       	dec	r18
    3272:	e2 f7       	brpl	.-8      	; 0x326c <MDIO_stderrSetPinDirection+0x38e>
    3274:	80 95       	com	r24
    3276:	84 23       	and	r24, r20
    3278:	11 96       	adiw	r26, 0x01	; 1
    327a:	8c 93       	st	X, r24
    327c:	a0 e3       	ldi	r26, 0x30	; 48
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e0 e3       	ldi	r30, 0x30	; 48
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	48 2f       	mov	r20, r24
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	02 2e       	mov	r0, r18
    3294:	02 c0       	rjmp	.+4      	; 0x329a <MDIO_stderrSetPinDirection+0x3bc>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <MDIO_stderrSetPinDirection+0x3b8>
    329e:	84 2b       	or	r24, r20
    32a0:	12 96       	adiw	r26, 0x02	; 2
    32a2:	8c 93       	st	X, r24
    32a4:	12 97       	sbiw	r26, 0x02	; 2
    32a6:	08 c0       	rjmp	.+16     	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	05 c0       	rjmp	.+10     	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ba:	2a 96       	adiw	r28, 0x0a	; 10
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	28 97       	sbiw	r28, 0x08	; 8
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	8a 83       	std	Y+2, r24	; 0x02
    32e2:	6b 83       	std	Y+3, r22	; 0x03
    32e4:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    32e6:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	88 30       	cpi	r24, 0x08	; 8
    32ec:	08 f0       	brcs	.+2      	; 0x32f0 <MDIO_stderrSetPinValue+0x24>
    32ee:	07 c1       	rjmp	.+526    	; 0x34fe <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    32f0:	8c 81       	ldd	r24, Y+4	; 0x04
    32f2:	82 30       	cpi	r24, 0x02	; 2
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <MDIO_stderrSetPinValue+0x2c>
    32f6:	7c c0       	rjmp	.+248    	; 0x33f0 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	38 87       	std	Y+8, r19	; 0x08
    3300:	2f 83       	std	Y+7, r18	; 0x07
    3302:	8f 81       	ldd	r24, Y+7	; 0x07
    3304:	98 85       	ldd	r25, Y+8	; 0x08
    3306:	82 30       	cpi	r24, 0x02	; 2
    3308:	91 05       	cpc	r25, r1
    330a:	69 f1       	breq	.+90     	; 0x3366 <MDIO_stderrSetPinValue+0x9a>
    330c:	2f 81       	ldd	r18, Y+7	; 0x07
    330e:	38 85       	ldd	r19, Y+8	; 0x08
    3310:	23 30       	cpi	r18, 0x03	; 3
    3312:	31 05       	cpc	r19, r1
    3314:	34 f4       	brge	.+12     	; 0x3322 <MDIO_stderrSetPinValue+0x56>
    3316:	8f 81       	ldd	r24, Y+7	; 0x07
    3318:	98 85       	ldd	r25, Y+8	; 0x08
    331a:	81 30       	cpi	r24, 0x01	; 1
    331c:	91 05       	cpc	r25, r1
    331e:	69 f0       	breq	.+26     	; 0x333a <MDIO_stderrSetPinValue+0x6e>
    3320:	64 c0       	rjmp	.+200    	; 0x33ea <MDIO_stderrSetPinValue+0x11e>
    3322:	2f 81       	ldd	r18, Y+7	; 0x07
    3324:	38 85       	ldd	r19, Y+8	; 0x08
    3326:	23 30       	cpi	r18, 0x03	; 3
    3328:	31 05       	cpc	r19, r1
    332a:	99 f1       	breq	.+102    	; 0x3392 <MDIO_stderrSetPinValue+0xc6>
    332c:	8f 81       	ldd	r24, Y+7	; 0x07
    332e:	98 85       	ldd	r25, Y+8	; 0x08
    3330:	84 30       	cpi	r24, 0x04	; 4
    3332:	91 05       	cpc	r25, r1
    3334:	09 f4       	brne	.+2      	; 0x3338 <MDIO_stderrSetPinValue+0x6c>
    3336:	43 c0       	rjmp	.+134    	; 0x33be <MDIO_stderrSetPinValue+0xf2>
    3338:	58 c0       	rjmp	.+176    	; 0x33ea <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    333a:	a9 e3       	ldi	r26, 0x39	; 57
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 e3       	ldi	r30, 0x39	; 57
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	82 81       	ldd	r24, Z+2	; 0x02
    3344:	48 2f       	mov	r20, r24
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	02 2e       	mov	r0, r18
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <MDIO_stderrSetPinValue+0x8c>
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	0a 94       	dec	r0
    335a:	e2 f7       	brpl	.-8      	; 0x3354 <MDIO_stderrSetPinValue+0x88>
    335c:	84 2b       	or	r24, r20
    335e:	12 96       	adiw	r26, 0x02	; 2
    3360:	8c 93       	st	X, r24
    3362:	12 97       	sbiw	r26, 0x02	; 2
    3364:	ce c0       	rjmp	.+412    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    3366:	a6 e3       	ldi	r26, 0x36	; 54
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e6 e3       	ldi	r30, 0x36	; 54
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	82 81       	ldd	r24, Z+2	; 0x02
    3370:	48 2f       	mov	r20, r24
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	02 2e       	mov	r0, r18
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <MDIO_stderrSetPinValue+0xb8>
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	0a 94       	dec	r0
    3386:	e2 f7       	brpl	.-8      	; 0x3380 <MDIO_stderrSetPinValue+0xb4>
    3388:	84 2b       	or	r24, r20
    338a:	12 96       	adiw	r26, 0x02	; 2
    338c:	8c 93       	st	X, r24
    338e:	12 97       	sbiw	r26, 0x02	; 2
    3390:	b8 c0       	rjmp	.+368    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    3392:	a3 e3       	ldi	r26, 0x33	; 51
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e3 e3       	ldi	r30, 0x33	; 51
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	82 81       	ldd	r24, Z+2	; 0x02
    339c:	48 2f       	mov	r20, r24
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <MDIO_stderrSetPinValue+0xe4>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <MDIO_stderrSetPinValue+0xe0>
    33b4:	84 2b       	or	r24, r20
    33b6:	12 96       	adiw	r26, 0x02	; 2
    33b8:	8c 93       	st	X, r24
    33ba:	12 97       	sbiw	r26, 0x02	; 2
    33bc:	a2 c0       	rjmp	.+324    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    33be:	a0 e3       	ldi	r26, 0x30	; 48
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	e0 e3       	ldi	r30, 0x30	; 48
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	82 81       	ldd	r24, Z+2	; 0x02
    33c8:	48 2f       	mov	r20, r24
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	02 2e       	mov	r0, r18
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <MDIO_stderrSetPinValue+0x110>
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	0a 94       	dec	r0
    33de:	e2 f7       	brpl	.-8      	; 0x33d8 <MDIO_stderrSetPinValue+0x10c>
    33e0:	84 2b       	or	r24, r20
    33e2:	12 96       	adiw	r26, 0x02	; 2
    33e4:	8c 93       	st	X, r24
    33e6:	12 97       	sbiw	r26, 0x02	; 2
    33e8:	8c c0       	rjmp	.+280    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	89 c0       	rjmp	.+274    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	09 f0       	breq	.+2      	; 0x33f8 <MDIO_stderrSetPinValue+0x12c>
    33f6:	80 c0       	rjmp	.+256    	; 0x34f8 <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	3e 83       	std	Y+6, r19	; 0x06
    3400:	2d 83       	std	Y+5, r18	; 0x05
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	82 30       	cpi	r24, 0x02	; 2
    3408:	91 05       	cpc	r25, r1
    340a:	71 f1       	breq	.+92     	; 0x3468 <MDIO_stderrSetPinValue+0x19c>
    340c:	2d 81       	ldd	r18, Y+5	; 0x05
    340e:	3e 81       	ldd	r19, Y+6	; 0x06
    3410:	23 30       	cpi	r18, 0x03	; 3
    3412:	31 05       	cpc	r19, r1
    3414:	34 f4       	brge	.+12     	; 0x3422 <MDIO_stderrSetPinValue+0x156>
    3416:	8d 81       	ldd	r24, Y+5	; 0x05
    3418:	9e 81       	ldd	r25, Y+6	; 0x06
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	91 05       	cpc	r25, r1
    341e:	69 f0       	breq	.+26     	; 0x343a <MDIO_stderrSetPinValue+0x16e>
    3420:	68 c0       	rjmp	.+208    	; 0x34f2 <MDIO_stderrSetPinValue+0x226>
    3422:	2d 81       	ldd	r18, Y+5	; 0x05
    3424:	3e 81       	ldd	r19, Y+6	; 0x06
    3426:	23 30       	cpi	r18, 0x03	; 3
    3428:	31 05       	cpc	r19, r1
    342a:	a9 f1       	breq	.+106    	; 0x3496 <MDIO_stderrSetPinValue+0x1ca>
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	84 30       	cpi	r24, 0x04	; 4
    3432:	91 05       	cpc	r25, r1
    3434:	09 f4       	brne	.+2      	; 0x3438 <MDIO_stderrSetPinValue+0x16c>
    3436:	46 c0       	rjmp	.+140    	; 0x34c4 <MDIO_stderrSetPinValue+0x1f8>
    3438:	5c c0       	rjmp	.+184    	; 0x34f2 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    343a:	a9 e3       	ldi	r26, 0x39	; 57
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e9 e3       	ldi	r30, 0x39	; 57
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	48 2f       	mov	r20, r24
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	02 2e       	mov	r0, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <MDIO_stderrSetPinValue+0x18c>
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	0a 94       	dec	r0
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <MDIO_stderrSetPinValue+0x188>
    345c:	80 95       	com	r24
    345e:	84 23       	and	r24, r20
    3460:	12 96       	adiw	r26, 0x02	; 2
    3462:	8c 93       	st	X, r24
    3464:	12 97       	sbiw	r26, 0x02	; 2
    3466:	4d c0       	rjmp	.+154    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    3468:	a6 e3       	ldi	r26, 0x36	; 54
    346a:	b0 e0       	ldi	r27, 0x00	; 0
    346c:	e6 e3       	ldi	r30, 0x36	; 54
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	48 2f       	mov	r20, r24
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	02 2e       	mov	r0, r18
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <MDIO_stderrSetPinValue+0x1ba>
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	0a 94       	dec	r0
    3488:	e2 f7       	brpl	.-8      	; 0x3482 <MDIO_stderrSetPinValue+0x1b6>
    348a:	80 95       	com	r24
    348c:	84 23       	and	r24, r20
    348e:	12 96       	adiw	r26, 0x02	; 2
    3490:	8c 93       	st	X, r24
    3492:	12 97       	sbiw	r26, 0x02	; 2
    3494:	36 c0       	rjmp	.+108    	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    3496:	a3 e3       	ldi	r26, 0x33	; 51
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e3 e3       	ldi	r30, 0x33	; 51
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	48 2f       	mov	r20, r24
    34a2:	8b 81       	ldd	r24, Y+3	; 0x03
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	02 2e       	mov	r0, r18
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <MDIO_stderrSetPinValue+0x1e8>
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	0a 94       	dec	r0
    34b6:	e2 f7       	brpl	.-8      	; 0x34b0 <MDIO_stderrSetPinValue+0x1e4>
    34b8:	80 95       	com	r24
    34ba:	84 23       	and	r24, r20
    34bc:	12 96       	adiw	r26, 0x02	; 2
    34be:	8c 93       	st	X, r24
    34c0:	12 97       	sbiw	r26, 0x02	; 2
    34c2:	1f c0       	rjmp	.+62     	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    34c4:	a0 e3       	ldi	r26, 0x30	; 48
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	e0 e3       	ldi	r30, 0x30	; 48
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	82 81       	ldd	r24, Z+2	; 0x02
    34ce:	48 2f       	mov	r20, r24
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	02 2e       	mov	r0, r18
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <MDIO_stderrSetPinValue+0x216>
    34de:	88 0f       	add	r24, r24
    34e0:	99 1f       	adc	r25, r25
    34e2:	0a 94       	dec	r0
    34e4:	e2 f7       	brpl	.-8      	; 0x34de <MDIO_stderrSetPinValue+0x212>
    34e6:	80 95       	com	r24
    34e8:	84 23       	and	r24, r20
    34ea:	12 96       	adiw	r26, 0x02	; 2
    34ec:	8c 93       	st	X, r24
    34ee:	12 97       	sbiw	r26, 0x02	; 2
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3502:	89 81       	ldd	r24, Y+1	; 0x01
}
    3504:	28 96       	adiw	r28, 0x08	; 8
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	27 97       	sbiw	r28, 0x07	; 7
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	9b 83       	std	Y+3, r25	; 0x03
    352c:	8a 83       	std	Y+2, r24	; 0x02
    352e:	6c 83       	std	Y+4, r22	; 0x04
    3530:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    3532:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	19 f4       	brne	.+6      	; 0x3542 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	7a c0       	rjmp	.+244    	; 0x3636 <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3542:	8d 81       	ldd	r24, Y+5	; 0x05
    3544:	88 30       	cpi	r24, 0x08	; 8
    3546:	08 f0       	brcs	.+2      	; 0x354a <MDIO_stderrGetPinValue+0x34>
    3548:	74 c0       	rjmp	.+232    	; 0x3632 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    354a:	8c 81       	ldd	r24, Y+4	; 0x04
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	3f 83       	std	Y+7, r19	; 0x07
    3552:	2e 83       	std	Y+6, r18	; 0x06
    3554:	4e 81       	ldd	r20, Y+6	; 0x06
    3556:	5f 81       	ldd	r21, Y+7	; 0x07
    3558:	42 30       	cpi	r20, 0x02	; 2
    355a:	51 05       	cpc	r21, r1
    355c:	59 f1       	breq	.+86     	; 0x35b4 <MDIO_stderrGetPinValue+0x9e>
    355e:	8e 81       	ldd	r24, Y+6	; 0x06
    3560:	9f 81       	ldd	r25, Y+7	; 0x07
    3562:	83 30       	cpi	r24, 0x03	; 3
    3564:	91 05       	cpc	r25, r1
    3566:	34 f4       	brge	.+12     	; 0x3574 <MDIO_stderrGetPinValue+0x5e>
    3568:	2e 81       	ldd	r18, Y+6	; 0x06
    356a:	3f 81       	ldd	r19, Y+7	; 0x07
    356c:	21 30       	cpi	r18, 0x01	; 1
    356e:	31 05       	cpc	r19, r1
    3570:	69 f0       	breq	.+26     	; 0x358c <MDIO_stderrGetPinValue+0x76>
    3572:	5c c0       	rjmp	.+184    	; 0x362c <MDIO_stderrGetPinValue+0x116>
    3574:	4e 81       	ldd	r20, Y+6	; 0x06
    3576:	5f 81       	ldd	r21, Y+7	; 0x07
    3578:	43 30       	cpi	r20, 0x03	; 3
    357a:	51 05       	cpc	r21, r1
    357c:	79 f1       	breq	.+94     	; 0x35dc <MDIO_stderrGetPinValue+0xc6>
    357e:	8e 81       	ldd	r24, Y+6	; 0x06
    3580:	9f 81       	ldd	r25, Y+7	; 0x07
    3582:	84 30       	cpi	r24, 0x04	; 4
    3584:	91 05       	cpc	r25, r1
    3586:	09 f4       	brne	.+2      	; 0x358a <MDIO_stderrGetPinValue+0x74>
    3588:	3d c0       	rjmp	.+122    	; 0x3604 <MDIO_stderrGetPinValue+0xee>
    358a:	50 c0       	rjmp	.+160    	; 0x362c <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    358c:	e9 e3       	ldi	r30, 0x39	; 57
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	8d 81       	ldd	r24, Y+5	; 0x05
    3598:	88 2f       	mov	r24, r24
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a9 01       	movw	r20, r18
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <MDIO_stderrGetPinValue+0x8e>
    35a0:	55 95       	asr	r21
    35a2:	47 95       	ror	r20
    35a4:	8a 95       	dec	r24
    35a6:	e2 f7       	brpl	.-8      	; 0x35a0 <MDIO_stderrGetPinValue+0x8a>
    35a8:	ca 01       	movw	r24, r20
    35aa:	81 70       	andi	r24, 0x01	; 1
    35ac:	ea 81       	ldd	r30, Y+2	; 0x02
    35ae:	fb 81       	ldd	r31, Y+3	; 0x03
    35b0:	80 83       	st	Z, r24
    35b2:	41 c0       	rjmp	.+130    	; 0x3636 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    35b4:	e6 e3       	ldi	r30, 0x36	; 54
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	a9 01       	movw	r20, r18
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <MDIO_stderrGetPinValue+0xb6>
    35c8:	55 95       	asr	r21
    35ca:	47 95       	ror	r20
    35cc:	8a 95       	dec	r24
    35ce:	e2 f7       	brpl	.-8      	; 0x35c8 <MDIO_stderrGetPinValue+0xb2>
    35d0:	ca 01       	movw	r24, r20
    35d2:	81 70       	andi	r24, 0x01	; 1
    35d4:	ea 81       	ldd	r30, Y+2	; 0x02
    35d6:	fb 81       	ldd	r31, Y+3	; 0x03
    35d8:	80 83       	st	Z, r24
    35da:	2d c0       	rjmp	.+90     	; 0x3636 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    35dc:	e3 e3       	ldi	r30, 0x33	; 51
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	28 2f       	mov	r18, r24
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	88 2f       	mov	r24, r24
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	a9 01       	movw	r20, r18
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <MDIO_stderrGetPinValue+0xde>
    35f0:	55 95       	asr	r21
    35f2:	47 95       	ror	r20
    35f4:	8a 95       	dec	r24
    35f6:	e2 f7       	brpl	.-8      	; 0x35f0 <MDIO_stderrGetPinValue+0xda>
    35f8:	ca 01       	movw	r24, r20
    35fa:	81 70       	andi	r24, 0x01	; 1
    35fc:	ea 81       	ldd	r30, Y+2	; 0x02
    35fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3600:	80 83       	st	Z, r24
    3602:	19 c0       	rjmp	.+50     	; 0x3636 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    3604:	e0 e3       	ldi	r30, 0x30	; 48
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	28 2f       	mov	r18, r24
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	8d 81       	ldd	r24, Y+5	; 0x05
    3610:	88 2f       	mov	r24, r24
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	a9 01       	movw	r20, r18
    3616:	02 c0       	rjmp	.+4      	; 0x361c <MDIO_stderrGetPinValue+0x106>
    3618:	55 95       	asr	r21
    361a:	47 95       	ror	r20
    361c:	8a 95       	dec	r24
    361e:	e2 f7       	brpl	.-8      	; 0x3618 <MDIO_stderrGetPinValue+0x102>
    3620:	ca 01       	movw	r24, r20
    3622:	81 70       	andi	r24, 0x01	; 1
    3624:	ea 81       	ldd	r30, Y+2	; 0x02
    3626:	fb 81       	ldd	r31, Y+3	; 0x03
    3628:	80 83       	st	Z, r24
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
}
    3638:	27 96       	adiw	r28, 0x07	; 7
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	00 d0       	rcall	.+0      	; 0x3650 <MDIO_stderrTogglePinValue+0x6>
    3650:	00 d0       	rcall	.+0      	; 0x3652 <MDIO_stderrTogglePinValue+0x8>
    3652:	0f 92       	push	r0
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	8a 83       	std	Y+2, r24	; 0x02
    365a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    365c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	88 30       	cpi	r24, 0x08	; 8
    3662:	08 f0       	brcs	.+2      	; 0x3666 <MDIO_stderrTogglePinValue+0x1c>
    3664:	7c c0       	rjmp	.+248    	; 0x375e <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	3d 83       	std	Y+5, r19	; 0x05
    366e:	2c 83       	std	Y+4, r18	; 0x04
    3670:	8c 81       	ldd	r24, Y+4	; 0x04
    3672:	9d 81       	ldd	r25, Y+5	; 0x05
    3674:	82 30       	cpi	r24, 0x02	; 2
    3676:	91 05       	cpc	r25, r1
    3678:	69 f1       	breq	.+90     	; 0x36d4 <MDIO_stderrTogglePinValue+0x8a>
    367a:	2c 81       	ldd	r18, Y+4	; 0x04
    367c:	3d 81       	ldd	r19, Y+5	; 0x05
    367e:	23 30       	cpi	r18, 0x03	; 3
    3680:	31 05       	cpc	r19, r1
    3682:	34 f4       	brge	.+12     	; 0x3690 <MDIO_stderrTogglePinValue+0x46>
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	9d 81       	ldd	r25, Y+5	; 0x05
    3688:	81 30       	cpi	r24, 0x01	; 1
    368a:	91 05       	cpc	r25, r1
    368c:	69 f0       	breq	.+26     	; 0x36a8 <MDIO_stderrTogglePinValue+0x5e>
    368e:	64 c0       	rjmp	.+200    	; 0x3758 <MDIO_stderrTogglePinValue+0x10e>
    3690:	2c 81       	ldd	r18, Y+4	; 0x04
    3692:	3d 81       	ldd	r19, Y+5	; 0x05
    3694:	23 30       	cpi	r18, 0x03	; 3
    3696:	31 05       	cpc	r19, r1
    3698:	99 f1       	breq	.+102    	; 0x3700 <MDIO_stderrTogglePinValue+0xb6>
    369a:	8c 81       	ldd	r24, Y+4	; 0x04
    369c:	9d 81       	ldd	r25, Y+5	; 0x05
    369e:	84 30       	cpi	r24, 0x04	; 4
    36a0:	91 05       	cpc	r25, r1
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <MDIO_stderrTogglePinValue+0x5c>
    36a4:	43 c0       	rjmp	.+134    	; 0x372c <MDIO_stderrTogglePinValue+0xe2>
    36a6:	58 c0       	rjmp	.+176    	; 0x3758 <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    36a8:	a9 e3       	ldi	r26, 0x39	; 57
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	e9 e3       	ldi	r30, 0x39	; 57
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	48 2f       	mov	r20, r24
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	02 2e       	mov	r0, r18
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <MDIO_stderrTogglePinValue+0x7c>
    36c2:	88 0f       	add	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	0a 94       	dec	r0
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <MDIO_stderrTogglePinValue+0x78>
    36ca:	84 27       	eor	r24, r20
    36cc:	12 96       	adiw	r26, 0x02	; 2
    36ce:	8c 93       	st	X, r24
    36d0:	12 97       	sbiw	r26, 0x02	; 2
    36d2:	47 c0       	rjmp	.+142    	; 0x3762 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    36d4:	a6 e3       	ldi	r26, 0x36	; 54
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e6 e3       	ldi	r30, 0x36	; 54
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	82 81       	ldd	r24, Z+2	; 0x02
    36de:	48 2f       	mov	r20, r24
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 2e       	mov	r0, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <MDIO_stderrTogglePinValue+0xa8>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <MDIO_stderrTogglePinValue+0xa4>
    36f6:	84 27       	eor	r24, r20
    36f8:	12 96       	adiw	r26, 0x02	; 2
    36fa:	8c 93       	st	X, r24
    36fc:	12 97       	sbiw	r26, 0x02	; 2
    36fe:	31 c0       	rjmp	.+98     	; 0x3762 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    3700:	a3 e3       	ldi	r26, 0x33	; 51
    3702:	b0 e0       	ldi	r27, 0x00	; 0
    3704:	e3 e3       	ldi	r30, 0x33	; 51
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	82 81       	ldd	r24, Z+2	; 0x02
    370a:	48 2f       	mov	r20, r24
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	28 2f       	mov	r18, r24
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	02 2e       	mov	r0, r18
    3718:	02 c0       	rjmp	.+4      	; 0x371e <MDIO_stderrTogglePinValue+0xd4>
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	0a 94       	dec	r0
    3720:	e2 f7       	brpl	.-8      	; 0x371a <MDIO_stderrTogglePinValue+0xd0>
    3722:	84 27       	eor	r24, r20
    3724:	12 96       	adiw	r26, 0x02	; 2
    3726:	8c 93       	st	X, r24
    3728:	12 97       	sbiw	r26, 0x02	; 2
    372a:	1b c0       	rjmp	.+54     	; 0x3762 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    372c:	a0 e3       	ldi	r26, 0x30	; 48
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e0 e3       	ldi	r30, 0x30	; 48
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	48 2f       	mov	r20, r24
    3738:	8b 81       	ldd	r24, Y+3	; 0x03
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	02 2e       	mov	r0, r18
    3744:	02 c0       	rjmp	.+4      	; 0x374a <MDIO_stderrTogglePinValue+0x100>
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	0a 94       	dec	r0
    374c:	e2 f7       	brpl	.-8      	; 0x3746 <MDIO_stderrTogglePinValue+0xfc>
    374e:	84 27       	eor	r24, r20
    3750:	12 96       	adiw	r26, 0x02	; 2
    3752:	8c 93       	st	X, r24
    3754:	12 97       	sbiw	r26, 0x02	; 2
    3756:	05 c0       	rjmp	.+10     	; 0x3762 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	89 83       	std	Y+1, r24	; 0x01
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    375e:	82 e0       	ldi	r24, 0x02	; 2
    3760:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3762:	89 81       	ldd	r24, Y+1	; 0x01
}
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <MEXTI_stderrInit>:

/*Global Array of Pointers to function to take The CallBack Functions*/
static void (*MEXTI_pvoidUserFunction[3])(void)={NULL_POINTER, NULL_POINTER, NULL_POINTER};

STD_error_t MEXTI_stderrInit(u8 ARG_u8InterruptNo,u8 ARG_u8SenseMode)
{	
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	27 97       	sbiw	r28, 0x07	; 7
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	8a 83       	std	Y+2, r24	; 0x02
    378a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError =E_OK;
    378c:	19 82       	std	Y+1, r1	; 0x01
	switch( ARG_u8InterruptNo )
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	3f 83       	std	Y+7, r19	; 0x07
    3796:	2e 83       	std	Y+6, r18	; 0x06
    3798:	8e 81       	ldd	r24, Y+6	; 0x06
    379a:	9f 81       	ldd	r25, Y+7	; 0x07
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	91 05       	cpc	r25, r1
    37a0:	d1 f0       	breq	.+52     	; 0x37d6 <MEXTI_stderrInit+0x62>
    37a2:	2e 81       	ldd	r18, Y+6	; 0x06
    37a4:	3f 81       	ldd	r19, Y+7	; 0x07
    37a6:	22 30       	cpi	r18, 0x02	; 2
    37a8:	31 05       	cpc	r19, r1
    37aa:	61 f1       	breq	.+88     	; 0x3804 <MEXTI_stderrInit+0x90>
    37ac:	8e 81       	ldd	r24, Y+6	; 0x06
    37ae:	9f 81       	ldd	r25, Y+7	; 0x07
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <MEXTI_stderrInit+0x42>
    37b4:	4a c0       	rjmp	.+148    	; 0x384a <MEXTI_stderrInit+0xd6>
	{
	case MEXTI_INT0: MCUCR &=~(3<<ISC00);  MCUCR |=(ARG_u8SenseMode<<ISC00);  break; 
    37b6:	a5 e5       	ldi	r26, 0x55	; 85
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	e5 e5       	ldi	r30, 0x55	; 85
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	8c 7f       	andi	r24, 0xFC	; 252
    37c2:	8c 93       	st	X, r24
    37c4:	a5 e5       	ldi	r26, 0x55	; 85
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e5 e5       	ldi	r30, 0x55	; 85
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	90 81       	ld	r25, Z
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	89 2b       	or	r24, r25
    37d2:	8c 93       	st	X, r24
    37d4:	3c c0       	rjmp	.+120    	; 0x384e <MEXTI_stderrInit+0xda>
	case MEXTI_INT1: MCUCR &=~(3<<ISC10);  MCUCR |=(ARG_u8SenseMode<<ISC10);  break; 
    37d6:	a5 e5       	ldi	r26, 0x55	; 85
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e5 e5       	ldi	r30, 0x55	; 85
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	83 7f       	andi	r24, 0xF3	; 243
    37e2:	8c 93       	st	X, r24
    37e4:	a5 e5       	ldi	r26, 0x55	; 85
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	e5 e5       	ldi	r30, 0x55	; 85
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	28 2f       	mov	r18, r24
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	82 2b       	or	r24, r18
    3800:	8c 93       	st	X, r24
    3802:	25 c0       	rjmp	.+74     	; 0x384e <MEXTI_stderrInit+0xda>
	case MEXTI_INT2:  
		switch(ARG_u8SenseMode){
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	3d 83       	std	Y+5, r19	; 0x05
    380c:	2c 83       	std	Y+4, r18	; 0x04
    380e:	8c 81       	ldd	r24, Y+4	; 0x04
    3810:	9d 81       	ldd	r25, Y+5	; 0x05
    3812:	82 30       	cpi	r24, 0x02	; 2
    3814:	91 05       	cpc	r25, r1
    3816:	31 f0       	breq	.+12     	; 0x3824 <MEXTI_stderrInit+0xb0>
    3818:	2c 81       	ldd	r18, Y+4	; 0x04
    381a:	3d 81       	ldd	r19, Y+5	; 0x05
    381c:	23 30       	cpi	r18, 0x03	; 3
    381e:	31 05       	cpc	r19, r1
    3820:	49 f0       	breq	.+18     	; 0x3834 <MEXTI_stderrInit+0xc0>
    3822:	10 c0       	rjmp	.+32     	; 0x3844 <MEXTI_stderrInit+0xd0>
		case MEXTI_MODE_FALLING:CLEAR_BIT(MCUCSR,ISC2); break;
    3824:	a4 e5       	ldi	r26, 0x54	; 84
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e4 e5       	ldi	r30, 0x54	; 84
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	8f 7b       	andi	r24, 0xBF	; 191
    3830:	8c 93       	st	X, r24
    3832:	0d c0       	rjmp	.+26     	; 0x384e <MEXTI_stderrInit+0xda>
		case MEXTI_MODE_RISING: SET_BIT(MCUCSR,ISC2); break;
    3834:	a4 e5       	ldi	r26, 0x54	; 84
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e4 e5       	ldi	r30, 0x54	; 84
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	80 64       	ori	r24, 0x40	; 64
    3840:	8c 93       	st	X, r24
    3842:	05 c0       	rjmp	.+10     	; 0x384e <MEXTI_stderrInit+0xda>
		default: L_stderrError=E_NOK; break;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	89 83       	std	Y+1, r24	; 0x01
    3848:	02 c0       	rjmp	.+4      	; 0x384e <MEXTI_stderrInit+0xda>
		}
	break; 
	default: L_stderrError=E_NOK; break; 
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    384e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3850:	27 96       	adiw	r28, 0x07	; 7
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <MEXTI_stderrCallBack>:

STD_error_t MEXTI_stderrCallBack(void (*ARG_pvoidUserFunction)(void), u8 ARG_u8InterruptNo )
{
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	00 d0       	rcall	.+0      	; 0x3868 <MEXTI_stderrCallBack+0x6>
    3868:	00 d0       	rcall	.+0      	; 0x386a <MEXTI_stderrCallBack+0x8>
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	9b 83       	std	Y+3, r25	; 0x03
    3870:	8a 83       	std	Y+2, r24	; 0x02
    3872:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError =E_OK;
    3874:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER == ARG_pvoidUserFunction  ) 
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	9b 81       	ldd	r25, Y+3	; 0x03
    387a:	00 97       	sbiw	r24, 0x00	; 0
    387c:	19 f4       	brne	.+6      	; 0x3884 <MEXTI_stderrCallBack+0x22>
	{
		L_stderrError = E_NULL_POINTER;
    387e:	82 e0       	ldi	r24, 0x02	; 2
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	12 c0       	rjmp	.+36     	; 0x38a8 <MEXTI_stderrCallBack+0x46>
	}
	else if(ARG_u8InterruptNo >= MEXTI_INT0  &&  ARG_u8InterruptNo <= MEXTI_INT2 ){
    3884:	8c 81       	ldd	r24, Y+4	; 0x04
    3886:	83 30       	cpi	r24, 0x03	; 3
    3888:	68 f4       	brcc	.+26     	; 0x38a4 <MEXTI_stderrCallBack+0x42>
		MEXTI_pvoidUserFunction[ARG_u8InterruptNo]=ARG_pvoidUserFunction;
    388a:	8c 81       	ldd	r24, Y+4	; 0x04
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	fc 01       	movw	r30, r24
    3896:	e4 56       	subi	r30, 0x64	; 100
    3898:	fe 4f       	sbci	r31, 0xFE	; 254
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	91 83       	std	Z+1, r25	; 0x01
    38a0:	80 83       	st	Z, r24
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <MEXTI_stderrCallBack+0x46>
	}
	else{
		L_stderrError=E_NOK;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <MEXTI_stderrEnable>:

/*
 * Enable INT Function
 */
STD_error_t MEXTI_stderrEnable(u8 ARG_u8InterruptNo)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <MEXTI_stderrEnable+0x6>
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <MEXTI_stderrEnable+0x8>
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
    38c4:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError =E_OK;
    38c6:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8InterruptNo){
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ca:	28 2f       	mov	r18, r24
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	3c 83       	std	Y+4, r19	; 0x04
    38d0:	2b 83       	std	Y+3, r18	; 0x03
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	9c 81       	ldd	r25, Y+4	; 0x04
    38d6:	81 30       	cpi	r24, 0x01	; 1
    38d8:	91 05       	cpc	r25, r1
    38da:	89 f0       	breq	.+34     	; 0x38fe <MEXTI_stderrEnable+0x46>
    38dc:	2b 81       	ldd	r18, Y+3	; 0x03
    38de:	3c 81       	ldd	r19, Y+4	; 0x04
    38e0:	22 30       	cpi	r18, 0x02	; 2
    38e2:	31 05       	cpc	r19, r1
    38e4:	a1 f0       	breq	.+40     	; 0x390e <MEXTI_stderrEnable+0x56>
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	c1 f4       	brne	.+48     	; 0x391e <MEXTI_stderrEnable+0x66>
		case MEXTI_INT0:	SET_BIT(GICR, INT0); break;
    38ee:	ab e5       	ldi	r26, 0x5B	; 91
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	eb e5       	ldi	r30, 0x5B	; 91
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	80 64       	ori	r24, 0x40	; 64
    38fa:	8c 93       	st	X, r24
    38fc:	12 c0       	rjmp	.+36     	; 0x3922 <MEXTI_stderrEnable+0x6a>
		case MEXTI_INT1:    SET_BIT(GICR, INT1); break;
    38fe:	ab e5       	ldi	r26, 0x5B	; 91
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	eb e5       	ldi	r30, 0x5B	; 91
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	80 81       	ld	r24, Z
    3908:	80 68       	ori	r24, 0x80	; 128
    390a:	8c 93       	st	X, r24
    390c:	0a c0       	rjmp	.+20     	; 0x3922 <MEXTI_stderrEnable+0x6a>
		case MEXTI_INT2:    SET_BIT(GICR, INT2); break;
    390e:	ab e5       	ldi	r26, 0x5B	; 91
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	eb e5       	ldi	r30, 0x5B	; 91
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	80 62       	ori	r24, 0x20	; 32
    391a:	8c 93       	st	X, r24
    391c:	02 c0       	rjmp	.+4      	; 0x3922 <MEXTI_stderrEnable+0x6a>
		default: L_stderrError=E_NOK; break;
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3922:	89 81       	ldd	r24, Y+1	; 0x01
}
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <MEXTI_stderrDisable>:

/*
 * Disable INT Function
 */
STD_error_t MEXTI_stderrDisable(u8 ARG_u8InterruptNo)
{
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	00 d0       	rcall	.+0      	; 0x3938 <MEXTI_stderrDisable+0x6>
    3938:	00 d0       	rcall	.+0      	; 0x393a <MEXTI_stderrDisable+0x8>
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
    393e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError =E_OK;
    3940:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8InterruptNo){
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	3c 83       	std	Y+4, r19	; 0x04
    394a:	2b 83       	std	Y+3, r18	; 0x03
    394c:	8b 81       	ldd	r24, Y+3	; 0x03
    394e:	9c 81       	ldd	r25, Y+4	; 0x04
    3950:	81 30       	cpi	r24, 0x01	; 1
    3952:	91 05       	cpc	r25, r1
    3954:	89 f0       	breq	.+34     	; 0x3978 <MEXTI_stderrDisable+0x46>
    3956:	2b 81       	ldd	r18, Y+3	; 0x03
    3958:	3c 81       	ldd	r19, Y+4	; 0x04
    395a:	22 30       	cpi	r18, 0x02	; 2
    395c:	31 05       	cpc	r19, r1
    395e:	a1 f0       	breq	.+40     	; 0x3988 <MEXTI_stderrDisable+0x56>
    3960:	8b 81       	ldd	r24, Y+3	; 0x03
    3962:	9c 81       	ldd	r25, Y+4	; 0x04
    3964:	00 97       	sbiw	r24, 0x00	; 0
    3966:	c1 f4       	brne	.+48     	; 0x3998 <MEXTI_stderrDisable+0x66>
		case MEXTI_INT0:	CLEAR_BIT(GICR, INT0); break;
    3968:	ab e5       	ldi	r26, 0x5B	; 91
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	eb e5       	ldi	r30, 0x5B	; 91
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	8f 7b       	andi	r24, 0xBF	; 191
    3974:	8c 93       	st	X, r24
    3976:	12 c0       	rjmp	.+36     	; 0x399c <MEXTI_stderrDisable+0x6a>
		case MEXTI_INT1:    CLEAR_BIT(GICR, INT1); break;
    3978:	ab e5       	ldi	r26, 0x5B	; 91
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	eb e5       	ldi	r30, 0x5B	; 91
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	8f 77       	andi	r24, 0x7F	; 127
    3984:	8c 93       	st	X, r24
    3986:	0a c0       	rjmp	.+20     	; 0x399c <MEXTI_stderrDisable+0x6a>
		case MEXTI_INT2:    CLEAR_BIT(GICR, INT2); break;
    3988:	ab e5       	ldi	r26, 0x5B	; 91
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	eb e5       	ldi	r30, 0x5B	; 91
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	8f 7d       	andi	r24, 0xDF	; 223
    3994:	8c 93       	st	X, r24
    3996:	02 c0       	rjmp	.+4      	; 0x399c <MEXTI_stderrDisable+0x6a>
		default: L_stderrError=E_NOK; break;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    399c:	89 81       	ldd	r24, Y+1	; 0x01
}
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	0f 90       	pop	r0
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <__vector_1>:

/* ISR INT0 INT 1 INT2 */

void __vector_1(void) __attribute__((signal)); /* This line is not prototype */
void __vector_1(void)
{
    39ac:	1f 92       	push	r1
    39ae:	0f 92       	push	r0
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	0f 92       	push	r0
    39b4:	11 24       	eor	r1, r1
    39b6:	2f 93       	push	r18
    39b8:	3f 93       	push	r19
    39ba:	4f 93       	push	r20
    39bc:	5f 93       	push	r21
    39be:	6f 93       	push	r22
    39c0:	7f 93       	push	r23
    39c2:	8f 93       	push	r24
    39c4:	9f 93       	push	r25
    39c6:	af 93       	push	r26
    39c8:	bf 93       	push	r27
    39ca:	ef 93       	push	r30
    39cc:	ff 93       	push	r31
    39ce:	df 93       	push	r29
    39d0:	cf 93       	push	r28
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT0]();
    39d6:	e0 91 9c 01 	lds	r30, 0x019C
    39da:	f0 91 9d 01 	lds	r31, 0x019D
    39de:	09 95       	icall
}
    39e0:	cf 91       	pop	r28
    39e2:	df 91       	pop	r29
    39e4:	ff 91       	pop	r31
    39e6:	ef 91       	pop	r30
    39e8:	bf 91       	pop	r27
    39ea:	af 91       	pop	r26
    39ec:	9f 91       	pop	r25
    39ee:	8f 91       	pop	r24
    39f0:	7f 91       	pop	r23
    39f2:	6f 91       	pop	r22
    39f4:	5f 91       	pop	r21
    39f6:	4f 91       	pop	r20
    39f8:	3f 91       	pop	r19
    39fa:	2f 91       	pop	r18
    39fc:	0f 90       	pop	r0
    39fe:	0f be       	out	0x3f, r0	; 63
    3a00:	0f 90       	pop	r0
    3a02:	1f 90       	pop	r1
    3a04:	18 95       	reti

00003a06 <__vector_2>:

void __vector_2(void) __attribute__((signal)); /* This line is not prototype */
void __vector_2(void)
{
    3a06:	1f 92       	push	r1
    3a08:	0f 92       	push	r0
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	0f 92       	push	r0
    3a0e:	11 24       	eor	r1, r1
    3a10:	2f 93       	push	r18
    3a12:	3f 93       	push	r19
    3a14:	4f 93       	push	r20
    3a16:	5f 93       	push	r21
    3a18:	6f 93       	push	r22
    3a1a:	7f 93       	push	r23
    3a1c:	8f 93       	push	r24
    3a1e:	9f 93       	push	r25
    3a20:	af 93       	push	r26
    3a22:	bf 93       	push	r27
    3a24:	ef 93       	push	r30
    3a26:	ff 93       	push	r31
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT1]();
    3a30:	e0 91 9e 01 	lds	r30, 0x019E
    3a34:	f0 91 9f 01 	lds	r31, 0x019F
    3a38:	09 95       	icall
}
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	ff 91       	pop	r31
    3a40:	ef 91       	pop	r30
    3a42:	bf 91       	pop	r27
    3a44:	af 91       	pop	r26
    3a46:	9f 91       	pop	r25
    3a48:	8f 91       	pop	r24
    3a4a:	7f 91       	pop	r23
    3a4c:	6f 91       	pop	r22
    3a4e:	5f 91       	pop	r21
    3a50:	4f 91       	pop	r20
    3a52:	3f 91       	pop	r19
    3a54:	2f 91       	pop	r18
    3a56:	0f 90       	pop	r0
    3a58:	0f be       	out	0x3f, r0	; 63
    3a5a:	0f 90       	pop	r0
    3a5c:	1f 90       	pop	r1
    3a5e:	18 95       	reti

00003a60 <__vector_3>:

void __vector_3(void) __attribute__((signal)); /* This line is not prototype */
void __vector_3(void)
{
    3a60:	1f 92       	push	r1
    3a62:	0f 92       	push	r0
    3a64:	0f b6       	in	r0, 0x3f	; 63
    3a66:	0f 92       	push	r0
    3a68:	11 24       	eor	r1, r1
    3a6a:	2f 93       	push	r18
    3a6c:	3f 93       	push	r19
    3a6e:	4f 93       	push	r20
    3a70:	5f 93       	push	r21
    3a72:	6f 93       	push	r22
    3a74:	7f 93       	push	r23
    3a76:	8f 93       	push	r24
    3a78:	9f 93       	push	r25
    3a7a:	af 93       	push	r26
    3a7c:	bf 93       	push	r27
    3a7e:	ef 93       	push	r30
    3a80:	ff 93       	push	r31
    3a82:	df 93       	push	r29
    3a84:	cf 93       	push	r28
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
	MEXTI_pvoidUserFunction[MEXTI_INT2]();
    3a8a:	e0 91 a0 01 	lds	r30, 0x01A0
    3a8e:	f0 91 a1 01 	lds	r31, 0x01A1
    3a92:	09 95       	icall
}
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	ff 91       	pop	r31
    3a9a:	ef 91       	pop	r30
    3a9c:	bf 91       	pop	r27
    3a9e:	af 91       	pop	r26
    3aa0:	9f 91       	pop	r25
    3aa2:	8f 91       	pop	r24
    3aa4:	7f 91       	pop	r23
    3aa6:	6f 91       	pop	r22
    3aa8:	5f 91       	pop	r21
    3aaa:	4f 91       	pop	r20
    3aac:	3f 91       	pop	r19
    3aae:	2f 91       	pop	r18
    3ab0:	0f 90       	pop	r0
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	0f 90       	pop	r0
    3ab6:	1f 90       	pop	r1
    3ab8:	18 95       	reti

00003aba <MGIE_voidEnable>:
#include "LBIT_math.h"

/* SWC Includes */
#include "MGIE_private.h"

void MGIE_voidEnable(void){
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	cd b7       	in	r28, 0x3d	; 61
    3ac0:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG,I_BIT);
    3ac2:	af e5       	ldi	r26, 0x5F	; 95
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	ef e5       	ldi	r30, 0x5F	; 95
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	80 68       	ori	r24, 0x80	; 128
    3ace:	8c 93       	st	X, r24
	
}
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	08 95       	ret

00003ad6 <MGIE_voidDisable>:
void MGIE_voidDisable(void){
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I_BIT);
    3ade:	af e5       	ldi	r26, 0x5F	; 95
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	ef e5       	ldi	r30, 0x5F	; 95
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8f 77       	andi	r24, 0x7F	; 127
    3aea:	8c 93       	st	X, r24
}
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <MTIM_stderrInit>:
void (*MTIM_pvoidfUserFunctionT0OVF)(void)=NULL_POINTER;
void (*MTIM_pvoidfUserFunctionT0OCM)(void)=NULL_POINTER;


STD_error_t MTIM_stderrInit(u8 ARG_u8TimerNo,u8 ARG_u8ClockSource,u8 ARG_u8u8Mode ,u8 ARG_u8HWPinMode)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	29 97       	sbiw	r28, 0x09	; 9
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	8a 83       	std	Y+2, r24	; 0x02
    3b08:	6b 83       	std	Y+3, r22	; 0x03
    3b0a:	4c 83       	std	Y+4, r20	; 0x04
    3b0c:	2d 83       	std	Y+5, r18	; 0x05
	STD_error_t L_stderrState=E_OK;
    3b0e:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8TimerNo<=2 &&ARG_u8ClockSource<=7 && ARG_u8u8Mode<=3 && ARG_u8HWPinMode<=3)
    3b10:	8a 81       	ldd	r24, Y+2	; 0x02
    3b12:	83 30       	cpi	r24, 0x03	; 3
    3b14:	08 f0       	brcs	.+2      	; 0x3b18 <MTIM_stderrInit+0x26>
    3b16:	98 c0       	rjmp	.+304    	; 0x3c48 <MTIM_stderrInit+0x156>
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	88 30       	cpi	r24, 0x08	; 8
    3b1c:	08 f0       	brcs	.+2      	; 0x3b20 <MTIM_stderrInit+0x2e>
    3b1e:	94 c0       	rjmp	.+296    	; 0x3c48 <MTIM_stderrInit+0x156>
    3b20:	8c 81       	ldd	r24, Y+4	; 0x04
    3b22:	84 30       	cpi	r24, 0x04	; 4
    3b24:	08 f0       	brcs	.+2      	; 0x3b28 <MTIM_stderrInit+0x36>
    3b26:	90 c0       	rjmp	.+288    	; 0x3c48 <MTIM_stderrInit+0x156>
    3b28:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2a:	84 30       	cpi	r24, 0x04	; 4
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <MTIM_stderrInit+0x3e>
    3b2e:	8c c0       	rjmp	.+280    	; 0x3c48 <MTIM_stderrInit+0x156>
	{
		switch(ARG_u8TimerNo){
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	28 2f       	mov	r18, r24
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	39 87       	std	Y+9, r19	; 0x09
    3b38:	28 87       	std	Y+8, r18	; 0x08
    3b3a:	88 85       	ldd	r24, Y+8	; 0x08
    3b3c:	99 85       	ldd	r25, Y+9	; 0x09
    3b3e:	81 30       	cpi	r24, 0x01	; 1
    3b40:	91 05       	cpc	r25, r1
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <MTIM_stderrInit+0x54>
    3b44:	83 c0       	rjmp	.+262    	; 0x3c4c <MTIM_stderrInit+0x15a>
    3b46:	28 85       	ldd	r18, Y+8	; 0x08
    3b48:	39 85       	ldd	r19, Y+9	; 0x09
    3b4a:	22 30       	cpi	r18, 0x02	; 2
    3b4c:	31 05       	cpc	r19, r1
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <MTIM_stderrInit+0x60>
    3b50:	7d c0       	rjmp	.+250    	; 0x3c4c <MTIM_stderrInit+0x15a>
    3b52:	88 85       	ldd	r24, Y+8	; 0x08
    3b54:	99 85       	ldd	r25, Y+9	; 0x09
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <MTIM_stderrInit+0x6a>
    3b5a:	73 c0       	rjmp	.+230    	; 0x3c42 <MTIM_stderrInit+0x150>
			case MTIM_TIMER0:
				switch(ARG_u8u8Mode){
    3b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5e:	28 2f       	mov	r18, r24
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	3f 83       	std	Y+7, r19	; 0x07
    3b64:	2e 83       	std	Y+6, r18	; 0x06
    3b66:	8e 81       	ldd	r24, Y+6	; 0x06
    3b68:	9f 81       	ldd	r25, Y+7	; 0x07
    3b6a:	81 30       	cpi	r24, 0x01	; 1
    3b6c:	91 05       	cpc	r25, r1
    3b6e:	21 f1       	breq	.+72     	; 0x3bb8 <MTIM_stderrInit+0xc6>
    3b70:	2e 81       	ldd	r18, Y+6	; 0x06
    3b72:	3f 81       	ldd	r19, Y+7	; 0x07
    3b74:	22 30       	cpi	r18, 0x02	; 2
    3b76:	31 05       	cpc	r19, r1
    3b78:	2c f4       	brge	.+10     	; 0x3b84 <MTIM_stderrInit+0x92>
    3b7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3b7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	61 f0       	breq	.+24     	; 0x3b9a <MTIM_stderrInit+0xa8>
    3b82:	47 c0       	rjmp	.+142    	; 0x3c12 <MTIM_stderrInit+0x120>
    3b84:	2e 81       	ldd	r18, Y+6	; 0x06
    3b86:	3f 81       	ldd	r19, Y+7	; 0x07
    3b88:	22 30       	cpi	r18, 0x02	; 2
    3b8a:	31 05       	cpc	r19, r1
    3b8c:	21 f1       	breq	.+72     	; 0x3bd6 <MTIM_stderrInit+0xe4>
    3b8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3b90:	9f 81       	ldd	r25, Y+7	; 0x07
    3b92:	83 30       	cpi	r24, 0x03	; 3
    3b94:	91 05       	cpc	r25, r1
    3b96:	71 f1       	breq	.+92     	; 0x3bf4 <MTIM_stderrInit+0x102>
    3b98:	3c c0       	rjmp	.+120    	; 0x3c12 <MTIM_stderrInit+0x120>
					case MTIM_MODE_NORMAL:
						CLEAR_BIT(TCCR0,WGM01);
    3b9a:	a3 e5       	ldi	r26, 0x53	; 83
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	e3 e5       	ldi	r30, 0x53	; 83
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	87 7f       	andi	r24, 0xF7	; 247
    3ba6:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    3ba8:	a3 e5       	ldi	r26, 0x53	; 83
    3baa:	b0 e0       	ldi	r27, 0x00	; 0
    3bac:	e3 e5       	ldi	r30, 0x53	; 83
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	80 81       	ld	r24, Z
    3bb2:	8f 7b       	andi	r24, 0xBF	; 191
    3bb4:	8c 93       	st	X, r24
    3bb6:	2f c0       	rjmp	.+94     	; 0x3c16 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_CTC:
						SET_BIT(TCCR0,WGM01);
    3bb8:	a3 e5       	ldi	r26, 0x53	; 83
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e3 e5       	ldi	r30, 0x53	; 83
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	88 60       	ori	r24, 0x08	; 8
    3bc4:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    3bc6:	a3 e5       	ldi	r26, 0x53	; 83
    3bc8:	b0 e0       	ldi	r27, 0x00	; 0
    3bca:	e3 e5       	ldi	r30, 0x53	; 83
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	80 81       	ld	r24, Z
    3bd0:	8f 7b       	andi	r24, 0xBF	; 191
    3bd2:	8c 93       	st	X, r24
    3bd4:	20 c0       	rjmp	.+64     	; 0x3c16 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_FASTPWM:
						SET_BIT(TCCR0,WGM01);
    3bd6:	a3 e5       	ldi	r26, 0x53	; 83
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e3 e5       	ldi	r30, 0x53	; 83
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	88 60       	ori	r24, 0x08	; 8
    3be2:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM00);
    3be4:	a3 e5       	ldi	r26, 0x53	; 83
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e3 e5       	ldi	r30, 0x53	; 83
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	80 64       	ori	r24, 0x40	; 64
    3bf0:	8c 93       	st	X, r24
    3bf2:	11 c0       	rjmp	.+34     	; 0x3c16 <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_PHASECORRECTPWM:
						SET_BIT(TCCR0,WGM00);
    3bf4:	a3 e5       	ldi	r26, 0x53	; 83
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	e3 e5       	ldi	r30, 0x53	; 83
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	80 64       	ori	r24, 0x40	; 64
    3c00:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM01);
    3c02:	a3 e5       	ldi	r26, 0x53	; 83
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	e3 e5       	ldi	r30, 0x53	; 83
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	80 81       	ld	r24, Z
    3c0c:	87 7f       	andi	r24, 0xF7	; 247
    3c0e:	8c 93       	st	X, r24
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <MTIM_stderrInit+0x124>
					break;
					default: L_stderrState=E_NOK; break;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	89 83       	std	Y+1, r24	; 0x01
				}
				TCCR0 = (TCCR0&0xCF) | (ARG_u8HWPinMode<<4);
    3c16:	a3 e5       	ldi	r26, 0x53	; 83
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e3 e5       	ldi	r30, 0x53	; 83
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	28 2f       	mov	r18, r24
    3c22:	2f 7c       	andi	r18, 0xCF	; 207
    3c24:	8d 81       	ldd	r24, Y+5	; 0x05
    3c26:	88 2f       	mov	r24, r24
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	82 95       	swap	r24
    3c2c:	92 95       	swap	r25
    3c2e:	90 7f       	andi	r25, 0xF0	; 240
    3c30:	98 27       	eor	r25, r24
    3c32:	80 7f       	andi	r24, 0xF0	; 240
    3c34:	98 27       	eor	r25, r24
    3c36:	82 2b       	or	r24, r18
    3c38:	8c 93       	st	X, r24
				MTIM_u8Timer0Clock = ARG_u8ClockSource; /* assign it to global var*/
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3c:	80 93 a8 01 	sts	0x01A8, r24
    3c40:	05 c0       	rjmp	.+10     	; 0x3c4c <MTIM_stderrInit+0x15a>

			case MTIM_TIMER1:
			break;
			case MTIM_TIMER2:
			break;
			default: L_stderrState=E_NOK; break;
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	89 83       	std	Y+1, r24	; 0x01
    3c46:	02 c0       	rjmp	.+4      	; 0x3c4c <MTIM_stderrInit+0x15a>
		}
	}
	else{
		L_stderrState=E_NOK;
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c4e:	29 96       	adiw	r28, 0x09	; 9
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <MTIM_voidForceOutputCompare>:

void MTIM_voidForceOutputCompare(void)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,FOC0);
    3c68:	a3 e5       	ldi	r26, 0x53	; 83
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	e3 e5       	ldi	r30, 0x53	; 83
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	80 81       	ld	r24, Z
    3c72:	80 68       	ori	r24, 0x80	; 128
    3c74:	8c 93       	st	X, r24
}
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <MTIM_stderrEnableInterrupt>:

STD_error_t MTIM_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <MTIM_stderrEnableInterrupt+0x6>
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3c88:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8InterruptSource<=7){
    3c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8c:	88 30       	cpi	r24, 0x08	; 8
    3c8e:	a0 f4       	brcc	.+40     	; 0x3cb8 <MTIM_stderrEnableInterrupt+0x3c>
		SET_BIT(TIMSK, ARG_u8InterruptSource);
    3c90:	a9 e5       	ldi	r26, 0x59	; 89
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	e9 e5       	ldi	r30, 0x59	; 89
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	48 2f       	mov	r20, r24
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	28 2f       	mov	r18, r24
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	02 2e       	mov	r0, r18
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <MTIM_stderrEnableInterrupt+0x32>
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	0a 94       	dec	r0
    3cb0:	e2 f7       	brpl	.-8      	; 0x3caa <MTIM_stderrEnableInterrupt+0x2e>
    3cb2:	84 2b       	or	r24, r20
    3cb4:	8c 93       	st	X, r24
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <MTIM_stderrEnableInterrupt+0x40>
	}
	else{
		L_stderrState=E_NOK;
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	cf 91       	pop	r28
    3cc4:	df 91       	pop	r29
    3cc6:	08 95       	ret

00003cc8 <MTIM_stderrDisableInterrupt>:
STD_error_t MTIM_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    3cc8:	df 93       	push	r29
    3cca:	cf 93       	push	r28
    3ccc:	00 d0       	rcall	.+0      	; 0x3cce <MTIM_stderrDisableInterrupt+0x6>
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3cd4:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8InterruptSource<=7){
    3cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd8:	88 30       	cpi	r24, 0x08	; 8
    3cda:	a8 f4       	brcc	.+42     	; 0x3d06 <MTIM_stderrDisableInterrupt+0x3e>
		CLEAR_BIT(TIMSK, ARG_u8InterruptSource);
    3cdc:	a9 e5       	ldi	r26, 0x59	; 89
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	e9 e5       	ldi	r30, 0x59	; 89
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	48 2f       	mov	r20, r24
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	28 2f       	mov	r18, r24
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	02 2e       	mov	r0, r18
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <MTIM_stderrDisableInterrupt+0x32>
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	0a 94       	dec	r0
    3cfc:	e2 f7       	brpl	.-8      	; 0x3cf6 <MTIM_stderrDisableInterrupt+0x2e>
    3cfe:	80 95       	com	r24
    3d00:	84 23       	and	r24, r20
    3d02:	8c 93       	st	X, r24
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <MTIM_stderrDisableInterrupt+0x42>
	}
	else{
		L_stderrState=E_NOK;
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <MTIM_stderrSetCallBack>:
STD_error_t MTIM_stderrSetCallBack(void(*ARG_pvoidfUserFunction)(void), u8 ARG_u8InterruptSource)
{
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	00 d0       	rcall	.+0      	; 0x3d1c <MTIM_stderrSetCallBack+0x6>
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <MTIM_stderrSetCallBack+0x8>
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <MTIM_stderrSetCallBack+0xa>
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	9b 83       	std	Y+3, r25	; 0x03
    3d26:	8a 83       	std	Y+2, r24	; 0x02
    3d28:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    3d2a:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_pvoidfUserFunction!=NULL_POINTER ){
    3d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	01 f1       	breq	.+64     	; 0x3d74 <MTIM_stderrSetCallBack+0x5e>

		switch(ARG_u8InterruptSource){
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	3e 83       	std	Y+6, r19	; 0x06
    3d3c:	2d 83       	std	Y+5, r18	; 0x05
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	31 f0       	breq	.+12     	; 0x3d52 <MTIM_stderrSetCallBack+0x3c>
    3d46:	2d 81       	ldd	r18, Y+5	; 0x05
    3d48:	3e 81       	ldd	r19, Y+6	; 0x06
    3d4a:	21 30       	cpi	r18, 0x01	; 1
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	41 f0       	breq	.+16     	; 0x3d60 <MTIM_stderrSetCallBack+0x4a>
    3d50:	0e c0       	rjmp	.+28     	; 0x3d6e <MTIM_stderrSetCallBack+0x58>
			case MTIM_INTERRUPT_T0_OVF:	MTIM_pvoidfUserFunctionT0OVF=ARG_pvoidfUserFunction; break;
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	9b 81       	ldd	r25, Y+3	; 0x03
    3d56:	90 93 a3 01 	sts	0x01A3, r25
    3d5a:	80 93 a2 01 	sts	0x01A2, r24
    3d5e:	0c c0       	rjmp	.+24     	; 0x3d78 <MTIM_stderrSetCallBack+0x62>
			case MTIM_INTERRUPT_T0_OCM:	MTIM_pvoidfUserFunctionT0OCM=ARG_pvoidfUserFunction; break;
    3d60:	8a 81       	ldd	r24, Y+2	; 0x02
    3d62:	9b 81       	ldd	r25, Y+3	; 0x03
    3d64:	90 93 a5 01 	sts	0x01A5, r25
    3d68:	80 93 a4 01 	sts	0x01A4, r24
    3d6c:	05 c0       	rjmp	.+10     	; 0x3d78 <MTIM_stderrSetCallBack+0x62>
			default: L_stderrState=E_NOK; break;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	89 83       	std	Y+1, r24	; 0x01
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <MTIM_stderrSetCallBack+0x62>
		}
	}
	else{
		L_stderrState=E_NULL_POINTER;
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d7a:	26 96       	adiw	r28, 0x06	; 6
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	f8 94       	cli
    3d80:	de bf       	out	0x3e, r29	; 62
    3d82:	0f be       	out	0x3f, r0	; 63
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	08 95       	ret

00003d8c <MTIM_stderrStartTimer>:
STD_error_t MTIM_stderrStartTimer(u8 ARG_u8TimerNo)
{
    3d8c:	df 93       	push	r29
    3d8e:	cf 93       	push	r28
    3d90:	00 d0       	rcall	.+0      	; 0x3d92 <MTIM_stderrStartTimer+0x6>
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <MTIM_stderrStartTimer+0x8>
    3d94:	cd b7       	in	r28, 0x3d	; 61
    3d96:	de b7       	in	r29, 0x3e	; 62
    3d98:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3d9a:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    3d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9e:	28 2f       	mov	r18, r24
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	3c 83       	std	Y+4, r19	; 0x04
    3da4:	2b 83       	std	Y+3, r18	; 0x03
    3da6:	8b 81       	ldd	r24, Y+3	; 0x03
    3da8:	9c 81       	ldd	r25, Y+4	; 0x04
    3daa:	81 30       	cpi	r24, 0x01	; 1
    3dac:	91 05       	cpc	r25, r1
    3dae:	b9 f0       	breq	.+46     	; 0x3dde <MTIM_stderrStartTimer+0x52>
    3db0:	2b 81       	ldd	r18, Y+3	; 0x03
    3db2:	3c 81       	ldd	r19, Y+4	; 0x04
    3db4:	22 30       	cpi	r18, 0x02	; 2
    3db6:	31 05       	cpc	r19, r1
    3db8:	91 f0       	breq	.+36     	; 0x3dde <MTIM_stderrStartTimer+0x52>
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbe:	00 97       	sbiw	r24, 0x00	; 0
    3dc0:	61 f4       	brne	.+24     	; 0x3dda <MTIM_stderrStartTimer+0x4e>
		case MTIM_TIMER0:	TCCR0 = (TCCR0 & 0xF8) | MTIM_u8Timer0Clock; break;
    3dc2:	a3 e5       	ldi	r26, 0x53	; 83
    3dc4:	b0 e0       	ldi	r27, 0x00	; 0
    3dc6:	e3 e5       	ldi	r30, 0x53	; 83
    3dc8:	f0 e0       	ldi	r31, 0x00	; 0
    3dca:	80 81       	ld	r24, Z
    3dcc:	98 2f       	mov	r25, r24
    3dce:	98 7f       	andi	r25, 0xF8	; 248
    3dd0:	80 91 a8 01 	lds	r24, 0x01A8
    3dd4:	89 2b       	or	r24, r25
    3dd6:	8c 93       	st	X, r24
    3dd8:	02 c0       	rjmp	.+4      	; 0x3dde <MTIM_stderrStartTimer+0x52>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	08 95       	ret

00003dee <MTIM_stderrStopTimer>:
STD_error_t MTIM_stderrStopTimer(u8 ARG_u8TimerNo)
{
    3dee:	df 93       	push	r29
    3df0:	cf 93       	push	r28
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <MTIM_stderrStopTimer+0x6>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <MTIM_stderrStopTimer+0x8>
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
    3dfa:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3dfc:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	28 2f       	mov	r18, r24
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	3c 83       	std	Y+4, r19	; 0x04
    3e06:	2b 83       	std	Y+3, r18	; 0x03
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0c:	81 30       	cpi	r24, 0x01	; 1
    3e0e:	91 05       	cpc	r25, r1
    3e10:	99 f0       	breq	.+38     	; 0x3e38 <MTIM_stderrStopTimer+0x4a>
    3e12:	2b 81       	ldd	r18, Y+3	; 0x03
    3e14:	3c 81       	ldd	r19, Y+4	; 0x04
    3e16:	22 30       	cpi	r18, 0x02	; 2
    3e18:	31 05       	cpc	r19, r1
    3e1a:	71 f0       	breq	.+28     	; 0x3e38 <MTIM_stderrStopTimer+0x4a>
    3e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e20:	00 97       	sbiw	r24, 0x00	; 0
    3e22:	41 f4       	brne	.+16     	; 0x3e34 <MTIM_stderrStopTimer+0x46>
		case MTIM_TIMER0:	TCCR0 = (TCCR0 & 0xF8) | MTIM_CS_NO_CLOCK; break;
    3e24:	a3 e5       	ldi	r26, 0x53	; 83
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	e3 e5       	ldi	r30, 0x53	; 83
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	88 7f       	andi	r24, 0xF8	; 248
    3e30:	8c 93       	st	X, r24
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <MTIM_stderrStopTimer+0x4a>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	cf 91       	pop	r28
    3e44:	df 91       	pop	r29
    3e46:	08 95       	ret

00003e48 <MTIM_stderrSetOCR>:
STD_error_t MTIM_stderrSetOCR(u8 ARG_u8TimerNo,u16 ARG_u16OCRValue)
{
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	00 d0       	rcall	.+0      	; 0x3e4e <MTIM_stderrSetOCR+0x6>
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <MTIM_stderrSetOCR+0x8>
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <MTIM_stderrSetOCR+0xa>
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	8a 83       	std	Y+2, r24	; 0x02
    3e58:	7c 83       	std	Y+4, r23	; 0x04
    3e5a:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    3e5c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    3e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e60:	28 2f       	mov	r18, r24
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	3e 83       	std	Y+6, r19	; 0x06
    3e66:	2d 83       	std	Y+5, r18	; 0x05
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	81 30       	cpi	r24, 0x01	; 1
    3e6e:	91 05       	cpc	r25, r1
    3e70:	81 f0       	breq	.+32     	; 0x3e92 <MTIM_stderrSetOCR+0x4a>
    3e72:	2d 81       	ldd	r18, Y+5	; 0x05
    3e74:	3e 81       	ldd	r19, Y+6	; 0x06
    3e76:	22 30       	cpi	r18, 0x02	; 2
    3e78:	31 05       	cpc	r19, r1
    3e7a:	59 f0       	breq	.+22     	; 0x3e92 <MTIM_stderrSetOCR+0x4a>
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	29 f4       	brne	.+10     	; 0x3e8e <MTIM_stderrSetOCR+0x46>
		case MTIM_TIMER0:	OCR0 = ARG_u16OCRValue; break;
    3e84:	ec e5       	ldi	r30, 0x5C	; 92
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	80 83       	st	Z, r24
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <MTIM_stderrSetOCR+0x4a>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e94:	26 96       	adiw	r28, 0x06	; 6
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	f8 94       	cli
    3e9a:	de bf       	out	0x3e, r29	; 62
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	cd bf       	out	0x3d, r28	; 61
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <MTIM_stderrTimerDelay>:
STD_error_t MTIM_stderrTimerDelay(u8 ARG_u8TimerNo, u32 ARG_u32Delay){
    3ea6:	ef 92       	push	r14
    3ea8:	ff 92       	push	r15
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	64 97       	sbiw	r28, 0x14	; 20
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	8c 87       	std	Y+12, r24	; 0x0c
    3ec4:	4d 87       	std	Y+13, r20	; 0x0d
    3ec6:	5e 87       	std	Y+14, r21	; 0x0e
    3ec8:	6f 87       	std	Y+15, r22	; 0x0f
    3eca:	78 8b       	std	Y+16, r23	; 0x10
	STD_error_t L_stderrState=E_OK;
    3ecc:	1b 86       	std	Y+11, r1	; 0x0b
	f32 L_f32TickTime,L_f32OVFTime;
	u16 L_u16Prscaler;
	switch(ARG_u8TimerNo){
    3ece:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ed0:	28 2f       	mov	r18, r24
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	3c 8b       	std	Y+20, r19	; 0x14
    3ed6:	2b 8b       	std	Y+19, r18	; 0x13
    3ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    3eda:	9c 89       	ldd	r25, Y+20	; 0x14
    3edc:	81 30       	cpi	r24, 0x01	; 1
    3ede:	91 05       	cpc	r25, r1
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <MTIM_stderrTimerDelay+0x3e>
    3ee2:	c4 c0       	rjmp	.+392    	; 0x406c <MTIM_stderrTimerDelay+0x1c6>
    3ee4:	2b 89       	ldd	r18, Y+19	; 0x13
    3ee6:	3c 89       	ldd	r19, Y+20	; 0x14
    3ee8:	22 30       	cpi	r18, 0x02	; 2
    3eea:	31 05       	cpc	r19, r1
    3eec:	09 f4       	brne	.+2      	; 0x3ef0 <MTIM_stderrTimerDelay+0x4a>
    3eee:	be c0       	rjmp	.+380    	; 0x406c <MTIM_stderrTimerDelay+0x1c6>
    3ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef4:	00 97       	sbiw	r24, 0x00	; 0
    3ef6:	09 f0       	breq	.+2      	; 0x3efa <MTIM_stderrTimerDelay+0x54>
    3ef8:	b7 c0       	rjmp	.+366    	; 0x4068 <MTIM_stderrTimerDelay+0x1c2>
		case MTIM_TIMER0:
			switch(MTIM_u8Timer0Clock){
    3efa:	80 91 a8 01 	lds	r24, 0x01A8
    3efe:	28 2f       	mov	r18, r24
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	3a 8b       	std	Y+18, r19	; 0x12
    3f04:	29 8b       	std	Y+17, r18	; 0x11
    3f06:	89 89       	ldd	r24, Y+17	; 0x11
    3f08:	9a 89       	ldd	r25, Y+18	; 0x12
    3f0a:	83 30       	cpi	r24, 0x03	; 3
    3f0c:	91 05       	cpc	r25, r1
    3f0e:	29 f1       	breq	.+74     	; 0x3f5a <MTIM_stderrTimerDelay+0xb4>
    3f10:	29 89       	ldd	r18, Y+17	; 0x11
    3f12:	3a 89       	ldd	r19, Y+18	; 0x12
    3f14:	24 30       	cpi	r18, 0x04	; 4
    3f16:	31 05       	cpc	r19, r1
    3f18:	5c f4       	brge	.+22     	; 0x3f30 <MTIM_stderrTimerDelay+0x8a>
    3f1a:	89 89       	ldd	r24, Y+17	; 0x11
    3f1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f1e:	81 30       	cpi	r24, 0x01	; 1
    3f20:	91 05       	cpc	r25, r1
    3f22:	89 f0       	breq	.+34     	; 0x3f46 <MTIM_stderrTimerDelay+0xa0>
    3f24:	29 89       	ldd	r18, Y+17	; 0x11
    3f26:	3a 89       	ldd	r19, Y+18	; 0x12
    3f28:	22 30       	cpi	r18, 0x02	; 2
    3f2a:	31 05       	cpc	r19, r1
    3f2c:	89 f0       	breq	.+34     	; 0x3f50 <MTIM_stderrTimerDelay+0xaa>
    3f2e:	24 c0       	rjmp	.+72     	; 0x3f78 <MTIM_stderrTimerDelay+0xd2>
    3f30:	89 89       	ldd	r24, Y+17	; 0x11
    3f32:	9a 89       	ldd	r25, Y+18	; 0x12
    3f34:	84 30       	cpi	r24, 0x04	; 4
    3f36:	91 05       	cpc	r25, r1
    3f38:	a9 f0       	breq	.+42     	; 0x3f64 <MTIM_stderrTimerDelay+0xbe>
    3f3a:	29 89       	ldd	r18, Y+17	; 0x11
    3f3c:	3a 89       	ldd	r19, Y+18	; 0x12
    3f3e:	25 30       	cpi	r18, 0x05	; 5
    3f40:	31 05       	cpc	r19, r1
    3f42:	a9 f0       	breq	.+42     	; 0x3f6e <MTIM_stderrTimerDelay+0xc8>
    3f44:	19 c0       	rjmp	.+50     	; 0x3f78 <MTIM_stderrTimerDelay+0xd2>
				case MTIM_CS_PRESCALER_1 	:L_u16Prscaler = 1; break;
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	9a 83       	std	Y+2, r25	; 0x02
    3f4c:	89 83       	std	Y+1, r24	; 0x01
    3f4e:	16 c0       	rjmp	.+44     	; 0x3f7c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_8 	:L_u16Prscaler = 8; break;
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	9a 83       	std	Y+2, r25	; 0x02
    3f56:	89 83       	std	Y+1, r24	; 0x01
    3f58:	11 c0       	rjmp	.+34     	; 0x3f7c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_64 	:L_u16Prscaler = 64; break;
    3f5a:	80 e4       	ldi	r24, 0x40	; 64
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	89 83       	std	Y+1, r24	; 0x01
    3f62:	0c c0       	rjmp	.+24     	; 0x3f7c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_256 	:L_u16Prscaler = 256; break;
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    3f6c:	07 c0       	rjmp	.+14     	; 0x3f7c <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_1024 :L_u16Prscaler = 1024; break;
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	94 e0       	ldi	r25, 0x04	; 4
    3f72:	9a 83       	std	Y+2, r25	; 0x02
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <MTIM_stderrTimerDelay+0xd6>
				default: L_stderrState=E_NOK; break;
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	8b 87       	std	Y+11, r24	; 0x0b
			}
			L_f32TickTime = (f32)L_u16Prscaler/ F_CPU;
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	cc 01       	movw	r24, r24
    3f82:	a0 e0       	ldi	r26, 0x00	; 0
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	bc 01       	movw	r22, r24
    3f94:	cd 01       	movw	r24, r26
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	34 e2       	ldi	r19, 0x24	; 36
    3f9a:	44 ef       	ldi	r20, 0xF4	; 244
    3f9c:	5a e4       	ldi	r21, 0x4A	; 74
    3f9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	8f 83       	std	Y+7, r24	; 0x07
    3fa8:	98 87       	std	Y+8, r25	; 0x08
    3faa:	a9 87       	std	Y+9, r26	; 0x09
    3fac:	ba 87       	std	Y+10, r27	; 0x0a
			L_f32OVFTime = L_f32TickTime * 256;
    3fae:	6f 81       	ldd	r22, Y+7	; 0x07
    3fb0:	78 85       	ldd	r23, Y+8	; 0x08
    3fb2:	89 85       	ldd	r24, Y+9	; 0x09
    3fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e8       	ldi	r20, 0x80	; 128
    3fbc:	53 e4       	ldi	r21, 0x43	; 67
    3fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc2:	dc 01       	movw	r26, r24
    3fc4:	cb 01       	movw	r24, r22
    3fc6:	8b 83       	std	Y+3, r24	; 0x03
    3fc8:	9c 83       	std	Y+4, r25	; 0x04
    3fca:	ad 83       	std	Y+5, r26	; 0x05
    3fcc:	be 83       	std	Y+6, r27	; 0x06
			MTIM_u16Timer0OVFCount = ((f32)ARG_u32Delay/1000) / L_f32OVFTime;
    3fce:	6d 85       	ldd	r22, Y+13	; 0x0d
    3fd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    3fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd4:	98 89       	ldd	r25, Y+16	; 0x10
    3fd6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	bc 01       	movw	r22, r24
    3fe0:	cd 01       	movw	r24, r26
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	4a e7       	ldi	r20, 0x7A	; 122
    3fe8:	54 e4       	ldi	r21, 0x44	; 68
    3fea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	bc 01       	movw	r22, r24
    3ff4:	cd 01       	movw	r24, r26
    3ff6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ff8:	3c 81       	ldd	r19, Y+4	; 0x04
    3ffa:	4d 81       	ldd	r20, Y+5	; 0x05
    3ffc:	5e 81       	ldd	r21, Y+6	; 0x06
    3ffe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	bc 01       	movw	r22, r24
    4008:	cd 01       	movw	r24, r26
    400a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400e:	dc 01       	movw	r26, r24
    4010:	cb 01       	movw	r24, r22
    4012:	90 93 aa 01 	sts	0x01AA, r25
    4016:	80 93 a9 01 	sts	0x01A9, r24
			MTIM_u8Timer0Preload = 256 - ((ARG_u32Delay / 1000) % (u32)L_f32OVFTime);
    401a:	8d 85       	ldd	r24, Y+13	; 0x0d
    401c:	9e 85       	ldd	r25, Y+14	; 0x0e
    401e:	af 85       	ldd	r26, Y+15	; 0x0f
    4020:	b8 89       	ldd	r27, Y+16	; 0x10
    4022:	28 ee       	ldi	r18, 0xE8	; 232
    4024:	33 e0       	ldi	r19, 0x03	; 3
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	bc 01       	movw	r22, r24
    402c:	cd 01       	movw	r24, r26
    402e:	0e 94 57 23 	call	0x46ae	; 0x46ae <__udivmodsi4>
    4032:	da 01       	movw	r26, r20
    4034:	c9 01       	movw	r24, r18
    4036:	7c 01       	movw	r14, r24
    4038:	8d 01       	movw	r16, r26
    403a:	6b 81       	ldd	r22, Y+3	; 0x03
    403c:	7c 81       	ldd	r23, Y+4	; 0x04
    403e:	8d 81       	ldd	r24, Y+5	; 0x05
    4040:	9e 81       	ldd	r25, Y+6	; 0x06
    4042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4046:	9b 01       	movw	r18, r22
    4048:	ac 01       	movw	r20, r24
    404a:	c8 01       	movw	r24, r16
    404c:	b7 01       	movw	r22, r14
    404e:	0e 94 57 23 	call	0x46ae	; 0x46ae <__udivmodsi4>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	81 95       	neg	r24
    4058:	80 93 ab 01 	sts	0x01AB, r24
			TCNT0= MTIM_u8Timer0Preload;
    405c:	e2 e5       	ldi	r30, 0x52	; 82
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 91 ab 01 	lds	r24, 0x01AB
    4064:	80 83       	st	Z, r24
    4066:	02 c0       	rjmp	.+4      	; 0x406c <MTIM_stderrTimerDelay+0x1c6>
		break;
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return L_stderrState;
    406c:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    406e:	64 96       	adiw	r28, 0x14	; 20
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	ff 90       	pop	r15
    4084:	ef 90       	pop	r14
    4086:	08 95       	ret

00004088 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    4088:	1f 92       	push	r1
    408a:	0f 92       	push	r0
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	0f 92       	push	r0
    4090:	11 24       	eor	r1, r1
    4092:	2f 93       	push	r18
    4094:	3f 93       	push	r19
    4096:	4f 93       	push	r20
    4098:	5f 93       	push	r21
    409a:	6f 93       	push	r22
    409c:	7f 93       	push	r23
    409e:	8f 93       	push	r24
    40a0:	9f 93       	push	r25
    40a2:	af 93       	push	r26
    40a4:	bf 93       	push	r27
    40a6:	ef 93       	push	r30
    40a8:	ff 93       	push	r31
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	cd b7       	in	r28, 0x3d	; 61
    40b0:	de b7       	in	r29, 0x3e	; 62

	if(NULL_POINTER != MTIM_pvoidfUserFunctionT0OVF)
    40b2:	80 91 a2 01 	lds	r24, 0x01A2
    40b6:	90 91 a3 01 	lds	r25, 0x01A3
    40ba:	00 97       	sbiw	r24, 0x00	; 0
    40bc:	29 f1       	breq	.+74     	; 0x4108 <__vector_11+0x80>
	{
		volatile static u16 L_u16OVFCounter = 0;
		L_u16OVFCounter++;
    40be:	80 91 a6 01 	lds	r24, 0x01A6
    40c2:	90 91 a7 01 	lds	r25, 0x01A7
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	90 93 a7 01 	sts	0x01A7, r25
    40cc:	80 93 a6 01 	sts	0x01A6, r24
		if(L_u16OVFCounter==(MTIM_u16Timer0OVFCount+1))
    40d0:	80 91 a9 01 	lds	r24, 0x01A9
    40d4:	90 91 aa 01 	lds	r25, 0x01AA
    40d8:	9c 01       	movw	r18, r24
    40da:	2f 5f       	subi	r18, 0xFF	; 255
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	80 91 a6 01 	lds	r24, 0x01A6
    40e2:	90 91 a7 01 	lds	r25, 0x01A7
    40e6:	28 17       	cp	r18, r24
    40e8:	39 07       	cpc	r19, r25
    40ea:	71 f4       	brne	.+28     	; 0x4108 <__vector_11+0x80>
		{
			L_u16OVFCounter =0;
    40ec:	10 92 a7 01 	sts	0x01A7, r1
    40f0:	10 92 a6 01 	sts	0x01A6, r1
			TCNT0=MTIM_u8Timer0Preload;
    40f4:	e2 e5       	ldi	r30, 0x52	; 82
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	80 91 ab 01 	lds	r24, 0x01AB
    40fc:	80 83       	st	Z, r24
			(*MTIM_pvoidfUserFunctionT0OVF)();
    40fe:	e0 91 a2 01 	lds	r30, 0x01A2
    4102:	f0 91 a3 01 	lds	r31, 0x01A3
    4106:	09 95       	icall
	else
	{
		/* do nothing */
	}

}
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	ff 91       	pop	r31
    410e:	ef 91       	pop	r30
    4110:	bf 91       	pop	r27
    4112:	af 91       	pop	r26
    4114:	9f 91       	pop	r25
    4116:	8f 91       	pop	r24
    4118:	7f 91       	pop	r23
    411a:	6f 91       	pop	r22
    411c:	5f 91       	pop	r21
    411e:	4f 91       	pop	r20
    4120:	3f 91       	pop	r19
    4122:	2f 91       	pop	r18
    4124:	0f 90       	pop	r0
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	0f 90       	pop	r0
    412a:	1f 90       	pop	r1
    412c:	18 95       	reti

0000412e <ChangeTimeCallBack>:
#define WARNING 	1
#define ERROR 		2
#define FINISHED	3

/* will be used for MTIM_ISR */
void ChangeTimeCallBack(void){
    412e:	df 93       	push	r29
    4130:	cf 93       	push	r28
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
	// 1st
	//special condition to stop timer
	if(0==G_u8MinutesValue  && 0==G_u8SecondsValue)
    4136:	80 91 ac 01 	lds	r24, 0x01AC
    413a:	88 23       	and	r24, r24
    413c:	41 f4       	brne	.+16     	; 0x414e <ChangeTimeCallBack+0x20>
    413e:	80 91 ad 01 	lds	r24, 0x01AD
    4142:	88 23       	and	r24, r24
    4144:	21 f4       	brne	.+8      	; 0x414e <ChangeTimeCallBack+0x20>
	{
		// stop timer
		MTIM_stderrStopTimer(MTIM_TIMER0);
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <MTIM_stderrStopTimer>
    414c:	16 c0       	rjmp	.+44     	; 0x417a <ChangeTimeCallBack+0x4c>

	}
	else if( 0!=G_u8MinutesValue && 0==G_u8SecondsValue ){
    414e:	80 91 ac 01 	lds	r24, 0x01AC
    4152:	88 23       	and	r24, r24
    4154:	69 f0       	breq	.+26     	; 0x4170 <ChangeTimeCallBack+0x42>
    4156:	80 91 ad 01 	lds	r24, 0x01AD
    415a:	88 23       	and	r24, r24
    415c:	49 f4       	brne	.+18     	; 0x4170 <ChangeTimeCallBack+0x42>
		G_u8SecondsValue=59;
    415e:	8b e3       	ldi	r24, 0x3B	; 59
    4160:	80 93 ad 01 	sts	0x01AD, r24
		G_u8MinutesValue--;
    4164:	80 91 ac 01 	lds	r24, 0x01AC
    4168:	81 50       	subi	r24, 0x01	; 1
    416a:	80 93 ac 01 	sts	0x01AC, r24
    416e:	05 c0       	rjmp	.+10     	; 0x417a <ChangeTimeCallBack+0x4c>
	}
	else{
		G_u8SecondsValue--;
    4170:	80 91 ad 01 	lds	r24, 0x01AD
    4174:	81 50       	subi	r24, 0x01	; 1
    4176:	80 93 ad 01 	sts	0x01AD, r24
	}

}
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	08 95       	ret

00004180 <ReadEnteredTime>:

/* will used to read from keypad and save this in minutes only read minutes */
void ReadEnteredTime(void){
    4180:	df 93       	push	r29
    4182:	cf 93       	push	r28
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	2f 97       	sbiw	r28, 0x0f	; 15
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
	// read max two digits if user enter special char that mean finish & start timer
	u8 L_u8i;
	G_u8MinutesValue=0;
    4194:	10 92 ac 01 	sts	0x01AC, r1
	G_u8SecondsValue=0;
    4198:	10 92 ad 01 	sts	0x01AD, r1
	for(L_u8i=0;L_u8i<2;L_u8i++)
    419c:	1f 86       	std	Y+15, r1	; 0x0f
    419e:	93 c0       	rjmp	.+294    	; 0x42c6 <ReadEnteredTime+0x146>
	{
		if('*'==HKPD_charGetKey() )
    41a0:	0e 94 17 07 	call	0xe2e	; 0xe2e <HKPD_charGetKey>
    41a4:	8a 32       	cpi	r24, 0x2A	; 42
    41a6:	09 f4       	brne	.+2      	; 0x41aa <ReadEnteredTime+0x2a>
    41a8:	92 c0       	rjmp	.+292    	; 0x42ce <ReadEnteredTime+0x14e>
			/* save data input 1 digit */
			break ;
		}
		else
		{
			G_u8MinutesValue *=10; // store
    41aa:	80 91 ac 01 	lds	r24, 0x01AC
    41ae:	88 2f       	mov	r24, r24
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	9c 01       	movw	r18, r24
    41b4:	22 0f       	add	r18, r18
    41b6:	33 1f       	adc	r19, r19
    41b8:	c9 01       	movw	r24, r18
    41ba:	88 0f       	add	r24, r24
    41bc:	99 1f       	adc	r25, r25
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	82 0f       	add	r24, r18
    41c4:	93 1f       	adc	r25, r19
    41c6:	80 93 ac 01 	sts	0x01AC, r24
			G_u8MinutesValue += (HKPD_charGetKey() - '0');
    41ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <HKPD_charGetKey>
    41ce:	98 2f       	mov	r25, r24
    41d0:	80 91 ac 01 	lds	r24, 0x01AC
    41d4:	89 0f       	add	r24, r25
    41d6:	80 53       	subi	r24, 0x30	; 48
    41d8:	80 93 ac 01 	sts	0x01AC, r24
    41dc:	80 e0       	ldi	r24, 0x00	; 0
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	a6 e9       	ldi	r26, 0x96	; 150
    41e2:	b3 e4       	ldi	r27, 0x43	; 67
    41e4:	8b 87       	std	Y+11, r24	; 0x0b
    41e6:	9c 87       	std	Y+12, r25	; 0x0c
    41e8:	ad 87       	std	Y+13, r26	; 0x0d
    41ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	4a ef       	ldi	r20, 0xFA	; 250
    41fa:	54 e4       	ldi	r21, 0x44	; 68
    41fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	8f 83       	std	Y+7, r24	; 0x07
    4206:	98 87       	std	Y+8, r25	; 0x08
    4208:	a9 87       	std	Y+9, r26	; 0x09
    420a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    420c:	6f 81       	ldd	r22, Y+7	; 0x07
    420e:	78 85       	ldd	r23, Y+8	; 0x08
    4210:	89 85       	ldd	r24, Y+9	; 0x09
    4212:	9a 85       	ldd	r25, Y+10	; 0x0a
    4214:	20 e0       	ldi	r18, 0x00	; 0
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	40 e8       	ldi	r20, 0x80	; 128
    421a:	5f e3       	ldi	r21, 0x3F	; 63
    421c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4220:	88 23       	and	r24, r24
    4222:	2c f4       	brge	.+10     	; 0x422e <ReadEnteredTime+0xae>
		__ticks = 1;
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	8d 83       	std	Y+5, r24	; 0x05
    422c:	3f c0       	rjmp	.+126    	; 0x42ac <ReadEnteredTime+0x12c>
	else if (__tmp > 65535)
    422e:	6f 81       	ldd	r22, Y+7	; 0x07
    4230:	78 85       	ldd	r23, Y+8	; 0x08
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	3f ef       	ldi	r19, 0xFF	; 255
    423a:	4f e7       	ldi	r20, 0x7F	; 127
    423c:	57 e4       	ldi	r21, 0x47	; 71
    423e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4242:	18 16       	cp	r1, r24
    4244:	4c f5       	brge	.+82     	; 0x4298 <ReadEnteredTime+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4246:	6b 85       	ldd	r22, Y+11	; 0x0b
    4248:	7c 85       	ldd	r23, Y+12	; 0x0c
    424a:	8d 85       	ldd	r24, Y+13	; 0x0d
    424c:	9e 85       	ldd	r25, Y+14	; 0x0e
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	40 e2       	ldi	r20, 0x20	; 32
    4254:	51 e4       	ldi	r21, 0x41	; 65
    4256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	bc 01       	movw	r22, r24
    4260:	cd 01       	movw	r24, r26
    4262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4266:	dc 01       	movw	r26, r24
    4268:	cb 01       	movw	r24, r22
    426a:	9e 83       	std	Y+6, r25	; 0x06
    426c:	8d 83       	std	Y+5, r24	; 0x05
    426e:	0f c0       	rjmp	.+30     	; 0x428e <ReadEnteredTime+0x10e>
    4270:	88 ec       	ldi	r24, 0xC8	; 200
    4272:	90 e0       	ldi	r25, 0x00	; 0
    4274:	9c 83       	std	Y+4, r25	; 0x04
    4276:	8b 83       	std	Y+3, r24	; 0x03
    4278:	8b 81       	ldd	r24, Y+3	; 0x03
    427a:	9c 81       	ldd	r25, Y+4	; 0x04
    427c:	01 97       	sbiw	r24, 0x01	; 1
    427e:	f1 f7       	brne	.-4      	; 0x427c <ReadEnteredTime+0xfc>
    4280:	9c 83       	std	Y+4, r25	; 0x04
    4282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4284:	8d 81       	ldd	r24, Y+5	; 0x05
    4286:	9e 81       	ldd	r25, Y+6	; 0x06
    4288:	01 97       	sbiw	r24, 0x01	; 1
    428a:	9e 83       	std	Y+6, r25	; 0x06
    428c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    428e:	8d 81       	ldd	r24, Y+5	; 0x05
    4290:	9e 81       	ldd	r25, Y+6	; 0x06
    4292:	00 97       	sbiw	r24, 0x00	; 0
    4294:	69 f7       	brne	.-38     	; 0x4270 <ReadEnteredTime+0xf0>
    4296:	14 c0       	rjmp	.+40     	; 0x42c0 <ReadEnteredTime+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4298:	6f 81       	ldd	r22, Y+7	; 0x07
    429a:	78 85       	ldd	r23, Y+8	; 0x08
    429c:	89 85       	ldd	r24, Y+9	; 0x09
    429e:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a4:	dc 01       	movw	r26, r24
    42a6:	cb 01       	movw	r24, r22
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
    42ac:	8d 81       	ldd	r24, Y+5	; 0x05
    42ae:	9e 81       	ldd	r25, Y+6	; 0x06
    42b0:	9a 83       	std	Y+2, r25	; 0x02
    42b2:	89 83       	std	Y+1, r24	; 0x01
    42b4:	89 81       	ldd	r24, Y+1	; 0x01
    42b6:	9a 81       	ldd	r25, Y+2	; 0x02
    42b8:	01 97       	sbiw	r24, 0x01	; 1
    42ba:	f1 f7       	brne	.-4      	; 0x42b8 <ReadEnteredTime+0x138>
    42bc:	9a 83       	std	Y+2, r25	; 0x02
    42be:	89 83       	std	Y+1, r24	; 0x01
void ReadEnteredTime(void){
	// read max two digits if user enter special char that mean finish & start timer
	u8 L_u8i;
	G_u8MinutesValue=0;
	G_u8SecondsValue=0;
	for(L_u8i=0;L_u8i<2;L_u8i++)
    42c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c2:	8f 5f       	subi	r24, 0xFF	; 255
    42c4:	8f 87       	std	Y+15, r24	; 0x0f
    42c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c8:	82 30       	cpi	r24, 0x02	; 2
    42ca:	08 f4       	brcc	.+2      	; 0x42ce <ReadEnteredTime+0x14e>
    42cc:	69 cf       	rjmp	.-302    	; 0x41a0 <ReadEnteredTime+0x20>
			G_u8MinutesValue *=10; // store
			G_u8MinutesValue += (HKPD_charGetKey() - '0');
		}
		_delay_ms(300);
	}
}
    42ce:	2f 96       	adiw	r28, 0x0f	; 15
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <DisplayTimeOnLCD>:

/* will be used to display Time on LCD Like XX:YY */
void DisplayTimeOnLCD(void){
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
	/* display minutes then : then Num */
	HLCD_voidSetCur(1,3);
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	63 e0       	ldi	r22, 0x03	; 3
    42ec:	0e 94 6e 15 	call	0x2adc	; 0x2adc <HLCD_voidSetCur>
	if(10>G_u8MinutesValue)
    42f0:	80 91 ac 01 	lds	r24, 0x01AC
    42f4:	8a 30       	cpi	r24, 0x0A	; 10
    42f6:	50 f4       	brcc	.+20     	; 0x430c <DisplayTimeOnLCD+0x2c>
	{
		HLCD_voidSendChar('0');
    42f8:	80 e3       	ldi	r24, 0x30	; 48
    42fa:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
		HLCD_voidSendNum((u16) G_u8MinutesValue);
    42fe:	80 91 ac 01 	lds	r24, 0x01AC
    4302:	88 2f       	mov	r24, r24
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <HLCD_voidSendNum>
    430a:	06 c0       	rjmp	.+12     	; 0x4318 <DisplayTimeOnLCD+0x38>
	}
	else
	{
		HLCD_voidSendNum((u16) G_u8MinutesValue);
    430c:	80 91 ac 01 	lds	r24, 0x01AC
    4310:	88 2f       	mov	r24, r24
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <HLCD_voidSendNum>
	}
	HLCD_voidSendChar(':');
    4318:	8a e3       	ldi	r24, 0x3A	; 58
    431a:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
	if(10>G_u8SecondsValue)
    431e:	80 91 ad 01 	lds	r24, 0x01AD
    4322:	8a 30       	cpi	r24, 0x0A	; 10
    4324:	50 f4       	brcc	.+20     	; 0x433a <DisplayTimeOnLCD+0x5a>
	{
		HLCD_voidSendChar('0');
    4326:	80 e3       	ldi	r24, 0x30	; 48
    4328:	0e 94 b5 10 	call	0x216a	; 0x216a <HLCD_voidSendChar>
		HLCD_voidSendNum((u16) G_u8SecondsValue);
    432c:	80 91 ad 01 	lds	r24, 0x01AD
    4330:	88 2f       	mov	r24, r24
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <HLCD_voidSendNum>
    4338:	06 c0       	rjmp	.+12     	; 0x4346 <DisplayTimeOnLCD+0x66>
	}
	else
	{
		HLCD_voidSendNum((u16) G_u8SecondsValue);
    433a:	80 91 ad 01 	lds	r24, 0x01AD
    433e:	88 2f       	mov	r24, r24
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <HLCD_voidSendNum>
	}

}
    4346:	cf 91       	pop	r28
    4348:	df 91       	pop	r29
    434a:	08 95       	ret

0000434c <StartButtonFunc>:

void StartButtonFunc(void)
{
    434c:	df 93       	push	r29
    434e:	cf 93       	push	r28
    4350:	00 d0       	rcall	.+0      	; 0x4352 <StartButtonFunc+0x6>
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8WeightSensor= 0;
    4356:	19 82       	std	Y+1, r1	; 0x01
	u8 L_u8DoorState= 0 ;
    4358:	1a 82       	std	Y+2, r1	; 0x02
	MDIO_stderrGetPinValue(&L_u8WeightSensor, MDIO_PORTB, MDIO_PIN0);
    435a:	ce 01       	movw	r24, r28
    435c:	01 96       	adiw	r24, 0x01	; 1
    435e:	62 e0       	ldi	r22, 0x02	; 2
    4360:	40 e0       	ldi	r20, 0x00	; 0
    4362:	0e 94 8b 1a 	call	0x3516	; 0x3516 <MDIO_stderrGetPinValue>
	MDIO_stderrGetPinValue(&L_u8DoorState, MDIO_PORTB, MDIO_PIN2);
    4366:	ce 01       	movw	r24, r28
    4368:	02 96       	adiw	r24, 0x02	; 2
    436a:	62 e0       	ldi	r22, 0x02	; 2
    436c:	42 e0       	ldi	r20, 0x02	; 2
    436e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <MDIO_stderrGetPinValue>
	/*
	 *  Minutes entered not 0 , weight sensor is 1 indicating there
	 *  is food Door state is 1 indicate door is close
	 */
	if( 0!=G_u8MinutesValue && 1 == L_u8WeightSensor && 1==L_u8DoorState  )
    4372:	80 91 ac 01 	lds	r24, 0x01AC
    4376:	88 23       	and	r24, r24
    4378:	a1 f0       	breq	.+40     	; 0x43a2 <StartButtonFunc+0x56>
    437a:	89 81       	ldd	r24, Y+1	; 0x01
    437c:	81 30       	cpi	r24, 0x01	; 1
    437e:	89 f4       	brne	.+34     	; 0x43a2 <StartButtonFunc+0x56>
    4380:	8a 81       	ldd	r24, Y+2	; 0x02
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	71 f4       	brne	.+28     	; 0x43a2 <StartButtonFunc+0x56>
	{
		/* start timer, Led On, Heating on  */
		MTIM_stderrStartTimer(MTIM_TIMER0);
    4386:	80 e0       	ldi	r24, 0x00	; 0
    4388:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <MTIM_stderrStartTimer>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN3, MDIO_HIGH); /* LED */
    438c:	82 e0       	ldi	r24, 0x02	; 2
    438e:	63 e0       	ldi	r22, 0x03	; 3
    4390:	42 e0       	ldi	r20, 0x02	; 2
    4392:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN4, MDIO_HIGH); /* Heating */
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	64 e0       	ldi	r22, 0x04	; 4
    439a:	42 e0       	ldi	r20, 0x02	; 2
    439c:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
    43a0:	03 c0       	rjmp	.+6      	; 0x43a8 <StartButtonFunc+0x5c>
	}
	else
	{
		G_u8Flag= WARNING; /* Warning message */
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	80 93 ae 01 	sts	0x01AE, r24
	}
}
    43a8:	0f 90       	pop	r0
    43aa:	0f 90       	pop	r0
    43ac:	cf 91       	pop	r28
    43ae:	df 91       	pop	r29
    43b0:	08 95       	ret

000043b2 <StopButtonFunc>:

/* have 2 options  to stop Microwave or cancel the entered time before start */
void StopButtonFunc(void)
{
    43b2:	df 93       	push	r29
    43b4:	cf 93       	push	r28
    43b6:	0f 92       	push	r0
    43b8:	cd b7       	in	r28, 0x3d	; 61
    43ba:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8State=0;
    43bc:	19 82       	std	Y+1, r1	; 0x01
	G_u8MinutesValue=0;
    43be:	10 92 ac 01 	sts	0x01AC, r1
	G_u8SecondsValue=0;
    43c2:	10 92 ad 01 	sts	0x01AD, r1
	MDIO_stderrGetPinValue(&L_u8State,MDIO_PORTB,MDIO_PIN3); /* Read Led pin */
    43c6:	ce 01       	movw	r24, r28
    43c8:	01 96       	adiw	r24, 0x01	; 1
    43ca:	62 e0       	ldi	r22, 0x02	; 2
    43cc:	43 e0       	ldi	r20, 0x03	; 3
    43ce:	0e 94 8b 1a 	call	0x3516	; 0x3516 <MDIO_stderrGetPinValue>
	if(1==L_u8State)
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	81 30       	cpi	r24, 0x01	; 1
    43d6:	89 f4       	brne	.+34     	; 0x43fa <StopButtonFunc+0x48>
	{
		/* Microwave is on then stop */
		MTIM_stderrStopTimer(MTIM_TIMER0);
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <MTIM_stderrStopTimer>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN3, MDIO_LOW); /* LED */
    43de:	82 e0       	ldi	r24, 0x02	; 2
    43e0:	63 e0       	ldi	r22, 0x03	; 3
    43e2:	41 e0       	ldi	r20, 0x01	; 1
    43e4:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN4, MDIO_LOW); /* Heating */
    43e8:	82 e0       	ldi	r24, 0x02	; 2
    43ea:	64 e0       	ldi	r22, 0x04	; 4
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
		G_u8Flag=FINISHED; /* display finished */
    43f2:	83 e0       	ldi	r24, 0x03	; 3
    43f4:	80 93 ae 01 	sts	0x01AE, r24
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <StopButtonFunc+0x4c>
	}
	else
	{
//		HLCD_voidClear();
		G_u8Flag=OK;
    43fa:	10 92 ae 01 	sts	0x01AE, r1

	}

}
    43fe:	0f 90       	pop	r0
    4400:	cf 91       	pop	r28
    4402:	df 91       	pop	r29
    4404:	08 95       	ret

00004406 <DoorOpenFunc>:

/* have 2 options  to stop Microwave or cancel the entered time before start */
void DoorOpenFunc(void)
{
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	0f 92       	push	r0
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8State=0;
    4410:	19 82       	std	Y+1, r1	; 0x01
	G_u8MinutesValue=0;
    4412:	10 92 ac 01 	sts	0x01AC, r1
	G_u8SecondsValue=0;
    4416:	10 92 ad 01 	sts	0x01AD, r1
	MDIO_stderrGetPinValue(&L_u8State,MDIO_PORTB,MDIO_PIN3); /* Read Led pin */
    441a:	ce 01       	movw	r24, r28
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	62 e0       	ldi	r22, 0x02	; 2
    4420:	43 e0       	ldi	r20, 0x03	; 3
    4422:	0e 94 8b 1a 	call	0x3516	; 0x3516 <MDIO_stderrGetPinValue>
	if(1==L_u8State)
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	81 30       	cpi	r24, 0x01	; 1
    442a:	81 f4       	brne	.+32     	; 0x444c <DoorOpenFunc+0x46>
	{
		/* Microwave is on then stop */
		MTIM_stderrStopTimer(MTIM_TIMER0);
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <MTIM_stderrStopTimer>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN3, MDIO_LOW); /* LED */
    4432:	82 e0       	ldi	r24, 0x02	; 2
    4434:	63 e0       	ldi	r22, 0x03	; 3
    4436:	41 e0       	ldi	r20, 0x01	; 1
    4438:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
		MDIO_stderrSetPinValue(MDIO_PORTB, MDIO_PIN4, MDIO_LOW); /* Heating */
    443c:	82 e0       	ldi	r24, 0x02	; 2
    443e:	64 e0       	ldi	r22, 0x04	; 4
    4440:	41 e0       	ldi	r20, 0x01	; 1
    4442:	0e 94 66 19 	call	0x32cc	; 0x32cc <MDIO_stderrSetPinValue>
		G_u8Flag=FINISHED; /* display finished */
    4446:	83 e0       	ldi	r24, 0x03	; 3
    4448:	80 93 ae 01 	sts	0x01AE, r24
	else
	{
		/* Do nothing */
	}

}
    444c:	0f 90       	pop	r0
    444e:	cf 91       	pop	r28
    4450:	df 91       	pop	r29
    4452:	08 95       	ret

00004454 <main>:


int main (void)
{
    4454:	df 93       	push	r29
    4456:	cf 93       	push	r28
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
    445c:	2e 97       	sbiw	r28, 0x0e	; 14
    445e:	0f b6       	in	r0, 0x3f	; 63
    4460:	f8 94       	cli
    4462:	de bf       	out	0x3e, r29	; 62
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	cd bf       	out	0x3d, r28	; 61
	/* Initialization  (Run Once)  */

	/* DIO INIT */
	MDIO_stderrSetPinDirection(MDIO_PORTD, MDIO_PIN2, MDIO_INPUT_PULLUP);	/* for start SW INT0 */
    4468:	84 e0       	ldi	r24, 0x04	; 4
    446a:	62 e0       	ldi	r22, 0x02	; 2
    446c:	43 e0       	ldi	r20, 0x03	; 3
    446e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTD, MDIO_PIN3, MDIO_INPUT_PULLUP);	/* for stop SW INT1 */
    4472:	84 e0       	ldi	r24, 0x04	; 4
    4474:	63 e0       	ldi	r22, 0x03	; 3
    4476:	43 e0       	ldi	r20, 0x03	; 3
    4478:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTB, MDIO_PIN2, MDIO_INPUT_PULLUP);   /* for Door sensor INT2 */
    447c:	82 e0       	ldi	r24, 0x02	; 2
    447e:	62 e0       	ldi	r22, 0x02	; 2
    4480:	43 e0       	ldi	r20, 0x03	; 3
    4482:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTB, MDIO_PIN0, MDIO_INPUT_PULLUP);	/* for Weight sensor */
    4486:	82 e0       	ldi	r24, 0x02	; 2
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	43 e0       	ldi	r20, 0x03	; 3
    448c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTB, MDIO_PIN3, MDIO_OUTPUT);   		/* for Led indicate On state */
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	63 e0       	ldi	r22, 0x03	; 3
    4494:	41 e0       	ldi	r20, 0x01	; 1
    4496:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTB, MDIO_PIN4, MDIO_OUTPUT);			/* for Heating */
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	64 e0       	ldi	r22, 0x04	; 4
    449e:	41 e0       	ldi	r20, 0x01	; 1
    44a0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <MDIO_stderrSetPinDirection>
	/* EXTI INIT */
	MEXTI_stderrInit(MEXTI_INT0 , MEXTI_MODE_FALLING);  /* configure the INTX    */
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <MEXTI_stderrInit>
	MEXTI_stderrInit(MEXTI_INT1 , MEXTI_MODE_FALLING);
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	62 e0       	ldi	r22, 0x02	; 2
    44b0:	0e 94 ba 1b 	call	0x3774	; 0x3774 <MEXTI_stderrInit>
	MEXTI_stderrInit(MEXTI_INT2 , MEXTI_MODE_FALLING);
    44b4:	82 e0       	ldi	r24, 0x02	; 2
    44b6:	62 e0       	ldi	r22, 0x02	; 2
    44b8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <MEXTI_stderrInit>
	MEXTI_stderrEnable(MEXTI_INT0);
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <MEXTI_stderrEnable>
	MEXTI_stderrEnable(MEXTI_INT1);
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <MEXTI_stderrEnable>
	MEXTI_stderrEnable(MEXTI_INT2);
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <MEXTI_stderrEnable>

	MEXTI_stderrCallBack(&StartButtonFunc,MEXTI_INT0);
    44ce:	86 ea       	ldi	r24, 0xA6	; 166
    44d0:	91 e2       	ldi	r25, 0x21	; 33
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	0e 94 31 1c 	call	0x3862	; 0x3862 <MEXTI_stderrCallBack>
	MEXTI_stderrCallBack(&StopButtonFunc,MEXTI_INT1);
    44d8:	89 ed       	ldi	r24, 0xD9	; 217
    44da:	91 e2       	ldi	r25, 0x21	; 33
    44dc:	61 e0       	ldi	r22, 0x01	; 1
    44de:	0e 94 31 1c 	call	0x3862	; 0x3862 <MEXTI_stderrCallBack>
	MEXTI_stderrCallBack(&DoorOpenFunc,MEXTI_INT2);
    44e2:	83 e0       	ldi	r24, 0x03	; 3
    44e4:	92 e2       	ldi	r25, 0x22	; 34
    44e6:	62 e0       	ldi	r22, 0x02	; 2
    44e8:	0e 94 31 1c 	call	0x3862	; 0x3862 <MEXTI_stderrCallBack>
	/* TIM0 INIT */
	MTIM_stderrInit(MTIM_TIMER0, MTIM_CS_PRESCALER_1024,MTIM_MODE_NORMAL,MTIM_HWPIN_DISCONNECTED);
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	65 e0       	ldi	r22, 0x05	; 5
    44f0:	40 e0       	ldi	r20, 0x00	; 0
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <MTIM_stderrInit>
	MTIM_stderrSetCallBack(&ChangeTimeCallBack, MTIM_INTERRUPT_T0_OVF);
    44f8:	87 e9       	ldi	r24, 0x97	; 151
    44fa:	90 e2       	ldi	r25, 0x20	; 32
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <MTIM_stderrSetCallBack>
	MTIM_stderrEnableInterrupt(MTIM_INTERRUPT_T0_OVF);/* Enable Interrupt for T0 Overflow */
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <MTIM_stderrEnableInterrupt>

	MGIE_voidEnable();
    4508:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <MGIE_voidEnable>
	G_u8Flag=0;
    450c:	10 92 ae 01 	sts	0x01AE, r1
	MTIM_stderrTimerDelay(MTIM_TIMER0, 1000); /* OVF every 1 Second */
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	48 ee       	ldi	r20, 0xE8	; 232
    4514:	53 e0       	ldi	r21, 0x03	; 3
    4516:	60 e0       	ldi	r22, 0x00	; 0
    4518:	70 e0       	ldi	r23, 0x00	; 0
    451a:	0e 94 53 1f 	call	0x3ea6	; 0x3ea6 <MTIM_stderrTimerDelay>
	/* LCD INIT */
	HLCD_voidInit();
    451e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <HLCD_voidInit>

	HLCD_voidSendCmd(HLCD_CURSOR_OFF);
    4522:	8c e0       	ldi	r24, 0x0C	; 12
    4524:	0e 94 82 0c 	call	0x1904	; 0x1904 <HLCD_voidSendCmd>

	while(1)
	{


		if(0==G_u8SecondsValue && 0==G_u8MinutesValue  && OK==G_u8Flag)
    4528:	80 91 ad 01 	lds	r24, 0x01AD
    452c:	88 23       	and	r24, r24
    452e:	a9 f4       	brne	.+42     	; 0x455a <main+0x106>
    4530:	80 91 ac 01 	lds	r24, 0x01AC
    4534:	88 23       	and	r24, r24
    4536:	89 f4       	brne	.+34     	; 0x455a <main+0x106>
    4538:	80 91 ae 01 	lds	r24, 0x01AE
    453c:	88 23       	and	r24, r24
    453e:	69 f4       	brne	.+26     	; 0x455a <main+0x106>
		{
			HLCD_voidSetCur(0,1);
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	61 e0       	ldi	r22, 0x01	; 1
    4544:	0e 94 6e 15 	call	0x2adc	; 0x2adc <HLCD_voidSetCur>
			HLCD_voidSendString("New Delay");
    4548:	80 e6       	ldi	r24, 0x60	; 96
    454a:	90 e0       	ldi	r25, 0x00	; 0
    454c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <HLCD_voidSendString>
			DisplayTimeOnLCD();
    4550:	0e 94 70 21 	call	0x42e0	; 0x42e0 <DisplayTimeOnLCD>
			ReadEnteredTime();
    4554:	0e 94 c0 20 	call	0x4180	; 0x4180 <ReadEnteredTime>
    4558:	e7 cf       	rjmp	.-50     	; 0x4528 <main+0xd4>
		}
		else if (WARNING==G_u8Flag || FINISHED==G_u8Flag  )
    455a:	80 91 ae 01 	lds	r24, 0x01AE
    455e:	81 30       	cpi	r24, 0x01	; 1
    4560:	29 f0       	breq	.+10     	; 0x456c <main+0x118>
    4562:	80 91 ae 01 	lds	r24, 0x01AE
    4566:	83 30       	cpi	r24, 0x03	; 3
    4568:	09 f0       	breq	.+2      	; 0x456c <main+0x118>
    456a:	8a c0       	rjmp	.+276    	; 0x4680 <main+0x22c>
		{
			HLCD_voidClear();
    456c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <HLCD_voidClear>
			HLCD_voidSetCur(0,3);
    4570:	80 e0       	ldi	r24, 0x00	; 0
    4572:	63 e0       	ldi	r22, 0x03	; 3
    4574:	0e 94 6e 15 	call	0x2adc	; 0x2adc <HLCD_voidSetCur>
			if(WARNING==G_u8Flag)
    4578:	80 91 ae 01 	lds	r24, 0x01AE
    457c:	81 30       	cpi	r24, 0x01	; 1
    457e:	29 f4       	brne	.+10     	; 0x458a <main+0x136>
			{
				HLCD_voidSendString(" WARNING ...");
    4580:	8a e6       	ldi	r24, 0x6A	; 106
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 42 15 	call	0x2a84	; 0x2a84 <HLCD_voidSendString>
    4588:	04 c0       	rjmp	.+8      	; 0x4592 <main+0x13e>
			}
			else
			{
				HLCD_voidSendString(" FINISHED ..");
    458a:	87 e7       	ldi	r24, 0x77	; 119
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <HLCD_voidSendString>
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	aa e7       	ldi	r26, 0x7A	; 122
    4598:	b4 e4       	ldi	r27, 0x44	; 68
    459a:	8b 87       	std	Y+11, r24	; 0x0b
    459c:	9c 87       	std	Y+12, r25	; 0x0c
    459e:	ad 87       	std	Y+13, r26	; 0x0d
    45a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    45a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    45a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	4a ef       	ldi	r20, 0xFA	; 250
    45b0:	54 e4       	ldi	r21, 0x44	; 68
    45b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	8f 83       	std	Y+7, r24	; 0x07
    45bc:	98 87       	std	Y+8, r25	; 0x08
    45be:	a9 87       	std	Y+9, r26	; 0x09
    45c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45c2:	6f 81       	ldd	r22, Y+7	; 0x07
    45c4:	78 85       	ldd	r23, Y+8	; 0x08
    45c6:	89 85       	ldd	r24, Y+9	; 0x09
    45c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	40 e8       	ldi	r20, 0x80	; 128
    45d0:	5f e3       	ldi	r21, 0x3F	; 63
    45d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45d6:	88 23       	and	r24, r24
    45d8:	2c f4       	brge	.+10     	; 0x45e4 <main+0x190>
		__ticks = 1;
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
    45e2:	3f c0       	rjmp	.+126    	; 0x4662 <main+0x20e>
	else if (__tmp > 65535)
    45e4:	6f 81       	ldd	r22, Y+7	; 0x07
    45e6:	78 85       	ldd	r23, Y+8	; 0x08
    45e8:	89 85       	ldd	r24, Y+9	; 0x09
    45ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	3f ef       	ldi	r19, 0xFF	; 255
    45f0:	4f e7       	ldi	r20, 0x7F	; 127
    45f2:	57 e4       	ldi	r21, 0x47	; 71
    45f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45f8:	18 16       	cp	r1, r24
    45fa:	4c f5       	brge	.+82     	; 0x464e <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    45fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4600:	8d 85       	ldd	r24, Y+13	; 0x0d
    4602:	9e 85       	ldd	r25, Y+14	; 0x0e
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	40 e2       	ldi	r20, 0x20	; 32
    460a:	51 e4       	ldi	r21, 0x41	; 65
    460c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	bc 01       	movw	r22, r24
    4616:	cd 01       	movw	r24, r26
    4618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	9e 83       	std	Y+6, r25	; 0x06
    4622:	8d 83       	std	Y+5, r24	; 0x05
    4624:	0f c0       	rjmp	.+30     	; 0x4644 <main+0x1f0>
    4626:	88 ec       	ldi	r24, 0xC8	; 200
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	9c 83       	std	Y+4, r25	; 0x04
    462c:	8b 83       	std	Y+3, r24	; 0x03
    462e:	8b 81       	ldd	r24, Y+3	; 0x03
    4630:	9c 81       	ldd	r25, Y+4	; 0x04
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <main+0x1de>
    4636:	9c 83       	std	Y+4, r25	; 0x04
    4638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    463a:	8d 81       	ldd	r24, Y+5	; 0x05
    463c:	9e 81       	ldd	r25, Y+6	; 0x06
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	9e 83       	std	Y+6, r25	; 0x06
    4642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4644:	8d 81       	ldd	r24, Y+5	; 0x05
    4646:	9e 81       	ldd	r25, Y+6	; 0x06
    4648:	00 97       	sbiw	r24, 0x00	; 0
    464a:	69 f7       	brne	.-38     	; 0x4626 <main+0x1d2>
    464c:	14 c0       	rjmp	.+40     	; 0x4676 <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    464e:	6f 81       	ldd	r22, Y+7	; 0x07
    4650:	78 85       	ldd	r23, Y+8	; 0x08
    4652:	89 85       	ldd	r24, Y+9	; 0x09
    4654:	9a 85       	ldd	r25, Y+10	; 0x0a
    4656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	9e 83       	std	Y+6, r25	; 0x06
    4660:	8d 83       	std	Y+5, r24	; 0x05
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	9e 81       	ldd	r25, Y+6	; 0x06
    4666:	9a 83       	std	Y+2, r25	; 0x02
    4668:	89 83       	std	Y+1, r24	; 0x01
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	9a 81       	ldd	r25, Y+2	; 0x02
    466e:	01 97       	sbiw	r24, 0x01	; 1
    4670:	f1 f7       	brne	.-4      	; 0x466e <main+0x21a>
    4672:	9a 83       	std	Y+2, r25	; 0x02
    4674:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(1000);
			HLCD_voidClear();
    4676:	0e 94 02 16 	call	0x2c04	; 0x2c04 <HLCD_voidClear>
			G_u8Flag=OK;
    467a:	10 92 ae 01 	sts	0x01AE, r1
    467e:	54 cf       	rjmp	.-344    	; 0x4528 <main+0xd4>
		}
		else
		{
			DisplayTimeOnLCD();
    4680:	0e 94 70 21 	call	0x42e0	; 0x42e0 <DisplayTimeOnLCD>
    4684:	51 cf       	rjmp	.-350    	; 0x4528 <main+0xd4>

00004686 <__udivmodhi4>:
    4686:	aa 1b       	sub	r26, r26
    4688:	bb 1b       	sub	r27, r27
    468a:	51 e1       	ldi	r21, 0x11	; 17
    468c:	07 c0       	rjmp	.+14     	; 0x469c <__udivmodhi4_ep>

0000468e <__udivmodhi4_loop>:
    468e:	aa 1f       	adc	r26, r26
    4690:	bb 1f       	adc	r27, r27
    4692:	a6 17       	cp	r26, r22
    4694:	b7 07       	cpc	r27, r23
    4696:	10 f0       	brcs	.+4      	; 0x469c <__udivmodhi4_ep>
    4698:	a6 1b       	sub	r26, r22
    469a:	b7 0b       	sbc	r27, r23

0000469c <__udivmodhi4_ep>:
    469c:	88 1f       	adc	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	5a 95       	dec	r21
    46a2:	a9 f7       	brne	.-22     	; 0x468e <__udivmodhi4_loop>
    46a4:	80 95       	com	r24
    46a6:	90 95       	com	r25
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	08 95       	ret

000046ae <__udivmodsi4>:
    46ae:	a1 e2       	ldi	r26, 0x21	; 33
    46b0:	1a 2e       	mov	r1, r26
    46b2:	aa 1b       	sub	r26, r26
    46b4:	bb 1b       	sub	r27, r27
    46b6:	fd 01       	movw	r30, r26
    46b8:	0d c0       	rjmp	.+26     	; 0x46d4 <__udivmodsi4_ep>

000046ba <__udivmodsi4_loop>:
    46ba:	aa 1f       	adc	r26, r26
    46bc:	bb 1f       	adc	r27, r27
    46be:	ee 1f       	adc	r30, r30
    46c0:	ff 1f       	adc	r31, r31
    46c2:	a2 17       	cp	r26, r18
    46c4:	b3 07       	cpc	r27, r19
    46c6:	e4 07       	cpc	r30, r20
    46c8:	f5 07       	cpc	r31, r21
    46ca:	20 f0       	brcs	.+8      	; 0x46d4 <__udivmodsi4_ep>
    46cc:	a2 1b       	sub	r26, r18
    46ce:	b3 0b       	sbc	r27, r19
    46d0:	e4 0b       	sbc	r30, r20
    46d2:	f5 0b       	sbc	r31, r21

000046d4 <__udivmodsi4_ep>:
    46d4:	66 1f       	adc	r22, r22
    46d6:	77 1f       	adc	r23, r23
    46d8:	88 1f       	adc	r24, r24
    46da:	99 1f       	adc	r25, r25
    46dc:	1a 94       	dec	r1
    46de:	69 f7       	brne	.-38     	; 0x46ba <__udivmodsi4_loop>
    46e0:	60 95       	com	r22
    46e2:	70 95       	com	r23
    46e4:	80 95       	com	r24
    46e6:	90 95       	com	r25
    46e8:	9b 01       	movw	r18, r22
    46ea:	ac 01       	movw	r20, r24
    46ec:	bd 01       	movw	r22, r26
    46ee:	cf 01       	movw	r24, r30
    46f0:	08 95       	ret

000046f2 <__prologue_saves__>:
    46f2:	2f 92       	push	r2
    46f4:	3f 92       	push	r3
    46f6:	4f 92       	push	r4
    46f8:	5f 92       	push	r5
    46fa:	6f 92       	push	r6
    46fc:	7f 92       	push	r7
    46fe:	8f 92       	push	r8
    4700:	9f 92       	push	r9
    4702:	af 92       	push	r10
    4704:	bf 92       	push	r11
    4706:	cf 92       	push	r12
    4708:	df 92       	push	r13
    470a:	ef 92       	push	r14
    470c:	ff 92       	push	r15
    470e:	0f 93       	push	r16
    4710:	1f 93       	push	r17
    4712:	cf 93       	push	r28
    4714:	df 93       	push	r29
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
    471a:	ca 1b       	sub	r28, r26
    471c:	db 0b       	sbc	r29, r27
    471e:	0f b6       	in	r0, 0x3f	; 63
    4720:	f8 94       	cli
    4722:	de bf       	out	0x3e, r29	; 62
    4724:	0f be       	out	0x3f, r0	; 63
    4726:	cd bf       	out	0x3d, r28	; 61
    4728:	09 94       	ijmp

0000472a <__epilogue_restores__>:
    472a:	2a 88       	ldd	r2, Y+18	; 0x12
    472c:	39 88       	ldd	r3, Y+17	; 0x11
    472e:	48 88       	ldd	r4, Y+16	; 0x10
    4730:	5f 84       	ldd	r5, Y+15	; 0x0f
    4732:	6e 84       	ldd	r6, Y+14	; 0x0e
    4734:	7d 84       	ldd	r7, Y+13	; 0x0d
    4736:	8c 84       	ldd	r8, Y+12	; 0x0c
    4738:	9b 84       	ldd	r9, Y+11	; 0x0b
    473a:	aa 84       	ldd	r10, Y+10	; 0x0a
    473c:	b9 84       	ldd	r11, Y+9	; 0x09
    473e:	c8 84       	ldd	r12, Y+8	; 0x08
    4740:	df 80       	ldd	r13, Y+7	; 0x07
    4742:	ee 80       	ldd	r14, Y+6	; 0x06
    4744:	fd 80       	ldd	r15, Y+5	; 0x05
    4746:	0c 81       	ldd	r16, Y+4	; 0x04
    4748:	1b 81       	ldd	r17, Y+3	; 0x03
    474a:	aa 81       	ldd	r26, Y+2	; 0x02
    474c:	b9 81       	ldd	r27, Y+1	; 0x01
    474e:	ce 0f       	add	r28, r30
    4750:	d1 1d       	adc	r29, r1
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	ed 01       	movw	r28, r26
    475e:	08 95       	ret

00004760 <_exit>:
    4760:	f8 94       	cli

00004762 <__stop_program>:
    4762:	ff cf       	rjmp	.-2      	; 0x4762 <__stop_program>
