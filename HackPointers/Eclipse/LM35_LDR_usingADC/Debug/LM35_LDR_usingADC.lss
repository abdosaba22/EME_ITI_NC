
LM35_LDR_usingADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00003c14  00003c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027fc  00000000  00000000  00003da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2b  00000000  00000000  000065a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000071cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000736f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000996c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000acf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000bec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ccec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 97 1c 	call	0x392e	; 0x392e <main>
      7a:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d1 1d 	jmp	0x3ba2	; 0x3ba2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e7       	ldi	r22, 0x76	; 118
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e2 58       	subi	r30, 0x82	; 130
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	c2 57       	subi	r28, 0x72	; 114
     e2c:	d0 40       	sbci	r29, 0x00	; 0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	64 e0       	ldi	r22, 0x04	; 4
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	65 e0       	ldi	r22, 0x05	; 5
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	66 e0       	ldi	r22, 0x06	; 6
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	67 e0       	ldi	r22, 0x07	; 7
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>
     e7e:	fe 01       	movw	r30, r28
     e80:	e1 59       	subi	r30, 0x91	; 145
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e2       	ldi	r26, 0x20	; 32
     e8a:	b2 e4       	ldi	r27, 0x42	; 66
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	8e 01       	movw	r16, r28
     e96:	05 59       	subi	r16, 0x95	; 149
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	e1 59       	subi	r30, 0x91	; 145
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec2:	fe 01       	movw	r30, r28
     ec4:	e5 59       	subi	r30, 0x95	; 149
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	44 f4       	brge	.+16     	; 0xef0 <HLCD_voidInit+0xd2>
		__ticks = 1;
     ee0:	fe 01       	movw	r30, r28
     ee2:	e7 59       	subi	r30, 0x97	; 151
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	64 c0       	rjmp	.+200    	; 0xfb8 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
     ef0:	fe 01       	movw	r30, r28
     ef2:	e5 59       	subi	r30, 0x95	; 149
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <HLCD_voidInit+0xf2>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	fe 01       	movw	r30, r28
     f12:	e1 59       	subi	r30, 0x91	; 145
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8e 01       	movw	r16, r28
     f30:	07 59       	subi	r16, 0x97	; 151
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	f8 01       	movw	r30, r16
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	1f c0       	rjmp	.+62     	; 0xf86 <HLCD_voidInit+0x168>
     f48:	fe 01       	movw	r30, r28
     f4a:	e9 59       	subi	r30, 0x99	; 153
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f56:	fe 01       	movw	r30, r28
     f58:	e9 59       	subi	r30, 0x99	; 153
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <HLCD_voidInit+0x142>
     f64:	fe 01       	movw	r30, r28
     f66:	e9 59       	subi	r30, 0x99	; 153
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	de 01       	movw	r26, r28
     f70:	a7 59       	subi	r26, 0x97	; 151
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	fe 01       	movw	r30, r28
     f76:	e7 59       	subi	r30, 0x97	; 151
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	fe 01       	movw	r30, r28
     f88:	e7 59       	subi	r30, 0x97	; 151
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	d1 f6       	brne	.-76     	; 0xf48 <HLCD_voidInit+0x12a>
     f94:	27 c0       	rjmp	.+78     	; 0xfe4 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	8e 01       	movw	r16, r28
     f98:	07 59       	subi	r16, 0x97	; 151
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	fe 01       	movw	r30, r28
     f9e:	e5 59       	subi	r30, 0x95	; 149
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	f8 01       	movw	r30, r16
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	de 01       	movw	r26, r28
     fba:	ab 59       	subi	r26, 0x9B	; 155
     fbc:	bf 4f       	sbci	r27, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	e7 59       	subi	r30, 0x97	; 151
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	8d 93       	st	X+, r24
     fca:	9c 93       	st	X, r25
     fcc:	fe 01       	movw	r30, r28
     fce:	eb 59       	subi	r30, 0x9B	; 155
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <HLCD_voidInit+0x1b8>
     fda:	fe 01       	movw	r30, r28
     fdc:	eb 59       	subi	r30, 0x9B	; 155
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
     fe4:	83 e3       	ldi	r24, 0x33	; 51
     fe6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
     fea:	fe 01       	movw	r30, r28
     fec:	ef 59       	subi	r30, 0x9F	; 159
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 ea       	ldi	r26, 0xA0	; 160
     ff6:	b0 e4       	ldi	r27, 0x40	; 64
     ff8:	80 83       	st	Z, r24
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	a2 83       	std	Z+2, r26	; 0x02
     ffe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1000:	8e 01       	movw	r16, r28
    1002:	03 5a       	subi	r16, 0xA3	; 163
    1004:	1f 4f       	sbci	r17, 0xFF	; 255
    1006:	fe 01       	movw	r30, r28
    1008:	ef 59       	subi	r30, 0x9F	; 159
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	f8 01       	movw	r30, r16
    1026:	80 83       	st	Z, r24
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	a2 83       	std	Z+2, r26	; 0x02
    102c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    102e:	fe 01       	movw	r30, r28
    1030:	e3 5a       	subi	r30, 0xA3	; 163
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	93 81       	ldd	r25, Z+3	; 0x03
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	44 f4       	brge	.+16     	; 0x105c <HLCD_voidInit+0x23e>
		__ticks = 1;
    104c:	fe 01       	movw	r30, r28
    104e:	e5 5a       	subi	r30, 0xA5	; 165
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	80 83       	st	Z, r24
    105a:	64 c0       	rjmp	.+200    	; 0x1124 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
    105c:	fe 01       	movw	r30, r28
    105e:	e3 5a       	subi	r30, 0xA3	; 163
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	3f ef       	ldi	r19, 0xFF	; 255
    106e:	4f e7       	ldi	r20, 0x7F	; 127
    1070:	57 e4       	ldi	r21, 0x47	; 71
    1072:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1076:	18 16       	cp	r1, r24
    1078:	0c f0       	brlt	.+2      	; 0x107c <HLCD_voidInit+0x25e>
    107a:	43 c0       	rjmp	.+134    	; 0x1102 <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	fe 01       	movw	r30, r28
    107e:	ef 59       	subi	r30, 0x9F	; 159
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	8e 01       	movw	r16, r28
    109c:	05 5a       	subi	r16, 0xA5	; 165
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	f8 01       	movw	r30, r16
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
    10b2:	1f c0       	rjmp	.+62     	; 0x10f2 <HLCD_voidInit+0x2d4>
    10b4:	fe 01       	movw	r30, r28
    10b6:	e7 5a       	subi	r30, 0xA7	; 167
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
    10c2:	fe 01       	movw	r30, r28
    10c4:	e7 5a       	subi	r30, 0xA7	; 167
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <HLCD_voidInit+0x2ae>
    10d0:	fe 01       	movw	r30, r28
    10d2:	e7 5a       	subi	r30, 0xA7	; 167
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10da:	de 01       	movw	r26, r28
    10dc:	a5 5a       	subi	r26, 0xA5	; 165
    10de:	bf 4f       	sbci	r27, 0xFF	; 255
    10e0:	fe 01       	movw	r30, r28
    10e2:	e5 5a       	subi	r30, 0xA5	; 165
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	11 96       	adiw	r26, 0x01	; 1
    10ee:	9c 93       	st	X, r25
    10f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	fe 01       	movw	r30, r28
    10f4:	e5 5a       	subi	r30, 0xA5	; 165
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	d1 f6       	brne	.-76     	; 0x10b4 <HLCD_voidInit+0x296>
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1102:	8e 01       	movw	r16, r28
    1104:	05 5a       	subi	r16, 0xA5	; 165
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	e3 5a       	subi	r30, 0xA3	; 163
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	f8 01       	movw	r30, r16
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	de 01       	movw	r26, r28
    1126:	a9 5a       	subi	r26, 0xA9	; 169
    1128:	bf 4f       	sbci	r27, 0xFF	; 255
    112a:	fe 01       	movw	r30, r28
    112c:	e5 5a       	subi	r30, 0xA5	; 165
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	8d 93       	st	X+, r24
    1136:	9c 93       	st	X, r25
    1138:	fe 01       	movw	r30, r28
    113a:	e9 5a       	subi	r30, 0xA9	; 169
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	80 81       	ld	r24, Z
    1140:	91 81       	ldd	r25, Z+1	; 0x01
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <HLCD_voidInit+0x324>
    1146:	fe 01       	movw	r30, r28
    1148:	e9 5a       	subi	r30, 0xA9	; 169
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
    1150:	82 e3       	ldi	r24, 0x32	; 50
    1152:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    1156:	fe 01       	movw	r30, r28
    1158:	ed 5a       	subi	r30, 0xAD	; 173
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a8 ec       	ldi	r26, 0xC8	; 200
    1162:	b2 e4       	ldi	r27, 0x42	; 66
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	a2 83       	std	Z+2, r26	; 0x02
    116a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    116c:	8e 01       	movw	r16, r28
    116e:	01 5b       	subi	r16, 0xB1	; 177
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	fe 01       	movw	r30, r28
    1174:	ed 5a       	subi	r30, 0xAD	; 173
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	60 81       	ld	r22, Z
    117a:	71 81       	ldd	r23, Z+1	; 0x01
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	2b ea       	ldi	r18, 0xAB	; 171
    1182:	3a ea       	ldi	r19, 0xAA	; 170
    1184:	4a e2       	ldi	r20, 0x2A	; 42
    1186:	50 e4       	ldi	r21, 0x40	; 64
    1188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    118c:	dc 01       	movw	r26, r24
    118e:	cb 01       	movw	r24, r22
    1190:	f8 01       	movw	r30, r16
    1192:	80 83       	st	Z, r24
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	a2 83       	std	Z+2, r26	; 0x02
    1198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    119a:	fe 01       	movw	r30, r28
    119c:	e1 5b       	subi	r30, 0xB1	; 177
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	60 81       	ld	r22, Z
    11a2:	71 81       	ldd	r23, Z+1	; 0x01
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e8       	ldi	r20, 0x80	; 128
    11ae:	5f e3       	ldi	r21, 0x3F	; 63
    11b0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	34 f4       	brge	.+12     	; 0x11c4 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    11b8:	fe 01       	movw	r30, r28
    11ba:	e2 5b       	subi	r30, 0xB2	; 178
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24
    11c2:	e0 c0       	rjmp	.+448    	; 0x1384 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    11c4:	fe 01       	movw	r30, r28
    11c6:	e1 5b       	subi	r30, 0xB1	; 177
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	53 e4       	ldi	r21, 0x43	; 67
    11da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	0c f0       	brlt	.+2      	; 0x11e4 <HLCD_voidInit+0x3c6>
    11e2:	c0 c0       	rjmp	.+384    	; 0x1364 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    11e4:	fe 01       	movw	r30, r28
    11e6:	ed 5a       	subi	r30, 0xAD	; 173
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	82 81       	ldd	r24, Z+2	; 0x02
    11f0:	93 81       	ldd	r25, Z+3	; 0x03
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a e7       	ldi	r20, 0x7A	; 122
    11f8:	54 e4       	ldi	r21, 0x44	; 68
    11fa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	fe 01       	movw	r30, r28
    1204:	e6 5b       	subi	r30, 0xB6	; 182
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 83       	st	Z, r24
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	a2 83       	std	Z+2, r26	; 0x02
    120e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1210:	8e 01       	movw	r16, r28
    1212:	0a 5b       	subi	r16, 0xBA	; 186
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e6 5b       	subi	r30, 0xB6	; 182
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	60 81       	ld	r22, Z
    121e:	71 81       	ldd	r23, Z+1	; 0x01
    1220:	82 81       	ldd	r24, Z+2	; 0x02
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	4a ef       	ldi	r20, 0xFA	; 250
    122a:	54 e4       	ldi	r21, 0x44	; 68
    122c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	f8 01       	movw	r30, r16
    1236:	80 83       	st	Z, r24
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	a2 83       	std	Z+2, r26	; 0x02
    123c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    123e:	fe 01       	movw	r30, r28
    1240:	ea 5b       	subi	r30, 0xBA	; 186
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1258:	88 23       	and	r24, r24
    125a:	44 f4       	brge	.+16     	; 0x126c <HLCD_voidInit+0x44e>
		__ticks = 1;
    125c:	fe 01       	movw	r30, r28
    125e:	ec 5b       	subi	r30, 0xBC	; 188
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	64 c0       	rjmp	.+200    	; 0x1334 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    126c:	fe 01       	movw	r30, r28
    126e:	ea 5b       	subi	r30, 0xBA	; 186
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	0c f0       	brlt	.+2      	; 0x128c <HLCD_voidInit+0x46e>
    128a:	43 c0       	rjmp	.+134    	; 0x1312 <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	fe 01       	movw	r30, r28
    128e:	e6 5b       	subi	r30, 0xB6	; 182
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	60 81       	ld	r22, Z
    1294:	71 81       	ldd	r23, Z+1	; 0x01
    1296:	82 81       	ldd	r24, Z+2	; 0x02
    1298:	93 81       	ldd	r25, Z+3	; 0x03
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e2       	ldi	r20, 0x20	; 32
    12a0:	51 e4       	ldi	r21, 0x41	; 65
    12a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	8e 01       	movw	r16, r28
    12ac:	0c 5b       	subi	r16, 0xBC	; 188
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	f8 01       	movw	r30, r16
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
    12c2:	1f c0       	rjmp	.+62     	; 0x1302 <HLCD_voidInit+0x4e4>
    12c4:	fe 01       	movw	r30, r28
    12c6:	ee 5b       	subi	r30, 0xBE	; 190
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	88 ec       	ldi	r24, 0xC8	; 200
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	80 83       	st	Z, r24
    12d2:	fe 01       	movw	r30, r28
    12d4:	ee 5b       	subi	r30, 0xBE	; 190
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <HLCD_voidInit+0x4be>
    12e0:	fe 01       	movw	r30, r28
    12e2:	ee 5b       	subi	r30, 0xBE	; 190
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	91 83       	std	Z+1, r25	; 0x01
    12e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	de 01       	movw	r26, r28
    12ec:	ac 5b       	subi	r26, 0xBC	; 188
    12ee:	bf 4f       	sbci	r27, 0xFF	; 255
    12f0:	fe 01       	movw	r30, r28
    12f2:	ec 5b       	subi	r30, 0xBC	; 188
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	9c 93       	st	X, r25
    1300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	fe 01       	movw	r30, r28
    1304:	ec 5b       	subi	r30, 0xBC	; 188
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	d1 f6       	brne	.-76     	; 0x12c4 <HLCD_voidInit+0x4a6>
    1310:	42 c0       	rjmp	.+132    	; 0x1396 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	8e 01       	movw	r16, r28
    1314:	0c 5b       	subi	r16, 0xBC	; 188
    1316:	1f 4f       	sbci	r17, 0xFF	; 255
    1318:	fe 01       	movw	r30, r28
    131a:	ea 5b       	subi	r30, 0xBA	; 186
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	82 81       	ldd	r24, Z+2	; 0x02
    1324:	93 81       	ldd	r25, Z+3	; 0x03
    1326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	f8 01       	movw	r30, r16
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
    1334:	de 01       	movw	r26, r28
    1336:	a0 5c       	subi	r26, 0xC0	; 192
    1338:	bf 4f       	sbci	r27, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	ec 5b       	subi	r30, 0xBC	; 188
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	9c 93       	st	X, r25
    1348:	8e 93       	st	-X, r24
    134a:	fe 01       	movw	r30, r28
    134c:	e0 5c       	subi	r30, 0xC0	; 192
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <HLCD_voidInit+0x536>
    1358:	fe 01       	movw	r30, r28
    135a:	e0 5c       	subi	r30, 0xC0	; 192
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	91 83       	std	Z+1, r25	; 0x01
    1360:	80 83       	st	Z, r24
    1362:	19 c0       	rjmp	.+50     	; 0x1396 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1364:	8e 01       	movw	r16, r28
    1366:	02 5b       	subi	r16, 0xB2	; 178
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	e1 5b       	subi	r30, 0xB1	; 177
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	80 83       	st	Z, r24
    1384:	fe 01       	movw	r30, r28
    1386:	e2 5b       	subi	r30, 0xB2	; 178
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    138e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1390:	8a 95       	dec	r24
    1392:	f1 f7       	brne	.-4      	; 0x1390 <HLCD_voidInit+0x572>
    1394:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    1396:	88 e2       	ldi	r24, 0x28	; 40
    1398:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a8 ec       	ldi	r26, 0xC8	; 200
    13a2:	b2 e4       	ldi	r27, 0x42	; 66
    13a4:	8b af       	std	Y+59, r24	; 0x3b
    13a6:	9c af       	std	Y+60, r25	; 0x3c
    13a8:	ad af       	std	Y+61, r26	; 0x3d
    13aa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13ac:	6b ad       	ldd	r22, Y+59	; 0x3b
    13ae:	7c ad       	ldd	r23, Y+60	; 0x3c
    13b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b4:	2b ea       	ldi	r18, 0xAB	; 171
    13b6:	3a ea       	ldi	r19, 0xAA	; 170
    13b8:	4a e2       	ldi	r20, 0x2A	; 42
    13ba:	50 e4       	ldi	r21, 0x40	; 64
    13bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8f ab       	std	Y+55, r24	; 0x37
    13c6:	98 af       	std	Y+56, r25	; 0x38
    13c8:	a9 af       	std	Y+57, r26	; 0x39
    13ca:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    13cc:	6f a9       	ldd	r22, Y+55	; 0x37
    13ce:	78 ad       	ldd	r23, Y+56	; 0x38
    13d0:	89 ad       	ldd	r24, Y+57	; 0x39
    13d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	1c f4       	brge	.+6      	; 0x13ea <HLCD_voidInit+0x5cc>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	8e ab       	std	Y+54, r24	; 0x36
    13e8:	91 c0       	rjmp	.+290    	; 0x150c <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    13ea:	6f a9       	ldd	r22, Y+55	; 0x37
    13ec:	78 ad       	ldd	r23, Y+56	; 0x38
    13ee:	89 ad       	ldd	r24, Y+57	; 0x39
    13f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	53 e4       	ldi	r21, 0x43	; 67
    13fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	0c f0       	brlt	.+2      	; 0x1404 <HLCD_voidInit+0x5e6>
    1402:	7b c0       	rjmp	.+246    	; 0x14fa <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    1404:	6b ad       	ldd	r22, Y+59	; 0x3b
    1406:	7c ad       	ldd	r23, Y+60	; 0x3c
    1408:	8d ad       	ldd	r24, Y+61	; 0x3d
    140a:	9e ad       	ldd	r25, Y+62	; 0x3e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a e7       	ldi	r20, 0x7A	; 122
    1412:	54 e4       	ldi	r21, 0x44	; 68
    1414:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8a ab       	std	Y+50, r24	; 0x32
    141e:	9b ab       	std	Y+51, r25	; 0x33
    1420:	ac ab       	std	Y+52, r26	; 0x34
    1422:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1424:	6a a9       	ldd	r22, Y+50	; 0x32
    1426:	7b a9       	ldd	r23, Y+51	; 0x33
    1428:	8c a9       	ldd	r24, Y+52	; 0x34
    142a:	9d a9       	ldd	r25, Y+53	; 0x35
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8e a7       	std	Y+46, r24	; 0x2e
    143e:	9f a7       	std	Y+47, r25	; 0x2f
    1440:	a8 ab       	std	Y+48, r26	; 0x30
    1442:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1444:	6e a5       	ldd	r22, Y+46	; 0x2e
    1446:	7f a5       	ldd	r23, Y+47	; 0x2f
    1448:	88 a9       	ldd	r24, Y+48	; 0x30
    144a:	99 a9       	ldd	r25, Y+49	; 0x31
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <HLCD_voidInit+0x648>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9d a7       	std	Y+45, r25	; 0x2d
    1462:	8c a7       	std	Y+44, r24	; 0x2c
    1464:	3f c0       	rjmp	.+126    	; 0x14e4 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    1466:	6e a5       	ldd	r22, Y+46	; 0x2e
    1468:	7f a5       	ldd	r23, Y+47	; 0x2f
    146a:	88 a9       	ldd	r24, Y+48	; 0x30
    146c:	99 a9       	ldd	r25, Y+49	; 0x31
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	4c f5       	brge	.+82     	; 0x14d0 <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	6a a9       	ldd	r22, Y+50	; 0x32
    1480:	7b a9       	ldd	r23, Y+51	; 0x33
    1482:	8c a9       	ldd	r24, Y+52	; 0x34
    1484:	9d a9       	ldd	r25, Y+53	; 0x35
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	40 e2       	ldi	r20, 0x20	; 32
    148c:	51 e4       	ldi	r21, 0x41	; 65
    148e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9d a7       	std	Y+45, r25	; 0x2d
    14a4:	8c a7       	std	Y+44, r24	; 0x2c
    14a6:	0f c0       	rjmp	.+30     	; 0x14c6 <HLCD_voidInit+0x6a8>
    14a8:	88 ec       	ldi	r24, 0xC8	; 200
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9b a7       	std	Y+43, r25	; 0x2b
    14ae:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b0:	8a a5       	ldd	r24, Y+42	; 0x2a
    14b2:	9b a5       	ldd	r25, Y+43	; 0x2b
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <HLCD_voidInit+0x696>
    14b8:	9b a7       	std	Y+43, r25	; 0x2b
    14ba:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    14be:	9d a5       	ldd	r25, Y+45	; 0x2d
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	9d a7       	std	Y+45, r25	; 0x2d
    14c4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    14c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <HLCD_voidInit+0x68a>
    14ce:	24 c0       	rjmp	.+72     	; 0x1518 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    14d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    14d4:	88 a9       	ldd	r24, Y+48	; 0x30
    14d6:	99 a9       	ldd	r25, Y+49	; 0x31
    14d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9d a7       	std	Y+45, r25	; 0x2d
    14e2:	8c a7       	std	Y+44, r24	; 0x2c
    14e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    14e8:	99 a7       	std	Y+41, r25	; 0x29
    14ea:	88 a7       	std	Y+40, r24	; 0x28
    14ec:	88 a5       	ldd	r24, Y+40	; 0x28
    14ee:	99 a5       	ldd	r25, Y+41	; 0x29
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <HLCD_voidInit+0x6d2>
    14f4:	99 a7       	std	Y+41, r25	; 0x29
    14f6:	88 a7       	std	Y+40, r24	; 0x28
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14fa:	6f a9       	ldd	r22, Y+55	; 0x37
    14fc:	78 ad       	ldd	r23, Y+56	; 0x38
    14fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1500:	9a ad       	ldd	r25, Y+58	; 0x3a
    1502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8e ab       	std	Y+54, r24	; 0x36
    150c:	8e a9       	ldd	r24, Y+54	; 0x36
    150e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1510:	8f a1       	ldd	r24, Y+39	; 0x27
    1512:	8a 95       	dec	r24
    1514:	f1 f7       	brne	.-4      	; 0x1512 <HLCD_voidInit+0x6f4>
    1516:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    1518:	8c e0       	ldi	r24, 0x0C	; 12
    151a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a8 e4       	ldi	r26, 0x48	; 72
    1524:	b3 e4       	ldi	r27, 0x43	; 67
    1526:	8b a3       	std	Y+35, r24	; 0x23
    1528:	9c a3       	std	Y+36, r25	; 0x24
    152a:	ad a3       	std	Y+37, r26	; 0x25
    152c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    152e:	6b a1       	ldd	r22, Y+35	; 0x23
    1530:	7c a1       	ldd	r23, Y+36	; 0x24
    1532:	8d a1       	ldd	r24, Y+37	; 0x25
    1534:	9e a1       	ldd	r25, Y+38	; 0x26
    1536:	2b ea       	ldi	r18, 0xAB	; 171
    1538:	3a ea       	ldi	r19, 0xAA	; 170
    153a:	4a e2       	ldi	r20, 0x2A	; 42
    153c:	50 e4       	ldi	r21, 0x40	; 64
    153e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8f 8f       	std	Y+31, r24	; 0x1f
    1548:	98 a3       	std	Y+32, r25	; 0x20
    154a:	a9 a3       	std	Y+33, r26	; 0x21
    154c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    154e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1550:	78 a1       	ldd	r23, Y+32	; 0x20
    1552:	89 a1       	ldd	r24, Y+33	; 0x21
    1554:	9a a1       	ldd	r25, Y+34	; 0x22
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	40 e8       	ldi	r20, 0x80	; 128
    155c:	5f e3       	ldi	r21, 0x3F	; 63
    155e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1562:	88 23       	and	r24, r24
    1564:	1c f4       	brge	.+6      	; 0x156c <HLCD_voidInit+0x74e>
		__ticks = 1;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	8e 8f       	std	Y+30, r24	; 0x1e
    156a:	91 c0       	rjmp	.+290    	; 0x168e <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    156c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    156e:	78 a1       	ldd	r23, Y+32	; 0x20
    1570:	89 a1       	ldd	r24, Y+33	; 0x21
    1572:	9a a1       	ldd	r25, Y+34	; 0x22
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	53 e4       	ldi	r21, 0x43	; 67
    157c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1580:	18 16       	cp	r1, r24
    1582:	0c f0       	brlt	.+2      	; 0x1586 <HLCD_voidInit+0x768>
    1584:	7b c0       	rjmp	.+246    	; 0x167c <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    1586:	6b a1       	ldd	r22, Y+35	; 0x23
    1588:	7c a1       	ldd	r23, Y+36	; 0x24
    158a:	8d a1       	ldd	r24, Y+37	; 0x25
    158c:	9e a1       	ldd	r25, Y+38	; 0x26
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a e7       	ldi	r20, 0x7A	; 122
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	8a 8f       	std	Y+26, r24	; 0x1a
    15a0:	9b 8f       	std	Y+27, r25	; 0x1b
    15a2:	ac 8f       	std	Y+28, r26	; 0x1c
    15a4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a ef       	ldi	r20, 0xFA	; 250
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8e 8b       	std	Y+22, r24	; 0x16
    15c0:	9f 8b       	std	Y+23, r25	; 0x17
    15c2:	a8 8f       	std	Y+24, r26	; 0x18
    15c4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    15c6:	6e 89       	ldd	r22, Y+22	; 0x16
    15c8:	7f 89       	ldd	r23, Y+23	; 0x17
    15ca:	88 8d       	ldd	r24, Y+24	; 0x18
    15cc:	99 8d       	ldd	r25, Y+25	; 0x19
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9d 8b       	std	Y+21, r25	; 0x15
    15e4:	8c 8b       	std	Y+20, r24	; 0x14
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    15e8:	6e 89       	ldd	r22, Y+22	; 0x16
    15ea:	7f 89       	ldd	r23, Y+23	; 0x17
    15ec:	88 8d       	ldd	r24, Y+24	; 0x18
    15ee:	99 8d       	ldd	r25, Y+25	; 0x19
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1602:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1604:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1606:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9d 8b       	std	Y+21, r25	; 0x15
    1626:	8c 8b       	std	Y+20, r24	; 0x14
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <HLCD_voidInit+0x82a>
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9b 8b       	std	Y+19, r25	; 0x13
    1630:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1632:	8a 89       	ldd	r24, Y+18	; 0x12
    1634:	9b 89       	ldd	r25, Y+19	; 0x13
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <HLCD_voidInit+0x818>
    163a:	9b 8b       	std	Y+19, r25	; 0x13
    163c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8c 89       	ldd	r24, Y+20	; 0x14
    1640:	9d 89       	ldd	r25, Y+21	; 0x15
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9d 8b       	std	Y+21, r25	; 0x15
    1646:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8c 89       	ldd	r24, Y+20	; 0x14
    164a:	9d 89       	ldd	r25, Y+21	; 0x15
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <HLCD_voidInit+0x80c>
    1650:	24 c0       	rjmp	.+72     	; 0x169a <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6e 89       	ldd	r22, Y+22	; 0x16
    1654:	7f 89       	ldd	r23, Y+23	; 0x17
    1656:	88 8d       	ldd	r24, Y+24	; 0x18
    1658:	99 8d       	ldd	r25, Y+25	; 0x19
    165a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9d 8b       	std	Y+21, r25	; 0x15
    1664:	8c 8b       	std	Y+20, r24	; 0x14
    1666:	8c 89       	ldd	r24, Y+20	; 0x14
    1668:	9d 89       	ldd	r25, Y+21	; 0x15
    166a:	99 8b       	std	Y+17, r25	; 0x11
    166c:	88 8b       	std	Y+16, r24	; 0x10
    166e:	88 89       	ldd	r24, Y+16	; 0x10
    1670:	99 89       	ldd	r25, Y+17	; 0x11
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <HLCD_voidInit+0x854>
    1676:	99 8b       	std	Y+17, r25	; 0x11
    1678:	88 8b       	std	Y+16, r24	; 0x10
    167a:	0f c0       	rjmp	.+30     	; 0x169a <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    167c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    167e:	78 a1       	ldd	r23, Y+32	; 0x20
    1680:	89 a1       	ldd	r24, Y+33	; 0x21
    1682:	9a a1       	ldd	r25, Y+34	; 0x22
    1684:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	8e 8f       	std	Y+30, r24	; 0x1e
    168e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1690:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	8a 95       	dec	r24
    1696:	f1 f7       	brne	.-4      	; 0x1694 <HLCD_voidInit+0x876>
    1698:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    169a:	86 e0       	ldi	r24, 0x06	; 6
    169c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    16a0:	8f e0       	ldi	r24, 0x0F	; 15
    16a2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e4       	ldi	r27, 0x40	; 64
    16b4:	8b 87       	std	Y+11, r24	; 0x0b
    16b6:	9c 87       	std	Y+12, r25	; 0x0c
    16b8:	ad 87       	std	Y+13, r26	; 0x0d
    16ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16be:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a ef       	ldi	r20, 0xFA	; 250
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8f 83       	std	Y+7, r24	; 0x07
    16d6:	98 87       	std	Y+8, r25	; 0x08
    16d8:	a9 87       	std	Y+9, r26	; 0x09
    16da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <HLCD_voidInit+0x8e0>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9e 83       	std	Y+6, r25	; 0x06
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	0f c0       	rjmp	.+30     	; 0x175e <HLCD_voidInit+0x940>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <HLCD_voidInit+0x92e>
    1750:	9c 83       	std	Y+4, r25	; 0x04
    1752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <HLCD_voidInit+0x922>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <HLCD_voidInit+0x96a>
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    1790:	ce 58       	subi	r28, 0x8E	; 142
    1792:	df 4f       	sbci	r29, 0xFF	; 255
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	c1 56       	subi	r28, 0x61	; 97
    17b6:	d0 40       	sbci	r29, 0x00	; 0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	fe 01       	movw	r30, r28
    17c4:	ef 59       	subi	r30, 0x9F	; 159
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    17e8:	fe 01       	movw	r30, r28
    17ea:	ef 59       	subi	r30, 0x9F	; 159
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 81       	ld	r24, Z
    17f0:	82 95       	swap	r24
    17f2:	8f 70       	andi	r24, 0x0F	; 15
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	98 2f       	mov	r25, r24
    17f8:	9f 5f       	subi	r25, 0xFF	; 255
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	64 e0       	ldi	r22, 0x04	; 4
    17fe:	49 2f       	mov	r20, r25
    1800:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    1804:	fe 01       	movw	r30, r28
    1806:	ef 59       	subi	r30, 0x9F	; 159
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	82 95       	swap	r24
    180e:	86 95       	lsr	r24
    1810:	87 70       	andi	r24, 0x07	; 7
    1812:	81 70       	andi	r24, 0x01	; 1
    1814:	98 2f       	mov	r25, r24
    1816:	9f 5f       	subi	r25, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	65 e0       	ldi	r22, 0x05	; 5
    181c:	49 2f       	mov	r20, r25
    181e:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    1822:	fe 01       	movw	r30, r28
    1824:	ef 59       	subi	r30, 0x9F	; 159
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	82 95       	swap	r24
    182c:	86 95       	lsr	r24
    182e:	86 95       	lsr	r24
    1830:	83 70       	andi	r24, 0x03	; 3
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	98 2f       	mov	r25, r24
    1836:	9f 5f       	subi	r25, 0xFF	; 255
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	66 e0       	ldi	r22, 0x06	; 6
    183c:	49 2f       	mov	r20, r25
    183e:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    1842:	fe 01       	movw	r30, r28
    1844:	ef 59       	subi	r30, 0x9F	; 159
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	88 1f       	adc	r24, r24
    184c:	88 27       	eor	r24, r24
    184e:	88 1f       	adc	r24, r24
    1850:	98 2f       	mov	r25, r24
    1852:	9f 5f       	subi	r25, 0xFF	; 255
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	67 e0       	ldi	r22, 0x07	; 7
    1858:	49 2f       	mov	r20, r25
    185a:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    1868:	fe 01       	movw	r30, r28
    186a:	e3 5a       	subi	r30, 0xA3	; 163
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	a0 e2       	ldi	r26, 0x20	; 32
    1874:	b1 e4       	ldi	r27, 0x41	; 65
    1876:	80 83       	st	Z, r24
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	a2 83       	std	Z+2, r26	; 0x02
    187c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    187e:	8e 01       	movw	r16, r28
    1880:	07 5a       	subi	r16, 0xA7	; 167
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	fe 01       	movw	r30, r28
    1886:	e3 5a       	subi	r30, 0xA3	; 163
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	2b ea       	ldi	r18, 0xAB	; 171
    1894:	3a ea       	ldi	r19, 0xAA	; 170
    1896:	4a e2       	ldi	r20, 0x2A	; 42
    1898:	50 e4       	ldi	r21, 0x40	; 64
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 83       	st	Z, r24
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	a2 83       	std	Z+2, r26	; 0x02
    18aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ac:	fe 01       	movw	r30, r28
    18ae:	e7 5a       	subi	r30, 0xA7	; 167
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	60 81       	ld	r22, Z
    18b4:	71 81       	ldd	r23, Z+1	; 0x01
    18b6:	82 81       	ldd	r24, Z+2	; 0x02
    18b8:	93 81       	ldd	r25, Z+3	; 0x03
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	34 f4       	brge	.+12     	; 0x18d6 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    18ca:	fe 01       	movw	r30, r28
    18cc:	e8 5a       	subi	r30, 0xA8	; 168
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 83       	st	Z, r24
    18d4:	e0 c0       	rjmp	.+448    	; 0x1a96 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    18d6:	fe 01       	movw	r30, r28
    18d8:	e7 5a       	subi	r30, 0xA7	; 167
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	53 e4       	ldi	r21, 0x43	; 67
    18ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	0c f0       	brlt	.+2      	; 0x18f6 <HLCD_voidSendCmd+0x14e>
    18f4:	c0 c0       	rjmp	.+384    	; 0x1a76 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    18f6:	fe 01       	movw	r30, r28
    18f8:	e3 5a       	subi	r30, 0xA3	; 163
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	fe 01       	movw	r30, r28
    1916:	ec 5a       	subi	r30, 0xAC	; 172
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 83       	st	Z, r24
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	a2 83       	std	Z+2, r26	; 0x02
    1920:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	8e 01       	movw	r16, r28
    1924:	00 5b       	subi	r16, 0xB0	; 176
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	ec 5a       	subi	r30, 0xAC	; 172
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4a ef       	ldi	r20, 0xFA	; 250
    193c:	54 e4       	ldi	r21, 0x44	; 68
    193e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	f8 01       	movw	r30, r16
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1950:	fe 01       	movw	r30, r28
    1952:	e0 5b       	subi	r30, 0xB0	; 176
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	44 f4       	brge	.+16     	; 0x197e <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    196e:	fe 01       	movw	r30, r28
    1970:	e2 5b       	subi	r30, 0xB2	; 178
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    197c:	64 c0       	rjmp	.+200    	; 0x1a46 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    197e:	fe 01       	movw	r30, r28
    1980:	e0 5b       	subi	r30, 0xB0	; 176
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	0c f0       	brlt	.+2      	; 0x199e <HLCD_voidSendCmd+0x1f6>
    199c:	43 c0       	rjmp	.+134    	; 0x1a24 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	fe 01       	movw	r30, r28
    19a0:	ec 5a       	subi	r30, 0xAC	; 172
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8e 01       	movw	r16, r28
    19be:	02 5b       	subi	r16, 0xB2	; 178
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	f8 01       	movw	r30, r16
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
    19d4:	1f c0       	rjmp	.+62     	; 0x1a14 <HLCD_voidSendCmd+0x26c>
    19d6:	fe 01       	movw	r30, r28
    19d8:	e4 5b       	subi	r30, 0xB4	; 180
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	88 ec       	ldi	r24, 0xC8	; 200
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	fe 01       	movw	r30, r28
    19e6:	e4 5b       	subi	r30, 0xB4	; 180
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <HLCD_voidSendCmd+0x246>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e4 5b       	subi	r30, 0xB4	; 180
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fc:	de 01       	movw	r26, r28
    19fe:	a2 5b       	subi	r26, 0xB2	; 178
    1a00:	bf 4f       	sbci	r27, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	e2 5b       	subi	r30, 0xB2	; 178
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	9c 93       	st	X, r25
    1a12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a14:	fe 01       	movw	r30, r28
    1a16:	e2 5b       	subi	r30, 0xB2	; 178
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	91 81       	ldd	r25, Z+1	; 0x01
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	d1 f6       	brne	.-76     	; 0x19d6 <HLCD_voidSendCmd+0x22e>
    1a22:	4b c0       	rjmp	.+150    	; 0x1aba <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a24:	8e 01       	movw	r16, r28
    1a26:	02 5b       	subi	r16, 0xB2	; 178
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e0 5b       	subi	r30, 0xB0	; 176
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	f8 01       	movw	r30, r16
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	de 01       	movw	r26, r28
    1a48:	a6 5b       	subi	r26, 0xB6	; 182
    1a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e2 5b       	subi	r30, 0xB2	; 178
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	91 81       	ldd	r25, Z+1	; 0x01
    1a56:	11 96       	adiw	r26, 0x01	; 1
    1a58:	9c 93       	st	X, r25
    1a5a:	8e 93       	st	-X, r24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e6 5b       	subi	r30, 0xB6	; 182
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	91 81       	ldd	r25, Z+1	; 0x01
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <HLCD_voidSendCmd+0x2be>
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	e6 5b       	subi	r30, 0xB6	; 182
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	22 c0       	rjmp	.+68     	; 0x1aba <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a76:	8e 01       	movw	r16, r28
    1a78:	08 5a       	subi	r16, 0xA8	; 168
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e7 5a       	subi	r30, 0xA7	; 167
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 83       	st	Z, r24
    1a96:	de 01       	movw	r26, r28
    1a98:	a7 5b       	subi	r26, 0xB7	; 183
    1a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e8 5a       	subi	r30, 0xA8	; 168
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 5b       	subi	r30, 0xB7	; 183
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	8a 95       	dec	r24
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <HLCD_voidSendCmd+0x306>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e7 5b       	subi	r30, 0xB7	; 183
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	62 e0       	ldi	r22, 0x02	; 2
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	eb 5b       	subi	r30, 0xBB	; 187
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a8 ec       	ldi	r26, 0xC8	; 200
    1ad0:	b2 e4       	ldi	r27, 0x42	; 66
    1ad2:	80 83       	st	Z, r24
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	a2 83       	std	Z+2, r26	; 0x02
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ada:	8e 01       	movw	r16, r28
    1adc:	0f 5b       	subi	r16, 0xBF	; 191
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	eb 5b       	subi	r30, 0xBB	; 187
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	2b ea       	ldi	r18, 0xAB	; 171
    1af0:	3a ea       	ldi	r19, 0xAA	; 170
    1af2:	4a e2       	ldi	r20, 0x2A	; 42
    1af4:	50 e4       	ldi	r21, 0x40	; 64
    1af6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	f8 01       	movw	r30, r16
    1b00:	80 83       	st	Z, r24
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	a2 83       	std	Z+2, r26	; 0x02
    1b06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ef 5b       	subi	r30, 0xBF	; 191
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	34 f4       	brge	.+12     	; 0x1b32 <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e0 5c       	subi	r30, 0xC0	; 192
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 83       	st	Z, r24
    1b30:	9d c0       	rjmp	.+314    	; 0x1c6c <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    1b32:	fe 01       	movw	r30, r28
    1b34:	ef 5b       	subi	r30, 0xBF	; 191
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4f e7       	ldi	r20, 0x7F	; 127
    1b46:	53 e4       	ldi	r21, 0x43	; 67
    1b48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <HLCD_voidSendCmd+0x3aa>
    1b50:	7e c0       	rjmp	.+252    	; 0x1c4e <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 5b       	subi	r30, 0xBB	; 187
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	82 81       	ldd	r24, Z+2	; 0x02
    1b5e:	93 81       	ldd	r25, Z+3	; 0x03
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	54 e4       	ldi	r21, 0x44	; 68
    1b68:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8c af       	std	Y+60, r24	; 0x3c
    1b72:	9d af       	std	Y+61, r25	; 0x3d
    1b74:	ae af       	std	Y+62, r26	; 0x3e
    1b76:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	88 af       	std	Y+56, r24	; 0x38
    1b92:	99 af       	std	Y+57, r25	; 0x39
    1b94:	aa af       	std	Y+58, r26	; 0x3a
    1b96:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1b98:	68 ad       	ldd	r22, Y+56	; 0x38
    1b9a:	79 ad       	ldd	r23, Y+57	; 0x39
    1b9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b9e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9f ab       	std	Y+55, r25	; 0x37
    1bb6:	8e ab       	std	Y+54, r24	; 0x36
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1bba:	68 ad       	ldd	r22, Y+56	; 0x38
    1bbc:	79 ad       	ldd	r23, Y+57	; 0x39
    1bbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bd4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bd6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9f ab       	std	Y+55, r25	; 0x37
    1bf8:	8e ab       	std	Y+54, r24	; 0x36
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <HLCD_voidSendCmd+0x472>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9d ab       	std	Y+53, r25	; 0x35
    1c02:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c04:	8c a9       	ldd	r24, Y+52	; 0x34
    1c06:	9d a9       	ldd	r25, Y+53	; 0x35
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <HLCD_voidSendCmd+0x460>
    1c0c:	9d ab       	std	Y+53, r25	; 0x35
    1c0e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8e a9       	ldd	r24, Y+54	; 0x36
    1c12:	9f a9       	ldd	r25, Y+55	; 0x37
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	9f ab       	std	Y+55, r25	; 0x37
    1c18:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c1c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <HLCD_voidSendCmd+0x454>
    1c22:	2d c0       	rjmp	.+90     	; 0x1c7e <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	68 ad       	ldd	r22, Y+56	; 0x38
    1c26:	79 ad       	ldd	r23, Y+57	; 0x39
    1c28:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c2a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9f ab       	std	Y+55, r25	; 0x37
    1c36:	8e ab       	std	Y+54, r24	; 0x36
    1c38:	8e a9       	ldd	r24, Y+54	; 0x36
    1c3a:	9f a9       	ldd	r25, Y+55	; 0x37
    1c3c:	9b ab       	std	Y+51, r25	; 0x33
    1c3e:	8a ab       	std	Y+50, r24	; 0x32
    1c40:	8a a9       	ldd	r24, Y+50	; 0x32
    1c42:	9b a9       	ldd	r25, Y+51	; 0x33
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <HLCD_voidSendCmd+0x49c>
    1c48:	9b ab       	std	Y+51, r25	; 0x33
    1c4a:	8a ab       	std	Y+50, r24	; 0x32
    1c4c:	18 c0       	rjmp	.+48     	; 0x1c7e <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ef 5b       	subi	r30, 0xBF	; 191
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	fe 01       	movw	r30, r28
    1c66:	e0 5c       	subi	r30, 0xC0	; 192
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 83       	st	Z, r24
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e0 5c       	subi	r30, 0xC0	; 192
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c76:	89 a9       	ldd	r24, Y+49	; 0x31
    1c78:	8a 95       	dec	r24
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <HLCD_voidSendCmd+0x4d0>
    1c7c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ef 59       	subi	r30, 0x9F	; 159
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	98 2f       	mov	r25, r24
    1c8a:	9f 5f       	subi	r25, 0xFF	; 255
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	64 e0       	ldi	r22, 0x04	; 4
    1c90:	49 2f       	mov	r20, r25
    1c92:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1c96:	fe 01       	movw	r30, r28
    1c98:	ef 59       	subi	r30, 0x9F	; 159
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	86 95       	lsr	r24
    1ca0:	81 70       	andi	r24, 0x01	; 1
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	65 e0       	ldi	r22, 0x05	; 5
    1caa:	49 2f       	mov	r20, r25
    1cac:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ef 59       	subi	r30, 0x9F	; 159
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	86 95       	lsr	r24
    1cba:	86 95       	lsr	r24
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	9f 5f       	subi	r25, 0xFF	; 255
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	66 e0       	ldi	r22, 0x06	; 6
    1cc6:	49 2f       	mov	r20, r25
    1cc8:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ef 59       	subi	r30, 0x9F	; 159
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	86 95       	lsr	r24
    1cd6:	86 95       	lsr	r24
    1cd8:	86 95       	lsr	r24
    1cda:	81 70       	andi	r24, 0x01	; 1
    1cdc:	98 2f       	mov	r25, r24
    1cde:	9f 5f       	subi	r25, 0xFF	; 255
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	67 e0       	ldi	r22, 0x07	; 7
    1ce4:	49 2f       	mov	r20, r25
    1ce6:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	42 e0       	ldi	r20, 0x02	; 2
    1cf0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	a0 e2       	ldi	r26, 0x20	; 32
    1cfa:	b1 e4       	ldi	r27, 0x41	; 65
    1cfc:	8d a7       	std	Y+45, r24	; 0x2d
    1cfe:	9e a7       	std	Y+46, r25	; 0x2e
    1d00:	af a7       	std	Y+47, r26	; 0x2f
    1d02:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d04:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d06:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d0c:	2b ea       	ldi	r18, 0xAB	; 171
    1d0e:	3a ea       	ldi	r19, 0xAA	; 170
    1d10:	4a e2       	ldi	r20, 0x2A	; 42
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	89 a7       	std	Y+41, r24	; 0x29
    1d1e:	9a a7       	std	Y+42, r25	; 0x2a
    1d20:	ab a7       	std	Y+43, r26	; 0x2b
    1d22:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d24:	69 a5       	ldd	r22, Y+41	; 0x29
    1d26:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	1c f4       	brge	.+6      	; 0x1d42 <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	88 a7       	std	Y+40, r24	; 0x28
    1d40:	91 c0       	rjmp	.+290    	; 0x1e64 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1d42:	69 a5       	ldd	r22, Y+41	; 0x29
    1d44:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	53 e4       	ldi	r21, 0x43	; 67
    1d52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	0c f0       	brlt	.+2      	; 0x1d5c <HLCD_voidSendCmd+0x5b4>
    1d5a:	7b c0       	rjmp	.+246    	; 0x1e52 <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1d5c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d5e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d62:	98 a9       	ldd	r25, Y+48	; 0x30
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a e7       	ldi	r20, 0x7A	; 122
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	8c a3       	std	Y+36, r24	; 0x24
    1d76:	9d a3       	std	Y+37, r25	; 0x25
    1d78:	ae a3       	std	Y+38, r26	; 0x26
    1d7a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6c a1       	ldd	r22, Y+36	; 0x24
    1d7e:	7d a1       	ldd	r23, Y+37	; 0x25
    1d80:	8e a1       	ldd	r24, Y+38	; 0x26
    1d82:	9f a1       	ldd	r25, Y+39	; 0x27
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a ef       	ldi	r20, 0xFA	; 250
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	88 a3       	std	Y+32, r24	; 0x20
    1d96:	99 a3       	std	Y+33, r25	; 0x21
    1d98:	aa a3       	std	Y+34, r26	; 0x22
    1d9a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d9c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d9e:	79 a1       	ldd	r23, Y+33	; 0x21
    1da0:	8a a1       	ldd	r24, Y+34	; 0x22
    1da2:	9b a1       	ldd	r25, Y+35	; 0x23
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9f 8f       	std	Y+31, r25	; 0x1f
    1dba:	8e 8f       	std	Y+30, r24	; 0x1e
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1dbe:	68 a1       	ldd	r22, Y+32	; 0x20
    1dc0:	79 a1       	ldd	r23, Y+33	; 0x21
    1dc2:	8a a1       	ldd	r24, Y+34	; 0x22
    1dc4:	9b a1       	ldd	r25, Y+35	; 0x23
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6c a1       	ldd	r22, Y+36	; 0x24
    1dd8:	7d a1       	ldd	r23, Y+37	; 0x25
    1dda:	8e a1       	ldd	r24, Y+38	; 0x26
    1ddc:	9f a1       	ldd	r25, Y+39	; 0x27
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9f 8f       	std	Y+31, r25	; 0x1f
    1dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <HLCD_voidSendCmd+0x676>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9d 8f       	std	Y+29, r25	; 0x1d
    1e06:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e08:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <HLCD_voidSendCmd+0x664>
    1e10:	9d 8f       	std	Y+29, r25	; 0x1d
    1e12:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e1c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <HLCD_voidSendCmd+0x658>
    1e26:	24 c0       	rjmp	.+72     	; 0x1e70 <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	68 a1       	ldd	r22, Y+32	; 0x20
    1e2a:	79 a1       	ldd	r23, Y+33	; 0x21
    1e2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9f 8f       	std	Y+31, r25	; 0x1f
    1e3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e40:	9b 8f       	std	Y+27, r25	; 0x1b
    1e42:	8a 8f       	std	Y+26, r24	; 0x1a
    1e44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <HLCD_voidSendCmd+0x6a0>
    1e4c:	9b 8f       	std	Y+27, r25	; 0x1b
    1e4e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e52:	69 a5       	ldd	r22, Y+41	; 0x29
    1e54:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	88 a7       	std	Y+40, r24	; 0x28
    1e64:	88 a5       	ldd	r24, Y+40	; 0x28
    1e66:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e68:	89 8d       	ldd	r24, Y+25	; 0x19
    1e6a:	8a 95       	dec	r24
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <HLCD_voidSendCmd+0x6c2>
    1e6e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a8 ec       	ldi	r26, 0xC8	; 200
    1e80:	b2 e4       	ldi	r27, 0x42	; 66
    1e82:	8d 8b       	std	Y+21, r24	; 0x15
    1e84:	9e 8b       	std	Y+22, r25	; 0x16
    1e86:	af 8b       	std	Y+23, r26	; 0x17
    1e88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e90:	98 8d       	ldd	r25, Y+24	; 0x18
    1e92:	2b ea       	ldi	r18, 0xAB	; 171
    1e94:	3a ea       	ldi	r19, 0xAA	; 170
    1e96:	4a e2       	ldi	r20, 0x2A	; 42
    1e98:	50 e4       	ldi	r21, 0x40	; 64
    1e9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	89 8b       	std	Y+17, r24	; 0x11
    1ea4:	9a 8b       	std	Y+18, r25	; 0x12
    1ea6:	ab 8b       	std	Y+19, r26	; 0x13
    1ea8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1eaa:	69 89       	ldd	r22, Y+17	; 0x11
    1eac:	7a 89       	ldd	r23, Y+18	; 0x12
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	1c f4       	brge	.+6      	; 0x1ec8 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	88 8b       	std	Y+16, r24	; 0x10
    1ec6:	91 c0       	rjmp	.+290    	; 0x1fea <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    1ec8:	69 89       	ldd	r22, Y+17	; 0x11
    1eca:	7a 89       	ldd	r23, Y+18	; 0x12
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4f e7       	ldi	r20, 0x7F	; 127
    1ed6:	53 e4       	ldi	r21, 0x43	; 67
    1ed8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	0c f0       	brlt	.+2      	; 0x1ee2 <HLCD_voidSendCmd+0x73a>
    1ee0:	7b c0       	rjmp	.+246    	; 0x1fd8 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    1ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	54 e4       	ldi	r21, 0x44	; 68
    1ef2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8c 87       	std	Y+12, r24	; 0x0c
    1efc:	9d 87       	std	Y+13, r25	; 0x0d
    1efe:	ae 87       	std	Y+14, r26	; 0x0e
    1f00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a ef       	ldi	r20, 0xFA	; 250
    1f10:	54 e4       	ldi	r21, 0x44	; 68
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	88 87       	std	Y+8, r24	; 0x08
    1f1c:	99 87       	std	Y+9, r25	; 0x09
    1f1e:	aa 87       	std	Y+10, r26	; 0x0a
    1f20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f22:	68 85       	ldd	r22, Y+8	; 0x08
    1f24:	79 85       	ldd	r23, Y+9	; 0x09
    1f26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9f 83       	std	Y+7, r25	; 0x07
    1f40:	8e 83       	std	Y+6, r24	; 0x06
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    1f44:	68 85       	ldd	r22, Y+8	; 0x08
    1f46:	79 85       	ldd	r23, Y+9	; 0x09
    1f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9f 83       	std	Y+7, r25	; 0x07
    1f82:	8e 83       	std	Y+6, r24	; 0x06
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <HLCD_voidSendCmd+0x7fc>
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9d 83       	std	Y+5, r25	; 0x05
    1f8c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9d 81       	ldd	r25, Y+5	; 0x05
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <HLCD_voidSendCmd+0x7ea>
    1f96:	9d 83       	std	Y+5, r25	; 0x05
    1f98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9f 83       	std	Y+7, r25	; 0x07
    1fa2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <HLCD_voidSendCmd+0x7de>
    1fac:	24 c0       	rjmp	.+72     	; 0x1ff6 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	68 85       	ldd	r22, Y+8	; 0x08
    1fb0:	79 85       	ldd	r23, Y+9	; 0x09
    1fb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9f 83       	std	Y+7, r25	; 0x07
    1fc0:	8e 83       	std	Y+6, r24	; 0x06
    1fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc6:	9b 83       	std	Y+3, r25	; 0x03
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <HLCD_voidSendCmd+0x826>
    1fd2:	9b 83       	std	Y+3, r25	; 0x03
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fd8:	69 89       	ldd	r22, Y+17	; 0x11
    1fda:	7a 89       	ldd	r23, Y+18	; 0x12
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	88 8b       	std	Y+16, r24	; 0x10
    1fea:	88 89       	ldd	r24, Y+16	; 0x10
    1fec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	8a 95       	dec	r24
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <HLCD_voidSendCmd+0x848>
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    1ff6:	cf 59       	subi	r28, 0x9F	; 159
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	08 95       	ret

0000200e <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	c1 56       	subi	r28, 0x61	; 97
    201c:	d0 40       	sbci	r29, 0x00	; 0
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	fe 01       	movw	r30, r28
    202a:	ef 59       	subi	r30, 0x9F	; 159
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	42 e0       	ldi	r20, 0x02	; 2
    2036:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	62 e0       	ldi	r22, 0x02	; 2
    2048:	41 e0       	ldi	r20, 0x01	; 1
    204a:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    204e:	fe 01       	movw	r30, r28
    2050:	ef 59       	subi	r30, 0x9F	; 159
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 81       	ld	r24, Z
    2056:	82 95       	swap	r24
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	81 70       	andi	r24, 0x01	; 1
    205c:	98 2f       	mov	r25, r24
    205e:	9f 5f       	subi	r25, 0xFF	; 255
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	49 2f       	mov	r20, r25
    2066:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    206a:	fe 01       	movw	r30, r28
    206c:	ef 59       	subi	r30, 0x9F	; 159
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	82 95       	swap	r24
    2074:	86 95       	lsr	r24
    2076:	87 70       	andi	r24, 0x07	; 7
    2078:	81 70       	andi	r24, 0x01	; 1
    207a:	98 2f       	mov	r25, r24
    207c:	9f 5f       	subi	r25, 0xFF	; 255
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	65 e0       	ldi	r22, 0x05	; 5
    2082:	49 2f       	mov	r20, r25
    2084:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    2088:	fe 01       	movw	r30, r28
    208a:	ef 59       	subi	r30, 0x9F	; 159
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 81       	ld	r24, Z
    2090:	82 95       	swap	r24
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	83 70       	andi	r24, 0x03	; 3
    2098:	81 70       	andi	r24, 0x01	; 1
    209a:	98 2f       	mov	r25, r24
    209c:	9f 5f       	subi	r25, 0xFF	; 255
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	66 e0       	ldi	r22, 0x06	; 6
    20a2:	49 2f       	mov	r20, r25
    20a4:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    20a8:	fe 01       	movw	r30, r28
    20aa:	ef 59       	subi	r30, 0x9F	; 159
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	80 81       	ld	r24, Z
    20b0:	88 1f       	adc	r24, r24
    20b2:	88 27       	eor	r24, r24
    20b4:	88 1f       	adc	r24, r24
    20b6:	98 2f       	mov	r25, r24
    20b8:	9f 5f       	subi	r25, 0xFF	; 255
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	67 e0       	ldi	r22, 0x07	; 7
    20be:	49 2f       	mov	r20, r25
    20c0:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	62 e0       	ldi	r22, 0x02	; 2
    20c8:	42 e0       	ldi	r20, 0x02	; 2
    20ca:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    20ce:	fe 01       	movw	r30, r28
    20d0:	e3 5a       	subi	r30, 0xA3	; 163
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e2       	ldi	r26, 0x20	; 32
    20da:	b1 e4       	ldi	r27, 0x41	; 65
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e4:	8e 01       	movw	r16, r28
    20e6:	07 5a       	subi	r16, 0xA7	; 167
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	e3 5a       	subi	r30, 0xA3	; 163
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	2b ea       	ldi	r18, 0xAB	; 171
    20fa:	3a ea       	ldi	r19, 0xAA	; 170
    20fc:	4a e2       	ldi	r20, 0x2A	; 42
    20fe:	50 e4       	ldi	r21, 0x40	; 64
    2100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2112:	fe 01       	movw	r30, r28
    2114:	e7 5a       	subi	r30, 0xA7	; 167
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	34 f4       	brge	.+12     	; 0x213c <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    2130:	fe 01       	movw	r30, r28
    2132:	e8 5a       	subi	r30, 0xA8	; 168
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	80 83       	st	Z, r24
    213a:	e0 c0       	rjmp	.+448    	; 0x22fc <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    213c:	fe 01       	movw	r30, r28
    213e:	e7 5a       	subi	r30, 0xA7	; 167
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <HLCD_voidSendChar+0x14e>
    215a:	c0 c0       	rjmp	.+384    	; 0x22dc <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    215c:	fe 01       	movw	r30, r28
    215e:	e3 5a       	subi	r30, 0xA3	; 163
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a e7       	ldi	r20, 0x7A	; 122
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	fe 01       	movw	r30, r28
    217c:	ec 5a       	subi	r30, 0xAC	; 172
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	8e 01       	movw	r16, r28
    218a:	00 5b       	subi	r16, 0xB0	; 176
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	ec 5a       	subi	r30, 0xAC	; 172
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b6:	fe 01       	movw	r30, r28
    21b8:	e0 5b       	subi	r30, 0xB0	; 176
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	44 f4       	brge	.+16     	; 0x21e4 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    21d4:	fe 01       	movw	r30, r28
    21d6:	e2 5b       	subi	r30, 0xB2	; 178
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	80 83       	st	Z, r24
    21e2:	64 c0       	rjmp	.+200    	; 0x22ac <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    21e4:	fe 01       	movw	r30, r28
    21e6:	e0 5b       	subi	r30, 0xB0	; 176
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	0c f0       	brlt	.+2      	; 0x2204 <HLCD_voidSendChar+0x1f6>
    2202:	43 c0       	rjmp	.+134    	; 0x228a <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	fe 01       	movw	r30, r28
    2206:	ec 5a       	subi	r30, 0xAC	; 172
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e2       	ldi	r20, 0x20	; 32
    2218:	51 e4       	ldi	r21, 0x41	; 65
    221a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8e 01       	movw	r16, r28
    2224:	02 5b       	subi	r16, 0xB2	; 178
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	1f c0       	rjmp	.+62     	; 0x227a <HLCD_voidSendChar+0x26c>
    223c:	fe 01       	movw	r30, r28
    223e:	e4 5b       	subi	r30, 0xB4	; 180
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	88 ec       	ldi	r24, 0xC8	; 200
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    224a:	fe 01       	movw	r30, r28
    224c:	e4 5b       	subi	r30, 0xB4	; 180
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <HLCD_voidSendChar+0x246>
    2258:	fe 01       	movw	r30, r28
    225a:	e4 5b       	subi	r30, 0xB4	; 180
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	de 01       	movw	r26, r28
    2264:	a2 5b       	subi	r26, 0xB2	; 178
    2266:	bf 4f       	sbci	r27, 0xFF	; 255
    2268:	fe 01       	movw	r30, r28
    226a:	e2 5b       	subi	r30, 0xB2	; 178
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	11 96       	adiw	r26, 0x01	; 1
    2276:	9c 93       	st	X, r25
    2278:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	fe 01       	movw	r30, r28
    227c:	e2 5b       	subi	r30, 0xB2	; 178
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	d1 f6       	brne	.-76     	; 0x223c <HLCD_voidSendChar+0x22e>
    2288:	4b c0       	rjmp	.+150    	; 0x2320 <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	8e 01       	movw	r16, r28
    228c:	02 5b       	subi	r16, 0xB2	; 178
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	e0 5b       	subi	r30, 0xB0	; 176
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	de 01       	movw	r26, r28
    22ae:	a6 5b       	subi	r26, 0xB6	; 182
    22b0:	bf 4f       	sbci	r27, 0xFF	; 255
    22b2:	fe 01       	movw	r30, r28
    22b4:	e2 5b       	subi	r30, 0xB2	; 178
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	9c 93       	st	X, r25
    22c0:	8e 93       	st	-X, r24
    22c2:	fe 01       	movw	r30, r28
    22c4:	e6 5b       	subi	r30, 0xB6	; 182
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <HLCD_voidSendChar+0x2be>
    22d0:	fe 01       	movw	r30, r28
    22d2:	e6 5b       	subi	r30, 0xB6	; 182
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	22 c0       	rjmp	.+68     	; 0x2320 <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22dc:	8e 01       	movw	r16, r28
    22de:	08 5a       	subi	r16, 0xA8	; 168
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	e7 5a       	subi	r30, 0xA7	; 167
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	f8 01       	movw	r30, r16
    22fa:	80 83       	st	Z, r24
    22fc:	de 01       	movw	r26, r28
    22fe:	a7 5b       	subi	r26, 0xB7	; 183
    2300:	bf 4f       	sbci	r27, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	e8 5a       	subi	r30, 0xA8	; 168
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    230c:	fe 01       	movw	r30, r28
    230e:	e7 5b       	subi	r30, 0xB7	; 183
    2310:	ff 4f       	sbci	r31, 0xFF	; 255
    2312:	80 81       	ld	r24, Z
    2314:	8a 95       	dec	r24
    2316:	f1 f7       	brne	.-4      	; 0x2314 <HLCD_voidSendChar+0x306>
    2318:	fe 01       	movw	r30, r28
    231a:	e7 5b       	subi	r30, 0xB7	; 183
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	62 e0       	ldi	r22, 0x02	; 2
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    232a:	fe 01       	movw	r30, r28
    232c:	eb 5b       	subi	r30, 0xBB	; 187
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a8 ec       	ldi	r26, 0xC8	; 200
    2336:	b2 e4       	ldi	r27, 0x42	; 66
    2338:	80 83       	st	Z, r24
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	a2 83       	std	Z+2, r26	; 0x02
    233e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2340:	8e 01       	movw	r16, r28
    2342:	0f 5b       	subi	r16, 0xBF	; 191
    2344:	1f 4f       	sbci	r17, 0xFF	; 255
    2346:	fe 01       	movw	r30, r28
    2348:	eb 5b       	subi	r30, 0xBB	; 187
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	60 81       	ld	r22, Z
    234e:	71 81       	ldd	r23, Z+1	; 0x01
    2350:	82 81       	ldd	r24, Z+2	; 0x02
    2352:	93 81       	ldd	r25, Z+3	; 0x03
    2354:	2b ea       	ldi	r18, 0xAB	; 171
    2356:	3a ea       	ldi	r19, 0xAA	; 170
    2358:	4a e2       	ldi	r20, 0x2A	; 42
    235a:	50 e4       	ldi	r21, 0x40	; 64
    235c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	f8 01       	movw	r30, r16
    2366:	80 83       	st	Z, r24
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	a2 83       	std	Z+2, r26	; 0x02
    236c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236e:	fe 01       	movw	r30, r28
    2370:	ef 5b       	subi	r30, 0xBF	; 191
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	34 f4       	brge	.+12     	; 0x2398 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	fe 01       	movw	r30, r28
    2390:	e0 5c       	subi	r30, 0xC0	; 192
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 83       	st	Z, r24
    2396:	9d c0       	rjmp	.+314    	; 0x24d2 <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    2398:	fe 01       	movw	r30, r28
    239a:	ef 5b       	subi	r30, 0xBF	; 191
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	0c f0       	brlt	.+2      	; 0x23b8 <HLCD_voidSendChar+0x3aa>
    23b6:	7e c0       	rjmp	.+252    	; 0x24b4 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    23b8:	fe 01       	movw	r30, r28
    23ba:	eb 5b       	subi	r30, 0xBB	; 187
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8c af       	std	Y+60, r24	; 0x3c
    23d8:	9d af       	std	Y+61, r25	; 0x3d
    23da:	ae af       	std	Y+62, r26	; 0x3e
    23dc:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	6c ad       	ldd	r22, Y+60	; 0x3c
    23e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a ef       	ldi	r20, 0xFA	; 250
    23ec:	54 e4       	ldi	r21, 0x44	; 68
    23ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	88 af       	std	Y+56, r24	; 0x38
    23f8:	99 af       	std	Y+57, r25	; 0x39
    23fa:	aa af       	std	Y+58, r26	; 0x3a
    23fc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    23fe:	68 ad       	ldd	r22, Y+56	; 0x38
    2400:	79 ad       	ldd	r23, Y+57	; 0x39
    2402:	8a ad       	ldd	r24, Y+58	; 0x3a
    2404:	9b ad       	ldd	r25, Y+59	; 0x3b
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <HLCD_voidSendChar+0x412>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9f ab       	std	Y+55, r25	; 0x37
    241c:	8e ab       	std	Y+54, r24	; 0x36
    241e:	3f c0       	rjmp	.+126    	; 0x249e <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    2420:	68 ad       	ldd	r22, Y+56	; 0x38
    2422:	79 ad       	ldd	r23, Y+57	; 0x39
    2424:	8a ad       	ldd	r24, Y+58	; 0x3a
    2426:	9b ad       	ldd	r25, Y+59	; 0x3b
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	6c ad       	ldd	r22, Y+60	; 0x3c
    243a:	7d ad       	ldd	r23, Y+61	; 0x3d
    243c:	8e ad       	ldd	r24, Y+62	; 0x3e
    243e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9f ab       	std	Y+55, r25	; 0x37
    245e:	8e ab       	std	Y+54, r24	; 0x36
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <HLCD_voidSendChar+0x472>
    2462:	88 ec       	ldi	r24, 0xC8	; 200
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9d ab       	std	Y+53, r25	; 0x35
    2468:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    246a:	8c a9       	ldd	r24, Y+52	; 0x34
    246c:	9d a9       	ldd	r25, Y+53	; 0x35
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <HLCD_voidSendChar+0x460>
    2472:	9d ab       	std	Y+53, r25	; 0x35
    2474:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8e a9       	ldd	r24, Y+54	; 0x36
    2478:	9f a9       	ldd	r25, Y+55	; 0x37
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9f ab       	std	Y+55, r25	; 0x37
    247e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8e a9       	ldd	r24, Y+54	; 0x36
    2482:	9f a9       	ldd	r25, Y+55	; 0x37
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <HLCD_voidSendChar+0x454>
    2488:	2d c0       	rjmp	.+90     	; 0x24e4 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	68 ad       	ldd	r22, Y+56	; 0x38
    248c:	79 ad       	ldd	r23, Y+57	; 0x39
    248e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2490:	9b ad       	ldd	r25, Y+59	; 0x3b
    2492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9f ab       	std	Y+55, r25	; 0x37
    249c:	8e ab       	std	Y+54, r24	; 0x36
    249e:	8e a9       	ldd	r24, Y+54	; 0x36
    24a0:	9f a9       	ldd	r25, Y+55	; 0x37
    24a2:	9b ab       	std	Y+51, r25	; 0x33
    24a4:	8a ab       	std	Y+50, r24	; 0x32
    24a6:	8a a9       	ldd	r24, Y+50	; 0x32
    24a8:	9b a9       	ldd	r25, Y+51	; 0x33
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <HLCD_voidSendChar+0x49c>
    24ae:	9b ab       	std	Y+51, r25	; 0x33
    24b0:	8a ab       	std	Y+50, r24	; 0x32
    24b2:	18 c0       	rjmp	.+48     	; 0x24e4 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24b4:	fe 01       	movw	r30, r28
    24b6:	ef 5b       	subi	r30, 0xBF	; 191
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	fe 01       	movw	r30, r28
    24cc:	e0 5c       	subi	r30, 0xC0	; 192
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 83       	st	Z, r24
    24d2:	fe 01       	movw	r30, r28
    24d4:	e0 5c       	subi	r30, 0xC0	; 192
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	80 81       	ld	r24, Z
    24da:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24dc:	89 a9       	ldd	r24, Y+49	; 0x31
    24de:	8a 95       	dec	r24
    24e0:	f1 f7       	brne	.-4      	; 0x24de <HLCD_voidSendChar+0x4d0>
    24e2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    24e4:	fe 01       	movw	r30, r28
    24e6:	ef 59       	subi	r30, 0x9F	; 159
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	98 2f       	mov	r25, r24
    24f0:	9f 5f       	subi	r25, 0xFF	; 255
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	64 e0       	ldi	r22, 0x04	; 4
    24f6:	49 2f       	mov	r20, r25
    24f8:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    24fc:	fe 01       	movw	r30, r28
    24fe:	ef 59       	subi	r30, 0x9F	; 159
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	86 95       	lsr	r24
    2506:	81 70       	andi	r24, 0x01	; 1
    2508:	98 2f       	mov	r25, r24
    250a:	9f 5f       	subi	r25, 0xFF	; 255
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	65 e0       	ldi	r22, 0x05	; 5
    2510:	49 2f       	mov	r20, r25
    2512:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    2516:	fe 01       	movw	r30, r28
    2518:	ef 59       	subi	r30, 0x9F	; 159
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	86 95       	lsr	r24
    2520:	86 95       	lsr	r24
    2522:	81 70       	andi	r24, 0x01	; 1
    2524:	98 2f       	mov	r25, r24
    2526:	9f 5f       	subi	r25, 0xFF	; 255
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	66 e0       	ldi	r22, 0x06	; 6
    252c:	49 2f       	mov	r20, r25
    252e:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    2532:	fe 01       	movw	r30, r28
    2534:	ef 59       	subi	r30, 0x9F	; 159
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	86 95       	lsr	r24
    2540:	81 70       	andi	r24, 0x01	; 1
    2542:	98 2f       	mov	r25, r24
    2544:	9f 5f       	subi	r25, 0xFF	; 255
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	67 e0       	ldi	r22, 0x07	; 7
    254a:	49 2f       	mov	r20, r25
    254c:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	a0 e2       	ldi	r26, 0x20	; 32
    2560:	b1 e4       	ldi	r27, 0x41	; 65
    2562:	8d a7       	std	Y+45, r24	; 0x2d
    2564:	9e a7       	std	Y+46, r25	; 0x2e
    2566:	af a7       	std	Y+47, r26	; 0x2f
    2568:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    256a:	6d a5       	ldd	r22, Y+45	; 0x2d
    256c:	7e a5       	ldd	r23, Y+46	; 0x2e
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	2b ea       	ldi	r18, 0xAB	; 171
    2574:	3a ea       	ldi	r19, 0xAA	; 170
    2576:	4a e2       	ldi	r20, 0x2A	; 42
    2578:	50 e4       	ldi	r21, 0x40	; 64
    257a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	89 a7       	std	Y+41, r24	; 0x29
    2584:	9a a7       	std	Y+42, r25	; 0x2a
    2586:	ab a7       	std	Y+43, r26	; 0x2b
    2588:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    258a:	69 a5       	ldd	r22, Y+41	; 0x29
    258c:	7a a5       	ldd	r23, Y+42	; 0x2a
    258e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2590:	9c a5       	ldd	r25, Y+44	; 0x2c
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e8       	ldi	r20, 0x80	; 128
    2598:	5f e3       	ldi	r21, 0x3F	; 63
    259a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    259e:	88 23       	and	r24, r24
    25a0:	1c f4       	brge	.+6      	; 0x25a8 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	88 a7       	std	Y+40, r24	; 0x28
    25a6:	91 c0       	rjmp	.+290    	; 0x26ca <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    25a8:	69 a5       	ldd	r22, Y+41	; 0x29
    25aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    25ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	53 e4       	ldi	r21, 0x43	; 67
    25b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <HLCD_voidSendChar+0x5b4>
    25c0:	7b c0       	rjmp	.+246    	; 0x26b8 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    25c2:	6d a5       	ldd	r22, Y+45	; 0x2d
    25c4:	7e a5       	ldd	r23, Y+46	; 0x2e
    25c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25c8:	98 a9       	ldd	r25, Y+48	; 0x30
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	4a e7       	ldi	r20, 0x7A	; 122
    25d0:	54 e4       	ldi	r21, 0x44	; 68
    25d2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	8c a3       	std	Y+36, r24	; 0x24
    25dc:	9d a3       	std	Y+37, r25	; 0x25
    25de:	ae a3       	std	Y+38, r26	; 0x26
    25e0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6c a1       	ldd	r22, Y+36	; 0x24
    25e4:	7d a1       	ldd	r23, Y+37	; 0x25
    25e6:	8e a1       	ldd	r24, Y+38	; 0x26
    25e8:	9f a1       	ldd	r25, Y+39	; 0x27
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	88 a3       	std	Y+32, r24	; 0x20
    25fc:	99 a3       	std	Y+33, r25	; 0x21
    25fe:	aa a3       	std	Y+34, r26	; 0x22
    2600:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2602:	68 a1       	ldd	r22, Y+32	; 0x20
    2604:	79 a1       	ldd	r23, Y+33	; 0x21
    2606:	8a a1       	ldd	r24, Y+34	; 0x22
    2608:	9b a1       	ldd	r25, Y+35	; 0x23
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9f 8f       	std	Y+31, r25	; 0x1f
    2620:	8e 8f       	std	Y+30, r24	; 0x1e
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    2624:	68 a1       	ldd	r22, Y+32	; 0x20
    2626:	79 a1       	ldd	r23, Y+33	; 0x21
    2628:	8a a1       	ldd	r24, Y+34	; 0x22
    262a:	9b a1       	ldd	r25, Y+35	; 0x23
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6c a1       	ldd	r22, Y+36	; 0x24
    263e:	7d a1       	ldd	r23, Y+37	; 0x25
    2640:	8e a1       	ldd	r24, Y+38	; 0x26
    2642:	9f a1       	ldd	r25, Y+39	; 0x27
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9f 8f       	std	Y+31, r25	; 0x1f
    2662:	8e 8f       	std	Y+30, r24	; 0x1e
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <HLCD_voidSendChar+0x676>
    2666:	88 ec       	ldi	r24, 0xC8	; 200
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9d 8f       	std	Y+29, r25	; 0x1d
    266c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2670:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <HLCD_voidSendChar+0x664>
    2676:	9d 8f       	std	Y+29, r25	; 0x1d
    2678:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    267c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9f 8f       	std	Y+31, r25	; 0x1f
    2682:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2686:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <HLCD_voidSendChar+0x658>
    268c:	24 c0       	rjmp	.+72     	; 0x26d6 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	68 a1       	ldd	r22, Y+32	; 0x20
    2690:	79 a1       	ldd	r23, Y+33	; 0x21
    2692:	8a a1       	ldd	r24, Y+34	; 0x22
    2694:	9b a1       	ldd	r25, Y+35	; 0x23
    2696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9f 8f       	std	Y+31, r25	; 0x1f
    26a0:	8e 8f       	std	Y+30, r24	; 0x1e
    26a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26a6:	9b 8f       	std	Y+27, r25	; 0x1b
    26a8:	8a 8f       	std	Y+26, r24	; 0x1a
    26aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <HLCD_voidSendChar+0x6a0>
    26b2:	9b 8f       	std	Y+27, r25	; 0x1b
    26b4:	8a 8f       	std	Y+26, r24	; 0x1a
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26b8:	69 a5       	ldd	r22, Y+41	; 0x29
    26ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    26bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26be:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	88 a7       	std	Y+40, r24	; 0x28
    26ca:	88 a5       	ldd	r24, Y+40	; 0x28
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26ce:	89 8d       	ldd	r24, Y+25	; 0x19
    26d0:	8a 95       	dec	r24
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <HLCD_voidSendChar+0x6c2>
    26d4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 8d 19 	call	0x331a	; 0x331a <MDIO_stderrSetPinValue>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a8 ec       	ldi	r26, 0xC8	; 200
    26e6:	b2 e4       	ldi	r27, 0x42	; 66
    26e8:	8d 8b       	std	Y+21, r24	; 0x15
    26ea:	9e 8b       	std	Y+22, r25	; 0x16
    26ec:	af 8b       	std	Y+23, r26	; 0x17
    26ee:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26f0:	6d 89       	ldd	r22, Y+21	; 0x15
    26f2:	7e 89       	ldd	r23, Y+22	; 0x16
    26f4:	8f 89       	ldd	r24, Y+23	; 0x17
    26f6:	98 8d       	ldd	r25, Y+24	; 0x18
    26f8:	2b ea       	ldi	r18, 0xAB	; 171
    26fa:	3a ea       	ldi	r19, 0xAA	; 170
    26fc:	4a e2       	ldi	r20, 0x2A	; 42
    26fe:	50 e4       	ldi	r21, 0x40	; 64
    2700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	89 8b       	std	Y+17, r24	; 0x11
    270a:	9a 8b       	std	Y+18, r25	; 0x12
    270c:	ab 8b       	std	Y+19, r26	; 0x13
    270e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2710:	69 89       	ldd	r22, Y+17	; 0x11
    2712:	7a 89       	ldd	r23, Y+18	; 0x12
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	1c f4       	brge	.+6      	; 0x272e <HLCD_voidSendChar+0x720>
		__ticks = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	88 8b       	std	Y+16, r24	; 0x10
    272c:	91 c0       	rjmp	.+290    	; 0x2850 <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    272e:	69 89       	ldd	r22, Y+17	; 0x11
    2730:	7a 89       	ldd	r23, Y+18	; 0x12
    2732:	8b 89       	ldd	r24, Y+19	; 0x13
    2734:	9c 89       	ldd	r25, Y+20	; 0x14
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	4f e7       	ldi	r20, 0x7F	; 127
    273c:	53 e4       	ldi	r21, 0x43	; 67
    273e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2742:	18 16       	cp	r1, r24
    2744:	0c f0       	brlt	.+2      	; 0x2748 <HLCD_voidSendChar+0x73a>
    2746:	7b c0       	rjmp	.+246    	; 0x283e <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	4a e7       	ldi	r20, 0x7A	; 122
    2756:	54 e4       	ldi	r21, 0x44	; 68
    2758:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	8c 87       	std	Y+12, r24	; 0x0c
    2762:	9d 87       	std	Y+13, r25	; 0x0d
    2764:	ae 87       	std	Y+14, r26	; 0x0e
    2766:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6c 85       	ldd	r22, Y+12	; 0x0c
    276a:	7d 85       	ldd	r23, Y+13	; 0x0d
    276c:	8e 85       	ldd	r24, Y+14	; 0x0e
    276e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	88 87       	std	Y+8, r24	; 0x08
    2782:	99 87       	std	Y+9, r25	; 0x09
    2784:	aa 87       	std	Y+10, r26	; 0x0a
    2786:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2788:	68 85       	ldd	r22, Y+8	; 0x08
    278a:	79 85       	ldd	r23, Y+9	; 0x09
    278c:	8a 85       	ldd	r24, Y+10	; 0x0a
    278e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9f 83       	std	Y+7, r25	; 0x07
    27a6:	8e 83       	std	Y+6, r24	; 0x06
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    27aa:	68 85       	ldd	r22, Y+8	; 0x08
    27ac:	79 85       	ldd	r23, Y+9	; 0x09
    27ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9f 83       	std	Y+7, r25	; 0x07
    27e8:	8e 83       	std	Y+6, r24	; 0x06
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <HLCD_voidSendChar+0x7fc>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9d 83       	std	Y+5, r25	; 0x05
    27f2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27f4:	8c 81       	ldd	r24, Y+4	; 0x04
    27f6:	9d 81       	ldd	r25, Y+5	; 0x05
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <HLCD_voidSendChar+0x7ea>
    27fc:	9d 83       	std	Y+5, r25	; 0x05
    27fe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8e 81       	ldd	r24, Y+6	; 0x06
    2802:	9f 81       	ldd	r25, Y+7	; 0x07
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9f 83       	std	Y+7, r25	; 0x07
    2808:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8e 81       	ldd	r24, Y+6	; 0x06
    280c:	9f 81       	ldd	r25, Y+7	; 0x07
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <HLCD_voidSendChar+0x7de>
    2812:	24 c0       	rjmp	.+72     	; 0x285c <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	68 85       	ldd	r22, Y+8	; 0x08
    2816:	79 85       	ldd	r23, Y+9	; 0x09
    2818:	8a 85       	ldd	r24, Y+10	; 0x0a
    281a:	9b 85       	ldd	r25, Y+11	; 0x0b
    281c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9f 83       	std	Y+7, r25	; 0x07
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	8e 81       	ldd	r24, Y+6	; 0x06
    282a:	9f 81       	ldd	r25, Y+7	; 0x07
    282c:	9b 83       	std	Y+3, r25	; 0x03
    282e:	8a 83       	std	Y+2, r24	; 0x02
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	9b 81       	ldd	r25, Y+3	; 0x03
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <HLCD_voidSendChar+0x826>
    2838:	9b 83       	std	Y+3, r25	; 0x03
    283a:	8a 83       	std	Y+2, r24	; 0x02
    283c:	0f c0       	rjmp	.+30     	; 0x285c <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    283e:	69 89       	ldd	r22, Y+17	; 0x11
    2840:	7a 89       	ldd	r23, Y+18	; 0x12
    2842:	8b 89       	ldd	r24, Y+19	; 0x13
    2844:	9c 89       	ldd	r25, Y+20	; 0x14
    2846:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	88 8b       	std	Y+16, r24	; 0x10
    2850:	88 89       	ldd	r24, Y+16	; 0x10
    2852:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	8a 95       	dec	r24
    2858:	f1 f7       	brne	.-4      	; 0x2856 <HLCD_voidSendChar+0x848>
    285a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    285c:	cf 59       	subi	r28, 0x9F	; 159
    285e:	df 4f       	sbci	r29, 0xFF	; 255
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

00002874 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	29 97       	sbiw	r28, 0x09	; 9
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	99 87       	std	Y+9, r25	; 0x09
    288a:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    288c:	88 85       	ldd	r24, Y+8	; 0x08
    288e:	99 85       	ldd	r25, Y+9	; 0x09
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	21 f4       	brne	.+8      	; 0x289c <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    2894:	80 e3       	ldi	r24, 0x30	; 48
    2896:	0e 94 07 10 	call	0x200e	; 0x200e <HLCD_voidSendChar>
    289a:	3d c0       	rjmp	.+122    	; 0x2916 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	20 c0       	rjmp	.+64     	; 0x28e0 <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	e8 2f       	mov	r30, r24
    28a4:	ff 27       	eor	r31, r31
    28a6:	e7 fd       	sbrc	r30, 7
    28a8:	f0 95       	com	r31
    28aa:	88 85       	ldd	r24, Y+8	; 0x08
    28ac:	99 85       	ldd	r25, Y+9	; 0x09
    28ae:	2a e0       	ldi	r18, 0x0A	; 10
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	b9 01       	movw	r22, r18
    28b4:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__udivmodhi4>
    28b8:	28 2f       	mov	r18, r24
    28ba:	20 5d       	subi	r18, 0xD0	; 208
    28bc:	ce 01       	movw	r24, r28
    28be:	02 96       	adiw	r24, 0x02	; 2
    28c0:	e8 0f       	add	r30, r24
    28c2:	f9 1f       	adc	r31, r25
    28c4:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    28c6:	88 85       	ldd	r24, Y+8	; 0x08
    28c8:	99 85       	ldd	r25, Y+9	; 0x09
    28ca:	2a e0       	ldi	r18, 0x0A	; 10
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	b9 01       	movw	r22, r18
    28d0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__udivmodhi4>
    28d4:	cb 01       	movw	r24, r22
    28d6:	99 87       	std	Y+9, r25	; 0x09
    28d8:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	8f 5f       	subi	r24, 0xFF	; 255
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	88 85       	ldd	r24, Y+8	; 0x08
    28e2:	99 85       	ldd	r25, Y+9	; 0x09
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	e1 f6       	brne	.-72     	; 0x28a0 <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	81 50       	subi	r24, 0x01	; 1
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	10 c0       	rjmp	.+32     	; 0x2910 <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	33 27       	eor	r19, r19
    28f6:	27 fd       	sbrc	r18, 7
    28f8:	30 95       	com	r19
    28fa:	ce 01       	movw	r24, r28
    28fc:	02 96       	adiw	r24, 0x02	; 2
    28fe:	fc 01       	movw	r30, r24
    2900:	e2 0f       	add	r30, r18
    2902:	f3 1f       	adc	r31, r19
    2904:	80 81       	ld	r24, Z
    2906:	0e 94 07 10 	call	0x200e	; 0x200e <HLCD_voidSendChar>
			L_s8Iterator--;
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	81 50       	subi	r24, 0x01	; 1
    290e:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	8f 3f       	cpi	r24, 0xFF	; 255
    2914:	69 f7       	brne	.-38     	; 0x28f0 <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    2916:	29 96       	adiw	r28, 0x09	; 9
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <HLCD_voidSendString+0x6>
    292e:	0f 92       	push	r0
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	9b 83       	std	Y+3, r25	; 0x03
    2936:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	9b 81       	ldd	r25, Y+3	; 0x03
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	d1 f0       	breq	.+52     	; 0x2974 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    2940:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	8a 81       	ldd	r24, Y+2	; 0x02
    294a:	9b 81       	ldd	r25, Y+3	; 0x03
    294c:	fc 01       	movw	r30, r24
    294e:	e2 0f       	add	r30, r18
    2950:	f3 1f       	adc	r31, r19
    2952:	80 81       	ld	r24, Z
    2954:	0e 94 07 10 	call	0x200e	; 0x200e <HLCD_voidSendChar>
			L_u8Iterator++;
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	fc 01       	movw	r30, r24
    296a:	e2 0f       	add	r30, r18
    296c:	f3 1f       	adc	r31, r19
    296e:	80 81       	ld	r24, Z
    2970:	88 23       	and	r24, r24
    2972:	39 f7       	brne	.-50     	; 0x2942 <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	61 97       	sbiw	r28, 0x11	; 17
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	88 8b       	std	Y+16, r24	; 0x10
    2996:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    2998:	88 89       	ldd	r24, Y+16	; 0x10
    299a:	98 2f       	mov	r25, r24
    299c:	92 95       	swap	r25
    299e:	99 0f       	add	r25, r25
    29a0:	99 0f       	add	r25, r25
    29a2:	90 7c       	andi	r25, 0xC0	; 192
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	89 2b       	or	r24, r25
    29a8:	80 68       	ori	r24, 0x80	; 128
    29aa:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    29ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ae:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	8b 87       	std	Y+11, r24	; 0x0b
    29bc:	9c 87       	std	Y+12, r25	; 0x0c
    29be:	ad 87       	std	Y+13, r26	; 0x0d
    29c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8f 83       	std	Y+7, r24	; 0x07
    29dc:	98 87       	std	Y+8, r25	; 0x08
    29de:	a9 87       	std	Y+9, r26	; 0x09
    29e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <HLCD_voidSetCur+0xe4>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <HLCD_voidSetCur+0xd2>
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <HLCD_voidSetCur+0xc6>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <HLCD_voidSetCur+0x10e>
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2a96:	61 96       	adiw	r28, 0x11	; 17
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <HLCD_voidSendCmd>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	a0 e8       	ldi	r26, 0x80	; 128
    2ac8:	bf e3       	ldi	r27, 0x3F	; 63
    2aca:	8b 87       	std	Y+11, r24	; 0x0b
    2acc:	9c 87       	std	Y+12, r25	; 0x0c
    2ace:	ad 87       	std	Y+13, r26	; 0x0d
    2ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a ef       	ldi	r20, 0xFA	; 250
    2ae0:	54 e4       	ldi	r21, 0x44	; 68
    2ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	8f 83       	std	Y+7, r24	; 0x07
    2aec:	98 87       	std	Y+8, r25	; 0x08
    2aee:	a9 87       	std	Y+9, r26	; 0x09
    2af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e8       	ldi	r20, 0x80	; 128
    2b00:	5f e3       	ldi	r21, 0x3F	; 63
    2b02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <HLCD_voidClear+0x6c>
		__ticks = 1;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
    2b10:	8d 83       	std	Y+5, r24	; 0x05
    2b12:	3f c0       	rjmp	.+126    	; 0x2b92 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	3f ef       	ldi	r19, 0xFF	; 255
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <HLCD_voidClear+0xcc>
    2b56:	88 ec       	ldi	r24, 0xC8	; 200
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9c 83       	std	Y+4, r25	; 0x04
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <HLCD_voidClear+0xba>
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f7       	brne	.-38     	; 0x2b56 <HLCD_voidClear+0xae>
    2b7c:	14 c0       	rjmp	.+40     	; 0x2ba6 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b80:	78 85       	ldd	r23, Y+8	; 0x08
    2b82:	89 85       	ldd	r24, Y+9	; 0x09
    2b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9e 83       	std	Y+6, r25	; 0x06
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	9a 83       	std	Y+2, r25	; 0x02
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <HLCD_voidClear+0xf6>
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ba6:	2e 96       	adiw	r28, 0x0e	; 14
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <MADC_stderrInit>:
/* SWC Includes */
#include "MADC_private.h"
#include "MADC_interface.h"

STD_error_t MADC_stderrInit(u8 ARG_u8VoltageReference, u8 ARG_u8Prescaler, u8 ARG_u8ADCAdjust)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <MADC_stderrInit+0x6>
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <MADC_stderrInit+0x8>
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
    2bc6:	6b 83       	std	Y+3, r22	; 0x03
    2bc8:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError =E_OK;
    2bca:	19 82       	std	Y+1, r1	; 0x01
	if(  (ARG_u8VoltageReference<=1 || 3==ARG_u8VoltageReference)   &&  ARG_u8Prescaler<=7 &&ARG_u8ADCAdjust<=MADC_ADJUST_LEFT )
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	18 f0       	brcs	.+6      	; 0x2bd8 <MADC_stderrInit+0x20>
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	83 30       	cpi	r24, 0x03	; 3
    2bd6:	61 f5       	brne	.+88     	; 0x2c30 <MADC_stderrInit+0x78>
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	88 30       	cpi	r24, 0x08	; 8
    2bdc:	48 f5       	brcc	.+82     	; 0x2c30 <MADC_stderrInit+0x78>
    2bde:	8c 81       	ldd	r24, Y+4	; 0x04
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	30 f5       	brcc	.+76     	; 0x2c30 <MADC_stderrInit+0x78>
	{
		/* mask Then OR with the needed val */
		ADMUX = ( ADMUX & 0x1F ) | (ARG_u8VoltageReference<<REFS0) | (ARG_u8ADCAdjust<<ADLAR) ; /* set voltage Ref, ADLAR=1 */
    2be4:	a7 e2       	ldi	r26, 0x27	; 39
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e7 e2       	ldi	r30, 0x27	; 39
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	28 2f       	mov	r18, r24
    2bf0:	2f 71       	andi	r18, 0x1F	; 31
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	00 24       	eor	r0, r0
    2bfa:	96 95       	lsr	r25
    2bfc:	87 95       	ror	r24
    2bfe:	07 94       	ror	r0
    2c00:	96 95       	lsr	r25
    2c02:	87 95       	ror	r24
    2c04:	07 94       	ror	r0
    2c06:	98 2f       	mov	r25, r24
    2c08:	80 2d       	mov	r24, r0
    2c0a:	28 2b       	or	r18, r24
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	82 95       	swap	r24
    2c18:	92 95       	swap	r25
    2c1a:	90 7f       	andi	r25, 0xF0	; 240
    2c1c:	98 27       	eor	r25, r24
    2c1e:	80 7f       	andi	r24, 0xF0	; 240
    2c20:	98 27       	eor	r25, r24
    2c22:	82 2b       	or	r24, r18
    2c24:	8c 93       	st	X, r24
		ADCSRA = (ADLAR & 0xF8) | (ARG_u8Prescaler<<ADPS0) ; /* note ADPS0 is 0 not important, set prescaler */
    2c26:	e6 e2       	ldi	r30, 0x26	; 38
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	80 83       	st	Z, r24
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <MADC_stderrInit+0x7c>
	}
	else {
		L_stderrError =E_NOK;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <MADC_stderrReadADC>:

STD_error_t MADC_stderrReadADC(u16* ARG_u16pADCReading, u8 ARG_u8Channel)
{
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <MADC_stderrReadADC+0x6>
    2c4a:	00 d0       	rcall	.+0      	; 0x2c4c <MADC_stderrReadADC+0x8>
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	9b 83       	std	Y+3, r25	; 0x03
    2c52:	8a 83       	std	Y+2, r24	; 0x02
    2c54:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2c56:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER != ARG_u16pADCReading)
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	b9 f0       	breq	.+46     	; 0x2c8e <MADC_stderrReadADC+0x4a>
	{	
		MADC_voidEnableADC(); /* enable ADC to convert */
    2c60:	0e 94 75 16 	call	0x2cea	; 0x2cea <MADC_voidEnableADC>
		L_stderrError = MADC_stderrStartConversion(ARG_u8Channel);
    2c64:	8c 81       	ldd	r24, Y+4	; 0x04
    2c66:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <MADC_stderrStartConversion>
    2c6a:	89 83       	std	Y+1, r24	; 0x01
		
		if(E_OK==L_stderrError)
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	88 23       	and	r24, r24
    2c70:	81 f4       	brne	.+32     	; 0x2c92 <MADC_stderrReadADC+0x4e>
		{
			MADC_voidPollFlag(); /* polling wait flag ADIF be 1 */
    2c72:	0e 94 91 16 	call	0x2d22	; 0x2d22 <MADC_voidPollFlag>
			*ARG_u16pADCReading	= ADCH ; /* in this case we read the 8-MSB that mean we use 8 bit Resolution */
    2c76:	e5 e2       	ldi	r30, 0x25	; 37
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	ea 81       	ldd	r30, Y+2	; 0x02
    2c82:	fb 81       	ldd	r31, Y+3	; 0x03
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
			MADC_voidClearFlag(); /* CLear flag by SW */	
    2c88:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <MADC_voidClearFlag>
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <MADC_stderrReadADC+0x4e>
		else{
			/*do nothing*/
		}
	}
	else{
		L_stderrError = E_NULL_POINTER;
    2c8e:	82 e0       	ldi	r24, 0x02	; 2
    2c90:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrError;
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
}	
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <MADC_stderrStartConversion>:
	
STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{	
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <MADC_stderrStartConversion+0x6>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError = E_OK;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    
    if (ARG_u8Channel <= 7) {
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	88 30       	cpi	r24, 0x08	; 8
    2cb4:	90 f4       	brcc	.+36     	; 0x2cda <MADC_stderrStartConversion+0x38>
        /* Select the channel using the ADMUX register */
        ADMUX = (ADMUX & 0xE0) | (ARG_u8Channel<<MUX0); /* note MUX0 is 0 not important*/
    2cb6:	a7 e2       	ldi	r26, 0x27	; 39
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e7 e2       	ldi	r30, 0x27	; 39
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	90 7e       	andi	r25, 0xE0	; 224
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	89 2b       	or	r24, r25
    2cc8:	8c 93       	st	X, r24
		/* Start the conversion by setting the ADSC bit */
		SET_BIT(ADCSRA,ADSC);	//ADCSRA |= (1 << ADSC);
    2cca:	a6 e2       	ldi	r26, 0x26	; 38
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e2       	ldi	r30, 0x26	; 38
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 64       	ori	r24, 0x40	; 64
    2cd6:	8c 93       	st	X, r24
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <MADC_stderrStartConversion+0x3c>
    } else {
        L_stderrError = E_NOK;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    }
    return L_stderrError;
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <MADC_voidEnableADC>:

void MADC_voidEnableADC(void)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    2cf2:	a6 e2       	ldi	r26, 0x26	; 38
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e6 e2       	ldi	r30, 0x26	; 38
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 68       	ori	r24, 0x80	; 128
    2cfe:	8c 93       	st	X, r24
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <MADC_voidDisableADC>:

void MADC_voidDisableADC(void)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
    2d0e:	a6 e2       	ldi	r26, 0x26	; 38
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e6 e2       	ldi	r30, 0x26	; 38
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	8f 77       	andi	r24, 0x7F	; 127
    2d1a:	8c 93       	st	X, r24
}
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <MADC_voidPollFlag>:

void MADC_voidPollFlag(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF)); /* POLL , stuck while flag is low */
    2d2a:	e6 e2       	ldi	r30, 0x26	; 38
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	82 95       	swap	r24
    2d32:	8f 70       	andi	r24, 0x0F	; 15
    2d34:	88 2f       	mov	r24, r24
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	81 70       	andi	r24, 0x01	; 1
    2d3a:	90 70       	andi	r25, 0x00	; 0
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	a9 f3       	breq	.-22     	; 0x2d2a <MADC_voidPollFlag+0x8>
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <MADC_voidClearFlag>:

void MADC_voidClearFlag(void)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF); /* Clear flag by set it */
    2d4e:	a6 e2       	ldi	r26, 0x26	; 38
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e6 e2       	ldi	r30, 0x26	; 38
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	80 61       	ori	r24, 0x10	; 16
    2d5a:	8c 93       	st	X, r24
}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <MDIO_stderrSetPortDirection+0x6>
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <MDIO_stderrSetPortDirection+0x8>
    2d6a:	0f 92       	push	r0
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	8a 83       	std	Y+2, r24	; 0x02
    2d72:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2d74:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3d 83       	std	Y+5, r19	; 0x05
    2d7e:	2c 83       	std	Y+4, r18	; 0x04
    2d80:	8c 81       	ldd	r24, Y+4	; 0x04
    2d82:	9d 81       	ldd	r25, Y+5	; 0x05
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	91 05       	cpc	r25, r1
    2d88:	d9 f0       	breq	.+54     	; 0x2dc0 <MDIO_stderrSetPortDirection+0x5e>
    2d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8e:	23 30       	cpi	r18, 0x03	; 3
    2d90:	31 05       	cpc	r19, r1
    2d92:	34 f4       	brge	.+12     	; 0x2da0 <MDIO_stderrSetPortDirection+0x3e>
    2d94:	8c 81       	ldd	r24, Y+4	; 0x04
    2d96:	9d 81       	ldd	r25, Y+5	; 0x05
    2d98:	81 30       	cpi	r24, 0x01	; 1
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	61 f0       	breq	.+24     	; 0x2db6 <MDIO_stderrSetPortDirection+0x54>
    2d9e:	1f c0       	rjmp	.+62     	; 0x2dde <MDIO_stderrSetPortDirection+0x7c>
    2da0:	2c 81       	ldd	r18, Y+4	; 0x04
    2da2:	3d 81       	ldd	r19, Y+5	; 0x05
    2da4:	23 30       	cpi	r18, 0x03	; 3
    2da6:	31 05       	cpc	r19, r1
    2da8:	81 f0       	breq	.+32     	; 0x2dca <MDIO_stderrSetPortDirection+0x68>
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	9d 81       	ldd	r25, Y+5	; 0x05
    2dae:	84 30       	cpi	r24, 0x04	; 4
    2db0:	91 05       	cpc	r25, r1
    2db2:	81 f0       	breq	.+32     	; 0x2dd4 <MDIO_stderrSetPortDirection+0x72>
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2db6:	e9 e3       	ldi	r30, 0x39	; 57
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	81 83       	std	Z+1, r24	; 0x01
    2dbe:	11 c0       	rjmp	.+34     	; 0x2de2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2dc0:	e6 e3       	ldi	r30, 0x36	; 54
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	81 83       	std	Z+1, r24	; 0x01
    2dc8:	0c c0       	rjmp	.+24     	; 0x2de2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2dca:	e3 e3       	ldi	r30, 0x33	; 51
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	81 83       	std	Z+1, r24	; 0x01
    2dd2:	07 c0       	rjmp	.+14     	; 0x2de2 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2dd4:	e0 e3       	ldi	r30, 0x30	; 48
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	81 83       	std	Z+1, r24	; 0x01
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <MDIO_stderrSetPortValue+0x6>
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <MDIO_stderrSetPortValue+0x8>
    2dfc:	0f 92       	push	r0
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    2e02:	8a 83       	std	Y+2, r24	; 0x02
    2e04:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2e06:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2e08:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	3d 83       	std	Y+5, r19	; 0x05
    2e10:	2c 83       	std	Y+4, r18	; 0x04
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	9d 81       	ldd	r25, Y+5	; 0x05
    2e16:	82 30       	cpi	r24, 0x02	; 2
    2e18:	91 05       	cpc	r25, r1
    2e1a:	d9 f0       	breq	.+54     	; 0x2e52 <MDIO_stderrSetPortValue+0x5e>
    2e1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e20:	23 30       	cpi	r18, 0x03	; 3
    2e22:	31 05       	cpc	r19, r1
    2e24:	34 f4       	brge	.+12     	; 0x2e32 <MDIO_stderrSetPortValue+0x3e>
    2e26:	8c 81       	ldd	r24, Y+4	; 0x04
    2e28:	9d 81       	ldd	r25, Y+5	; 0x05
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	61 f0       	breq	.+24     	; 0x2e48 <MDIO_stderrSetPortValue+0x54>
    2e30:	1f c0       	rjmp	.+62     	; 0x2e70 <MDIO_stderrSetPortValue+0x7c>
    2e32:	2c 81       	ldd	r18, Y+4	; 0x04
    2e34:	3d 81       	ldd	r19, Y+5	; 0x05
    2e36:	23 30       	cpi	r18, 0x03	; 3
    2e38:	31 05       	cpc	r19, r1
    2e3a:	81 f0       	breq	.+32     	; 0x2e5c <MDIO_stderrSetPortValue+0x68>
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e40:	84 30       	cpi	r24, 0x04	; 4
    2e42:	91 05       	cpc	r25, r1
    2e44:	81 f0       	breq	.+32     	; 0x2e66 <MDIO_stderrSetPortValue+0x72>
    2e46:	14 c0       	rjmp	.+40     	; 0x2e70 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2e48:	e9 e3       	ldi	r30, 0x39	; 57
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	82 83       	std	Z+2, r24	; 0x02
    2e50:	11 c0       	rjmp	.+34     	; 0x2e74 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2e52:	e6 e3       	ldi	r30, 0x36	; 54
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	82 83       	std	Z+2, r24	; 0x02
    2e5a:	0c c0       	rjmp	.+24     	; 0x2e74 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2e5c:	e3 e3       	ldi	r30, 0x33	; 51
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	82 83       	std	Z+2, r24	; 0x02
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2e66:	e0 e3       	ldi	r30, 0x30	; 48
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	82 83       	std	Z+2, r24	; 0x02
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <MDIO_stderrGetPortValue+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <MDIO_stderrGetPortValue+0x8>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <MDIO_stderrGetPortValue+0xa>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	9b 83       	std	Y+3, r25	; 0x03
    2e96:	8a 83       	std	Y+2, r24	; 0x02
    2e98:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2e9a:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	3e 83       	std	Y+6, r19	; 0x06
    2ea4:	2d 83       	std	Y+5, r18	; 0x05
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	91 05       	cpc	r25, r1
    2eae:	e9 f0       	breq	.+58     	; 0x2eea <MDIO_stderrGetPortValue+0x64>
    2eb0:	2d 81       	ldd	r18, Y+5	; 0x05
    2eb2:	3e 81       	ldd	r19, Y+6	; 0x06
    2eb4:	23 30       	cpi	r18, 0x03	; 3
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	34 f4       	brge	.+12     	; 0x2ec6 <MDIO_stderrGetPortValue+0x40>
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	61 f0       	breq	.+24     	; 0x2edc <MDIO_stderrGetPortValue+0x56>
    2ec4:	27 c0       	rjmp	.+78     	; 0x2f14 <MDIO_stderrGetPortValue+0x8e>
    2ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    2eca:	23 30       	cpi	r18, 0x03	; 3
    2ecc:	31 05       	cpc	r19, r1
    2ece:	a1 f0       	breq	.+40     	; 0x2ef8 <MDIO_stderrGetPortValue+0x72>
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	84 30       	cpi	r24, 0x04	; 4
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	b1 f0       	breq	.+44     	; 0x2f06 <MDIO_stderrGetPortValue+0x80>
    2eda:	1c c0       	rjmp	.+56     	; 0x2f14 <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2edc:	e9 e3       	ldi	r30, 0x39	; 57
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee6:	80 83       	st	Z, r24
    2ee8:	17 c0       	rjmp	.+46     	; 0x2f18 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2eea:	e6 e3       	ldi	r30, 0x36	; 54
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ef2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ef4:	80 83       	st	Z, r24
    2ef6:	10 c0       	rjmp	.+32     	; 0x2f18 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2ef8:	e3 e3       	ldi	r30, 0x33	; 51
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	ea 81       	ldd	r30, Y+2	; 0x02
    2f00:	fb 81       	ldd	r31, Y+3	; 0x03
    2f02:	80 83       	st	Z, r24
    2f04:	09 c0       	rjmp	.+18     	; 0x2f18 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2f06:	e0 e3       	ldi	r30, 0x30	; 48
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f10:	80 83       	st	Z, r24
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f1a:	26 96       	adiw	r28, 0x06	; 6
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	2a 97       	sbiw	r28, 0x0a	; 10
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	8a 83       	std	Y+2, r24	; 0x02
    2f42:	6b 83       	std	Y+3, r22	; 0x03
    2f44:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2f46:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	88 30       	cpi	r24, 0x08	; 8
    2f4c:	08 f0       	brcs	.+2      	; 0x2f50 <MDIO_stderrSetPinDirection+0x24>
    2f4e:	d9 c1       	rjmp	.+946    	; 0x3302 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    2f50:	8c 81       	ldd	r24, Y+4	; 0x04
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <MDIO_stderrSetPinDirection+0x2c>
    2f56:	7c c0       	rjmp	.+248    	; 0x3050 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	3a 87       	std	Y+10, r19	; 0x0a
    2f60:	29 87       	std	Y+9, r18	; 0x09
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	82 30       	cpi	r24, 0x02	; 2
    2f68:	91 05       	cpc	r25, r1
    2f6a:	69 f1       	breq	.+90     	; 0x2fc6 <MDIO_stderrSetPinDirection+0x9a>
    2f6c:	29 85       	ldd	r18, Y+9	; 0x09
    2f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f70:	23 30       	cpi	r18, 0x03	; 3
    2f72:	31 05       	cpc	r19, r1
    2f74:	34 f4       	brge	.+12     	; 0x2f82 <MDIO_stderrSetPinDirection+0x56>
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	69 f0       	breq	.+26     	; 0x2f9a <MDIO_stderrSetPinDirection+0x6e>
    2f80:	64 c0       	rjmp	.+200    	; 0x304a <MDIO_stderrSetPinDirection+0x11e>
    2f82:	29 85       	ldd	r18, Y+9	; 0x09
    2f84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f86:	23 30       	cpi	r18, 0x03	; 3
    2f88:	31 05       	cpc	r19, r1
    2f8a:	99 f1       	breq	.+102    	; 0x2ff2 <MDIO_stderrSetPinDirection+0xc6>
    2f8c:	89 85       	ldd	r24, Y+9	; 0x09
    2f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f90:	84 30       	cpi	r24, 0x04	; 4
    2f92:	91 05       	cpc	r25, r1
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <MDIO_stderrSetPinDirection+0x6c>
    2f96:	43 c0       	rjmp	.+134    	; 0x301e <MDIO_stderrSetPinDirection+0xf2>
    2f98:	58 c0       	rjmp	.+176    	; 0x304a <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2f9a:	a9 e3       	ldi	r26, 0x39	; 57
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	e9 e3       	ldi	r30, 0x39	; 57
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	81 81       	ldd	r24, Z+1	; 0x01
    2fa4:	48 2f       	mov	r20, r24
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	02 2e       	mov	r0, r18
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <MDIO_stderrSetPinDirection+0x8c>
    2fb4:	88 0f       	add	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	0a 94       	dec	r0
    2fba:	e2 f7       	brpl	.-8      	; 0x2fb4 <MDIO_stderrSetPinDirection+0x88>
    2fbc:	84 2b       	or	r24, r20
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	8c 93       	st	X, r24
    2fc2:	11 97       	sbiw	r26, 0x01	; 1
    2fc4:	a0 c1       	rjmp	.+832    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2fc6:	a6 e3       	ldi	r26, 0x36	; 54
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e6 e3       	ldi	r30, 0x36	; 54
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	81 81       	ldd	r24, Z+1	; 0x01
    2fd0:	48 2f       	mov	r20, r24
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	28 2f       	mov	r18, r24
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	02 2e       	mov	r0, r18
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <MDIO_stderrSetPinDirection+0xb8>
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	0a 94       	dec	r0
    2fe6:	e2 f7       	brpl	.-8      	; 0x2fe0 <MDIO_stderrSetPinDirection+0xb4>
    2fe8:	84 2b       	or	r24, r20
    2fea:	11 96       	adiw	r26, 0x01	; 1
    2fec:	8c 93       	st	X, r24
    2fee:	11 97       	sbiw	r26, 0x01	; 1
    2ff0:	8a c1       	rjmp	.+788    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2ff2:	a3 e3       	ldi	r26, 0x33	; 51
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e3 e3       	ldi	r30, 0x33	; 51
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	81 81       	ldd	r24, Z+1	; 0x01
    2ffc:	48 2f       	mov	r20, r24
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	02 2e       	mov	r0, r18
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <MDIO_stderrSetPinDirection+0xe4>
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	0a 94       	dec	r0
    3012:	e2 f7       	brpl	.-8      	; 0x300c <MDIO_stderrSetPinDirection+0xe0>
    3014:	84 2b       	or	r24, r20
    3016:	11 96       	adiw	r26, 0x01	; 1
    3018:	8c 93       	st	X, r24
    301a:	11 97       	sbiw	r26, 0x01	; 1
    301c:	74 c1       	rjmp	.+744    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    301e:	a0 e3       	ldi	r26, 0x30	; 48
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e0 e3       	ldi	r30, 0x30	; 48
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	81 81       	ldd	r24, Z+1	; 0x01
    3028:	48 2f       	mov	r20, r24
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	28 2f       	mov	r18, r24
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	02 2e       	mov	r0, r18
    3036:	02 c0       	rjmp	.+4      	; 0x303c <MDIO_stderrSetPinDirection+0x110>
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	0a 94       	dec	r0
    303e:	e2 f7       	brpl	.-8      	; 0x3038 <MDIO_stderrSetPinDirection+0x10c>
    3040:	84 2b       	or	r24, r20
    3042:	11 96       	adiw	r26, 0x01	; 1
    3044:	8c 93       	st	X, r24
    3046:	11 97       	sbiw	r26, 0x01	; 1
    3048:	5e c1       	rjmp	.+700    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	89 83       	std	Y+1, r24	; 0x01
    304e:	5b c1       	rjmp	.+694    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
    3052:	82 30       	cpi	r24, 0x02	; 2
    3054:	09 f0       	breq	.+2      	; 0x3058 <MDIO_stderrSetPinDirection+0x12c>
    3056:	80 c0       	rjmp	.+256    	; 0x3158 <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    3058:	8a 81       	ldd	r24, Y+2	; 0x02
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	38 87       	std	Y+8, r19	; 0x08
    3060:	2f 83       	std	Y+7, r18	; 0x07
    3062:	8f 81       	ldd	r24, Y+7	; 0x07
    3064:	98 85       	ldd	r25, Y+8	; 0x08
    3066:	82 30       	cpi	r24, 0x02	; 2
    3068:	91 05       	cpc	r25, r1
    306a:	71 f1       	breq	.+92     	; 0x30c8 <MDIO_stderrSetPinDirection+0x19c>
    306c:	2f 81       	ldd	r18, Y+7	; 0x07
    306e:	38 85       	ldd	r19, Y+8	; 0x08
    3070:	23 30       	cpi	r18, 0x03	; 3
    3072:	31 05       	cpc	r19, r1
    3074:	34 f4       	brge	.+12     	; 0x3082 <MDIO_stderrSetPinDirection+0x156>
    3076:	8f 81       	ldd	r24, Y+7	; 0x07
    3078:	98 85       	ldd	r25, Y+8	; 0x08
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	91 05       	cpc	r25, r1
    307e:	69 f0       	breq	.+26     	; 0x309a <MDIO_stderrSetPinDirection+0x16e>
    3080:	68 c0       	rjmp	.+208    	; 0x3152 <MDIO_stderrSetPinDirection+0x226>
    3082:	2f 81       	ldd	r18, Y+7	; 0x07
    3084:	38 85       	ldd	r19, Y+8	; 0x08
    3086:	23 30       	cpi	r18, 0x03	; 3
    3088:	31 05       	cpc	r19, r1
    308a:	a9 f1       	breq	.+106    	; 0x30f6 <MDIO_stderrSetPinDirection+0x1ca>
    308c:	8f 81       	ldd	r24, Y+7	; 0x07
    308e:	98 85       	ldd	r25, Y+8	; 0x08
    3090:	84 30       	cpi	r24, 0x04	; 4
    3092:	91 05       	cpc	r25, r1
    3094:	09 f4       	brne	.+2      	; 0x3098 <MDIO_stderrSetPinDirection+0x16c>
    3096:	46 c0       	rjmp	.+140    	; 0x3124 <MDIO_stderrSetPinDirection+0x1f8>
    3098:	5c c0       	rjmp	.+184    	; 0x3152 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    309a:	a9 e3       	ldi	r26, 0x39	; 57
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e9 e3       	ldi	r30, 0x39	; 57
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	81 81       	ldd	r24, Z+1	; 0x01
    30a4:	48 2f       	mov	r20, r24
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	02 2e       	mov	r0, r18
    30b2:	02 c0       	rjmp	.+4      	; 0x30b8 <MDIO_stderrSetPinDirection+0x18c>
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	0a 94       	dec	r0
    30ba:	e2 f7       	brpl	.-8      	; 0x30b4 <MDIO_stderrSetPinDirection+0x188>
    30bc:	80 95       	com	r24
    30be:	84 23       	and	r24, r20
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	8c 93       	st	X, r24
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    30c6:	1f c1       	rjmp	.+574    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    30c8:	a6 e3       	ldi	r26, 0x36	; 54
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e6 e3       	ldi	r30, 0x36	; 54
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	81 81       	ldd	r24, Z+1	; 0x01
    30d2:	48 2f       	mov	r20, r24
    30d4:	8b 81       	ldd	r24, Y+3	; 0x03
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	02 2e       	mov	r0, r18
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <MDIO_stderrSetPinDirection+0x1ba>
    30e2:	88 0f       	add	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	0a 94       	dec	r0
    30e8:	e2 f7       	brpl	.-8      	; 0x30e2 <MDIO_stderrSetPinDirection+0x1b6>
    30ea:	80 95       	com	r24
    30ec:	84 23       	and	r24, r20
    30ee:	11 96       	adiw	r26, 0x01	; 1
    30f0:	8c 93       	st	X, r24
    30f2:	11 97       	sbiw	r26, 0x01	; 1
    30f4:	08 c1       	rjmp	.+528    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    30f6:	a3 e3       	ldi	r26, 0x33	; 51
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e3 e3       	ldi	r30, 0x33	; 51
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	81 81       	ldd	r24, Z+1	; 0x01
    3100:	48 2f       	mov	r20, r24
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	02 2e       	mov	r0, r18
    310e:	02 c0       	rjmp	.+4      	; 0x3114 <MDIO_stderrSetPinDirection+0x1e8>
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	0a 94       	dec	r0
    3116:	e2 f7       	brpl	.-8      	; 0x3110 <MDIO_stderrSetPinDirection+0x1e4>
    3118:	80 95       	com	r24
    311a:	84 23       	and	r24, r20
    311c:	11 96       	adiw	r26, 0x01	; 1
    311e:	8c 93       	st	X, r24
    3120:	11 97       	sbiw	r26, 0x01	; 1
    3122:	f1 c0       	rjmp	.+482    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    3124:	a0 e3       	ldi	r26, 0x30	; 48
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e0 e3       	ldi	r30, 0x30	; 48
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	81 81       	ldd	r24, Z+1	; 0x01
    312e:	48 2f       	mov	r20, r24
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	02 2e       	mov	r0, r18
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <MDIO_stderrSetPinDirection+0x216>
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	0a 94       	dec	r0
    3144:	e2 f7       	brpl	.-8      	; 0x313e <MDIO_stderrSetPinDirection+0x212>
    3146:	80 95       	com	r24
    3148:	84 23       	and	r24, r20
    314a:	11 96       	adiw	r26, 0x01	; 1
    314c:	8c 93       	st	X, r24
    314e:	11 97       	sbiw	r26, 0x01	; 1
    3150:	da c0       	rjmp	.+436    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	89 83       	std	Y+1, r24	; 0x01
    3156:	d7 c0       	rjmp	.+430    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	83 30       	cpi	r24, 0x03	; 3
    315c:	09 f0       	breq	.+2      	; 0x3160 <MDIO_stderrSetPinDirection+0x234>
    315e:	ce c0       	rjmp	.+412    	; 0x32fc <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	3e 83       	std	Y+6, r19	; 0x06
    3168:	2d 83       	std	Y+5, r18	; 0x05
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	82 30       	cpi	r24, 0x02	; 2
    3170:	91 05       	cpc	r25, r1
    3172:	09 f4       	brne	.+2      	; 0x3176 <MDIO_stderrSetPinDirection+0x24a>
    3174:	42 c0       	rjmp	.+132    	; 0x31fa <MDIO_stderrSetPinDirection+0x2ce>
    3176:	2d 81       	ldd	r18, Y+5	; 0x05
    3178:	3e 81       	ldd	r19, Y+6	; 0x06
    317a:	23 30       	cpi	r18, 0x03	; 3
    317c:	31 05       	cpc	r19, r1
    317e:	34 f4       	brge	.+12     	; 0x318c <MDIO_stderrSetPinDirection+0x260>
    3180:	8d 81       	ldd	r24, Y+5	; 0x05
    3182:	9e 81       	ldd	r25, Y+6	; 0x06
    3184:	81 30       	cpi	r24, 0x01	; 1
    3186:	91 05       	cpc	r25, r1
    3188:	71 f0       	breq	.+28     	; 0x31a6 <MDIO_stderrSetPinDirection+0x27a>
    318a:	b5 c0       	rjmp	.+362    	; 0x32f6 <MDIO_stderrSetPinDirection+0x3ca>
    318c:	2d 81       	ldd	r18, Y+5	; 0x05
    318e:	3e 81       	ldd	r19, Y+6	; 0x06
    3190:	23 30       	cpi	r18, 0x03	; 3
    3192:	31 05       	cpc	r19, r1
    3194:	09 f4       	brne	.+2      	; 0x3198 <MDIO_stderrSetPinDirection+0x26c>
    3196:	5b c0       	rjmp	.+182    	; 0x324e <MDIO_stderrSetPinDirection+0x322>
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	84 30       	cpi	r24, 0x04	; 4
    319e:	91 05       	cpc	r25, r1
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <MDIO_stderrSetPinDirection+0x278>
    31a2:	7f c0       	rjmp	.+254    	; 0x32a2 <MDIO_stderrSetPinDirection+0x376>
    31a4:	a8 c0       	rjmp	.+336    	; 0x32f6 <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    31a6:	a9 e3       	ldi	r26, 0x39	; 57
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e9 e3       	ldi	r30, 0x39	; 57
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	81 81       	ldd	r24, Z+1	; 0x01
    31b0:	48 2f       	mov	r20, r24
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	28 2f       	mov	r18, r24
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <MDIO_stderrSetPinDirection+0x296>
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	2a 95       	dec	r18
    31c4:	e2 f7       	brpl	.-8      	; 0x31be <MDIO_stderrSetPinDirection+0x292>
    31c6:	80 95       	com	r24
    31c8:	84 23       	and	r24, r20
    31ca:	11 96       	adiw	r26, 0x01	; 1
    31cc:	8c 93       	st	X, r24
    31ce:	a9 e3       	ldi	r26, 0x39	; 57
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	e9 e3       	ldi	r30, 0x39	; 57
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	82 81       	ldd	r24, Z+2	; 0x02
    31d8:	48 2f       	mov	r20, r24
    31da:	8b 81       	ldd	r24, Y+3	; 0x03
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	02 2e       	mov	r0, r18
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <MDIO_stderrSetPinDirection+0x2c0>
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	0a 94       	dec	r0
    31ee:	e2 f7       	brpl	.-8      	; 0x31e8 <MDIO_stderrSetPinDirection+0x2bc>
    31f0:	84 2b       	or	r24, r20
    31f2:	12 96       	adiw	r26, 0x02	; 2
    31f4:	8c 93       	st	X, r24
    31f6:	12 97       	sbiw	r26, 0x02	; 2
    31f8:	86 c0       	rjmp	.+268    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    31fa:	a6 e3       	ldi	r26, 0x36	; 54
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e6 e3       	ldi	r30, 0x36	; 54
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	81 81       	ldd	r24, Z+1	; 0x01
    3204:	48 2f       	mov	r20, r24
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <MDIO_stderrSetPinDirection+0x2ea>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	2a 95       	dec	r18
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <MDIO_stderrSetPinDirection+0x2e6>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	11 96       	adiw	r26, 0x01	; 1
    3220:	8c 93       	st	X, r24
    3222:	a6 e3       	ldi	r26, 0x36	; 54
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e6 e3       	ldi	r30, 0x36	; 54
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	48 2f       	mov	r20, r24
    322e:	8b 81       	ldd	r24, Y+3	; 0x03
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	02 2e       	mov	r0, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <MDIO_stderrSetPinDirection+0x314>
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	0a 94       	dec	r0
    3242:	e2 f7       	brpl	.-8      	; 0x323c <MDIO_stderrSetPinDirection+0x310>
    3244:	84 2b       	or	r24, r20
    3246:	12 96       	adiw	r26, 0x02	; 2
    3248:	8c 93       	st	X, r24
    324a:	12 97       	sbiw	r26, 0x02	; 2
    324c:	5c c0       	rjmp	.+184    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    324e:	a3 e3       	ldi	r26, 0x33	; 51
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e3 e3       	ldi	r30, 0x33	; 51
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	81 81       	ldd	r24, Z+1	; 0x01
    3258:	48 2f       	mov	r20, r24
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	02 c0       	rjmp	.+4      	; 0x326a <MDIO_stderrSetPinDirection+0x33e>
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	2a 95       	dec	r18
    326c:	e2 f7       	brpl	.-8      	; 0x3266 <MDIO_stderrSetPinDirection+0x33a>
    326e:	80 95       	com	r24
    3270:	84 23       	and	r24, r20
    3272:	11 96       	adiw	r26, 0x01	; 1
    3274:	8c 93       	st	X, r24
    3276:	a3 e3       	ldi	r26, 0x33	; 51
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e3 e3       	ldi	r30, 0x33	; 51
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	48 2f       	mov	r20, r24
    3282:	8b 81       	ldd	r24, Y+3	; 0x03
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	02 2e       	mov	r0, r18
    328e:	02 c0       	rjmp	.+4      	; 0x3294 <MDIO_stderrSetPinDirection+0x368>
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	0a 94       	dec	r0
    3296:	e2 f7       	brpl	.-8      	; 0x3290 <MDIO_stderrSetPinDirection+0x364>
    3298:	84 2b       	or	r24, r20
    329a:	12 96       	adiw	r26, 0x02	; 2
    329c:	8c 93       	st	X, r24
    329e:	12 97       	sbiw	r26, 0x02	; 2
    32a0:	32 c0       	rjmp	.+100    	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    32a2:	a0 e3       	ldi	r26, 0x30	; 48
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e0 e3       	ldi	r30, 0x30	; 48
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	81 81       	ldd	r24, Z+1	; 0x01
    32ac:	48 2f       	mov	r20, r24
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <MDIO_stderrSetPinDirection+0x392>
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	2a 95       	dec	r18
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <MDIO_stderrSetPinDirection+0x38e>
    32c2:	80 95       	com	r24
    32c4:	84 23       	and	r24, r20
    32c6:	11 96       	adiw	r26, 0x01	; 1
    32c8:	8c 93       	st	X, r24
    32ca:	a0 e3       	ldi	r26, 0x30	; 48
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e0 e3       	ldi	r30, 0x30	; 48
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	82 81       	ldd	r24, Z+2	; 0x02
    32d4:	48 2f       	mov	r20, r24
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 2e       	mov	r0, r18
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <MDIO_stderrSetPinDirection+0x3bc>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	0a 94       	dec	r0
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <MDIO_stderrSetPinDirection+0x3b8>
    32ec:	84 2b       	or	r24, r20
    32ee:	12 96       	adiw	r26, 0x02	; 2
    32f0:	8c 93       	st	X, r24
    32f2:	12 97       	sbiw	r26, 0x02	; 2
    32f4:	08 c0       	rjmp	.+16     	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	05 c0       	rjmp	.+10     	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3306:	89 81       	ldd	r24, Y+1	; 0x01
}
    3308:	2a 96       	adiw	r28, 0x0a	; 10
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	28 97       	sbiw	r28, 0x08	; 8
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	8a 83       	std	Y+2, r24	; 0x02
    3330:	6b 83       	std	Y+3, r22	; 0x03
    3332:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    3334:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	88 30       	cpi	r24, 0x08	; 8
    333a:	08 f0       	brcs	.+2      	; 0x333e <MDIO_stderrSetPinValue+0x24>
    333c:	07 c1       	rjmp	.+526    	; 0x354c <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    333e:	8c 81       	ldd	r24, Y+4	; 0x04
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	09 f0       	breq	.+2      	; 0x3346 <MDIO_stderrSetPinValue+0x2c>
    3344:	7c c0       	rjmp	.+248    	; 0x343e <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	38 87       	std	Y+8, r19	; 0x08
    334e:	2f 83       	std	Y+7, r18	; 0x07
    3350:	8f 81       	ldd	r24, Y+7	; 0x07
    3352:	98 85       	ldd	r25, Y+8	; 0x08
    3354:	82 30       	cpi	r24, 0x02	; 2
    3356:	91 05       	cpc	r25, r1
    3358:	69 f1       	breq	.+90     	; 0x33b4 <MDIO_stderrSetPinValue+0x9a>
    335a:	2f 81       	ldd	r18, Y+7	; 0x07
    335c:	38 85       	ldd	r19, Y+8	; 0x08
    335e:	23 30       	cpi	r18, 0x03	; 3
    3360:	31 05       	cpc	r19, r1
    3362:	34 f4       	brge	.+12     	; 0x3370 <MDIO_stderrSetPinValue+0x56>
    3364:	8f 81       	ldd	r24, Y+7	; 0x07
    3366:	98 85       	ldd	r25, Y+8	; 0x08
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	91 05       	cpc	r25, r1
    336c:	69 f0       	breq	.+26     	; 0x3388 <MDIO_stderrSetPinValue+0x6e>
    336e:	64 c0       	rjmp	.+200    	; 0x3438 <MDIO_stderrSetPinValue+0x11e>
    3370:	2f 81       	ldd	r18, Y+7	; 0x07
    3372:	38 85       	ldd	r19, Y+8	; 0x08
    3374:	23 30       	cpi	r18, 0x03	; 3
    3376:	31 05       	cpc	r19, r1
    3378:	99 f1       	breq	.+102    	; 0x33e0 <MDIO_stderrSetPinValue+0xc6>
    337a:	8f 81       	ldd	r24, Y+7	; 0x07
    337c:	98 85       	ldd	r25, Y+8	; 0x08
    337e:	84 30       	cpi	r24, 0x04	; 4
    3380:	91 05       	cpc	r25, r1
    3382:	09 f4       	brne	.+2      	; 0x3386 <MDIO_stderrSetPinValue+0x6c>
    3384:	43 c0       	rjmp	.+134    	; 0x340c <MDIO_stderrSetPinValue+0xf2>
    3386:	58 c0       	rjmp	.+176    	; 0x3438 <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3388:	a9 e3       	ldi	r26, 0x39	; 57
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	e9 e3       	ldi	r30, 0x39	; 57
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	82 81       	ldd	r24, Z+2	; 0x02
    3392:	48 2f       	mov	r20, r24
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	02 2e       	mov	r0, r18
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <MDIO_stderrSetPinValue+0x8c>
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	0a 94       	dec	r0
    33a8:	e2 f7       	brpl	.-8      	; 0x33a2 <MDIO_stderrSetPinValue+0x88>
    33aa:	84 2b       	or	r24, r20
    33ac:	12 96       	adiw	r26, 0x02	; 2
    33ae:	8c 93       	st	X, r24
    33b0:	12 97       	sbiw	r26, 0x02	; 2
    33b2:	ce c0       	rjmp	.+412    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    33b4:	a6 e3       	ldi	r26, 0x36	; 54
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e6 e3       	ldi	r30, 0x36	; 54
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	82 81       	ldd	r24, Z+2	; 0x02
    33be:	48 2f       	mov	r20, r24
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	02 2e       	mov	r0, r18
    33cc:	02 c0       	rjmp	.+4      	; 0x33d2 <MDIO_stderrSetPinValue+0xb8>
    33ce:	88 0f       	add	r24, r24
    33d0:	99 1f       	adc	r25, r25
    33d2:	0a 94       	dec	r0
    33d4:	e2 f7       	brpl	.-8      	; 0x33ce <MDIO_stderrSetPinValue+0xb4>
    33d6:	84 2b       	or	r24, r20
    33d8:	12 96       	adiw	r26, 0x02	; 2
    33da:	8c 93       	st	X, r24
    33dc:	12 97       	sbiw	r26, 0x02	; 2
    33de:	b8 c0       	rjmp	.+368    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    33e0:	a3 e3       	ldi	r26, 0x33	; 51
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	e3 e3       	ldi	r30, 0x33	; 51
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	48 2f       	mov	r20, r24
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	02 2e       	mov	r0, r18
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <MDIO_stderrSetPinValue+0xe4>
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	0a 94       	dec	r0
    3400:	e2 f7       	brpl	.-8      	; 0x33fa <MDIO_stderrSetPinValue+0xe0>
    3402:	84 2b       	or	r24, r20
    3404:	12 96       	adiw	r26, 0x02	; 2
    3406:	8c 93       	st	X, r24
    3408:	12 97       	sbiw	r26, 0x02	; 2
    340a:	a2 c0       	rjmp	.+324    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    340c:	a0 e3       	ldi	r26, 0x30	; 48
    340e:	b0 e0       	ldi	r27, 0x00	; 0
    3410:	e0 e3       	ldi	r30, 0x30	; 48
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	48 2f       	mov	r20, r24
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	02 2e       	mov	r0, r18
    3424:	02 c0       	rjmp	.+4      	; 0x342a <MDIO_stderrSetPinValue+0x110>
    3426:	88 0f       	add	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	0a 94       	dec	r0
    342c:	e2 f7       	brpl	.-8      	; 0x3426 <MDIO_stderrSetPinValue+0x10c>
    342e:	84 2b       	or	r24, r20
    3430:	12 96       	adiw	r26, 0x02	; 2
    3432:	8c 93       	st	X, r24
    3434:	12 97       	sbiw	r26, 0x02	; 2
    3436:	8c c0       	rjmp	.+280    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	89 83       	std	Y+1, r24	; 0x01
    343c:	89 c0       	rjmp	.+274    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    343e:	8c 81       	ldd	r24, Y+4	; 0x04
    3440:	81 30       	cpi	r24, 0x01	; 1
    3442:	09 f0       	breq	.+2      	; 0x3446 <MDIO_stderrSetPinValue+0x12c>
    3444:	80 c0       	rjmp	.+256    	; 0x3546 <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	3e 83       	std	Y+6, r19	; 0x06
    344e:	2d 83       	std	Y+5, r18	; 0x05
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	9e 81       	ldd	r25, Y+6	; 0x06
    3454:	82 30       	cpi	r24, 0x02	; 2
    3456:	91 05       	cpc	r25, r1
    3458:	71 f1       	breq	.+92     	; 0x34b6 <MDIO_stderrSetPinValue+0x19c>
    345a:	2d 81       	ldd	r18, Y+5	; 0x05
    345c:	3e 81       	ldd	r19, Y+6	; 0x06
    345e:	23 30       	cpi	r18, 0x03	; 3
    3460:	31 05       	cpc	r19, r1
    3462:	34 f4       	brge	.+12     	; 0x3470 <MDIO_stderrSetPinValue+0x156>
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	81 30       	cpi	r24, 0x01	; 1
    346a:	91 05       	cpc	r25, r1
    346c:	69 f0       	breq	.+26     	; 0x3488 <MDIO_stderrSetPinValue+0x16e>
    346e:	68 c0       	rjmp	.+208    	; 0x3540 <MDIO_stderrSetPinValue+0x226>
    3470:	2d 81       	ldd	r18, Y+5	; 0x05
    3472:	3e 81       	ldd	r19, Y+6	; 0x06
    3474:	23 30       	cpi	r18, 0x03	; 3
    3476:	31 05       	cpc	r19, r1
    3478:	a9 f1       	breq	.+106    	; 0x34e4 <MDIO_stderrSetPinValue+0x1ca>
    347a:	8d 81       	ldd	r24, Y+5	; 0x05
    347c:	9e 81       	ldd	r25, Y+6	; 0x06
    347e:	84 30       	cpi	r24, 0x04	; 4
    3480:	91 05       	cpc	r25, r1
    3482:	09 f4       	brne	.+2      	; 0x3486 <MDIO_stderrSetPinValue+0x16c>
    3484:	46 c0       	rjmp	.+140    	; 0x3512 <MDIO_stderrSetPinValue+0x1f8>
    3486:	5c c0       	rjmp	.+184    	; 0x3540 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    3488:	a9 e3       	ldi	r26, 0x39	; 57
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e9 e3       	ldi	r30, 0x39	; 57
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	82 81       	ldd	r24, Z+2	; 0x02
    3492:	48 2f       	mov	r20, r24
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	02 2e       	mov	r0, r18
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <MDIO_stderrSetPinValue+0x18c>
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	0a 94       	dec	r0
    34a8:	e2 f7       	brpl	.-8      	; 0x34a2 <MDIO_stderrSetPinValue+0x188>
    34aa:	80 95       	com	r24
    34ac:	84 23       	and	r24, r20
    34ae:	12 96       	adiw	r26, 0x02	; 2
    34b0:	8c 93       	st	X, r24
    34b2:	12 97       	sbiw	r26, 0x02	; 2
    34b4:	4d c0       	rjmp	.+154    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    34b6:	a6 e3       	ldi	r26, 0x36	; 54
    34b8:	b0 e0       	ldi	r27, 0x00	; 0
    34ba:	e6 e3       	ldi	r30, 0x36	; 54
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	82 81       	ldd	r24, Z+2	; 0x02
    34c0:	48 2f       	mov	r20, r24
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	02 2e       	mov	r0, r18
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <MDIO_stderrSetPinValue+0x1ba>
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	0a 94       	dec	r0
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <MDIO_stderrSetPinValue+0x1b6>
    34d8:	80 95       	com	r24
    34da:	84 23       	and	r24, r20
    34dc:	12 96       	adiw	r26, 0x02	; 2
    34de:	8c 93       	st	X, r24
    34e0:	12 97       	sbiw	r26, 0x02	; 2
    34e2:	36 c0       	rjmp	.+108    	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    34e4:	a3 e3       	ldi	r26, 0x33	; 51
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e3 e3       	ldi	r30, 0x33	; 51
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	48 2f       	mov	r20, r24
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	28 2f       	mov	r18, r24
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	02 2e       	mov	r0, r18
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <MDIO_stderrSetPinValue+0x1e8>
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	0a 94       	dec	r0
    3504:	e2 f7       	brpl	.-8      	; 0x34fe <MDIO_stderrSetPinValue+0x1e4>
    3506:	80 95       	com	r24
    3508:	84 23       	and	r24, r20
    350a:	12 96       	adiw	r26, 0x02	; 2
    350c:	8c 93       	st	X, r24
    350e:	12 97       	sbiw	r26, 0x02	; 2
    3510:	1f c0       	rjmp	.+62     	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    3512:	a0 e3       	ldi	r26, 0x30	; 48
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e0 e3       	ldi	r30, 0x30	; 48
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	48 2f       	mov	r20, r24
    351e:	8b 81       	ldd	r24, Y+3	; 0x03
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	81 e0       	ldi	r24, 0x01	; 1
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	02 2e       	mov	r0, r18
    352a:	02 c0       	rjmp	.+4      	; 0x3530 <MDIO_stderrSetPinValue+0x216>
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	0a 94       	dec	r0
    3532:	e2 f7       	brpl	.-8      	; 0x352c <MDIO_stderrSetPinValue+0x212>
    3534:	80 95       	com	r24
    3536:	84 23       	and	r24, r20
    3538:	12 96       	adiw	r26, 0x02	; 2
    353a:	8c 93       	st	X, r24
    353c:	12 97       	sbiw	r26, 0x02	; 2
    353e:	08 c0       	rjmp	.+16     	; 0x3550 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	05 c0       	rjmp	.+10     	; 0x3550 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	89 83       	std	Y+1, r24	; 0x01
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3550:	89 81       	ldd	r24, Y+1	; 0x01
}
    3552:	28 96       	adiw	r28, 0x08	; 8
    3554:	0f b6       	in	r0, 0x3f	; 63
    3556:	f8 94       	cli
    3558:	de bf       	out	0x3e, r29	; 62
    355a:	0f be       	out	0x3f, r0	; 63
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	27 97       	sbiw	r28, 0x07	; 7
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	9b 83       	std	Y+3, r25	; 0x03
    357a:	8a 83       	std	Y+2, r24	; 0x02
    357c:	6c 83       	std	Y+4, r22	; 0x04
    357e:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    3580:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    3582:	8a 81       	ldd	r24, Y+2	; 0x02
    3584:	9b 81       	ldd	r25, Y+3	; 0x03
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	19 f4       	brne	.+6      	; 0x3590 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	7a c0       	rjmp	.+244    	; 0x3684 <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	88 30       	cpi	r24, 0x08	; 8
    3594:	08 f0       	brcs	.+2      	; 0x3598 <MDIO_stderrGetPinValue+0x34>
    3596:	74 c0       	rjmp	.+232    	; 0x3680 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    3598:	8c 81       	ldd	r24, Y+4	; 0x04
    359a:	28 2f       	mov	r18, r24
    359c:	30 e0       	ldi	r19, 0x00	; 0
    359e:	3f 83       	std	Y+7, r19	; 0x07
    35a0:	2e 83       	std	Y+6, r18	; 0x06
    35a2:	4e 81       	ldd	r20, Y+6	; 0x06
    35a4:	5f 81       	ldd	r21, Y+7	; 0x07
    35a6:	42 30       	cpi	r20, 0x02	; 2
    35a8:	51 05       	cpc	r21, r1
    35aa:	59 f1       	breq	.+86     	; 0x3602 <MDIO_stderrGetPinValue+0x9e>
    35ac:	8e 81       	ldd	r24, Y+6	; 0x06
    35ae:	9f 81       	ldd	r25, Y+7	; 0x07
    35b0:	83 30       	cpi	r24, 0x03	; 3
    35b2:	91 05       	cpc	r25, r1
    35b4:	34 f4       	brge	.+12     	; 0x35c2 <MDIO_stderrGetPinValue+0x5e>
    35b6:	2e 81       	ldd	r18, Y+6	; 0x06
    35b8:	3f 81       	ldd	r19, Y+7	; 0x07
    35ba:	21 30       	cpi	r18, 0x01	; 1
    35bc:	31 05       	cpc	r19, r1
    35be:	69 f0       	breq	.+26     	; 0x35da <MDIO_stderrGetPinValue+0x76>
    35c0:	5c c0       	rjmp	.+184    	; 0x367a <MDIO_stderrGetPinValue+0x116>
    35c2:	4e 81       	ldd	r20, Y+6	; 0x06
    35c4:	5f 81       	ldd	r21, Y+7	; 0x07
    35c6:	43 30       	cpi	r20, 0x03	; 3
    35c8:	51 05       	cpc	r21, r1
    35ca:	79 f1       	breq	.+94     	; 0x362a <MDIO_stderrGetPinValue+0xc6>
    35cc:	8e 81       	ldd	r24, Y+6	; 0x06
    35ce:	9f 81       	ldd	r25, Y+7	; 0x07
    35d0:	84 30       	cpi	r24, 0x04	; 4
    35d2:	91 05       	cpc	r25, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <MDIO_stderrGetPinValue+0x74>
    35d6:	3d c0       	rjmp	.+122    	; 0x3652 <MDIO_stderrGetPinValue+0xee>
    35d8:	50 c0       	rjmp	.+160    	; 0x367a <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    35da:	e9 e3       	ldi	r30, 0x39	; 57
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a9 01       	movw	r20, r18
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <MDIO_stderrGetPinValue+0x8e>
    35ee:	55 95       	asr	r21
    35f0:	47 95       	ror	r20
    35f2:	8a 95       	dec	r24
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <MDIO_stderrGetPinValue+0x8a>
    35f6:	ca 01       	movw	r24, r20
    35f8:	81 70       	andi	r24, 0x01	; 1
    35fa:	ea 81       	ldd	r30, Y+2	; 0x02
    35fc:	fb 81       	ldd	r31, Y+3	; 0x03
    35fe:	80 83       	st	Z, r24
    3600:	41 c0       	rjmp	.+130    	; 0x3684 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    3602:	e6 e3       	ldi	r30, 0x36	; 54
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	28 2f       	mov	r18, r24
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	8d 81       	ldd	r24, Y+5	; 0x05
    360e:	88 2f       	mov	r24, r24
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	a9 01       	movw	r20, r18
    3614:	02 c0       	rjmp	.+4      	; 0x361a <MDIO_stderrGetPinValue+0xb6>
    3616:	55 95       	asr	r21
    3618:	47 95       	ror	r20
    361a:	8a 95       	dec	r24
    361c:	e2 f7       	brpl	.-8      	; 0x3616 <MDIO_stderrGetPinValue+0xb2>
    361e:	ca 01       	movw	r24, r20
    3620:	81 70       	andi	r24, 0x01	; 1
    3622:	ea 81       	ldd	r30, Y+2	; 0x02
    3624:	fb 81       	ldd	r31, Y+3	; 0x03
    3626:	80 83       	st	Z, r24
    3628:	2d c0       	rjmp	.+90     	; 0x3684 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    362a:	e3 e3       	ldi	r30, 0x33	; 51
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	28 2f       	mov	r18, r24
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	88 2f       	mov	r24, r24
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	a9 01       	movw	r20, r18
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <MDIO_stderrGetPinValue+0xde>
    363e:	55 95       	asr	r21
    3640:	47 95       	ror	r20
    3642:	8a 95       	dec	r24
    3644:	e2 f7       	brpl	.-8      	; 0x363e <MDIO_stderrGetPinValue+0xda>
    3646:	ca 01       	movw	r24, r20
    3648:	81 70       	andi	r24, 0x01	; 1
    364a:	ea 81       	ldd	r30, Y+2	; 0x02
    364c:	fb 81       	ldd	r31, Y+3	; 0x03
    364e:	80 83       	st	Z, r24
    3650:	19 c0       	rjmp	.+50     	; 0x3684 <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    3652:	e0 e3       	ldi	r30, 0x30	; 48
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	88 2f       	mov	r24, r24
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	a9 01       	movw	r20, r18
    3664:	02 c0       	rjmp	.+4      	; 0x366a <MDIO_stderrGetPinValue+0x106>
    3666:	55 95       	asr	r21
    3668:	47 95       	ror	r20
    366a:	8a 95       	dec	r24
    366c:	e2 f7       	brpl	.-8      	; 0x3666 <MDIO_stderrGetPinValue+0x102>
    366e:	ca 01       	movw	r24, r20
    3670:	81 70       	andi	r24, 0x01	; 1
    3672:	ea 81       	ldd	r30, Y+2	; 0x02
    3674:	fb 81       	ldd	r31, Y+3	; 0x03
    3676:	80 83       	st	Z, r24
    3678:	05 c0       	rjmp	.+10     	; 0x3684 <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3684:	89 81       	ldd	r24, Y+1	; 0x01
}
    3686:	27 96       	adiw	r28, 0x07	; 7
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	08 95       	ret

00003698 <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	00 d0       	rcall	.+0      	; 0x369e <MDIO_stderrTogglePinValue+0x6>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <MDIO_stderrTogglePinValue+0x8>
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	8a 83       	std	Y+2, r24	; 0x02
    36a8:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    36aa:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    36ac:	8b 81       	ldd	r24, Y+3	; 0x03
    36ae:	88 30       	cpi	r24, 0x08	; 8
    36b0:	08 f0       	brcs	.+2      	; 0x36b4 <MDIO_stderrTogglePinValue+0x1c>
    36b2:	7c c0       	rjmp	.+248    	; 0x37ac <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	28 2f       	mov	r18, r24
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	3d 83       	std	Y+5, r19	; 0x05
    36bc:	2c 83       	std	Y+4, r18	; 0x04
    36be:	8c 81       	ldd	r24, Y+4	; 0x04
    36c0:	9d 81       	ldd	r25, Y+5	; 0x05
    36c2:	82 30       	cpi	r24, 0x02	; 2
    36c4:	91 05       	cpc	r25, r1
    36c6:	69 f1       	breq	.+90     	; 0x3722 <MDIO_stderrTogglePinValue+0x8a>
    36c8:	2c 81       	ldd	r18, Y+4	; 0x04
    36ca:	3d 81       	ldd	r19, Y+5	; 0x05
    36cc:	23 30       	cpi	r18, 0x03	; 3
    36ce:	31 05       	cpc	r19, r1
    36d0:	34 f4       	brge	.+12     	; 0x36de <MDIO_stderrTogglePinValue+0x46>
    36d2:	8c 81       	ldd	r24, Y+4	; 0x04
    36d4:	9d 81       	ldd	r25, Y+5	; 0x05
    36d6:	81 30       	cpi	r24, 0x01	; 1
    36d8:	91 05       	cpc	r25, r1
    36da:	69 f0       	breq	.+26     	; 0x36f6 <MDIO_stderrTogglePinValue+0x5e>
    36dc:	64 c0       	rjmp	.+200    	; 0x37a6 <MDIO_stderrTogglePinValue+0x10e>
    36de:	2c 81       	ldd	r18, Y+4	; 0x04
    36e0:	3d 81       	ldd	r19, Y+5	; 0x05
    36e2:	23 30       	cpi	r18, 0x03	; 3
    36e4:	31 05       	cpc	r19, r1
    36e6:	99 f1       	breq	.+102    	; 0x374e <MDIO_stderrTogglePinValue+0xb6>
    36e8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ea:	9d 81       	ldd	r25, Y+5	; 0x05
    36ec:	84 30       	cpi	r24, 0x04	; 4
    36ee:	91 05       	cpc	r25, r1
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <MDIO_stderrTogglePinValue+0x5c>
    36f2:	43 c0       	rjmp	.+134    	; 0x377a <MDIO_stderrTogglePinValue+0xe2>
    36f4:	58 c0       	rjmp	.+176    	; 0x37a6 <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    36f6:	a9 e3       	ldi	r26, 0x39	; 57
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e9 e3       	ldi	r30, 0x39	; 57
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	82 81       	ldd	r24, Z+2	; 0x02
    3700:	48 2f       	mov	r20, r24
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	02 2e       	mov	r0, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <MDIO_stderrTogglePinValue+0x7c>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	0a 94       	dec	r0
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <MDIO_stderrTogglePinValue+0x78>
    3718:	84 27       	eor	r24, r20
    371a:	12 96       	adiw	r26, 0x02	; 2
    371c:	8c 93       	st	X, r24
    371e:	12 97       	sbiw	r26, 0x02	; 2
    3720:	47 c0       	rjmp	.+142    	; 0x37b0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    3722:	a6 e3       	ldi	r26, 0x36	; 54
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	e6 e3       	ldi	r30, 0x36	; 54
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	48 2f       	mov	r20, r24
    372e:	8b 81       	ldd	r24, Y+3	; 0x03
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	02 2e       	mov	r0, r18
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <MDIO_stderrTogglePinValue+0xa8>
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	0a 94       	dec	r0
    3742:	e2 f7       	brpl	.-8      	; 0x373c <MDIO_stderrTogglePinValue+0xa4>
    3744:	84 27       	eor	r24, r20
    3746:	12 96       	adiw	r26, 0x02	; 2
    3748:	8c 93       	st	X, r24
    374a:	12 97       	sbiw	r26, 0x02	; 2
    374c:	31 c0       	rjmp	.+98     	; 0x37b0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    374e:	a3 e3       	ldi	r26, 0x33	; 51
    3750:	b0 e0       	ldi	r27, 0x00	; 0
    3752:	e3 e3       	ldi	r30, 0x33	; 51
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	48 2f       	mov	r20, r24
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	28 2f       	mov	r18, r24
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	02 2e       	mov	r0, r18
    3766:	02 c0       	rjmp	.+4      	; 0x376c <MDIO_stderrTogglePinValue+0xd4>
    3768:	88 0f       	add	r24, r24
    376a:	99 1f       	adc	r25, r25
    376c:	0a 94       	dec	r0
    376e:	e2 f7       	brpl	.-8      	; 0x3768 <MDIO_stderrTogglePinValue+0xd0>
    3770:	84 27       	eor	r24, r20
    3772:	12 96       	adiw	r26, 0x02	; 2
    3774:	8c 93       	st	X, r24
    3776:	12 97       	sbiw	r26, 0x02	; 2
    3778:	1b c0       	rjmp	.+54     	; 0x37b0 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    377a:	a0 e3       	ldi	r26, 0x30	; 48
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	e0 e3       	ldi	r30, 0x30	; 48
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	82 81       	ldd	r24, Z+2	; 0x02
    3784:	48 2f       	mov	r20, r24
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	02 2e       	mov	r0, r18
    3792:	02 c0       	rjmp	.+4      	; 0x3798 <MDIO_stderrTogglePinValue+0x100>
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	0a 94       	dec	r0
    379a:	e2 f7       	brpl	.-8      	; 0x3794 <MDIO_stderrTogglePinValue+0xfc>
    379c:	84 27       	eor	r24, r20
    379e:	12 96       	adiw	r26, 0x02	; 2
    37a0:	8c 93       	st	X, r24
    37a2:	12 97       	sbiw	r26, 0x02	; 2
    37a4:	05 c0       	rjmp	.+10     	; 0x37b0 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	02 c0       	rjmp	.+4      	; 0x37b0 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    37ac:	82 e0       	ldi	r24, 0x02	; 2
    37ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    37b2:	0f 90       	pop	r0
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <LM35_u16GetTemp>:
#define LDR_RESOLUTION 					256.0
#define LDR_VREFF						5.0


u16 LM35_u16GetTemp(void)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	00 d0       	rcall	.+0      	; 0x37c8 <LM35_u16GetTemp+0x6>
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <LM35_u16GetTemp+0x8>
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <LM35_u16GetTemp+0xa>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
        /* 19.5 m.v for level --> 5 V / 256
           we use 8-bit mode
           ADC_read return number of the level multiply it by 19.5 = V_out m.v from sens
           T c = V_out m.v / 10.00 m.v --> 10 mv/c */
		u16 L_u16ADCResult;
		f32 L_f32Volt=0;
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	a0 e0       	ldi	r26, 0x00	; 0
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	ab 83       	std	Y+3, r26	; 0x03
    37de:	bc 83       	std	Y+4, r27	; 0x04
		MADC_stderrReadADC(&L_u16ADCResult,LM35_CHANNEL);
    37e0:	ce 01       	movw	r24, r28
    37e2:	05 96       	adiw	r24, 0x05	; 5
    37e4:	60 e0       	ldi	r22, 0x00	; 0
    37e6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <MADC_stderrReadADC>
		L_f32Volt= (f32) (L_u16ADCResult*(LM35_VREFF/LM35_RESOLUTION)); // LM35 V-out
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	cc 01       	movw	r24, r24
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 ea       	ldi	r20, 0xA0	; 160
    380a:	5c e3       	ldi	r21, 0x3C	; 60
    380c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	89 83       	std	Y+1, r24	; 0x01
    3816:	9a 83       	std	Y+2, r25	; 0x02
    3818:	ab 83       	std	Y+3, r26	; 0x03
    381a:	bc 83       	std	Y+4, r27	; 0x04
		L_u16ADCResult= (u32) ((f32)L_f32Volt/0.01); //Temperature in C
    381c:	69 81       	ldd	r22, Y+1	; 0x01
    381e:	7a 81       	ldd	r23, Y+2	; 0x02
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	2a e0       	ldi	r18, 0x0A	; 10
    3826:	37 ed       	ldi	r19, 0xD7	; 215
    3828:	43 e2       	ldi	r20, 0x23	; 35
    382a:	5c e3       	ldi	r21, 0x3C	; 60
    382c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	bc 01       	movw	r22, r24
    3836:	cd 01       	movw	r24, r26
    3838:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	9e 83       	std	Y+6, r25	; 0x06
    3842:	8d 83       	std	Y+5, r24	; 0x05
		return L_u16ADCResult ;
    3844:	8d 81       	ldd	r24, Y+5	; 0x05
    3846:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3848:	26 96       	adiw	r28, 0x06	; 6
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	de bf       	out	0x3e, r29	; 62
    3850:	0f be       	out	0x3f, r0	; 63
    3852:	cd bf       	out	0x3d, r28	; 61
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <LDR_u16GetValue>:

u16 LDR_u16GetValue(void)
{
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	00 d0       	rcall	.+0      	; 0x3868 <LDR_u16GetValue+0xe>
    3868:	00 d0       	rcall	.+0      	; 0x386a <LDR_u16GetValue+0x10>
    386a:	00 d0       	rcall	.+0      	; 0x386c <LDR_u16GetValue+0x12>
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
           T c = V_out m.v / 10.00 m.v --> 10 mv/c
           vLDR = v-in * R / (R-LDR + R)
           */

		u16 L_u16ADCResult;
		f32 L_f32Volt=0;
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	9a 83       	std	Y+2, r25	; 0x02
    387c:	ab 83       	std	Y+3, r26	; 0x03
    387e:	bc 83       	std	Y+4, r27	; 0x04
		MADC_stderrReadADC(&L_u16ADCResult,LDR_CHANNEL);
    3880:	ce 01       	movw	r24, r28
    3882:	05 96       	adiw	r24, 0x05	; 5
    3884:	61 e0       	ldi	r22, 0x01	; 1
    3886:	0e 94 22 16 	call	0x2c44	; 0x2c44 <MADC_stderrReadADC>
		L_f32Volt= (f32) (L_u16ADCResult*(LDR_VREFF/LDR_RESOLUTION)); // LM35 V-out
    388a:	8d 81       	ldd	r24, Y+5	; 0x05
    388c:	9e 81       	ldd	r25, Y+6	; 0x06
    388e:	cc 01       	movw	r24, r24
    3890:	a0 e0       	ldi	r26, 0x00	; 0
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	bc 01       	movw	r22, r24
    3896:	cd 01       	movw	r24, r26
    3898:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 ea       	ldi	r20, 0xA0	; 160
    38aa:	5c e3       	ldi	r21, 0x3C	; 60
    38ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	9a 83       	std	Y+2, r25	; 0x02
    38b8:	ab 83       	std	Y+3, r26	; 0x03
    38ba:	bc 83       	std	Y+4, r27	; 0x04
		L_u16ADCResult= (u32) ( (f32)(20000*L_f32Volt)/(5-L_f32Volt)); //    (f32)L_f32Volt/0.01); //Temperature in C
    38bc:	69 81       	ldd	r22, Y+1	; 0x01
    38be:	7a 81       	ldd	r23, Y+2	; 0x02
    38c0:	8b 81       	ldd	r24, Y+3	; 0x03
    38c2:	9c 81       	ldd	r25, Y+4	; 0x04
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e4       	ldi	r19, 0x40	; 64
    38c8:	4c e9       	ldi	r20, 0x9C	; 156
    38ca:	56 e4       	ldi	r21, 0x46	; 70
    38cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	7c 01       	movw	r14, r24
    38d6:	8d 01       	movw	r16, r26
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	80 ea       	ldi	r24, 0xA0	; 160
    38de:	90 e4       	ldi	r25, 0x40	; 64
    38e0:	29 81       	ldd	r18, Y+1	; 0x01
    38e2:	3a 81       	ldd	r19, Y+2	; 0x02
    38e4:	4b 81       	ldd	r20, Y+3	; 0x03
    38e6:	5c 81       	ldd	r21, Y+4	; 0x04
    38e8:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	9c 01       	movw	r18, r24
    38f2:	ad 01       	movw	r20, r26
    38f4:	c8 01       	movw	r24, r16
    38f6:	b7 01       	movw	r22, r14
    38f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9e 83       	std	Y+6, r25	; 0x06
    390e:	8d 83       	std	Y+5, r24	; 0x05
		return L_u16ADCResult ;
    3910:	8d 81       	ldd	r24, Y+5	; 0x05
    3912:	9e 81       	ldd	r25, Y+6	; 0x06
}
    3914:	26 96       	adiw	r28, 0x06	; 6
    3916:	0f b6       	in	r0, 0x3f	; 63
    3918:	f8 94       	cli
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	0f be       	out	0x3f, r0	; 63
    391e:	cd bf       	out	0x3d, r28	; 61
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	1f 91       	pop	r17
    3926:	0f 91       	pop	r16
    3928:	ff 90       	pop	r15
    392a:	ef 90       	pop	r14
    392c:	08 95       	ret

0000392e <main>:




int main(void){
    392e:	df 93       	push	r29
    3930:	cf 93       	push	r28
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	6e 97       	sbiw	r28, 0x1e	; 30
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	f8 94       	cli
    393c:	de bf       	out	0x3e, r29	; 62
    393e:	0f be       	out	0x3f, r0	; 63
    3940:	cd bf       	out	0x3d, r28	; 61
	// Initialization  (Run Once)
	//char L_charpNumString[6]="0000";
	//f32 L_f32Volt=0;
	u16 L_u16ADCResult= 0;
    3942:	1e 8e       	std	Y+30, r1	; 0x1e
    3944:	1d 8e       	std	Y+29, r1	; 0x1d

	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_64,MADC_ADJUST_LEFT);
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	66 e0       	ldi	r22, 0x06	; 6
    394a:	41 e0       	ldi	r20, 0x01	; 1
    394c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <MADC_stderrInit>
	MDIO_stderrSetPinDirection(MDIO_PORTA,MDIO_PIN1,MDIO_INPUT_PULLUP);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	61 e0       	ldi	r22, 0x01	; 1
    3954:	43 e0       	ldi	r20, 0x03	; 3
    3956:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <MDIO_stderrSetPinDirection>

	HLCD_voidInit();
    395a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <HLCD_voidInit>

	while(1){
		// Application (Run )
		//MADC_stderrReadADC(&L_u16ADCResult,MADC_SCHANNEL_ADC0);
		L_u16ADCResult=LM35_u16GetTemp();
    395e:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <LM35_u16GetTemp>
    3962:	9e 8f       	std	Y+30, r25	; 0x1e
    3964:	8d 8f       	std	Y+29, r24	; 0x1d
		HLCD_voidClear();
    3966:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <HLCD_voidClear>
		HLCD_voidSetCur(0,0);
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	0e 94 c0 14 	call	0x2980	; 0x2980 <HLCD_voidSetCur>
		HLCD_voidSendString("Temp is:");
    3972:	80 e6       	ldi	r24, 0x60	; 96
    3974:	90 e0       	ldi	r25, 0x00	; 0
    3976:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidSendString>
		HLCD_voidSendNum(L_u16ADCResult);
    397a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    397c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    397e:	0e 94 3a 14 	call	0x2874	; 0x2874 <HLCD_voidSendNum>
		HLCD_voidSendChar('C');
    3982:	83 e4       	ldi	r24, 0x43	; 67
    3984:	0e 94 07 10 	call	0x200e	; 0x200e <HLCD_voidSendChar>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a6 e9       	ldi	r26, 0x96	; 150
    398e:	b4 e4       	ldi	r27, 0x44	; 68
    3990:	89 8f       	std	Y+25, r24	; 0x19
    3992:	9a 8f       	std	Y+26, r25	; 0x1a
    3994:	ab 8f       	std	Y+27, r26	; 0x1b
    3996:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	69 8d       	ldd	r22, Y+25	; 0x19
    399a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    399c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	4a ef       	ldi	r20, 0xFA	; 250
    39a6:	54 e4       	ldi	r21, 0x44	; 68
    39a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	8d 8b       	std	Y+21, r24	; 0x15
    39b2:	9e 8b       	std	Y+22, r25	; 0x16
    39b4:	af 8b       	std	Y+23, r26	; 0x17
    39b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39b8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ba:	7e 89       	ldd	r23, Y+22	; 0x16
    39bc:	8f 89       	ldd	r24, Y+23	; 0x17
    39be:	98 8d       	ldd	r25, Y+24	; 0x18
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e8       	ldi	r20, 0x80	; 128
    39c6:	5f e3       	ldi	r21, 0x3F	; 63
    39c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    39cc:	88 23       	and	r24, r24
    39ce:	2c f4       	brge	.+10     	; 0x39da <main+0xac>
		__ticks = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9c 8b       	std	Y+20, r25	; 0x14
    39d6:	8b 8b       	std	Y+19, r24	; 0x13
    39d8:	3f c0       	rjmp	.+126    	; 0x3a58 <main+0x12a>
	else if (__tmp > 65535)
    39da:	6d 89       	ldd	r22, Y+21	; 0x15
    39dc:	7e 89       	ldd	r23, Y+22	; 0x16
    39de:	8f 89       	ldd	r24, Y+23	; 0x17
    39e0:	98 8d       	ldd	r25, Y+24	; 0x18
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	4f e7       	ldi	r20, 0x7F	; 127
    39e8:	57 e4       	ldi	r21, 0x47	; 71
    39ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    39ee:	18 16       	cp	r1, r24
    39f0:	4c f5       	brge	.+82     	; 0x3a44 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	69 8d       	ldd	r22, Y+25	; 0x19
    39f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9c 8b       	std	Y+20, r25	; 0x14
    3a18:	8b 8b       	std	Y+19, r24	; 0x13
    3a1a:	0f c0       	rjmp	.+30     	; 0x3a3a <main+0x10c>
    3a1c:	88 ec       	ldi	r24, 0xC8	; 200
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9a 8b       	std	Y+18, r25	; 0x12
    3a22:	89 8b       	std	Y+17, r24	; 0x11
    3a24:	89 89       	ldd	r24, Y+17	; 0x11
    3a26:	9a 89       	ldd	r25, Y+18	; 0x12
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <main+0xfa>
    3a2c:	9a 8b       	std	Y+18, r25	; 0x12
    3a2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a30:	8b 89       	ldd	r24, Y+19	; 0x13
    3a32:	9c 89       	ldd	r25, Y+20	; 0x14
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	9c 8b       	std	Y+20, r25	; 0x14
    3a38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <main+0xee>
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <main+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a44:	6d 89       	ldd	r22, Y+21	; 0x15
    3a46:	7e 89       	ldd	r23, Y+22	; 0x16
    3a48:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9c 8b       	std	Y+20, r25	; 0x14
    3a56:	8b 8b       	std	Y+19, r24	; 0x13
    3a58:	8b 89       	ldd	r24, Y+19	; 0x13
    3a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a5c:	98 8b       	std	Y+16, r25	; 0x10
    3a5e:	8f 87       	std	Y+15, r24	; 0x0f
    3a60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a62:	98 89       	ldd	r25, Y+16	; 0x10
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <main+0x136>
    3a68:	98 8b       	std	Y+16, r25	; 0x10
    3a6a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1200);
		//L_f32Volt = L_u16ADCResult* (5.0/256.0); // volt val conversion
		L_u16ADCResult=LDR_u16GetValue();
    3a6c:	0e 94 2d 1c 	call	0x385a	; 0x385a <LDR_u16GetValue>
    3a70:	9e 8f       	std	Y+30, r25	; 0x1e
    3a72:	8d 8f       	std	Y+29, r24	; 0x1d

		HLCD_voidSetCur(1,0);
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	0e 94 c0 14 	call	0x2980	; 0x2980 <HLCD_voidSetCur>
		HLCD_voidSendString("LDR is:");
    3a7c:	89 e6       	ldi	r24, 0x69	; 105
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidSendString>
		HLCD_voidSendNum(L_u16ADCResult);
    3a84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a88:	0e 94 3a 14 	call	0x2874	; 0x2874 <HLCD_voidSendNum>
		HLCD_voidSendString("Ohms");
    3a8c:	81 e7       	ldi	r24, 0x71	; 113
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidSendString>
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	a6 e9       	ldi	r26, 0x96	; 150
    3a9a:	b4 e4       	ldi	r27, 0x44	; 68
    3a9c:	8b 87       	std	Y+11, r24	; 0x0b
    3a9e:	9c 87       	std	Y+12, r25	; 0x0c
    3aa0:	ad 87       	std	Y+13, r26	; 0x0d
    3aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	4a ef       	ldi	r20, 0xFA	; 250
    3ab2:	54 e4       	ldi	r21, 0x44	; 68
    3ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	8f 83       	std	Y+7, r24	; 0x07
    3abe:	98 87       	std	Y+8, r25	; 0x08
    3ac0:	a9 87       	std	Y+9, r26	; 0x09
    3ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac6:	78 85       	ldd	r23, Y+8	; 0x08
    3ac8:	89 85       	ldd	r24, Y+9	; 0x09
    3aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e8       	ldi	r20, 0x80	; 128
    3ad2:	5f e3       	ldi	r21, 0x3F	; 63
    3ad4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3ad8:	88 23       	and	r24, r24
    3ada:	2c f4       	brge	.+10     	; 0x3ae6 <main+0x1b8>
		__ticks = 1;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	9e 83       	std	Y+6, r25	; 0x06
    3ae2:	8d 83       	std	Y+5, r24	; 0x05
    3ae4:	3f c0       	rjmp	.+126    	; 0x3b64 <main+0x236>
	else if (__tmp > 65535)
    3ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae8:	78 85       	ldd	r23, Y+8	; 0x08
    3aea:	89 85       	ldd	r24, Y+9	; 0x09
    3aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	3f ef       	ldi	r19, 0xFF	; 255
    3af2:	4f e7       	ldi	r20, 0x7F	; 127
    3af4:	57 e4       	ldi	r21, 0x47	; 71
    3af6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3afa:	18 16       	cp	r1, r24
    3afc:	4c f5       	brge	.+82     	; 0x3b50 <main+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e2       	ldi	r20, 0x20	; 32
    3b0c:	51 e4       	ldi	r21, 0x41	; 65
    3b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	bc 01       	movw	r22, r24
    3b18:	cd 01       	movw	r24, r26
    3b1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	9e 83       	std	Y+6, r25	; 0x06
    3b24:	8d 83       	std	Y+5, r24	; 0x05
    3b26:	0f c0       	rjmp	.+30     	; 0x3b46 <main+0x218>
    3b28:	88 ec       	ldi	r24, 0xC8	; 200
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9c 83       	std	Y+4, r25	; 0x04
    3b2e:	8b 83       	std	Y+3, r24	; 0x03
    3b30:	8b 81       	ldd	r24, Y+3	; 0x03
    3b32:	9c 81       	ldd	r25, Y+4	; 0x04
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <main+0x206>
    3b38:	9c 83       	std	Y+4, r25	; 0x04
    3b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	9e 83       	std	Y+6, r25	; 0x06
    3b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b46:	8d 81       	ldd	r24, Y+5	; 0x05
    3b48:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	69 f7       	brne	.-38     	; 0x3b28 <main+0x1fa>
    3b4e:	07 cf       	rjmp	.-498    	; 0x395e <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b50:	6f 81       	ldd	r22, Y+7	; 0x07
    3b52:	78 85       	ldd	r23, Y+8	; 0x08
    3b54:	89 85       	ldd	r24, Y+9	; 0x09
    3b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	8d 83       	std	Y+5, r24	; 0x05
    3b64:	8d 81       	ldd	r24, Y+5	; 0x05
    3b66:	9e 81       	ldd	r25, Y+6	; 0x06
    3b68:	9a 83       	std	Y+2, r25	; 0x02
    3b6a:	89 83       	std	Y+1, r24	; 0x01
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <main+0x242>
    3b74:	9a 83       	std	Y+2, r25	; 0x02
    3b76:	89 83       	std	Y+1, r24	; 0x01
    3b78:	f2 ce       	rjmp	.-540    	; 0x395e <main+0x30>

00003b7a <__udivmodhi4>:
    3b7a:	aa 1b       	sub	r26, r26
    3b7c:	bb 1b       	sub	r27, r27
    3b7e:	51 e1       	ldi	r21, 0x11	; 17
    3b80:	07 c0       	rjmp	.+14     	; 0x3b90 <__udivmodhi4_ep>

00003b82 <__udivmodhi4_loop>:
    3b82:	aa 1f       	adc	r26, r26
    3b84:	bb 1f       	adc	r27, r27
    3b86:	a6 17       	cp	r26, r22
    3b88:	b7 07       	cpc	r27, r23
    3b8a:	10 f0       	brcs	.+4      	; 0x3b90 <__udivmodhi4_ep>
    3b8c:	a6 1b       	sub	r26, r22
    3b8e:	b7 0b       	sbc	r27, r23

00003b90 <__udivmodhi4_ep>:
    3b90:	88 1f       	adc	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	5a 95       	dec	r21
    3b96:	a9 f7       	brne	.-22     	; 0x3b82 <__udivmodhi4_loop>
    3b98:	80 95       	com	r24
    3b9a:	90 95       	com	r25
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	08 95       	ret

00003ba2 <__prologue_saves__>:
    3ba2:	2f 92       	push	r2
    3ba4:	3f 92       	push	r3
    3ba6:	4f 92       	push	r4
    3ba8:	5f 92       	push	r5
    3baa:	6f 92       	push	r6
    3bac:	7f 92       	push	r7
    3bae:	8f 92       	push	r8
    3bb0:	9f 92       	push	r9
    3bb2:	af 92       	push	r10
    3bb4:	bf 92       	push	r11
    3bb6:	cf 92       	push	r12
    3bb8:	df 92       	push	r13
    3bba:	ef 92       	push	r14
    3bbc:	ff 92       	push	r15
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	ca 1b       	sub	r28, r26
    3bcc:	db 0b       	sbc	r29, r27
    3bce:	0f b6       	in	r0, 0x3f	; 63
    3bd0:	f8 94       	cli
    3bd2:	de bf       	out	0x3e, r29	; 62
    3bd4:	0f be       	out	0x3f, r0	; 63
    3bd6:	cd bf       	out	0x3d, r28	; 61
    3bd8:	09 94       	ijmp

00003bda <__epilogue_restores__>:
    3bda:	2a 88       	ldd	r2, Y+18	; 0x12
    3bdc:	39 88       	ldd	r3, Y+17	; 0x11
    3bde:	48 88       	ldd	r4, Y+16	; 0x10
    3be0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3be2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3be4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3be6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3be8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bea:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bec:	b9 84       	ldd	r11, Y+9	; 0x09
    3bee:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf0:	df 80       	ldd	r13, Y+7	; 0x07
    3bf2:	ee 80       	ldd	r14, Y+6	; 0x06
    3bf4:	fd 80       	ldd	r15, Y+5	; 0x05
    3bf6:	0c 81       	ldd	r16, Y+4	; 0x04
    3bf8:	1b 81       	ldd	r17, Y+3	; 0x03
    3bfa:	aa 81       	ldd	r26, Y+2	; 0x02
    3bfc:	b9 81       	ldd	r27, Y+1	; 0x01
    3bfe:	ce 0f       	add	r28, r30
    3c00:	d1 1d       	adc	r29, r1
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	ed 01       	movw	r28, r26
    3c0e:	08 95       	ret

00003c10 <_exit>:
    3c10:	f8 94       	cli

00003c12 <__stop_program>:
    3c12:	ff cf       	rjmp	.-2      	; 0x3c12 <__stop_program>
