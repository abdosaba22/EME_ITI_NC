
NEEPROM_TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000043be  00004452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800090  00800090  00004482  2**0
                  ALLOC
  3 .stab         0000336c  00000000  00000000  00004484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001338  00000000  00000000  000077f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d322  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 1d 	call	0x3aec	; 0x3aec <main>
      8a:	0c 94 dd 21 	jmp	0x43ba	; 0x43ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ce 21 	jmp	0x439c	; 0x439c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	c2 57       	subi	r28, 0x72	; 114
     cac:	d0 40       	sbci	r29, 0x00	; 0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	62 e0       	ldi	r22, 0x02	; 2
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	64 e0       	ldi	r22, 0x04	; 4
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	66 e0       	ldi	r22, 0x06	; 6
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	67 e0       	ldi	r22, 0x07	; 7
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
     cfe:	fe 01       	movw	r30, r28
     d00:	e1 59       	subi	r30, 0x91	; 145
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	a0 e2       	ldi	r26, 0x20	; 32
     d0a:	b2 e4       	ldi	r27, 0x42	; 66
     d0c:	80 83       	st	Z, r24
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	a2 83       	std	Z+2, r26	; 0x02
     d12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d14:	8e 01       	movw	r16, r28
     d16:	05 59       	subi	r16, 0x95	; 149
     d18:	1f 4f       	sbci	r17, 0xFF	; 255
     d1a:	fe 01       	movw	r30, r28
     d1c:	e1 59       	subi	r30, 0x91	; 145
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	93 81       	ldd	r25, Z+3	; 0x03
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	4a ef       	ldi	r20, 0xFA	; 250
     d2e:	54 e4       	ldi	r21, 0x44	; 68
     d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	f8 01       	movw	r30, r16
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d42:	fe 01       	movw	r30, r28
     d44:	e5 59       	subi	r30, 0x95	; 149
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	44 f4       	brge	.+16     	; 0xd70 <HLCD_voidInit+0xd2>
		__ticks = 1;
     d60:	fe 01       	movw	r30, r28
     d62:	e7 59       	subi	r30, 0x97	; 151
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
     d6e:	64 c0       	rjmp	.+200    	; 0xe38 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
     d70:	fe 01       	movw	r30, r28
     d72:	e5 59       	subi	r30, 0x95	; 149
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	4f e7       	ldi	r20, 0x7F	; 127
     d84:	57 e4       	ldi	r21, 0x47	; 71
     d86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d8a:	18 16       	cp	r1, r24
     d8c:	0c f0       	brlt	.+2      	; 0xd90 <HLCD_voidInit+0xf2>
     d8e:	43 c0       	rjmp	.+134    	; 0xe16 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d90:	fe 01       	movw	r30, r28
     d92:	e1 59       	subi	r30, 0x91	; 145
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e2       	ldi	r20, 0x20	; 32
     da4:	51 e4       	ldi	r21, 0x41	; 65
     da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	8e 01       	movw	r16, r28
     db0:	07 59       	subi	r16, 0x97	; 151
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	f8 01       	movw	r30, r16
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
     dc6:	1f c0       	rjmp	.+62     	; 0xe06 <HLCD_voidInit+0x168>
     dc8:	fe 01       	movw	r30, r28
     dca:	e9 59       	subi	r30, 0x99	; 153
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	88 ec       	ldi	r24, 0xC8	; 200
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dd6:	fe 01       	movw	r30, r28
     dd8:	e9 59       	subi	r30, 0x99	; 153
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <HLCD_voidInit+0x142>
     de4:	fe 01       	movw	r30, r28
     de6:	e9 59       	subi	r30, 0x99	; 153
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	91 83       	std	Z+1, r25	; 0x01
     dec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dee:	de 01       	movw	r26, r28
     df0:	a7 59       	subi	r26, 0x97	; 151
     df2:	bf 4f       	sbci	r27, 0xFF	; 255
     df4:	fe 01       	movw	r30, r28
     df6:	e7 59       	subi	r30, 0x97	; 151
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	11 96       	adiw	r26, 0x01	; 1
     e02:	9c 93       	st	X, r25
     e04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e06:	fe 01       	movw	r30, r28
     e08:	e7 59       	subi	r30, 0x97	; 151
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	d1 f6       	brne	.-76     	; 0xdc8 <HLCD_voidInit+0x12a>
     e14:	27 c0       	rjmp	.+78     	; 0xe64 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e16:	8e 01       	movw	r16, r28
     e18:	07 59       	subi	r16, 0x97	; 151
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	fe 01       	movw	r30, r28
     e1e:	e5 59       	subi	r30, 0x95	; 149
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	60 81       	ld	r22, Z
     e24:	71 81       	ldd	r23, Z+1	; 0x01
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	f8 01       	movw	r30, r16
     e34:	91 83       	std	Z+1, r25	; 0x01
     e36:	80 83       	st	Z, r24
     e38:	de 01       	movw	r26, r28
     e3a:	ab 59       	subi	r26, 0x9B	; 155
     e3c:	bf 4f       	sbci	r27, 0xFF	; 255
     e3e:	fe 01       	movw	r30, r28
     e40:	e7 59       	subi	r30, 0x97	; 151
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	8d 93       	st	X+, r24
     e4a:	9c 93       	st	X, r25
     e4c:	fe 01       	movw	r30, r28
     e4e:	eb 59       	subi	r30, 0x9B	; 155
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <HLCD_voidInit+0x1b8>
     e5a:	fe 01       	movw	r30, r28
     e5c:	eb 59       	subi	r30, 0x9B	; 155
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
     e64:	83 e3       	ldi	r24, 0x33	; 51
     e66:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
     e6a:	fe 01       	movw	r30, r28
     e6c:	ef 59       	subi	r30, 0x9F	; 159
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 ea       	ldi	r26, 0xA0	; 160
     e76:	b0 e4       	ldi	r27, 0x40	; 64
     e78:	80 83       	st	Z, r24
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	a2 83       	std	Z+2, r26	; 0x02
     e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e80:	8e 01       	movw	r16, r28
     e82:	03 5a       	subi	r16, 0xA3	; 163
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	fe 01       	movw	r30, r28
     e88:	ef 59       	subi	r30, 0x9F	; 159
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	60 81       	ld	r22, Z
     e8e:	71 81       	ldd	r23, Z+1	; 0x01
     e90:	82 81       	ldd	r24, Z+2	; 0x02
     e92:	93 81       	ldd	r25, Z+3	; 0x03
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	4a ef       	ldi	r20, 0xFA	; 250
     e9a:	54 e4       	ldi	r21, 0x44	; 68
     e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 83       	st	Z, r24
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	a2 83       	std	Z+2, r26	; 0x02
     eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eae:	fe 01       	movw	r30, r28
     eb0:	e3 5a       	subi	r30, 0xA3	; 163
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	60 81       	ld	r22, Z
     eb6:	71 81       	ldd	r23, Z+1	; 0x01
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5f e3       	ldi	r21, 0x3F	; 63
     ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ec8:	88 23       	and	r24, r24
     eca:	44 f4       	brge	.+16     	; 0xedc <HLCD_voidInit+0x23e>
		__ticks = 1;
     ecc:	fe 01       	movw	r30, r28
     ece:	e5 5a       	subi	r30, 0xA5	; 165
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	64 c0       	rjmp	.+200    	; 0xfa4 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
     edc:	fe 01       	movw	r30, r28
     ede:	e3 5a       	subi	r30, 0xA3	; 163
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	0c f0       	brlt	.+2      	; 0xefc <HLCD_voidInit+0x25e>
     efa:	43 c0       	rjmp	.+134    	; 0xf82 <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efc:	fe 01       	movw	r30, r28
     efe:	ef 59       	subi	r30, 0x9F	; 159
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e2       	ldi	r20, 0x20	; 32
     f10:	51 e4       	ldi	r21, 0x41	; 65
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8e 01       	movw	r16, r28
     f1c:	05 5a       	subi	r16, 0xA5	; 165
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	f8 01       	movw	r30, r16
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
     f32:	1f c0       	rjmp	.+62     	; 0xf72 <HLCD_voidInit+0x2d4>
     f34:	fe 01       	movw	r30, r28
     f36:	e7 5a       	subi	r30, 0xA7	; 167
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	88 ec       	ldi	r24, 0xC8	; 200
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	fe 01       	movw	r30, r28
     f44:	e7 5a       	subi	r30, 0xA7	; 167
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <HLCD_voidInit+0x2ae>
     f50:	fe 01       	movw	r30, r28
     f52:	e7 5a       	subi	r30, 0xA7	; 167
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	de 01       	movw	r26, r28
     f5c:	a5 5a       	subi	r26, 0xA5	; 165
     f5e:	bf 4f       	sbci	r27, 0xFF	; 255
     f60:	fe 01       	movw	r30, r28
     f62:	e5 5a       	subi	r30, 0xA5	; 165
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	9c 93       	st	X, r25
     f70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	fe 01       	movw	r30, r28
     f74:	e5 5a       	subi	r30, 0xA5	; 165
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	d1 f6       	brne	.-76     	; 0xf34 <HLCD_voidInit+0x296>
     f80:	27 c0       	rjmp	.+78     	; 0xfd0 <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f82:	8e 01       	movw	r16, r28
     f84:	05 5a       	subi	r16, 0xA5	; 165
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	fe 01       	movw	r30, r28
     f8a:	e3 5a       	subi	r30, 0xA3	; 163
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	f8 01       	movw	r30, r16
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
     fa4:	de 01       	movw	r26, r28
     fa6:	a9 5a       	subi	r26, 0xA9	; 169
     fa8:	bf 4f       	sbci	r27, 0xFF	; 255
     faa:	fe 01       	movw	r30, r28
     fac:	e5 5a       	subi	r30, 0xA5	; 165
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	8d 93       	st	X+, r24
     fb6:	9c 93       	st	X, r25
     fb8:	fe 01       	movw	r30, r28
     fba:	e9 5a       	subi	r30, 0xA9	; 169
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	80 81       	ld	r24, Z
     fc0:	91 81       	ldd	r25, Z+1	; 0x01
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <HLCD_voidInit+0x324>
     fc6:	fe 01       	movw	r30, r28
     fc8:	e9 5a       	subi	r30, 0xA9	; 169
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
     fd0:	82 e3       	ldi	r24, 0x32	; 50
     fd2:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
     fd6:	fe 01       	movw	r30, r28
     fd8:	ed 5a       	subi	r30, 0xAD	; 173
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a8 ec       	ldi	r26, 0xC8	; 200
     fe2:	b2 e4       	ldi	r27, 0x42	; 66
     fe4:	80 83       	st	Z, r24
     fe6:	91 83       	std	Z+1, r25	; 0x01
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fec:	8e 01       	movw	r16, r28
     fee:	01 5b       	subi	r16, 0xB1	; 177
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
     ff2:	fe 01       	movw	r30, r28
     ff4:	ed 5a       	subi	r30, 0xAD	; 173
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	2b ea       	ldi	r18, 0xAB	; 171
    1002:	3a ea       	ldi	r19, 0xAA	; 170
    1004:	4a e2       	ldi	r20, 0x2A	; 42
    1006:	50 e4       	ldi	r21, 0x40	; 64
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	f8 01       	movw	r30, r16
    1012:	80 83       	st	Z, r24
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	a2 83       	std	Z+2, r26	; 0x02
    1018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101a:	fe 01       	movw	r30, r28
    101c:	e1 5b       	subi	r30, 0xB1	; 177
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e8       	ldi	r20, 0x80	; 128
    102e:	5f e3       	ldi	r21, 0x3F	; 63
    1030:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1034:	88 23       	and	r24, r24
    1036:	34 f4       	brge	.+12     	; 0x1044 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    1038:	fe 01       	movw	r30, r28
    103a:	e2 5b       	subi	r30, 0xB2	; 178
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 83       	st	Z, r24
    1042:	e0 c0       	rjmp	.+448    	; 0x1204 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    1044:	fe 01       	movw	r30, r28
    1046:	e1 5b       	subi	r30, 0xB1	; 177
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	53 e4       	ldi	r21, 0x43	; 67
    105a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <HLCD_voidInit+0x3c6>
    1062:	c0 c0       	rjmp	.+384    	; 0x11e4 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1064:	fe 01       	movw	r30, r28
    1066:	ed 5a       	subi	r30, 0xAD	; 173
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	fe 01       	movw	r30, r28
    1084:	e6 5b       	subi	r30, 0xB6	; 182
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 83       	st	Z, r24
    108a:	91 83       	std	Z+1, r25	; 0x01
    108c:	a2 83       	std	Z+2, r26	; 0x02
    108e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1090:	8e 01       	movw	r16, r28
    1092:	0a 5b       	subi	r16, 0xBA	; 186
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	fe 01       	movw	r30, r28
    1098:	e6 5b       	subi	r30, 0xB6	; 182
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	4a ef       	ldi	r20, 0xFA	; 250
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 83       	st	Z, r24
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	a2 83       	std	Z+2, r26	; 0x02
    10bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10be:	fe 01       	movw	r30, r28
    10c0:	ea 5b       	subi	r30, 0xBA	; 186
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	60 81       	ld	r22, Z
    10c6:	71 81       	ldd	r23, Z+1	; 0x01
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	93 81       	ldd	r25, Z+3	; 0x03
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	44 f4       	brge	.+16     	; 0x10ec <HLCD_voidInit+0x44e>
		__ticks = 1;
    10dc:	fe 01       	movw	r30, r28
    10de:	ec 5b       	subi	r30, 0xBC	; 188
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
    10ea:	64 c0       	rjmp	.+200    	; 0x11b4 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    10ec:	fe 01       	movw	r30, r28
    10ee:	ea 5b       	subi	r30, 0xBA	; 186
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	60 81       	ld	r22, Z
    10f4:	71 81       	ldd	r23, Z+1	; 0x01
    10f6:	82 81       	ldd	r24, Z+2	; 0x02
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	0c f0       	brlt	.+2      	; 0x110c <HLCD_voidInit+0x46e>
    110a:	43 c0       	rjmp	.+134    	; 0x1192 <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	fe 01       	movw	r30, r28
    110e:	e6 5b       	subi	r30, 0xB6	; 182
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	8e 01       	movw	r16, r28
    112c:	0c 5b       	subi	r16, 0xBC	; 188
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	f8 01       	movw	r30, r16
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
    1142:	1f c0       	rjmp	.+62     	; 0x1182 <HLCD_voidInit+0x4e4>
    1144:	fe 01       	movw	r30, r28
    1146:	ee 5b       	subi	r30, 0xBE	; 190
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	88 ec       	ldi	r24, 0xC8	; 200
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24
    1152:	fe 01       	movw	r30, r28
    1154:	ee 5b       	subi	r30, 0xBE	; 190
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <HLCD_voidInit+0x4be>
    1160:	fe 01       	movw	r30, r28
    1162:	ee 5b       	subi	r30, 0xBE	; 190
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	de 01       	movw	r26, r28
    116c:	ac 5b       	subi	r26, 0xBC	; 188
    116e:	bf 4f       	sbci	r27, 0xFF	; 255
    1170:	fe 01       	movw	r30, r28
    1172:	ec 5b       	subi	r30, 0xBC	; 188
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	11 96       	adiw	r26, 0x01	; 1
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1182:	fe 01       	movw	r30, r28
    1184:	ec 5b       	subi	r30, 0xBC	; 188
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	80 81       	ld	r24, Z
    118a:	91 81       	ldd	r25, Z+1	; 0x01
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	d1 f6       	brne	.-76     	; 0x1144 <HLCD_voidInit+0x4a6>
    1190:	42 c0       	rjmp	.+132    	; 0x1216 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	8e 01       	movw	r16, r28
    1194:	0c 5b       	subi	r16, 0xBC	; 188
    1196:	1f 4f       	sbci	r17, 0xFF	; 255
    1198:	fe 01       	movw	r30, r28
    119a:	ea 5b       	subi	r30, 0xBA	; 186
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	60 81       	ld	r22, Z
    11a0:	71 81       	ldd	r23, Z+1	; 0x01
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	f8 01       	movw	r30, r16
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
    11b4:	de 01       	movw	r26, r28
    11b6:	a0 5c       	subi	r26, 0xC0	; 192
    11b8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ba:	fe 01       	movw	r30, r28
    11bc:	ec 5b       	subi	r30, 0xBC	; 188
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	9c 93       	st	X, r25
    11c8:	8e 93       	st	-X, r24
    11ca:	fe 01       	movw	r30, r28
    11cc:	e0 5c       	subi	r30, 0xC0	; 192
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <HLCD_voidInit+0x536>
    11d8:	fe 01       	movw	r30, r28
    11da:	e0 5c       	subi	r30, 0xC0	; 192
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	80 83       	st	Z, r24
    11e2:	19 c0       	rjmp	.+50     	; 0x1216 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11e4:	8e 01       	movw	r16, r28
    11e6:	02 5b       	subi	r16, 0xB2	; 178
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	fe 01       	movw	r30, r28
    11ec:	e1 5b       	subi	r30, 0xB1	; 177
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	f8 01       	movw	r30, r16
    1202:	80 83       	st	Z, r24
    1204:	fe 01       	movw	r30, r28
    1206:	e2 5b       	subi	r30, 0xB2	; 178
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 81       	ld	r24, Z
    120c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    120e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1210:	8a 95       	dec	r24
    1212:	f1 f7       	brne	.-4      	; 0x1210 <HLCD_voidInit+0x572>
    1214:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    1216:	88 e2       	ldi	r24, 0x28	; 40
    1218:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a8 ec       	ldi	r26, 0xC8	; 200
    1222:	b2 e4       	ldi	r27, 0x42	; 66
    1224:	8b af       	std	Y+59, r24	; 0x3b
    1226:	9c af       	std	Y+60, r25	; 0x3c
    1228:	ad af       	std	Y+61, r26	; 0x3d
    122a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    122c:	6b ad       	ldd	r22, Y+59	; 0x3b
    122e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1230:	8d ad       	ldd	r24, Y+61	; 0x3d
    1232:	9e ad       	ldd	r25, Y+62	; 0x3e
    1234:	2b ea       	ldi	r18, 0xAB	; 171
    1236:	3a ea       	ldi	r19, 0xAA	; 170
    1238:	4a e2       	ldi	r20, 0x2A	; 42
    123a:	50 e4       	ldi	r21, 0x40	; 64
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f ab       	std	Y+55, r24	; 0x37
    1246:	98 af       	std	Y+56, r25	; 0x38
    1248:	a9 af       	std	Y+57, r26	; 0x39
    124a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    124c:	6f a9       	ldd	r22, Y+55	; 0x37
    124e:	78 ad       	ldd	r23, Y+56	; 0x38
    1250:	89 ad       	ldd	r24, Y+57	; 0x39
    1252:	9a ad       	ldd	r25, Y+58	; 0x3a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	1c f4       	brge	.+6      	; 0x126a <HLCD_voidInit+0x5cc>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	8e ab       	std	Y+54, r24	; 0x36
    1268:	91 c0       	rjmp	.+290    	; 0x138c <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    126a:	6f a9       	ldd	r22, Y+55	; 0x37
    126c:	78 ad       	ldd	r23, Y+56	; 0x38
    126e:	89 ad       	ldd	r24, Y+57	; 0x39
    1270:	9a ad       	ldd	r25, Y+58	; 0x3a
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	53 e4       	ldi	r21, 0x43	; 67
    127a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	0c f0       	brlt	.+2      	; 0x1284 <HLCD_voidInit+0x5e6>
    1282:	7b c0       	rjmp	.+246    	; 0x137a <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    1284:	6b ad       	ldd	r22, Y+59	; 0x3b
    1286:	7c ad       	ldd	r23, Y+60	; 0x3c
    1288:	8d ad       	ldd	r24, Y+61	; 0x3d
    128a:	9e ad       	ldd	r25, Y+62	; 0x3e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8a ab       	std	Y+50, r24	; 0x32
    129e:	9b ab       	std	Y+51, r25	; 0x33
    12a0:	ac ab       	std	Y+52, r26	; 0x34
    12a2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6a a9       	ldd	r22, Y+50	; 0x32
    12a6:	7b a9       	ldd	r23, Y+51	; 0x33
    12a8:	8c a9       	ldd	r24, Y+52	; 0x34
    12aa:	9d a9       	ldd	r25, Y+53	; 0x35
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8e a7       	std	Y+46, r24	; 0x2e
    12be:	9f a7       	std	Y+47, r25	; 0x2f
    12c0:	a8 ab       	std	Y+48, r26	; 0x30
    12c2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    12c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    12c6:	7f a5       	ldd	r23, Y+47	; 0x2f
    12c8:	88 a9       	ldd	r24, Y+48	; 0x30
    12ca:	99 a9       	ldd	r25, Y+49	; 0x31
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <HLCD_voidInit+0x648>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9d a7       	std	Y+45, r25	; 0x2d
    12e2:	8c a7       	std	Y+44, r24	; 0x2c
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    12e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    12e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    12ea:	88 a9       	ldd	r24, Y+48	; 0x30
    12ec:	99 a9       	ldd	r25, Y+49	; 0x31
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6a a9       	ldd	r22, Y+50	; 0x32
    1300:	7b a9       	ldd	r23, Y+51	; 0x33
    1302:	8c a9       	ldd	r24, Y+52	; 0x34
    1304:	9d a9       	ldd	r25, Y+53	; 0x35
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9d a7       	std	Y+45, r25	; 0x2d
    1324:	8c a7       	std	Y+44, r24	; 0x2c
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <HLCD_voidInit+0x6a8>
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9b a7       	std	Y+43, r25	; 0x2b
    132e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1330:	8a a5       	ldd	r24, Y+42	; 0x2a
    1332:	9b a5       	ldd	r25, Y+43	; 0x2b
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <HLCD_voidInit+0x696>
    1338:	9b a7       	std	Y+43, r25	; 0x2b
    133a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	8c a5       	ldd	r24, Y+44	; 0x2c
    133e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9d a7       	std	Y+45, r25	; 0x2d
    1344:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	8c a5       	ldd	r24, Y+44	; 0x2c
    1348:	9d a5       	ldd	r25, Y+45	; 0x2d
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <HLCD_voidInit+0x68a>
    134e:	24 c0       	rjmp	.+72     	; 0x1398 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6e a5       	ldd	r22, Y+46	; 0x2e
    1352:	7f a5       	ldd	r23, Y+47	; 0x2f
    1354:	88 a9       	ldd	r24, Y+48	; 0x30
    1356:	99 a9       	ldd	r25, Y+49	; 0x31
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9d a7       	std	Y+45, r25	; 0x2d
    1362:	8c a7       	std	Y+44, r24	; 0x2c
    1364:	8c a5       	ldd	r24, Y+44	; 0x2c
    1366:	9d a5       	ldd	r25, Y+45	; 0x2d
    1368:	99 a7       	std	Y+41, r25	; 0x29
    136a:	88 a7       	std	Y+40, r24	; 0x28
    136c:	88 a5       	ldd	r24, Y+40	; 0x28
    136e:	99 a5       	ldd	r25, Y+41	; 0x29
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <HLCD_voidInit+0x6d2>
    1374:	99 a7       	std	Y+41, r25	; 0x29
    1376:	88 a7       	std	Y+40, r24	; 0x28
    1378:	0f c0       	rjmp	.+30     	; 0x1398 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    137a:	6f a9       	ldd	r22, Y+55	; 0x37
    137c:	78 ad       	ldd	r23, Y+56	; 0x38
    137e:	89 ad       	ldd	r24, Y+57	; 0x39
    1380:	9a ad       	ldd	r25, Y+58	; 0x3a
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	8e ab       	std	Y+54, r24	; 0x36
    138c:	8e a9       	ldd	r24, Y+54	; 0x36
    138e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1390:	8f a1       	ldd	r24, Y+39	; 0x27
    1392:	8a 95       	dec	r24
    1394:	f1 f7       	brne	.-4      	; 0x1392 <HLCD_voidInit+0x6f4>
    1396:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    1398:	8c e0       	ldi	r24, 0x0C	; 12
    139a:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a8 e4       	ldi	r26, 0x48	; 72
    13a4:	b3 e4       	ldi	r27, 0x43	; 67
    13a6:	8b a3       	std	Y+35, r24	; 0x23
    13a8:	9c a3       	std	Y+36, r25	; 0x24
    13aa:	ad a3       	std	Y+37, r26	; 0x25
    13ac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13ae:	6b a1       	ldd	r22, Y+35	; 0x23
    13b0:	7c a1       	ldd	r23, Y+36	; 0x24
    13b2:	8d a1       	ldd	r24, Y+37	; 0x25
    13b4:	9e a1       	ldd	r25, Y+38	; 0x26
    13b6:	2b ea       	ldi	r18, 0xAB	; 171
    13b8:	3a ea       	ldi	r19, 0xAA	; 170
    13ba:	4a e2       	ldi	r20, 0x2A	; 42
    13bc:	50 e4       	ldi	r21, 0x40	; 64
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	8f 8f       	std	Y+31, r24	; 0x1f
    13c8:	98 a3       	std	Y+32, r25	; 0x20
    13ca:	a9 a3       	std	Y+33, r26	; 0x21
    13cc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13d0:	78 a1       	ldd	r23, Y+32	; 0x20
    13d2:	89 a1       	ldd	r24, Y+33	; 0x21
    13d4:	9a a1       	ldd	r25, Y+34	; 0x22
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e8       	ldi	r20, 0x80	; 128
    13dc:	5f e3       	ldi	r21, 0x3F	; 63
    13de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13e2:	88 23       	and	r24, r24
    13e4:	1c f4       	brge	.+6      	; 0x13ec <HLCD_voidInit+0x74e>
		__ticks = 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	8e 8f       	std	Y+30, r24	; 0x1e
    13ea:	91 c0       	rjmp	.+290    	; 0x150e <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    13ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13ee:	78 a1       	ldd	r23, Y+32	; 0x20
    13f0:	89 a1       	ldd	r24, Y+33	; 0x21
    13f2:	9a a1       	ldd	r25, Y+34	; 0x22
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	53 e4       	ldi	r21, 0x43	; 67
    13fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	0c f0       	brlt	.+2      	; 0x1406 <HLCD_voidInit+0x768>
    1404:	7b c0       	rjmp	.+246    	; 0x14fc <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    1406:	6b a1       	ldd	r22, Y+35	; 0x23
    1408:	7c a1       	ldd	r23, Y+36	; 0x24
    140a:	8d a1       	ldd	r24, Y+37	; 0x25
    140c:	9e a1       	ldd	r25, Y+38	; 0x26
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	4a e7       	ldi	r20, 0x7A	; 122
    1414:	54 e4       	ldi	r21, 0x44	; 68
    1416:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8a 8f       	std	Y+26, r24	; 0x1a
    1420:	9b 8f       	std	Y+27, r25	; 0x1b
    1422:	ac 8f       	std	Y+28, r26	; 0x1c
    1424:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1426:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1428:	7b 8d       	ldd	r23, Y+27	; 0x1b
    142a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    142c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a ef       	ldi	r20, 0xFA	; 250
    1434:	54 e4       	ldi	r21, 0x44	; 68
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8e 8b       	std	Y+22, r24	; 0x16
    1440:	9f 8b       	std	Y+23, r25	; 0x17
    1442:	a8 8f       	std	Y+24, r26	; 0x18
    1444:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1446:	6e 89       	ldd	r22, Y+22	; 0x16
    1448:	7f 89       	ldd	r23, Y+23	; 0x17
    144a:	88 8d       	ldd	r24, Y+24	; 0x18
    144c:	99 8d       	ldd	r25, Y+25	; 0x19
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e8       	ldi	r20, 0x80	; 128
    1454:	5f e3       	ldi	r21, 0x3F	; 63
    1456:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145a:	88 23       	and	r24, r24
    145c:	2c f4       	brge	.+10     	; 0x1468 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9d 8b       	std	Y+21, r25	; 0x15
    1464:	8c 8b       	std	Y+20, r24	; 0x14
    1466:	3f c0       	rjmp	.+126    	; 0x14e6 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    1468:	6e 89       	ldd	r22, Y+22	; 0x16
    146a:	7f 89       	ldd	r23, Y+23	; 0x17
    146c:	88 8d       	ldd	r24, Y+24	; 0x18
    146e:	99 8d       	ldd	r25, Y+25	; 0x19
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147c:	18 16       	cp	r1, r24
    147e:	4c f5       	brge	.+82     	; 0x14d2 <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1480:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1482:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1484:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1486:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e2       	ldi	r20, 0x20	; 32
    148e:	51 e4       	ldi	r21, 0x41	; 65
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9d 8b       	std	Y+21, r25	; 0x15
    14a6:	8c 8b       	std	Y+20, r24	; 0x14
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <HLCD_voidInit+0x82a>
    14aa:	88 ec       	ldi	r24, 0xC8	; 200
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9b 8b       	std	Y+19, r25	; 0x13
    14b0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b2:	8a 89       	ldd	r24, Y+18	; 0x12
    14b4:	9b 89       	ldd	r25, Y+19	; 0x13
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <HLCD_voidInit+0x818>
    14ba:	9b 8b       	std	Y+19, r25	; 0x13
    14bc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14be:	8c 89       	ldd	r24, Y+20	; 0x14
    14c0:	9d 89       	ldd	r25, Y+21	; 0x15
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	9d 8b       	std	Y+21, r25	; 0x15
    14c6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c8:	8c 89       	ldd	r24, Y+20	; 0x14
    14ca:	9d 89       	ldd	r25, Y+21	; 0x15
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	69 f7       	brne	.-38     	; 0x14aa <HLCD_voidInit+0x80c>
    14d0:	24 c0       	rjmp	.+72     	; 0x151a <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d2:	6e 89       	ldd	r22, Y+22	; 0x16
    14d4:	7f 89       	ldd	r23, Y+23	; 0x17
    14d6:	88 8d       	ldd	r24, Y+24	; 0x18
    14d8:	99 8d       	ldd	r25, Y+25	; 0x19
    14da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	9d 8b       	std	Y+21, r25	; 0x15
    14e4:	8c 8b       	std	Y+20, r24	; 0x14
    14e6:	8c 89       	ldd	r24, Y+20	; 0x14
    14e8:	9d 89       	ldd	r25, Y+21	; 0x15
    14ea:	99 8b       	std	Y+17, r25	; 0x11
    14ec:	88 8b       	std	Y+16, r24	; 0x10
    14ee:	88 89       	ldd	r24, Y+16	; 0x10
    14f0:	99 89       	ldd	r25, Y+17	; 0x11
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <HLCD_voidInit+0x854>
    14f6:	99 8b       	std	Y+17, r25	; 0x11
    14f8:	88 8b       	std	Y+16, r24	; 0x10
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14fe:	78 a1       	ldd	r23, Y+32	; 0x20
    1500:	89 a1       	ldd	r24, Y+33	; 0x21
    1502:	9a a1       	ldd	r25, Y+34	; 0x22
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8e 8f       	std	Y+30, r24	; 0x1e
    150e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1510:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1512:	8f 85       	ldd	r24, Y+15	; 0x0f
    1514:	8a 95       	dec	r24
    1516:	f1 f7       	brne	.-4      	; 0x1514 <HLCD_voidInit+0x876>
    1518:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    151a:	86 e0       	ldi	r24, 0x06	; 6
    151c:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    1520:	8f e0       	ldi	r24, 0x0F	; 15
    1522:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a0 e0       	ldi	r26, 0x00	; 0
    1532:	b0 e4       	ldi	r27, 0x40	; 64
    1534:	8b 87       	std	Y+11, r24	; 0x0b
    1536:	9c 87       	std	Y+12, r25	; 0x0c
    1538:	ad 87       	std	Y+13, r26	; 0x0d
    153a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153c:	6b 85       	ldd	r22, Y+11	; 0x0b
    153e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1540:	8d 85       	ldd	r24, Y+13	; 0x0d
    1542:	9e 85       	ldd	r25, Y+14	; 0x0e
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a ef       	ldi	r20, 0xFA	; 250
    154a:	54 e4       	ldi	r21, 0x44	; 68
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	8f 83       	std	Y+7, r24	; 0x07
    1556:	98 87       	std	Y+8, r25	; 0x08
    1558:	a9 87       	std	Y+9, r26	; 0x09
    155a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	5f e3       	ldi	r21, 0x3F	; 63
    156c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1570:	88 23       	and	r24, r24
    1572:	2c f4       	brge	.+10     	; 0x157e <HLCD_voidInit+0x8e0>
		__ticks = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	3f c0       	rjmp	.+126    	; 0x15fc <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	3f ef       	ldi	r19, 0xFF	; 255
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	57 e4       	ldi	r21, 0x47	; 71
    158e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	4c f5       	brge	.+82     	; 0x15e8 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1596:	6b 85       	ldd	r22, Y+11	; 0x0b
    1598:	7c 85       	ldd	r23, Y+12	; 0x0c
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	9e 85       	ldd	r25, Y+14	; 0x0e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e2       	ldi	r20, 0x20	; 32
    15a4:	51 e4       	ldi	r21, 0x41	; 65
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	bc 01       	movw	r22, r24
    15b0:	cd 01       	movw	r24, r26
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	0f c0       	rjmp	.+30     	; 0x15de <HLCD_voidInit+0x940>
    15c0:	88 ec       	ldi	r24, 0xC8	; 200
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 83       	std	Y+4, r25	; 0x04
    15c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <HLCD_voidInit+0x92e>
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	00 97       	sbiw	r24, 0x00	; 0
    15e4:	69 f7       	brne	.-38     	; 0x15c0 <HLCD_voidInit+0x922>
    15e6:	14 c0       	rjmp	.+40     	; 0x1610 <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ea:	78 85       	ldd	r23, Y+8	; 0x08
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	9a 83       	std	Y+2, r25	; 0x02
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <HLCD_voidInit+0x96a>
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    1610:	ce 58       	subi	r28, 0x8E	; 142
    1612:	df 4f       	sbci	r29, 0xFF	; 255
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	c1 56       	subi	r28, 0x61	; 97
    1636:	d0 40       	sbci	r29, 0x00	; 0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	fe 01       	movw	r30, r28
    1644:	ef 59       	subi	r30, 0x9F	; 159
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	62 e0       	ldi	r22, 0x02	; 2
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    1668:	fe 01       	movw	r30, r28
    166a:	ef 59       	subi	r30, 0x9F	; 159
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	82 95       	swap	r24
    1672:	8f 70       	andi	r24, 0x0F	; 15
    1674:	81 70       	andi	r24, 0x01	; 1
    1676:	98 2f       	mov	r25, r24
    1678:	9f 5f       	subi	r25, 0xFF	; 255
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	64 e0       	ldi	r22, 0x04	; 4
    167e:	49 2f       	mov	r20, r25
    1680:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    1684:	fe 01       	movw	r30, r28
    1686:	ef 59       	subi	r30, 0x9F	; 159
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 81       	ld	r24, Z
    168c:	82 95       	swap	r24
    168e:	86 95       	lsr	r24
    1690:	87 70       	andi	r24, 0x07	; 7
    1692:	81 70       	andi	r24, 0x01	; 1
    1694:	98 2f       	mov	r25, r24
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	65 e0       	ldi	r22, 0x05	; 5
    169c:	49 2f       	mov	r20, r25
    169e:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    16a2:	fe 01       	movw	r30, r28
    16a4:	ef 59       	subi	r30, 0x9F	; 159
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	82 95       	swap	r24
    16ac:	86 95       	lsr	r24
    16ae:	86 95       	lsr	r24
    16b0:	83 70       	andi	r24, 0x03	; 3
    16b2:	81 70       	andi	r24, 0x01	; 1
    16b4:	98 2f       	mov	r25, r24
    16b6:	9f 5f       	subi	r25, 0xFF	; 255
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	66 e0       	ldi	r22, 0x06	; 6
    16bc:	49 2f       	mov	r20, r25
    16be:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    16c2:	fe 01       	movw	r30, r28
    16c4:	ef 59       	subi	r30, 0x9F	; 159
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	88 1f       	adc	r24, r24
    16cc:	88 27       	eor	r24, r24
    16ce:	88 1f       	adc	r24, r24
    16d0:	98 2f       	mov	r25, r24
    16d2:	9f 5f       	subi	r25, 0xFF	; 255
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	67 e0       	ldi	r22, 0x07	; 7
    16d8:	49 2f       	mov	r20, r25
    16da:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e3 5a       	subi	r30, 0xA3	; 163
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e2       	ldi	r26, 0x20	; 32
    16f4:	b1 e4       	ldi	r27, 0x41	; 65
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16fe:	8e 01       	movw	r16, r28
    1700:	07 5a       	subi	r16, 0xA7	; 167
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e3 5a       	subi	r30, 0xA3	; 163
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	2b ea       	ldi	r18, 0xAB	; 171
    1714:	3a ea       	ldi	r19, 0xAA	; 170
    1716:	4a e2       	ldi	r20, 0x2A	; 42
    1718:	50 e4       	ldi	r21, 0x40	; 64
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172c:	fe 01       	movw	r30, r28
    172e:	e7 5a       	subi	r30, 0xA7	; 167
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	34 f4       	brge	.+12     	; 0x1756 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    174a:	fe 01       	movw	r30, r28
    174c:	e8 5a       	subi	r30, 0xA8	; 168
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	80 83       	st	Z, r24
    1754:	e0 c0       	rjmp	.+448    	; 0x1916 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    1756:	fe 01       	movw	r30, r28
    1758:	e7 5a       	subi	r30, 0xA7	; 167
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	53 e4       	ldi	r21, 0x43	; 67
    176c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	0c f0       	brlt	.+2      	; 0x1776 <HLCD_voidSendCmd+0x14e>
    1774:	c0 c0       	rjmp	.+384    	; 0x18f6 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1776:	fe 01       	movw	r30, r28
    1778:	e3 5a       	subi	r30, 0xA3	; 163
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a e7       	ldi	r20, 0x7A	; 122
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	fe 01       	movw	r30, r28
    1796:	ec 5a       	subi	r30, 0xAC	; 172
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 83       	st	Z, r24
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	a2 83       	std	Z+2, r26	; 0x02
    17a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	8e 01       	movw	r16, r28
    17a4:	00 5b       	subi	r16, 0xB0	; 176
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	ec 5a       	subi	r30, 0xAC	; 172
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a ef       	ldi	r20, 0xFA	; 250
    17bc:	54 e4       	ldi	r21, 0x44	; 68
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d0:	fe 01       	movw	r30, r28
    17d2:	e0 5b       	subi	r30, 0xB0	; 176
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	44 f4       	brge	.+16     	; 0x17fe <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    17ee:	fe 01       	movw	r30, r28
    17f0:	e2 5b       	subi	r30, 0xB2	; 178
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
    17fc:	64 c0       	rjmp	.+200    	; 0x18c6 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    17fe:	fe 01       	movw	r30, r28
    1800:	e0 5b       	subi	r30, 0xB0	; 176
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	0c f0       	brlt	.+2      	; 0x181e <HLCD_voidSendCmd+0x1f6>
    181c:	43 c0       	rjmp	.+134    	; 0x18a4 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	fe 01       	movw	r30, r28
    1820:	ec 5a       	subi	r30, 0xAC	; 172
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8e 01       	movw	r16, r28
    183e:	02 5b       	subi	r16, 0xB2	; 178
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	1f c0       	rjmp	.+62     	; 0x1894 <HLCD_voidSendCmd+0x26c>
    1856:	fe 01       	movw	r30, r28
    1858:	e4 5b       	subi	r30, 0xB4	; 180
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	88 ec       	ldi	r24, 0xC8	; 200
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	fe 01       	movw	r30, r28
    1866:	e4 5b       	subi	r30, 0xB4	; 180
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <HLCD_voidSendCmd+0x246>
    1872:	fe 01       	movw	r30, r28
    1874:	e4 5b       	subi	r30, 0xB4	; 180
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	de 01       	movw	r26, r28
    187e:	a2 5b       	subi	r26, 0xB2	; 178
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e2 5b       	subi	r30, 0xB2	; 178
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1894:	fe 01       	movw	r30, r28
    1896:	e2 5b       	subi	r30, 0xB2	; 178
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	d1 f6       	brne	.-76     	; 0x1856 <HLCD_voidSendCmd+0x22e>
    18a2:	4b c0       	rjmp	.+150    	; 0x193a <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	8e 01       	movw	r16, r28
    18a6:	02 5b       	subi	r16, 0xB2	; 178
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	e0 5b       	subi	r30, 0xB0	; 176
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
    18c6:	de 01       	movw	r26, r28
    18c8:	a6 5b       	subi	r26, 0xB6	; 182
    18ca:	bf 4f       	sbci	r27, 0xFF	; 255
    18cc:	fe 01       	movw	r30, r28
    18ce:	e2 5b       	subi	r30, 0xB2	; 178
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	9c 93       	st	X, r25
    18da:	8e 93       	st	-X, r24
    18dc:	fe 01       	movw	r30, r28
    18de:	e6 5b       	subi	r30, 0xB6	; 182
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <HLCD_voidSendCmd+0x2be>
    18ea:	fe 01       	movw	r30, r28
    18ec:	e6 5b       	subi	r30, 0xB6	; 182
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	22 c0       	rjmp	.+68     	; 0x193a <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18f6:	8e 01       	movw	r16, r28
    18f8:	08 5a       	subi	r16, 0xA8	; 168
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e7 5a       	subi	r30, 0xA7	; 167
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	de 01       	movw	r26, r28
    1918:	a7 5b       	subi	r26, 0xB7	; 183
    191a:	bf 4f       	sbci	r27, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	e8 5a       	subi	r30, 0xA8	; 168
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1926:	fe 01       	movw	r30, r28
    1928:	e7 5b       	subi	r30, 0xB7	; 183
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	8a 95       	dec	r24
    1930:	f1 f7       	brne	.-4      	; 0x192e <HLCD_voidSendCmd+0x306>
    1932:	fe 01       	movw	r30, r28
    1934:	e7 5b       	subi	r30, 0xB7	; 183
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	62 e0       	ldi	r22, 0x02	; 2
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    1944:	fe 01       	movw	r30, r28
    1946:	eb 5b       	subi	r30, 0xBB	; 187
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a8 ec       	ldi	r26, 0xC8	; 200
    1950:	b2 e4       	ldi	r27, 0x42	; 66
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	a2 83       	std	Z+2, r26	; 0x02
    1958:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    195a:	8e 01       	movw	r16, r28
    195c:	0f 5b       	subi	r16, 0xBF	; 191
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	fe 01       	movw	r30, r28
    1962:	eb 5b       	subi	r30, 0xBB	; 187
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	2b ea       	ldi	r18, 0xAB	; 171
    1970:	3a ea       	ldi	r19, 0xAA	; 170
    1972:	4a e2       	ldi	r20, 0x2A	; 42
    1974:	50 e4       	ldi	r21, 0x40	; 64
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	f8 01       	movw	r30, r16
    1980:	80 83       	st	Z, r24
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	a2 83       	std	Z+2, r26	; 0x02
    1986:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1988:	fe 01       	movw	r30, r28
    198a:	ef 5b       	subi	r30, 0xBF	; 191
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	60 81       	ld	r22, Z
    1990:	71 81       	ldd	r23, Z+1	; 0x01
    1992:	82 81       	ldd	r24, Z+2	; 0x02
    1994:	93 81       	ldd	r25, Z+3	; 0x03
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	34 f4       	brge	.+12     	; 0x19b2 <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	fe 01       	movw	r30, r28
    19aa:	e0 5c       	subi	r30, 0xC0	; 192
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 83       	st	Z, r24
    19b0:	9d c0       	rjmp	.+314    	; 0x1aec <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    19b2:	fe 01       	movw	r30, r28
    19b4:	ef 5b       	subi	r30, 0xBF	; 191
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	53 e4       	ldi	r21, 0x43	; 67
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <HLCD_voidSendCmd+0x3aa>
    19d0:	7e c0       	rjmp	.+252    	; 0x1ace <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    19d2:	fe 01       	movw	r30, r28
    19d4:	eb 5b       	subi	r30, 0xBB	; 187
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	82 81       	ldd	r24, Z+2	; 0x02
    19de:	93 81       	ldd	r25, Z+3	; 0x03
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a e7       	ldi	r20, 0x7A	; 122
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8c af       	std	Y+60, r24	; 0x3c
    19f2:	9d af       	std	Y+61, r25	; 0x3d
    19f4:	ae af       	std	Y+62, r26	; 0x3e
    19f6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    19fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    19fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    19fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a ef       	ldi	r20, 0xFA	; 250
    1a06:	54 e4       	ldi	r21, 0x44	; 68
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	88 af       	std	Y+56, r24	; 0x38
    1a12:	99 af       	std	Y+57, r25	; 0x39
    1a14:	aa af       	std	Y+58, r26	; 0x3a
    1a16:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1a18:	68 ad       	ldd	r22, Y+56	; 0x38
    1a1a:	79 ad       	ldd	r23, Y+57	; 0x39
    1a1c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a1e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	2c f4       	brge	.+10     	; 0x1a3a <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9f ab       	std	Y+55, r25	; 0x37
    1a36:	8e ab       	std	Y+54, r24	; 0x36
    1a38:	3f c0       	rjmp	.+126    	; 0x1ab8 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1a3a:	68 ad       	ldd	r22, Y+56	; 0x38
    1a3c:	79 ad       	ldd	r23, Y+57	; 0x39
    1a3e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a40:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	3f ef       	ldi	r19, 0xFF	; 255
    1a46:	4f e7       	ldi	r20, 0x7F	; 127
    1a48:	57 e4       	ldi	r21, 0x47	; 71
    1a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a4e:	18 16       	cp	r1, r24
    1a50:	4c f5       	brge	.+82     	; 0x1aa4 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a54:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a56:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a58:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e2       	ldi	r20, 0x20	; 32
    1a60:	51 e4       	ldi	r21, 0x41	; 65
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9f ab       	std	Y+55, r25	; 0x37
    1a78:	8e ab       	std	Y+54, r24	; 0x36
    1a7a:	0f c0       	rjmp	.+30     	; 0x1a9a <HLCD_voidSendCmd+0x472>
    1a7c:	88 ec       	ldi	r24, 0xC8	; 200
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9d ab       	std	Y+53, r25	; 0x35
    1a82:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a84:	8c a9       	ldd	r24, Y+52	; 0x34
    1a86:	9d a9       	ldd	r25, Y+53	; 0x35
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <HLCD_voidSendCmd+0x460>
    1a8c:	9d ab       	std	Y+53, r25	; 0x35
    1a8e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a90:	8e a9       	ldd	r24, Y+54	; 0x36
    1a92:	9f a9       	ldd	r25, Y+55	; 0x37
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	9f ab       	std	Y+55, r25	; 0x37
    1a98:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9a:	8e a9       	ldd	r24, Y+54	; 0x36
    1a9c:	9f a9       	ldd	r25, Y+55	; 0x37
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	69 f7       	brne	.-38     	; 0x1a7c <HLCD_voidSendCmd+0x454>
    1aa2:	2d c0       	rjmp	.+90     	; 0x1afe <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	68 ad       	ldd	r22, Y+56	; 0x38
    1aa6:	79 ad       	ldd	r23, Y+57	; 0x39
    1aa8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aaa:	9b ad       	ldd	r25, Y+59	; 0x3b
    1aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	9f ab       	std	Y+55, r25	; 0x37
    1ab6:	8e ab       	std	Y+54, r24	; 0x36
    1ab8:	8e a9       	ldd	r24, Y+54	; 0x36
    1aba:	9f a9       	ldd	r25, Y+55	; 0x37
    1abc:	9b ab       	std	Y+51, r25	; 0x33
    1abe:	8a ab       	std	Y+50, r24	; 0x32
    1ac0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ac2:	9b a9       	ldd	r25, Y+51	; 0x33
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <HLCD_voidSendCmd+0x49c>
    1ac8:	9b ab       	std	Y+51, r25	; 0x33
    1aca:	8a ab       	std	Y+50, r24	; 0x32
    1acc:	18 c0       	rjmp	.+48     	; 0x1afe <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ef 5b       	subi	r30, 0xBF	; 191
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e0 5c       	subi	r30, 0xC0	; 192
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 83       	st	Z, r24
    1aec:	fe 01       	movw	r30, r28
    1aee:	e0 5c       	subi	r30, 0xC0	; 192
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af6:	89 a9       	ldd	r24, Y+49	; 0x31
    1af8:	8a 95       	dec	r24
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <HLCD_voidSendCmd+0x4d0>
    1afc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1afe:	fe 01       	movw	r30, r28
    1b00:	ef 59       	subi	r30, 0x9F	; 159
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	98 2f       	mov	r25, r24
    1b0a:	9f 5f       	subi	r25, 0xFF	; 255
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	64 e0       	ldi	r22, 0x04	; 4
    1b10:	49 2f       	mov	r20, r25
    1b12:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1b16:	fe 01       	movw	r30, r28
    1b18:	ef 59       	subi	r30, 0x9F	; 159
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	86 95       	lsr	r24
    1b20:	81 70       	andi	r24, 0x01	; 1
    1b22:	98 2f       	mov	r25, r24
    1b24:	9f 5f       	subi	r25, 0xFF	; 255
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	49 2f       	mov	r20, r25
    1b2c:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1b30:	fe 01       	movw	r30, r28
    1b32:	ef 59       	subi	r30, 0x9F	; 159
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	86 95       	lsr	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	98 2f       	mov	r25, r24
    1b40:	9f 5f       	subi	r25, 0xFF	; 255
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	66 e0       	ldi	r22, 0x06	; 6
    1b46:	49 2f       	mov	r20, r25
    1b48:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ef 59       	subi	r30, 0x9F	; 159
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	86 95       	lsr	r24
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	9f 5f       	subi	r25, 0xFF	; 255
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	67 e0       	ldi	r22, 0x07	; 7
    1b64:	49 2f       	mov	r20, r25
    1b66:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	62 e0       	ldi	r22, 0x02	; 2
    1b6e:	42 e0       	ldi	r20, 0x02	; 2
    1b70:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e2       	ldi	r26, 0x20	; 32
    1b7a:	b1 e4       	ldi	r27, 0x41	; 65
    1b7c:	8d a7       	std	Y+45, r24	; 0x2d
    1b7e:	9e a7       	std	Y+46, r25	; 0x2e
    1b80:	af a7       	std	Y+47, r26	; 0x2f
    1b82:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b84:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b86:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b8c:	2b ea       	ldi	r18, 0xAB	; 171
    1b8e:	3a ea       	ldi	r19, 0xAA	; 170
    1b90:	4a e2       	ldi	r20, 0x2A	; 42
    1b92:	50 e4       	ldi	r21, 0x40	; 64
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	89 a7       	std	Y+41, r24	; 0x29
    1b9e:	9a a7       	std	Y+42, r25	; 0x2a
    1ba0:	ab a7       	std	Y+43, r26	; 0x2b
    1ba2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ba4:	69 a5       	ldd	r22, Y+41	; 0x29
    1ba6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ba8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1baa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	1c f4       	brge	.+6      	; 0x1bc2 <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	88 a7       	std	Y+40, r24	; 0x28
    1bc0:	91 c0       	rjmp	.+290    	; 0x1ce4 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1bc2:	69 a5       	ldd	r22, Y+41	; 0x29
    1bc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <HLCD_voidSendCmd+0x5b4>
    1bda:	7b c0       	rjmp	.+246    	; 0x1cd2 <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1bdc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bde:	7e a5       	ldd	r23, Y+46	; 0x2e
    1be0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be2:	98 a9       	ldd	r25, Y+48	; 0x30
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a e7       	ldi	r20, 0x7A	; 122
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	8c a3       	std	Y+36, r24	; 0x24
    1bf6:	9d a3       	std	Y+37, r25	; 0x25
    1bf8:	ae a3       	std	Y+38, r26	; 0x26
    1bfa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	6c a1       	ldd	r22, Y+36	; 0x24
    1bfe:	7d a1       	ldd	r23, Y+37	; 0x25
    1c00:	8e a1       	ldd	r24, Y+38	; 0x26
    1c02:	9f a1       	ldd	r25, Y+39	; 0x27
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4a ef       	ldi	r20, 0xFA	; 250
    1c0a:	54 e4       	ldi	r21, 0x44	; 68
    1c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	88 a3       	std	Y+32, r24	; 0x20
    1c16:	99 a3       	std	Y+33, r25	; 0x21
    1c18:	aa a3       	std	Y+34, r26	; 0x22
    1c1a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c1c:	68 a1       	ldd	r22, Y+32	; 0x20
    1c1e:	79 a1       	ldd	r23, Y+33	; 0x21
    1c20:	8a a1       	ldd	r24, Y+34	; 0x22
    1c22:	9b a1       	ldd	r25, Y+35	; 0x23
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9f 8f       	std	Y+31, r25	; 0x1f
    1c3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c3c:	3f c0       	rjmp	.+126    	; 0x1cbc <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1c3e:	68 a1       	ldd	r22, Y+32	; 0x20
    1c40:	79 a1       	ldd	r23, Y+33	; 0x21
    1c42:	8a a1       	ldd	r24, Y+34	; 0x22
    1c44:	9b a1       	ldd	r25, Y+35	; 0x23
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	4c f5       	brge	.+82     	; 0x1ca8 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c56:	6c a1       	ldd	r22, Y+36	; 0x24
    1c58:	7d a1       	ldd	r23, Y+37	; 0x25
    1c5a:	8e a1       	ldd	r24, Y+38	; 0x26
    1c5c:	9f a1       	ldd	r25, Y+39	; 0x27
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e2       	ldi	r20, 0x20	; 32
    1c64:	51 e4       	ldi	r21, 0x41	; 65
    1c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c7c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <HLCD_voidSendCmd+0x676>
    1c80:	88 ec       	ldi	r24, 0xC8	; 200
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9d 8f       	std	Y+29, r25	; 0x1d
    1c86:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c88:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <HLCD_voidSendCmd+0x664>
    1c90:	9d 8f       	std	Y+29, r25	; 0x1d
    1c92:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c96:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c9c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	69 f7       	brne	.-38     	; 0x1c80 <HLCD_voidSendCmd+0x658>
    1ca6:	24 c0       	rjmp	.+72     	; 0x1cf0 <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca8:	68 a1       	ldd	r22, Y+32	; 0x20
    1caa:	79 a1       	ldd	r23, Y+33	; 0x21
    1cac:	8a a1       	ldd	r24, Y+34	; 0x22
    1cae:	9b a1       	ldd	r25, Y+35	; 0x23
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9f 8f       	std	Y+31, r25	; 0x1f
    1cba:	8e 8f       	std	Y+30, r24	; 0x1e
    1cbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cc0:	9b 8f       	std	Y+27, r25	; 0x1b
    1cc2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cc6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <HLCD_voidSendCmd+0x6a0>
    1ccc:	9b 8f       	std	Y+27, r25	; 0x1b
    1cce:	8a 8f       	std	Y+26, r24	; 0x1a
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cd2:	69 a5       	ldd	r22, Y+41	; 0x29
    1cd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	88 a7       	std	Y+40, r24	; 0x28
    1ce4:	88 a5       	ldd	r24, Y+40	; 0x28
    1ce6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce8:	89 8d       	ldd	r24, Y+25	; 0x19
    1cea:	8a 95       	dec	r24
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <HLCD_voidSendCmd+0x6c2>
    1cee:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	62 e0       	ldi	r22, 0x02	; 2
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a8 ec       	ldi	r26, 0xC8	; 200
    1d00:	b2 e4       	ldi	r27, 0x42	; 66
    1d02:	8d 8b       	std	Y+21, r24	; 0x15
    1d04:	9e 8b       	std	Y+22, r25	; 0x16
    1d06:	af 8b       	std	Y+23, r26	; 0x17
    1d08:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d10:	98 8d       	ldd	r25, Y+24	; 0x18
    1d12:	2b ea       	ldi	r18, 0xAB	; 171
    1d14:	3a ea       	ldi	r19, 0xAA	; 170
    1d16:	4a e2       	ldi	r20, 0x2A	; 42
    1d18:	50 e4       	ldi	r21, 0x40	; 64
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	89 8b       	std	Y+17, r24	; 0x11
    1d24:	9a 8b       	std	Y+18, r25	; 0x12
    1d26:	ab 8b       	std	Y+19, r26	; 0x13
    1d28:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d2a:	69 89       	ldd	r22, Y+17	; 0x11
    1d2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5f e3       	ldi	r21, 0x3F	; 63
    1d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d3e:	88 23       	and	r24, r24
    1d40:	1c f4       	brge	.+6      	; 0x1d48 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	88 8b       	std	Y+16, r24	; 0x10
    1d46:	91 c0       	rjmp	.+290    	; 0x1e6a <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    1d48:	69 89       	ldd	r22, Y+17	; 0x11
    1d4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	53 e4       	ldi	r21, 0x43	; 67
    1d58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	0c f0       	brlt	.+2      	; 0x1d62 <HLCD_voidSendCmd+0x73a>
    1d60:	7b c0       	rjmp	.+246    	; 0x1e58 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    1d62:	6d 89       	ldd	r22, Y+21	; 0x15
    1d64:	7e 89       	ldd	r23, Y+22	; 0x16
    1d66:	8f 89       	ldd	r24, Y+23	; 0x17
    1d68:	98 8d       	ldd	r25, Y+24	; 0x18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	54 e4       	ldi	r21, 0x44	; 68
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	8c 87       	std	Y+12, r24	; 0x0c
    1d7c:	9d 87       	std	Y+13, r25	; 0x0d
    1d7e:	ae 87       	std	Y+14, r26	; 0x0e
    1d80:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	88 87       	std	Y+8, r24	; 0x08
    1d9c:	99 87       	std	Y+9, r25	; 0x09
    1d9e:	aa 87       	std	Y+10, r26	; 0x0a
    1da0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1da2:	68 85       	ldd	r22, Y+8	; 0x08
    1da4:	79 85       	ldd	r23, Y+9	; 0x09
    1da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9f 83       	std	Y+7, r25	; 0x07
    1dc0:	8e 83       	std	Y+6, r24	; 0x06
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    1dc4:	68 85       	ldd	r22, Y+8	; 0x08
    1dc6:	79 85       	ldd	r23, Y+9	; 0x09
    1dc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dde:	7d 85       	ldd	r23, Y+13	; 0x0d
    1de0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9f 83       	std	Y+7, r25	; 0x07
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <HLCD_voidSendCmd+0x7fc>
    1e06:	88 ec       	ldi	r24, 0xC8	; 200
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9d 83       	std	Y+5, r25	; 0x05
    1e0c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <HLCD_voidSendCmd+0x7ea>
    1e16:	9d 83       	std	Y+5, r25	; 0x05
    1e18:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9f 83       	std	Y+7, r25	; 0x07
    1e22:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8e 81       	ldd	r24, Y+6	; 0x06
    1e26:	9f 81       	ldd	r25, Y+7	; 0x07
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <HLCD_voidSendCmd+0x7de>
    1e2c:	24 c0       	rjmp	.+72     	; 0x1e76 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	68 85       	ldd	r22, Y+8	; 0x08
    1e30:	79 85       	ldd	r23, Y+9	; 0x09
    1e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9f 83       	std	Y+7, r25	; 0x07
    1e40:	8e 83       	std	Y+6, r24	; 0x06
    1e42:	8e 81       	ldd	r24, Y+6	; 0x06
    1e44:	9f 81       	ldd	r25, Y+7	; 0x07
    1e46:	9b 83       	std	Y+3, r25	; 0x03
    1e48:	8a 83       	std	Y+2, r24	; 0x02
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <HLCD_voidSendCmd+0x826>
    1e52:	9b 83       	std	Y+3, r25	; 0x03
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e58:	69 89       	ldd	r22, Y+17	; 0x11
    1e5a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	88 8b       	std	Y+16, r24	; 0x10
    1e6a:	88 89       	ldd	r24, Y+16	; 0x10
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	8a 95       	dec	r24
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <HLCD_voidSendCmd+0x848>
    1e74:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    1e76:	cf 59       	subi	r28, 0x9F	; 159
    1e78:	df 4f       	sbci	r29, 0xFF	; 255
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	08 95       	ret

00001e8e <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	c1 56       	subi	r28, 0x61	; 97
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ef 59       	subi	r30, 0x9F	; 159
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	42 e0       	ldi	r20, 0x02	; 2
    1eb6:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	62 e0       	ldi	r22, 0x02	; 2
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ef 59       	subi	r30, 0x9F	; 159
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	82 95       	swap	r24
    1ed8:	8f 70       	andi	r24, 0x0F	; 15
    1eda:	81 70       	andi	r24, 0x01	; 1
    1edc:	98 2f       	mov	r25, r24
    1ede:	9f 5f       	subi	r25, 0xFF	; 255
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	64 e0       	ldi	r22, 0x04	; 4
    1ee4:	49 2f       	mov	r20, r25
    1ee6:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    1eea:	fe 01       	movw	r30, r28
    1eec:	ef 59       	subi	r30, 0x9F	; 159
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 95       	swap	r24
    1ef4:	86 95       	lsr	r24
    1ef6:	87 70       	andi	r24, 0x07	; 7
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	98 2f       	mov	r25, r24
    1efc:	9f 5f       	subi	r25, 0xFF	; 255
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	65 e0       	ldi	r22, 0x05	; 5
    1f02:	49 2f       	mov	r20, r25
    1f04:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ef 59       	subi	r30, 0x9F	; 159
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	82 95       	swap	r24
    1f12:	86 95       	lsr	r24
    1f14:	86 95       	lsr	r24
    1f16:	83 70       	andi	r24, 0x03	; 3
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	9f 5f       	subi	r25, 0xFF	; 255
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	66 e0       	ldi	r22, 0x06	; 6
    1f22:	49 2f       	mov	r20, r25
    1f24:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ef 59       	subi	r30, 0x9F	; 159
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 1f       	adc	r24, r24
    1f32:	88 27       	eor	r24, r24
    1f34:	88 1f       	adc	r24, r24
    1f36:	98 2f       	mov	r25, r24
    1f38:	9f 5f       	subi	r25, 0xFF	; 255
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	67 e0       	ldi	r22, 0x07	; 7
    1f3e:	49 2f       	mov	r20, r25
    1f40:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	62 e0       	ldi	r22, 0x02	; 2
    1f48:	42 e0       	ldi	r20, 0x02	; 2
    1f4a:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e3 5a       	subi	r30, 0xA3	; 163
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e2       	ldi	r26, 0x20	; 32
    1f5a:	b1 e4       	ldi	r27, 0x41	; 65
    1f5c:	80 83       	st	Z, r24
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	a2 83       	std	Z+2, r26	; 0x02
    1f62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f64:	8e 01       	movw	r16, r28
    1f66:	07 5a       	subi	r16, 0xA7	; 167
    1f68:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e3 5a       	subi	r30, 0xA3	; 163
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	60 81       	ld	r22, Z
    1f72:	71 81       	ldd	r23, Z+1	; 0x01
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	2b ea       	ldi	r18, 0xAB	; 171
    1f7a:	3a ea       	ldi	r19, 0xAA	; 170
    1f7c:	4a e2       	ldi	r20, 0x2A	; 42
    1f7e:	50 e4       	ldi	r21, 0x40	; 64
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	f8 01       	movw	r30, r16
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f92:	fe 01       	movw	r30, r28
    1f94:	e7 5a       	subi	r30, 0xA7	; 167
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	34 f4       	brge	.+12     	; 0x1fbc <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e8 5a       	subi	r30, 0xA8	; 168
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	80 83       	st	Z, r24
    1fba:	e0 c0       	rjmp	.+448    	; 0x217c <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e7 5a       	subi	r30, 0xA7	; 167
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	53 e4       	ldi	r21, 0x43	; 67
    1fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	0c f0       	brlt	.+2      	; 0x1fdc <HLCD_voidSendChar+0x14e>
    1fda:	c0 c0       	rjmp	.+384    	; 0x215c <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e3 5a       	subi	r30, 0xA3	; 163
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	60 81       	ld	r22, Z
    1fe4:	71 81       	ldd	r23, Z+1	; 0x01
    1fe6:	82 81       	ldd	r24, Z+2	; 0x02
    1fe8:	93 81       	ldd	r25, Z+3	; 0x03
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a e7       	ldi	r20, 0x7A	; 122
    1ff0:	54 e4       	ldi	r21, 0x44	; 68
    1ff2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ec 5a       	subi	r30, 0xAC	; 172
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	a2 83       	std	Z+2, r26	; 0x02
    2006:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	8e 01       	movw	r16, r28
    200a:	00 5b       	subi	r16, 0xB0	; 176
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	ec 5a       	subi	r30, 0xAC	; 172
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	80 83       	st	Z, r24
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	a2 83       	std	Z+2, r26	; 0x02
    2034:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2036:	fe 01       	movw	r30, r28
    2038:	e0 5b       	subi	r30, 0xB0	; 176
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	44 f4       	brge	.+16     	; 0x2064 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    2054:	fe 01       	movw	r30, r28
    2056:	e2 5b       	subi	r30, 0xB2	; 178
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	64 c0       	rjmp	.+200    	; 0x212c <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    2064:	fe 01       	movw	r30, r28
    2066:	e0 5b       	subi	r30, 0xB0	; 176
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	0c f0       	brlt	.+2      	; 0x2084 <HLCD_voidSendChar+0x1f6>
    2082:	43 c0       	rjmp	.+134    	; 0x210a <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2084:	fe 01       	movw	r30, r28
    2086:	ec 5a       	subi	r30, 0xAC	; 172
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8e 01       	movw	r16, r28
    20a4:	02 5b       	subi	r16, 0xB2	; 178
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	f8 01       	movw	r30, r16
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	80 83       	st	Z, r24
    20ba:	1f c0       	rjmp	.+62     	; 0x20fa <HLCD_voidSendChar+0x26c>
    20bc:	fe 01       	movw	r30, r28
    20be:	e4 5b       	subi	r30, 0xB4	; 180
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	88 ec       	ldi	r24, 0xC8	; 200
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ca:	fe 01       	movw	r30, r28
    20cc:	e4 5b       	subi	r30, 0xB4	; 180
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <HLCD_voidSendChar+0x246>
    20d8:	fe 01       	movw	r30, r28
    20da:	e4 5b       	subi	r30, 0xB4	; 180
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	de 01       	movw	r26, r28
    20e4:	a2 5b       	subi	r26, 0xB2	; 178
    20e6:	bf 4f       	sbci	r27, 0xFF	; 255
    20e8:	fe 01       	movw	r30, r28
    20ea:	e2 5b       	subi	r30, 0xB2	; 178
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fa:	fe 01       	movw	r30, r28
    20fc:	e2 5b       	subi	r30, 0xB2	; 178
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	d1 f6       	brne	.-76     	; 0x20bc <HLCD_voidSendChar+0x22e>
    2108:	4b c0       	rjmp	.+150    	; 0x21a0 <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	8e 01       	movw	r16, r28
    210c:	02 5b       	subi	r16, 0xB2	; 178
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	fe 01       	movw	r30, r28
    2112:	e0 5b       	subi	r30, 0xB0	; 176
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	f8 01       	movw	r30, r16
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
    212c:	de 01       	movw	r26, r28
    212e:	a6 5b       	subi	r26, 0xB6	; 182
    2130:	bf 4f       	sbci	r27, 0xFF	; 255
    2132:	fe 01       	movw	r30, r28
    2134:	e2 5b       	subi	r30, 0xB2	; 178
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	11 96       	adiw	r26, 0x01	; 1
    213e:	9c 93       	st	X, r25
    2140:	8e 93       	st	-X, r24
    2142:	fe 01       	movw	r30, r28
    2144:	e6 5b       	subi	r30, 0xB6	; 182
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <HLCD_voidSendChar+0x2be>
    2150:	fe 01       	movw	r30, r28
    2152:	e6 5b       	subi	r30, 0xB6	; 182
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
    215a:	22 c0       	rjmp	.+68     	; 0x21a0 <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215c:	8e 01       	movw	r16, r28
    215e:	08 5a       	subi	r16, 0xA8	; 168
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	fe 01       	movw	r30, r28
    2164:	e7 5a       	subi	r30, 0xA7	; 167
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	f8 01       	movw	r30, r16
    217a:	80 83       	st	Z, r24
    217c:	de 01       	movw	r26, r28
    217e:	a7 5b       	subi	r26, 0xB7	; 183
    2180:	bf 4f       	sbci	r27, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	e8 5a       	subi	r30, 0xA8	; 168
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218c:	fe 01       	movw	r30, r28
    218e:	e7 5b       	subi	r30, 0xB7	; 183
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	8a 95       	dec	r24
    2196:	f1 f7       	brne	.-4      	; 0x2194 <HLCD_voidSendChar+0x306>
    2198:	fe 01       	movw	r30, r28
    219a:	e7 5b       	subi	r30, 0xB7	; 183
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    21aa:	fe 01       	movw	r30, r28
    21ac:	eb 5b       	subi	r30, 0xBB	; 187
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	a8 ec       	ldi	r26, 0xC8	; 200
    21b6:	b2 e4       	ldi	r27, 0x42	; 66
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21c0:	8e 01       	movw	r16, r28
    21c2:	0f 5b       	subi	r16, 0xBF	; 191
    21c4:	1f 4f       	sbci	r17, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 5b       	subi	r30, 0xBB	; 187
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	60 81       	ld	r22, Z
    21ce:	71 81       	ldd	r23, Z+1	; 0x01
    21d0:	82 81       	ldd	r24, Z+2	; 0x02
    21d2:	93 81       	ldd	r25, Z+3	; 0x03
    21d4:	2b ea       	ldi	r18, 0xAB	; 171
    21d6:	3a ea       	ldi	r19, 0xAA	; 170
    21d8:	4a e2       	ldi	r20, 0x2A	; 42
    21da:	50 e4       	ldi	r21, 0x40	; 64
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	f8 01       	movw	r30, r16
    21e6:	80 83       	st	Z, r24
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	a2 83       	std	Z+2, r26	; 0x02
    21ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ee:	fe 01       	movw	r30, r28
    21f0:	ef 5b       	subi	r30, 0xBF	; 191
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	34 f4       	brge	.+12     	; 0x2218 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	fe 01       	movw	r30, r28
    2210:	e0 5c       	subi	r30, 0xC0	; 192
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 83       	st	Z, r24
    2216:	9d c0       	rjmp	.+314    	; 0x2352 <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    2218:	fe 01       	movw	r30, r28
    221a:	ef 5b       	subi	r30, 0xBF	; 191
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	53 e4       	ldi	r21, 0x43	; 67
    222e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	0c f0       	brlt	.+2      	; 0x2238 <HLCD_voidSendChar+0x3aa>
    2236:	7e c0       	rjmp	.+252    	; 0x2334 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    2238:	fe 01       	movw	r30, r28
    223a:	eb 5b       	subi	r30, 0xBB	; 187
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a e7       	ldi	r20, 0x7A	; 122
    224c:	54 e4       	ldi	r21, 0x44	; 68
    224e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	8c af       	std	Y+60, r24	; 0x3c
    2258:	9d af       	std	Y+61, r25	; 0x3d
    225a:	ae af       	std	Y+62, r26	; 0x3e
    225c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2260:	7d ad       	ldd	r23, Y+61	; 0x3d
    2262:	8e ad       	ldd	r24, Y+62	; 0x3e
    2264:	9f ad       	ldd	r25, Y+63	; 0x3f
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4a ef       	ldi	r20, 0xFA	; 250
    226c:	54 e4       	ldi	r21, 0x44	; 68
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	88 af       	std	Y+56, r24	; 0x38
    2278:	99 af       	std	Y+57, r25	; 0x39
    227a:	aa af       	std	Y+58, r26	; 0x3a
    227c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    227e:	68 ad       	ldd	r22, Y+56	; 0x38
    2280:	79 ad       	ldd	r23, Y+57	; 0x39
    2282:	8a ad       	ldd	r24, Y+58	; 0x3a
    2284:	9b ad       	ldd	r25, Y+59	; 0x3b
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e8       	ldi	r20, 0x80	; 128
    228c:	5f e3       	ldi	r21, 0x3F	; 63
    228e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2292:	88 23       	and	r24, r24
    2294:	2c f4       	brge	.+10     	; 0x22a0 <HLCD_voidSendChar+0x412>
		__ticks = 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9f ab       	std	Y+55, r25	; 0x37
    229c:	8e ab       	std	Y+54, r24	; 0x36
    229e:	3f c0       	rjmp	.+126    	; 0x231e <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    22a0:	68 ad       	ldd	r22, Y+56	; 0x38
    22a2:	79 ad       	ldd	r23, Y+57	; 0x39
    22a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    22a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	3f ef       	ldi	r19, 0xFF	; 255
    22ac:	4f e7       	ldi	r20, 0x7F	; 127
    22ae:	57 e4       	ldi	r21, 0x47	; 71
    22b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22b4:	18 16       	cp	r1, r24
    22b6:	4c f5       	brge	.+82     	; 0x230a <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    22ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    22bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    22be:	9f ad       	ldd	r25, Y+63	; 0x3f
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	51 e4       	ldi	r21, 0x41	; 65
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9f ab       	std	Y+55, r25	; 0x37
    22de:	8e ab       	std	Y+54, r24	; 0x36
    22e0:	0f c0       	rjmp	.+30     	; 0x2300 <HLCD_voidSendChar+0x472>
    22e2:	88 ec       	ldi	r24, 0xC8	; 200
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9d ab       	std	Y+53, r25	; 0x35
    22e8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ea:	8c a9       	ldd	r24, Y+52	; 0x34
    22ec:	9d a9       	ldd	r25, Y+53	; 0x35
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <HLCD_voidSendChar+0x460>
    22f2:	9d ab       	std	Y+53, r25	; 0x35
    22f4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f6:	8e a9       	ldd	r24, Y+54	; 0x36
    22f8:	9f a9       	ldd	r25, Y+55	; 0x37
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	9f ab       	std	Y+55, r25	; 0x37
    22fe:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	8e a9       	ldd	r24, Y+54	; 0x36
    2302:	9f a9       	ldd	r25, Y+55	; 0x37
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	69 f7       	brne	.-38     	; 0x22e2 <HLCD_voidSendChar+0x454>
    2308:	2d c0       	rjmp	.+90     	; 0x2364 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	68 ad       	ldd	r22, Y+56	; 0x38
    230c:	79 ad       	ldd	r23, Y+57	; 0x39
    230e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2310:	9b ad       	ldd	r25, Y+59	; 0x3b
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9f ab       	std	Y+55, r25	; 0x37
    231c:	8e ab       	std	Y+54, r24	; 0x36
    231e:	8e a9       	ldd	r24, Y+54	; 0x36
    2320:	9f a9       	ldd	r25, Y+55	; 0x37
    2322:	9b ab       	std	Y+51, r25	; 0x33
    2324:	8a ab       	std	Y+50, r24	; 0x32
    2326:	8a a9       	ldd	r24, Y+50	; 0x32
    2328:	9b a9       	ldd	r25, Y+51	; 0x33
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <HLCD_voidSendChar+0x49c>
    232e:	9b ab       	std	Y+51, r25	; 0x33
    2330:	8a ab       	std	Y+50, r24	; 0x32
    2332:	18 c0       	rjmp	.+48     	; 0x2364 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2334:	fe 01       	movw	r30, r28
    2336:	ef 5b       	subi	r30, 0xBF	; 191
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	93 81       	ldd	r25, Z+3	; 0x03
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	fe 01       	movw	r30, r28
    234c:	e0 5c       	subi	r30, 0xC0	; 192
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 83       	st	Z, r24
    2352:	fe 01       	movw	r30, r28
    2354:	e0 5c       	subi	r30, 0xC0	; 192
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 81       	ld	r24, Z
    235a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    235c:	89 a9       	ldd	r24, Y+49	; 0x31
    235e:	8a 95       	dec	r24
    2360:	f1 f7       	brne	.-4      	; 0x235e <HLCD_voidSendChar+0x4d0>
    2362:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    2364:	fe 01       	movw	r30, r28
    2366:	ef 59       	subi	r30, 0x9F	; 159
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	98 2f       	mov	r25, r24
    2370:	9f 5f       	subi	r25, 0xFF	; 255
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	64 e0       	ldi	r22, 0x04	; 4
    2376:	49 2f       	mov	r20, r25
    2378:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    237c:	fe 01       	movw	r30, r28
    237e:	ef 59       	subi	r30, 0x9F	; 159
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	86 95       	lsr	r24
    2386:	81 70       	andi	r24, 0x01	; 1
    2388:	98 2f       	mov	r25, r24
    238a:	9f 5f       	subi	r25, 0xFF	; 255
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	49 2f       	mov	r20, r25
    2392:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    2396:	fe 01       	movw	r30, r28
    2398:	ef 59       	subi	r30, 0x9F	; 159
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	86 95       	lsr	r24
    23a0:	86 95       	lsr	r24
    23a2:	81 70       	andi	r24, 0x01	; 1
    23a4:	98 2f       	mov	r25, r24
    23a6:	9f 5f       	subi	r25, 0xFF	; 255
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	66 e0       	ldi	r22, 0x06	; 6
    23ac:	49 2f       	mov	r20, r25
    23ae:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    23b2:	fe 01       	movw	r30, r28
    23b4:	ef 59       	subi	r30, 0x9F	; 159
    23b6:	ff 4f       	sbci	r31, 0xFF	; 255
    23b8:	80 81       	ld	r24, Z
    23ba:	86 95       	lsr	r24
    23bc:	86 95       	lsr	r24
    23be:	86 95       	lsr	r24
    23c0:	81 70       	andi	r24, 0x01	; 1
    23c2:	98 2f       	mov	r25, r24
    23c4:	9f 5f       	subi	r25, 0xFF	; 255
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	49 2f       	mov	r20, r25
    23cc:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	42 e0       	ldi	r20, 0x02	; 2
    23d6:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a0 e2       	ldi	r26, 0x20	; 32
    23e0:	b1 e4       	ldi	r27, 0x41	; 65
    23e2:	8d a7       	std	Y+45, r24	; 0x2d
    23e4:	9e a7       	std	Y+46, r25	; 0x2e
    23e6:	af a7       	std	Y+47, r26	; 0x2f
    23e8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ea:	6d a5       	ldd	r22, Y+45	; 0x2d
    23ec:	7e a5       	ldd	r23, Y+46	; 0x2e
    23ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f0:	98 a9       	ldd	r25, Y+48	; 0x30
    23f2:	2b ea       	ldi	r18, 0xAB	; 171
    23f4:	3a ea       	ldi	r19, 0xAA	; 170
    23f6:	4a e2       	ldi	r20, 0x2A	; 42
    23f8:	50 e4       	ldi	r21, 0x40	; 64
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	89 a7       	std	Y+41, r24	; 0x29
    2404:	9a a7       	std	Y+42, r25	; 0x2a
    2406:	ab a7       	std	Y+43, r26	; 0x2b
    2408:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    240a:	69 a5       	ldd	r22, Y+41	; 0x29
    240c:	7a a5       	ldd	r23, Y+42	; 0x2a
    240e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2410:	9c a5       	ldd	r25, Y+44	; 0x2c
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	1c f4       	brge	.+6      	; 0x2428 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	88 a7       	std	Y+40, r24	; 0x28
    2426:	91 c0       	rjmp	.+290    	; 0x254a <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    2428:	69 a5       	ldd	r22, Y+41	; 0x29
    242a:	7a a5       	ldd	r23, Y+42	; 0x2a
    242c:	8b a5       	ldd	r24, Y+43	; 0x2b
    242e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	53 e4       	ldi	r21, 0x43	; 67
    2438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <HLCD_voidSendChar+0x5b4>
    2440:	7b c0       	rjmp	.+246    	; 0x2538 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    2442:	6d a5       	ldd	r22, Y+45	; 0x2d
    2444:	7e a5       	ldd	r23, Y+46	; 0x2e
    2446:	8f a5       	ldd	r24, Y+47	; 0x2f
    2448:	98 a9       	ldd	r25, Y+48	; 0x30
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a e7       	ldi	r20, 0x7A	; 122
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	8c a3       	std	Y+36, r24	; 0x24
    245c:	9d a3       	std	Y+37, r25	; 0x25
    245e:	ae a3       	std	Y+38, r26	; 0x26
    2460:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6c a1       	ldd	r22, Y+36	; 0x24
    2464:	7d a1       	ldd	r23, Y+37	; 0x25
    2466:	8e a1       	ldd	r24, Y+38	; 0x26
    2468:	9f a1       	ldd	r25, Y+39	; 0x27
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	88 a3       	std	Y+32, r24	; 0x20
    247c:	99 a3       	std	Y+33, r25	; 0x21
    247e:	aa a3       	std	Y+34, r26	; 0x22
    2480:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2482:	68 a1       	ldd	r22, Y+32	; 0x20
    2484:	79 a1       	ldd	r23, Y+33	; 0x21
    2486:	8a a1       	ldd	r24, Y+34	; 0x22
    2488:	9b a1       	ldd	r25, Y+35	; 0x23
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9f 8f       	std	Y+31, r25	; 0x1f
    24a0:	8e 8f       	std	Y+30, r24	; 0x1e
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    24a4:	68 a1       	ldd	r22, Y+32	; 0x20
    24a6:	79 a1       	ldd	r23, Y+33	; 0x21
    24a8:	8a a1       	ldd	r24, Y+34	; 0x22
    24aa:	9b a1       	ldd	r25, Y+35	; 0x23
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6c a1       	ldd	r22, Y+36	; 0x24
    24be:	7d a1       	ldd	r23, Y+37	; 0x25
    24c0:	8e a1       	ldd	r24, Y+38	; 0x26
    24c2:	9f a1       	ldd	r25, Y+39	; 0x27
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9f 8f       	std	Y+31, r25	; 0x1f
    24e2:	8e 8f       	std	Y+30, r24	; 0x1e
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <HLCD_voidSendChar+0x676>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9d 8f       	std	Y+29, r25	; 0x1d
    24ec:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <HLCD_voidSendChar+0x664>
    24f6:	9d 8f       	std	Y+29, r25	; 0x1d
    24f8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9f 8f       	std	Y+31, r25	; 0x1f
    2502:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2506:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <HLCD_voidSendChar+0x658>
    250c:	24 c0       	rjmp	.+72     	; 0x2556 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	68 a1       	ldd	r22, Y+32	; 0x20
    2510:	79 a1       	ldd	r23, Y+33	; 0x21
    2512:	8a a1       	ldd	r24, Y+34	; 0x22
    2514:	9b a1       	ldd	r25, Y+35	; 0x23
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9f 8f       	std	Y+31, r25	; 0x1f
    2520:	8e 8f       	std	Y+30, r24	; 0x1e
    2522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2524:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2526:	9b 8f       	std	Y+27, r25	; 0x1b
    2528:	8a 8f       	std	Y+26, r24	; 0x1a
    252a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    252c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <HLCD_voidSendChar+0x6a0>
    2532:	9b 8f       	std	Y+27, r25	; 0x1b
    2534:	8a 8f       	std	Y+26, r24	; 0x1a
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2538:	69 a5       	ldd	r22, Y+41	; 0x29
    253a:	7a a5       	ldd	r23, Y+42	; 0x2a
    253c:	8b a5       	ldd	r24, Y+43	; 0x2b
    253e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	88 a7       	std	Y+40, r24	; 0x28
    254a:	88 a5       	ldd	r24, Y+40	; 0x28
    254c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    254e:	89 8d       	ldd	r24, Y+25	; 0x19
    2550:	8a 95       	dec	r24
    2552:	f1 f7       	brne	.-4      	; 0x2550 <HLCD_voidSendChar+0x6c2>
    2554:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	41 e0       	ldi	r20, 0x01	; 1
    255c:	0e 94 b9 18 	call	0x3172	; 0x3172 <MDIO_stderrSetPinValue>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a8 ec       	ldi	r26, 0xC8	; 200
    2566:	b2 e4       	ldi	r27, 0x42	; 66
    2568:	8d 8b       	std	Y+21, r24	; 0x15
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	af 8b       	std	Y+23, r26	; 0x17
    256e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	2b ea       	ldi	r18, 0xAB	; 171
    257a:	3a ea       	ldi	r19, 0xAA	; 170
    257c:	4a e2       	ldi	r20, 0x2A	; 42
    257e:	50 e4       	ldi	r21, 0x40	; 64
    2580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	89 8b       	std	Y+17, r24	; 0x11
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	ab 8b       	std	Y+19, r26	; 0x13
    258e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2590:	69 89       	ldd	r22, Y+17	; 0x11
    2592:	7a 89       	ldd	r23, Y+18	; 0x12
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	1c f4       	brge	.+6      	; 0x25ae <HLCD_voidSendChar+0x720>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	88 8b       	std	Y+16, r24	; 0x10
    25ac:	91 c0       	rjmp	.+290    	; 0x26d0 <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    25ae:	69 89       	ldd	r22, Y+17	; 0x11
    25b0:	7a 89       	ldd	r23, Y+18	; 0x12
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	53 e4       	ldi	r21, 0x43	; 67
    25be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <HLCD_voidSendChar+0x73a>
    25c6:	7b c0       	rjmp	.+246    	; 0x26be <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    25c8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ca:	7e 89       	ldd	r23, Y+22	; 0x16
    25cc:	8f 89       	ldd	r24, Y+23	; 0x17
    25ce:	98 8d       	ldd	r25, Y+24	; 0x18
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8c 87       	std	Y+12, r24	; 0x0c
    25e2:	9d 87       	std	Y+13, r25	; 0x0d
    25e4:	ae 87       	std	Y+14, r26	; 0x0e
    25e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	88 87       	std	Y+8, r24	; 0x08
    2602:	99 87       	std	Y+9, r25	; 0x09
    2604:	aa 87       	std	Y+10, r26	; 0x0a
    2606:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2608:	68 85       	ldd	r22, Y+8	; 0x08
    260a:	79 85       	ldd	r23, Y+9	; 0x09
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9f 83       	std	Y+7, r25	; 0x07
    2626:	8e 83       	std	Y+6, r24	; 0x06
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    262a:	68 85       	ldd	r22, Y+8	; 0x08
    262c:	79 85       	ldd	r23, Y+9	; 0x09
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6c 85       	ldd	r22, Y+12	; 0x0c
    2644:	7d 85       	ldd	r23, Y+13	; 0x0d
    2646:	8e 85       	ldd	r24, Y+14	; 0x0e
    2648:	9f 85       	ldd	r25, Y+15	; 0x0f
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9f 83       	std	Y+7, r25	; 0x07
    2668:	8e 83       	std	Y+6, r24	; 0x06
    266a:	0f c0       	rjmp	.+30     	; 0x268a <HLCD_voidSendChar+0x7fc>
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9d 83       	std	Y+5, r25	; 0x05
    2672:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <HLCD_voidSendChar+0x7ea>
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9f 83       	std	Y+7, r25	; 0x07
    2688:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <HLCD_voidSendChar+0x7de>
    2692:	24 c0       	rjmp	.+72     	; 0x26dc <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	68 85       	ldd	r22, Y+8	; 0x08
    2696:	79 85       	ldd	r23, Y+9	; 0x09
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9f 83       	std	Y+7, r25	; 0x07
    26a6:	8e 83       	std	Y+6, r24	; 0x06
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	9f 81       	ldd	r25, Y+7	; 0x07
    26ac:	9b 83       	std	Y+3, r25	; 0x03
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <HLCD_voidSendChar+0x826>
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	8a 83       	std	Y+2, r24	; 0x02
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26be:	69 89       	ldd	r22, Y+17	; 0x11
    26c0:	7a 89       	ldd	r23, Y+18	; 0x12
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	88 8b       	std	Y+16, r24	; 0x10
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	8a 95       	dec	r24
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <HLCD_voidSendChar+0x848>
    26da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    26dc:	cf 59       	subi	r28, 0x9F	; 159
    26de:	df 4f       	sbci	r29, 0xFF	; 255
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	08 95       	ret

000026f4 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	29 97       	sbiw	r28, 0x09	; 9
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	99 87       	std	Y+9, r25	; 0x09
    270a:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    270c:	88 85       	ldd	r24, Y+8	; 0x08
    270e:	99 85       	ldd	r25, Y+9	; 0x09
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	21 f4       	brne	.+8      	; 0x271c <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    2714:	80 e3       	ldi	r24, 0x30	; 48
    2716:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <HLCD_voidSendChar>
    271a:	3d c0       	rjmp	.+122    	; 0x2796 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    271c:	19 82       	std	Y+1, r1	; 0x01
    271e:	20 c0       	rjmp	.+64     	; 0x2760 <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	e8 2f       	mov	r30, r24
    2724:	ff 27       	eor	r31, r31
    2726:	e7 fd       	sbrc	r30, 7
    2728:	f0 95       	com	r31
    272a:	88 85       	ldd	r24, Y+8	; 0x08
    272c:	99 85       	ldd	r25, Y+9	; 0x09
    272e:	2a e0       	ldi	r18, 0x0A	; 10
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	b9 01       	movw	r22, r18
    2734:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__udivmodhi4>
    2738:	28 2f       	mov	r18, r24
    273a:	20 5d       	subi	r18, 0xD0	; 208
    273c:	ce 01       	movw	r24, r28
    273e:	02 96       	adiw	r24, 0x02	; 2
    2740:	e8 0f       	add	r30, r24
    2742:	f9 1f       	adc	r31, r25
    2744:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    2746:	88 85       	ldd	r24, Y+8	; 0x08
    2748:	99 85       	ldd	r25, Y+9	; 0x09
    274a:	2a e0       	ldi	r18, 0x0A	; 10
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	b9 01       	movw	r22, r18
    2750:	0e 94 70 21 	call	0x42e0	; 0x42e0 <__udivmodhi4>
    2754:	cb 01       	movw	r24, r22
    2756:	99 87       	std	Y+9, r25	; 0x09
    2758:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	88 85       	ldd	r24, Y+8	; 0x08
    2762:	99 85       	ldd	r25, Y+9	; 0x09
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	e1 f6       	brne	.-72     	; 0x2720 <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	81 50       	subi	r24, 0x01	; 1
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	10 c0       	rjmp	.+32     	; 0x2790 <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	28 2f       	mov	r18, r24
    2774:	33 27       	eor	r19, r19
    2776:	27 fd       	sbrc	r18, 7
    2778:	30 95       	com	r19
    277a:	ce 01       	movw	r24, r28
    277c:	02 96       	adiw	r24, 0x02	; 2
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	80 81       	ld	r24, Z
    2786:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <HLCD_voidSendChar>
			L_s8Iterator--;
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	81 50       	subi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	8f 3f       	cpi	r24, 0xFF	; 255
    2794:	69 f7       	brne	.-38     	; 0x2770 <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    2796:	29 96       	adiw	r28, 0x09	; 9
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <HLCD_voidSendString+0x6>
    27ae:	0f 92       	push	r0
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9b 83       	std	Y+3, r25	; 0x03
    27b6:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	d1 f0       	breq	.+52     	; 0x27f4 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    27c0:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	9b 81       	ldd	r25, Y+3	; 0x03
    27cc:	fc 01       	movw	r30, r24
    27ce:	e2 0f       	add	r30, r18
    27d0:	f3 1f       	adc	r31, r19
    27d2:	80 81       	ld	r24, Z
    27d4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <HLCD_voidSendChar>
			L_u8Iterator++;
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	8f 5f       	subi	r24, 0xFF	; 255
    27dc:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9b 81       	ldd	r25, Y+3	; 0x03
    27e8:	fc 01       	movw	r30, r24
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	80 81       	ld	r24, Z
    27f0:	88 23       	and	r24, r24
    27f2:	39 f7       	brne	.-50     	; 0x27c2 <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	61 97       	sbiw	r28, 0x11	; 17
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	88 8b       	std	Y+16, r24	; 0x10
    2816:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    2818:	88 89       	ldd	r24, Y+16	; 0x10
    281a:	98 2f       	mov	r25, r24
    281c:	92 95       	swap	r25
    281e:	99 0f       	add	r25, r25
    2820:	99 0f       	add	r25, r25
    2822:	90 7c       	andi	r25, 0xC0	; 192
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	89 2b       	or	r24, r25
    2828:	80 68       	ori	r24, 0x80	; 128
    282a:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    282c:	8f 85       	ldd	r24, Y+15	; 0x0f
    282e:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	a0 e8       	ldi	r26, 0x80	; 128
    2838:	bf e3       	ldi	r27, 0x3F	; 63
    283a:	8b 87       	std	Y+11, r24	; 0x0b
    283c:	9c 87       	std	Y+12, r25	; 0x0c
    283e:	ad 87       	std	Y+13, r26	; 0x0d
    2840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2842:	6b 85       	ldd	r22, Y+11	; 0x0b
    2844:	7c 85       	ldd	r23, Y+12	; 0x0c
    2846:	8d 85       	ldd	r24, Y+13	; 0x0d
    2848:	9e 85       	ldd	r25, Y+14	; 0x0e
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4a ef       	ldi	r20, 0xFA	; 250
    2850:	54 e4       	ldi	r21, 0x44	; 68
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	8f 83       	std	Y+7, r24	; 0x07
    285c:	98 87       	std	Y+8, r25	; 0x08
    285e:	a9 87       	std	Y+9, r26	; 0x09
    2860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2876:	88 23       	and	r24, r24
    2878:	2c f4       	brge	.+10     	; 0x2884 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	8d 83       	std	Y+5, r24	; 0x05
    2882:	3f c0       	rjmp	.+126    	; 0x2902 <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	3f ef       	ldi	r19, 0xFF	; 255
    2890:	4f e7       	ldi	r20, 0x7F	; 127
    2892:	57 e4       	ldi	r21, 0x47	; 71
    2894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2898:	18 16       	cp	r1, r24
    289a:	4c f5       	brge	.+82     	; 0x28ee <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	40 e2       	ldi	r20, 0x20	; 32
    28aa:	51 e4       	ldi	r21, 0x41	; 65
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	9e 83       	std	Y+6, r25	; 0x06
    28c2:	8d 83       	std	Y+5, r24	; 0x05
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <HLCD_voidSetCur+0xe4>
    28c6:	88 ec       	ldi	r24, 0xC8	; 200
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <HLCD_voidSetCur+0xd2>
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	69 f7       	brne	.-38     	; 0x28c6 <HLCD_voidSetCur+0xc6>
    28ec:	14 c0       	rjmp	.+40     	; 0x2916 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	8d 81       	ldd	r24, Y+5	; 0x05
    2904:	9e 81       	ldd	r25, Y+6	; 0x06
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <HLCD_voidSetCur+0x10e>
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2916:	61 96       	adiw	r28, 0x11	; 17
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	2e 97       	sbiw	r28, 0x0e	; 14
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	0e 94 14 0b 	call	0x1628	; 0x1628 <HLCD_voidSendCmd>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a0 e8       	ldi	r26, 0x80	; 128
    2948:	bf e3       	ldi	r27, 0x3F	; 63
    294a:	8b 87       	std	Y+11, r24	; 0x0b
    294c:	9c 87       	std	Y+12, r25	; 0x0c
    294e:	ad 87       	std	Y+13, r26	; 0x0d
    2950:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2952:	6b 85       	ldd	r22, Y+11	; 0x0b
    2954:	7c 85       	ldd	r23, Y+12	; 0x0c
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a ef       	ldi	r20, 0xFA	; 250
    2960:	54 e4       	ldi	r21, 0x44	; 68
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8f 83       	std	Y+7, r24	; 0x07
    296c:	98 87       	std	Y+8, r25	; 0x08
    296e:	a9 87       	std	Y+9, r26	; 0x09
    2970:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	40 e8       	ldi	r20, 0x80	; 128
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2986:	88 23       	and	r24, r24
    2988:	2c f4       	brge	.+10     	; 0x2994 <HLCD_voidClear+0x6c>
		__ticks = 1;
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
    2992:	3f c0       	rjmp	.+126    	; 0x2a12 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	3f ef       	ldi	r19, 0xFF	; 255
    29a0:	4f e7       	ldi	r20, 0x7F	; 127
    29a2:	57 e4       	ldi	r21, 0x47	; 71
    29a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a8:	18 16       	cp	r1, r24
    29aa:	4c f5       	brge	.+82     	; 0x29fe <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e2       	ldi	r20, 0x20	; 32
    29ba:	51 e4       	ldi	r21, 0x41	; 65
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9e 83       	std	Y+6, r25	; 0x06
    29d2:	8d 83       	std	Y+5, r24	; 0x05
    29d4:	0f c0       	rjmp	.+30     	; 0x29f4 <HLCD_voidClear+0xcc>
    29d6:	88 ec       	ldi	r24, 0xC8	; 200
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <HLCD_voidClear+0xba>
    29e6:	9c 83       	std	Y+4, r25	; 0x04
    29e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	69 f7       	brne	.-38     	; 0x29d6 <HLCD_voidClear+0xae>
    29fc:	14 c0       	rjmp	.+40     	; 0x2a26 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	9e 81       	ldd	r25, Y+6	; 0x06
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <HLCD_voidClear+0xf6>
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2a26:	2e 96       	adiw	r28, 0x0e	; 14
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <HNVM_stderrInit>:




STD_error_t HNVM_stderrInit(void)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	0f 92       	push	r0
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62

STD_error_t L_stderrstate = E_OK;	
    2a42:	19 82       	std	Y+1, r1	; 0x01
 L_stderrstate = MTWI_stderrInit(HNVM_BIT_RATE,HNVM_PRESCALER);
    2a44:	60 e5       	ldi	r22, 0x50	; 80
    2a46:	73 ec       	ldi	r23, 0xC3	; 195
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	43 e0       	ldi	r20, 0x03	; 3
    2a4e:	0e 94 0d 1b 	call	0x361a	; 0x361a <MTWI_stderrInit>
    2a52:	89 83       	std	Y+1, r24	; 0x01
 MTWI_voidEnable();
    2a54:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <MTWI_voidEnable>
	
	return L_stderrstate;
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <HNVM_voidWrite>:

void HNVM_voidWrite(u16 ARG_u16Address,u8 ARG_u8Data)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <HNVM_voidWrite+0x6>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <HNVM_voidWrite+0x8>
    2a6a:	0f 92       	push	r0
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	6d 83       	std	Y+5, r22	; 0x05
	        u8 L_u8SlaveAddress , L_u8Block;
			L_u8Block = ARG_u16Address >> 8;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	89 2f       	mov	r24, r25
    2a7c:	99 27       	eor	r25, r25
    2a7e:	89 83       	std	Y+1, r24	; 0x01
			L_u8SlaveAddress = (0b1010000) | (L_u8Block) ;  // 1010 fixed bits and 0 for A2 and last two bits for A1 A2 which choose the block
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	80 65       	ori	r24, 0x50	; 80
    2a84:	8a 83       	std	Y+2, r24	; 0x02
	        MTWI_voidSendStartCondition();
    2a86:	0e 94 28 1c 	call	0x3850	; 0x3850 <MTWI_voidSendStartCondition>
			MTWI_voidFlagPolling();
    2a8a:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
			if( MTWI_STATUS_MASTER_START_CONDITION == MTWI_twistatusCheckStatus())
    2a8e:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2a92:	88 30       	cpi	r24, 0x08	; 8
    2a94:	39 f5       	brne	.+78     	; 0x2ae4 <HNVM_voidWrite+0x82>
			{
				MTWI_voidLoadTWDR((( L_u8SlaveAddress << 1) & (0xFE)) | (0));
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	88 2f       	mov	r24, r24
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
				MTWI_voidClearFlag();
    2aa4:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				MTWI_voidFlagPolling();
    2aa8:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
				if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == 	MTWI_twistatusCheckStatus())
    2aac:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2ab0:	88 31       	cpi	r24, 0x18	; 24
    2ab2:	c1 f4       	brne	.+48     	; 0x2ae4 <HNVM_voidWrite+0x82>
				{
					MTWI_voidLoadTWDR((u8)ARG_u16Address);
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
					MTWI_voidClearFlag();
    2aba:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				    MTWI_voidFlagPolling();
    2abe:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
					if(MTWI_STATUS_MASTER_TX_DATA_ACK == 	MTWI_twistatusCheckStatus())
    2ac2:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2ac6:	88 32       	cpi	r24, 0x28	; 40
    2ac8:	69 f4       	brne	.+26     	; 0x2ae4 <HNVM_voidWrite+0x82>
					{
						  MTWI_voidLoadTWDR(ARG_u8Data);
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
					      MTWI_voidClearFlag();
    2ad0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				          MTWI_voidFlagPolling();
    2ad4:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
						if(MTWI_STATUS_MASTER_TX_DATA_ACK == 	MTWI_twistatusCheckStatus())
    2ad8:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2adc:	88 32       	cpi	r24, 0x28	; 40
    2ade:	11 f4       	brne	.+4      	; 0x2ae4 <HNVM_voidWrite+0x82>
					    {
					  	    MTWI_voidSendStopCondition();
    2ae0:	0e 94 36 1c 	call	0x386c	; 0x386c <MTWI_voidSendStopCondition>
				}
			}
			
			
	
}
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <HNVM_u8Read>:

u8   HNVM_u8Read(u16 ARG_u16Address)
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <HNVM_u8Read+0x6>
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <HNVM_u8Read+0x8>
    2afc:	0f 92       	push	r0
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	9d 83       	std	Y+5, r25	; 0x05
    2b04:	8c 83       	std	Y+4, r24	; 0x04
	
	        u8 L_u8SlaveAddress , L_u8Block , L_u8Data=0;
    2b06:	19 82       	std	Y+1, r1	; 0x01
			L_u8Block = ARG_u16Address >> 8;
    2b08:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0c:	89 2f       	mov	r24, r25
    2b0e:	99 27       	eor	r25, r25
    2b10:	8a 83       	std	Y+2, r24	; 0x02
			L_u8SlaveAddress = (0b1010000) | (L_u8Block) ;  // 1010 fixed bits and 0 for A2 and last two bits for A1 A2 which choose the block
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	80 65       	ori	r24, 0x50	; 80
    2b16:	8b 83       	std	Y+3, r24	; 0x03
	        MTWI_voidSendStartCondition();
    2b18:	0e 94 28 1c 	call	0x3850	; 0x3850 <MTWI_voidSendStartCondition>
			MTWI_voidFlagPolling();
    2b1c:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
			if(MTWI_STATUS_MASTER_START_CONDITION == 	MTWI_twistatusCheckStatus())
    2b20:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b24:	88 30       	cpi	r24, 0x08	; 8
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <HNVM_u8Read+0x36>
    2b28:	3f c0       	rjmp	.+126    	; 0x2ba8 <HNVM_u8Read+0xb4>
			{
				MTWI_voidLoadTWDR((( L_u8SlaveAddress << 1) & (0xFE)) | (0));
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
				MTWI_voidClearFlag();
    2b38:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				MTWI_voidFlagPolling();
    2b3c:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
				if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == 	MTWI_twistatusCheckStatus())
    2b40:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b44:	88 31       	cpi	r24, 0x18	; 24
    2b46:	81 f5       	brne	.+96     	; 0x2ba8 <HNVM_u8Read+0xb4>
				{
					MTWI_voidLoadTWDR((u8)ARG_u16Address);
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
					MTWI_voidClearFlag();
    2b4e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				    MTWI_voidFlagPolling();
    2b52:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
					if(MTWI_STATUS_MASTER_TX_DATA_ACK == 	MTWI_twistatusCheckStatus())
    2b56:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b5a:	88 32       	cpi	r24, 0x28	; 40
    2b5c:	29 f5       	brne	.+74     	; 0x2ba8 <HNVM_u8Read+0xb4>
					{
						 MTWI_voidSendStartCondition();
    2b5e:	0e 94 28 1c 	call	0x3850	; 0x3850 <MTWI_voidSendStartCondition>
			             MTWI_voidFlagPolling();
    2b62:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
						if(MTWI_STATUS_MASTER_RSTART_CONDITION  == 	MTWI_twistatusCheckStatus())
    2b66:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b6a:	80 31       	cpi	r24, 0x10	; 16
    2b6c:	e9 f4       	brne	.+58     	; 0x2ba8 <HNVM_u8Read+0xb4>
		            	{
		            		MTWI_voidLoadTWDR((( L_u8SlaveAddress << 1) & (0xFE)) | (1));
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	81 60       	ori	r24, 0x01	; 1
    2b7a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
		            		MTWI_voidClearFlag();
    2b7e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
		            		MTWI_voidFlagPolling();
    2b82:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
							 if(MTWI_STATUS_MASTER_RX_SLA_R_ACK == 	MTWI_twistatusCheckStatus())
    2b86:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b8a:	80 34       	cpi	r24, 0x40	; 64
    2b8c:	69 f4       	brne	.+26     	; 0x2ba8 <HNVM_u8Read+0xb4>
				             {
				            	
				            	MTWI_voidClearFlag();
    2b8e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				                MTWI_voidFlagPolling();
    2b92:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
								if(MTWI_STATUS_MASTER_RX_DATA_NACK == 	MTWI_twistatusCheckStatus())
    2b96:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    2b9a:	88 35       	cpi	r24, 0x58	; 88
    2b9c:	29 f4       	brne	.+10     	; 0x2ba8 <HNVM_u8Read+0xb4>
					            {   // we did not enable ACK for master so by default he will send NACK if we enabled ACK it will sent ACK
									L_u8Data = MTWI_charReadTWDR ();
    2b9e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <MTWI_charReadTWDR>
    2ba2:	89 83       	std	Y+1, r24	; 0x01
					  	            MTWI_voidSendStopCondition();
    2ba4:	0e 94 36 1c 	call	0x386c	; 0x386c <MTWI_voidSendStopCondition>
			}
			
			
	
	
	return L_u8Data ;
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <MDIO_stderrSetPortDirection+0x6>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <MDIO_stderrSetPortDirection+0x8>
    2bc2:	0f 92       	push	r0
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	8a 83       	std	Y+2, r24	; 0x02
    2bca:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2bcc:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	3d 83       	std	Y+5, r19	; 0x05
    2bd6:	2c 83       	std	Y+4, r18	; 0x04
    2bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bda:	9d 81       	ldd	r25, Y+5	; 0x05
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	91 05       	cpc	r25, r1
    2be0:	d9 f0       	breq	.+54     	; 0x2c18 <MDIO_stderrSetPortDirection+0x5e>
    2be2:	2c 81       	ldd	r18, Y+4	; 0x04
    2be4:	3d 81       	ldd	r19, Y+5	; 0x05
    2be6:	23 30       	cpi	r18, 0x03	; 3
    2be8:	31 05       	cpc	r19, r1
    2bea:	34 f4       	brge	.+12     	; 0x2bf8 <MDIO_stderrSetPortDirection+0x3e>
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	61 f0       	breq	.+24     	; 0x2c0e <MDIO_stderrSetPortDirection+0x54>
    2bf6:	1f c0       	rjmp	.+62     	; 0x2c36 <MDIO_stderrSetPortDirection+0x7c>
    2bf8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bfa:	3d 81       	ldd	r19, Y+5	; 0x05
    2bfc:	23 30       	cpi	r18, 0x03	; 3
    2bfe:	31 05       	cpc	r19, r1
    2c00:	81 f0       	breq	.+32     	; 0x2c22 <MDIO_stderrSetPortDirection+0x68>
    2c02:	8c 81       	ldd	r24, Y+4	; 0x04
    2c04:	9d 81       	ldd	r25, Y+5	; 0x05
    2c06:	84 30       	cpi	r24, 0x04	; 4
    2c08:	91 05       	cpc	r25, r1
    2c0a:	81 f0       	breq	.+32     	; 0x2c2c <MDIO_stderrSetPortDirection+0x72>
    2c0c:	14 c0       	rjmp	.+40     	; 0x2c36 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2c0e:	e9 e3       	ldi	r30, 0x39	; 57
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	81 83       	std	Z+1, r24	; 0x01
    2c16:	11 c0       	rjmp	.+34     	; 0x2c3a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2c18:	e6 e3       	ldi	r30, 0x36	; 54
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	81 83       	std	Z+1, r24	; 0x01
    2c20:	0c c0       	rjmp	.+24     	; 0x2c3a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2c22:	e3 e3       	ldi	r30, 0x33	; 51
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	81 83       	std	Z+1, r24	; 0x01
    2c2a:	07 c0       	rjmp	.+14     	; 0x2c3a <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2c2c:	e0 e3       	ldi	r30, 0x30	; 48
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	81 83       	std	Z+1, r24	; 0x01
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <MDIO_stderrSetPortValue+0x6>
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <MDIO_stderrSetPortValue+0x8>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
    2c5c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2c5e:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	3d 83       	std	Y+5, r19	; 0x05
    2c68:	2c 83       	std	Y+4, r18	; 0x04
    2c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6e:	82 30       	cpi	r24, 0x02	; 2
    2c70:	91 05       	cpc	r25, r1
    2c72:	d9 f0       	breq	.+54     	; 0x2caa <MDIO_stderrSetPortValue+0x5e>
    2c74:	2c 81       	ldd	r18, Y+4	; 0x04
    2c76:	3d 81       	ldd	r19, Y+5	; 0x05
    2c78:	23 30       	cpi	r18, 0x03	; 3
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	34 f4       	brge	.+12     	; 0x2c8a <MDIO_stderrSetPortValue+0x3e>
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	91 05       	cpc	r25, r1
    2c86:	61 f0       	breq	.+24     	; 0x2ca0 <MDIO_stderrSetPortValue+0x54>
    2c88:	1f c0       	rjmp	.+62     	; 0x2cc8 <MDIO_stderrSetPortValue+0x7c>
    2c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c8e:	23 30       	cpi	r18, 0x03	; 3
    2c90:	31 05       	cpc	r19, r1
    2c92:	81 f0       	breq	.+32     	; 0x2cb4 <MDIO_stderrSetPortValue+0x68>
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	84 30       	cpi	r24, 0x04	; 4
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	81 f0       	breq	.+32     	; 0x2cbe <MDIO_stderrSetPortValue+0x72>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2ca0:	e9 e3       	ldi	r30, 0x39	; 57
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	82 83       	std	Z+2, r24	; 0x02
    2ca8:	11 c0       	rjmp	.+34     	; 0x2ccc <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2caa:	e6 e3       	ldi	r30, 0x36	; 54
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb0:	82 83       	std	Z+2, r24	; 0x02
    2cb2:	0c c0       	rjmp	.+24     	; 0x2ccc <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2cb4:	e3 e3       	ldi	r30, 0x33	; 51
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	82 83       	std	Z+2, r24	; 0x02
    2cbc:	07 c0       	rjmp	.+14     	; 0x2ccc <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2cbe:	e0 e3       	ldi	r30, 0x30	; 48
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	82 83       	std	Z+2, r24	; 0x02
    2cc6:	02 c0       	rjmp	.+4      	; 0x2ccc <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <MDIO_stderrGetPortValue+0x6>
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <MDIO_stderrGetPortValue+0x8>
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <MDIO_stderrGetPortValue+0xa>
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	9b 83       	std	Y+3, r25	; 0x03
    2cee:	8a 83       	std	Y+2, r24	; 0x02
    2cf0:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2cf2:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	3e 83       	std	Y+6, r19	; 0x06
    2cfc:	2d 83       	std	Y+5, r18	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	82 30       	cpi	r24, 0x02	; 2
    2d04:	91 05       	cpc	r25, r1
    2d06:	e9 f0       	breq	.+58     	; 0x2d42 <MDIO_stderrGetPortValue+0x64>
    2d08:	2d 81       	ldd	r18, Y+5	; 0x05
    2d0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d0c:	23 30       	cpi	r18, 0x03	; 3
    2d0e:	31 05       	cpc	r19, r1
    2d10:	34 f4       	brge	.+12     	; 0x2d1e <MDIO_stderrGetPortValue+0x40>
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	91 05       	cpc	r25, r1
    2d1a:	61 f0       	breq	.+24     	; 0x2d34 <MDIO_stderrGetPortValue+0x56>
    2d1c:	27 c0       	rjmp	.+78     	; 0x2d6c <MDIO_stderrGetPortValue+0x8e>
    2d1e:	2d 81       	ldd	r18, Y+5	; 0x05
    2d20:	3e 81       	ldd	r19, Y+6	; 0x06
    2d22:	23 30       	cpi	r18, 0x03	; 3
    2d24:	31 05       	cpc	r19, r1
    2d26:	a1 f0       	breq	.+40     	; 0x2d50 <MDIO_stderrGetPortValue+0x72>
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	84 30       	cpi	r24, 0x04	; 4
    2d2e:	91 05       	cpc	r25, r1
    2d30:	b1 f0       	breq	.+44     	; 0x2d5e <MDIO_stderrGetPortValue+0x80>
    2d32:	1c c0       	rjmp	.+56     	; 0x2d6c <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2d34:	e9 e3       	ldi	r30, 0x39	; 57
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2d3e:	80 83       	st	Z, r24
    2d40:	17 c0       	rjmp	.+46     	; 0x2d70 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2d42:	e6 e3       	ldi	r30, 0x36	; 54
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	ea 81       	ldd	r30, Y+2	; 0x02
    2d4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d4c:	80 83       	st	Z, r24
    2d4e:	10 c0       	rjmp	.+32     	; 0x2d70 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2d50:	e3 e3       	ldi	r30, 0x33	; 51
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	ea 81       	ldd	r30, Y+2	; 0x02
    2d58:	fb 81       	ldd	r31, Y+3	; 0x03
    2d5a:	80 83       	st	Z, r24
    2d5c:	09 c0       	rjmp	.+18     	; 0x2d70 <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2d5e:	e0 e3       	ldi	r30, 0x30	; 48
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	ea 81       	ldd	r30, Y+2	; 0x02
    2d66:	fb 81       	ldd	r31, Y+3	; 0x03
    2d68:	80 83       	st	Z, r24
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d72:	26 96       	adiw	r28, 0x06	; 6
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	2a 97       	sbiw	r28, 0x0a	; 10
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	8a 83       	std	Y+2, r24	; 0x02
    2d9a:	6b 83       	std	Y+3, r22	; 0x03
    2d9c:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2d9e:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	88 30       	cpi	r24, 0x08	; 8
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <MDIO_stderrSetPinDirection+0x24>
    2da6:	d9 c1       	rjmp	.+946    	; 0x315a <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    2da8:	8c 81       	ldd	r24, Y+4	; 0x04
    2daa:	81 30       	cpi	r24, 0x01	; 1
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <MDIO_stderrSetPinDirection+0x2c>
    2dae:	7c c0       	rjmp	.+248    	; 0x2ea8 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	3a 87       	std	Y+10, r19	; 0x0a
    2db8:	29 87       	std	Y+9, r18	; 0x09
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	69 f1       	breq	.+90     	; 0x2e1e <MDIO_stderrSetPinDirection+0x9a>
    2dc4:	29 85       	ldd	r18, Y+9	; 0x09
    2dc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dc8:	23 30       	cpi	r18, 0x03	; 3
    2dca:	31 05       	cpc	r19, r1
    2dcc:	34 f4       	brge	.+12     	; 0x2dda <MDIO_stderrSetPinDirection+0x56>
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	69 f0       	breq	.+26     	; 0x2df2 <MDIO_stderrSetPinDirection+0x6e>
    2dd8:	64 c0       	rjmp	.+200    	; 0x2ea2 <MDIO_stderrSetPinDirection+0x11e>
    2dda:	29 85       	ldd	r18, Y+9	; 0x09
    2ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dde:	23 30       	cpi	r18, 0x03	; 3
    2de0:	31 05       	cpc	r19, r1
    2de2:	99 f1       	breq	.+102    	; 0x2e4a <MDIO_stderrSetPinDirection+0xc6>
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	84 30       	cpi	r24, 0x04	; 4
    2dea:	91 05       	cpc	r25, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <MDIO_stderrSetPinDirection+0x6c>
    2dee:	43 c0       	rjmp	.+134    	; 0x2e76 <MDIO_stderrSetPinDirection+0xf2>
    2df0:	58 c0       	rjmp	.+176    	; 0x2ea2 <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2df2:	a9 e3       	ldi	r26, 0x39	; 57
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	e9 e3       	ldi	r30, 0x39	; 57
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	81 81       	ldd	r24, Z+1	; 0x01
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	02 2e       	mov	r0, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <MDIO_stderrSetPinDirection+0x8c>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	0a 94       	dec	r0
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <MDIO_stderrSetPinDirection+0x88>
    2e14:	84 2b       	or	r24, r20
    2e16:	11 96       	adiw	r26, 0x01	; 1
    2e18:	8c 93       	st	X, r24
    2e1a:	11 97       	sbiw	r26, 0x01	; 1
    2e1c:	a0 c1       	rjmp	.+832    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2e1e:	a6 e3       	ldi	r26, 0x36	; 54
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e6 e3       	ldi	r30, 0x36	; 54
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	81 81       	ldd	r24, Z+1	; 0x01
    2e28:	48 2f       	mov	r20, r24
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	02 2e       	mov	r0, r18
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <MDIO_stderrSetPinDirection+0xb8>
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	0a 94       	dec	r0
    2e3e:	e2 f7       	brpl	.-8      	; 0x2e38 <MDIO_stderrSetPinDirection+0xb4>
    2e40:	84 2b       	or	r24, r20
    2e42:	11 96       	adiw	r26, 0x01	; 1
    2e44:	8c 93       	st	X, r24
    2e46:	11 97       	sbiw	r26, 0x01	; 1
    2e48:	8a c1       	rjmp	.+788    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2e4a:	a3 e3       	ldi	r26, 0x33	; 51
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	e3 e3       	ldi	r30, 0x33	; 51
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	81 81       	ldd	r24, Z+1	; 0x01
    2e54:	48 2f       	mov	r20, r24
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	02 2e       	mov	r0, r18
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <MDIO_stderrSetPinDirection+0xe4>
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	0a 94       	dec	r0
    2e6a:	e2 f7       	brpl	.-8      	; 0x2e64 <MDIO_stderrSetPinDirection+0xe0>
    2e6c:	84 2b       	or	r24, r20
    2e6e:	11 96       	adiw	r26, 0x01	; 1
    2e70:	8c 93       	st	X, r24
    2e72:	11 97       	sbiw	r26, 0x01	; 1
    2e74:	74 c1       	rjmp	.+744    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    2e76:	a0 e3       	ldi	r26, 0x30	; 48
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e0 e3       	ldi	r30, 0x30	; 48
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	81 81       	ldd	r24, Z+1	; 0x01
    2e80:	48 2f       	mov	r20, r24
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	02 2e       	mov	r0, r18
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <MDIO_stderrSetPinDirection+0x110>
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	0a 94       	dec	r0
    2e96:	e2 f7       	brpl	.-8      	; 0x2e90 <MDIO_stderrSetPinDirection+0x10c>
    2e98:	84 2b       	or	r24, r20
    2e9a:	11 96       	adiw	r26, 0x01	; 1
    2e9c:	8c 93       	st	X, r24
    2e9e:	11 97       	sbiw	r26, 0x01	; 1
    2ea0:	5e c1       	rjmp	.+700    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	5b c1       	rjmp	.+694    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    2ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	09 f0       	breq	.+2      	; 0x2eb0 <MDIO_stderrSetPinDirection+0x12c>
    2eae:	80 c0       	rjmp	.+256    	; 0x2fb0 <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	38 87       	std	Y+8, r19	; 0x08
    2eb8:	2f 83       	std	Y+7, r18	; 0x07
    2eba:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebc:	98 85       	ldd	r25, Y+8	; 0x08
    2ebe:	82 30       	cpi	r24, 0x02	; 2
    2ec0:	91 05       	cpc	r25, r1
    2ec2:	71 f1       	breq	.+92     	; 0x2f20 <MDIO_stderrSetPinDirection+0x19c>
    2ec4:	2f 81       	ldd	r18, Y+7	; 0x07
    2ec6:	38 85       	ldd	r19, Y+8	; 0x08
    2ec8:	23 30       	cpi	r18, 0x03	; 3
    2eca:	31 05       	cpc	r19, r1
    2ecc:	34 f4       	brge	.+12     	; 0x2eda <MDIO_stderrSetPinDirection+0x156>
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	98 85       	ldd	r25, Y+8	; 0x08
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	69 f0       	breq	.+26     	; 0x2ef2 <MDIO_stderrSetPinDirection+0x16e>
    2ed8:	68 c0       	rjmp	.+208    	; 0x2faa <MDIO_stderrSetPinDirection+0x226>
    2eda:	2f 81       	ldd	r18, Y+7	; 0x07
    2edc:	38 85       	ldd	r19, Y+8	; 0x08
    2ede:	23 30       	cpi	r18, 0x03	; 3
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	a9 f1       	breq	.+106    	; 0x2f4e <MDIO_stderrSetPinDirection+0x1ca>
    2ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee6:	98 85       	ldd	r25, Y+8	; 0x08
    2ee8:	84 30       	cpi	r24, 0x04	; 4
    2eea:	91 05       	cpc	r25, r1
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <MDIO_stderrSetPinDirection+0x16c>
    2eee:	46 c0       	rjmp	.+140    	; 0x2f7c <MDIO_stderrSetPinDirection+0x1f8>
    2ef0:	5c c0       	rjmp	.+184    	; 0x2faa <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2ef2:	a9 e3       	ldi	r26, 0x39	; 57
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e9 e3       	ldi	r30, 0x39	; 57
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	81 81       	ldd	r24, Z+1	; 0x01
    2efc:	48 2f       	mov	r20, r24
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	02 2e       	mov	r0, r18
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <MDIO_stderrSetPinDirection+0x18c>
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	0a 94       	dec	r0
    2f12:	e2 f7       	brpl	.-8      	; 0x2f0c <MDIO_stderrSetPinDirection+0x188>
    2f14:	80 95       	com	r24
    2f16:	84 23       	and	r24, r20
    2f18:	11 96       	adiw	r26, 0x01	; 1
    2f1a:	8c 93       	st	X, r24
    2f1c:	11 97       	sbiw	r26, 0x01	; 1
    2f1e:	1f c1       	rjmp	.+574    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2f20:	a6 e3       	ldi	r26, 0x36	; 54
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e6 e3       	ldi	r30, 0x36	; 54
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	81 81       	ldd	r24, Z+1	; 0x01
    2f2a:	48 2f       	mov	r20, r24
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	28 2f       	mov	r18, r24
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	02 2e       	mov	r0, r18
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <MDIO_stderrSetPinDirection+0x1ba>
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	0a 94       	dec	r0
    2f40:	e2 f7       	brpl	.-8      	; 0x2f3a <MDIO_stderrSetPinDirection+0x1b6>
    2f42:	80 95       	com	r24
    2f44:	84 23       	and	r24, r20
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	8c 93       	st	X, r24
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	08 c1       	rjmp	.+528    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2f4e:	a3 e3       	ldi	r26, 0x33	; 51
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e3 e3       	ldi	r30, 0x33	; 51
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	81 81       	ldd	r24, Z+1	; 0x01
    2f58:	48 2f       	mov	r20, r24
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 2e       	mov	r0, r18
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <MDIO_stderrSetPinDirection+0x1e8>
    2f68:	88 0f       	add	r24, r24
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	0a 94       	dec	r0
    2f6e:	e2 f7       	brpl	.-8      	; 0x2f68 <MDIO_stderrSetPinDirection+0x1e4>
    2f70:	80 95       	com	r24
    2f72:	84 23       	and	r24, r20
    2f74:	11 96       	adiw	r26, 0x01	; 1
    2f76:	8c 93       	st	X, r24
    2f78:	11 97       	sbiw	r26, 0x01	; 1
    2f7a:	f1 c0       	rjmp	.+482    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    2f7c:	a0 e3       	ldi	r26, 0x30	; 48
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e0 e3       	ldi	r30, 0x30	; 48
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	81 81       	ldd	r24, Z+1	; 0x01
    2f86:	48 2f       	mov	r20, r24
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	02 2e       	mov	r0, r18
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <MDIO_stderrSetPinDirection+0x216>
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	0a 94       	dec	r0
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <MDIO_stderrSetPinDirection+0x212>
    2f9e:	80 95       	com	r24
    2fa0:	84 23       	and	r24, r20
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	8c 93       	st	X, r24
    2fa6:	11 97       	sbiw	r26, 0x01	; 1
    2fa8:	da c0       	rjmp	.+436    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	d7 c0       	rjmp	.+430    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    2fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb2:	83 30       	cpi	r24, 0x03	; 3
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <MDIO_stderrSetPinDirection+0x234>
    2fb6:	ce c0       	rjmp	.+412    	; 0x3154 <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	3e 83       	std	Y+6, r19	; 0x06
    2fc0:	2d 83       	std	Y+5, r18	; 0x05
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	82 30       	cpi	r24, 0x02	; 2
    2fc8:	91 05       	cpc	r25, r1
    2fca:	09 f4       	brne	.+2      	; 0x2fce <MDIO_stderrSetPinDirection+0x24a>
    2fcc:	42 c0       	rjmp	.+132    	; 0x3052 <MDIO_stderrSetPinDirection+0x2ce>
    2fce:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd2:	23 30       	cpi	r18, 0x03	; 3
    2fd4:	31 05       	cpc	r19, r1
    2fd6:	34 f4       	brge	.+12     	; 0x2fe4 <MDIO_stderrSetPinDirection+0x260>
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	81 30       	cpi	r24, 0x01	; 1
    2fde:	91 05       	cpc	r25, r1
    2fe0:	71 f0       	breq	.+28     	; 0x2ffe <MDIO_stderrSetPinDirection+0x27a>
    2fe2:	b5 c0       	rjmp	.+362    	; 0x314e <MDIO_stderrSetPinDirection+0x3ca>
    2fe4:	2d 81       	ldd	r18, Y+5	; 0x05
    2fe6:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe8:	23 30       	cpi	r18, 0x03	; 3
    2fea:	31 05       	cpc	r19, r1
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <MDIO_stderrSetPinDirection+0x26c>
    2fee:	5b c0       	rjmp	.+182    	; 0x30a6 <MDIO_stderrSetPinDirection+0x322>
    2ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff4:	84 30       	cpi	r24, 0x04	; 4
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <MDIO_stderrSetPinDirection+0x278>
    2ffa:	7f c0       	rjmp	.+254    	; 0x30fa <MDIO_stderrSetPinDirection+0x376>
    2ffc:	a8 c0       	rjmp	.+336    	; 0x314e <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    2ffe:	a9 e3       	ldi	r26, 0x39	; 57
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e9 e3       	ldi	r30, 0x39	; 57
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	81 81       	ldd	r24, Z+1	; 0x01
    3008:	48 2f       	mov	r20, r24
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	02 c0       	rjmp	.+4      	; 0x301a <MDIO_stderrSetPinDirection+0x296>
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	2a 95       	dec	r18
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <MDIO_stderrSetPinDirection+0x292>
    301e:	80 95       	com	r24
    3020:	84 23       	and	r24, r20
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	8c 93       	st	X, r24
    3026:	a9 e3       	ldi	r26, 0x39	; 57
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e9 e3       	ldi	r30, 0x39	; 57
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	48 2f       	mov	r20, r24
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	02 2e       	mov	r0, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <MDIO_stderrSetPinDirection+0x2c0>
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	0a 94       	dec	r0
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <MDIO_stderrSetPinDirection+0x2bc>
    3048:	84 2b       	or	r24, r20
    304a:	12 96       	adiw	r26, 0x02	; 2
    304c:	8c 93       	st	X, r24
    304e:	12 97       	sbiw	r26, 0x02	; 2
    3050:	86 c0       	rjmp	.+268    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    3052:	a6 e3       	ldi	r26, 0x36	; 54
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e6 e3       	ldi	r30, 0x36	; 54
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	81 81       	ldd	r24, Z+1	; 0x01
    305c:	48 2f       	mov	r20, r24
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	28 2f       	mov	r18, r24
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	02 c0       	rjmp	.+4      	; 0x306e <MDIO_stderrSetPinDirection+0x2ea>
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	2a 95       	dec	r18
    3070:	e2 f7       	brpl	.-8      	; 0x306a <MDIO_stderrSetPinDirection+0x2e6>
    3072:	80 95       	com	r24
    3074:	84 23       	and	r24, r20
    3076:	11 96       	adiw	r26, 0x01	; 1
    3078:	8c 93       	st	X, r24
    307a:	a6 e3       	ldi	r26, 0x36	; 54
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e6 e3       	ldi	r30, 0x36	; 54
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	48 2f       	mov	r20, r24
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 2e       	mov	r0, r18
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <MDIO_stderrSetPinDirection+0x314>
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <MDIO_stderrSetPinDirection+0x310>
    309c:	84 2b       	or	r24, r20
    309e:	12 96       	adiw	r26, 0x02	; 2
    30a0:	8c 93       	st	X, r24
    30a2:	12 97       	sbiw	r26, 0x02	; 2
    30a4:	5c c0       	rjmp	.+184    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    30a6:	a3 e3       	ldi	r26, 0x33	; 51
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	e3 e3       	ldi	r30, 0x33	; 51
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	81 81       	ldd	r24, Z+1	; 0x01
    30b0:	48 2f       	mov	r20, r24
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <MDIO_stderrSetPinDirection+0x33e>
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	2a 95       	dec	r18
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <MDIO_stderrSetPinDirection+0x33a>
    30c6:	80 95       	com	r24
    30c8:	84 23       	and	r24, r20
    30ca:	11 96       	adiw	r26, 0x01	; 1
    30cc:	8c 93       	st	X, r24
    30ce:	a3 e3       	ldi	r26, 0x33	; 51
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e3 e3       	ldi	r30, 0x33	; 51
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	48 2f       	mov	r20, r24
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	02 2e       	mov	r0, r18
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <MDIO_stderrSetPinDirection+0x368>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	0a 94       	dec	r0
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <MDIO_stderrSetPinDirection+0x364>
    30f0:	84 2b       	or	r24, r20
    30f2:	12 96       	adiw	r26, 0x02	; 2
    30f4:	8c 93       	st	X, r24
    30f6:	12 97       	sbiw	r26, 0x02	; 2
    30f8:	32 c0       	rjmp	.+100    	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    30fa:	a0 e3       	ldi	r26, 0x30	; 48
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e0 e3       	ldi	r30, 0x30	; 48
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	81 81       	ldd	r24, Z+1	; 0x01
    3104:	48 2f       	mov	r20, r24
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <MDIO_stderrSetPinDirection+0x392>
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	2a 95       	dec	r18
    3118:	e2 f7       	brpl	.-8      	; 0x3112 <MDIO_stderrSetPinDirection+0x38e>
    311a:	80 95       	com	r24
    311c:	84 23       	and	r24, r20
    311e:	11 96       	adiw	r26, 0x01	; 1
    3120:	8c 93       	st	X, r24
    3122:	a0 e3       	ldi	r26, 0x30	; 48
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e0 e3       	ldi	r30, 0x30	; 48
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	82 81       	ldd	r24, Z+2	; 0x02
    312c:	48 2f       	mov	r20, r24
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 2e       	mov	r0, r18
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <MDIO_stderrSetPinDirection+0x3bc>
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	0a 94       	dec	r0
    3142:	e2 f7       	brpl	.-8      	; 0x313c <MDIO_stderrSetPinDirection+0x3b8>
    3144:	84 2b       	or	r24, r20
    3146:	12 96       	adiw	r26, 0x02	; 2
    3148:	8c 93       	st	X, r24
    314a:	12 97       	sbiw	r26, 0x02	; 2
    314c:	08 c0       	rjmp	.+16     	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	05 c0       	rjmp	.+10     	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	89 83       	std	Y+1, r24	; 0x01
    3158:	02 c0       	rjmp	.+4      	; 0x315e <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    315e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3160:	2a 96       	adiw	r28, 0x0a	; 10
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	28 97       	sbiw	r28, 0x08	; 8
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	de bf       	out	0x3e, r29	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	cd bf       	out	0x3d, r28	; 61
    3186:	8a 83       	std	Y+2, r24	; 0x02
    3188:	6b 83       	std	Y+3, r22	; 0x03
    318a:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    318c:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	88 30       	cpi	r24, 0x08	; 8
    3192:	08 f0       	brcs	.+2      	; 0x3196 <MDIO_stderrSetPinValue+0x24>
    3194:	07 c1       	rjmp	.+526    	; 0x33a4 <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    3196:	8c 81       	ldd	r24, Y+4	; 0x04
    3198:	82 30       	cpi	r24, 0x02	; 2
    319a:	09 f0       	breq	.+2      	; 0x319e <MDIO_stderrSetPinValue+0x2c>
    319c:	7c c0       	rjmp	.+248    	; 0x3296 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	38 87       	std	Y+8, r19	; 0x08
    31a6:	2f 83       	std	Y+7, r18	; 0x07
    31a8:	8f 81       	ldd	r24, Y+7	; 0x07
    31aa:	98 85       	ldd	r25, Y+8	; 0x08
    31ac:	82 30       	cpi	r24, 0x02	; 2
    31ae:	91 05       	cpc	r25, r1
    31b0:	69 f1       	breq	.+90     	; 0x320c <MDIO_stderrSetPinValue+0x9a>
    31b2:	2f 81       	ldd	r18, Y+7	; 0x07
    31b4:	38 85       	ldd	r19, Y+8	; 0x08
    31b6:	23 30       	cpi	r18, 0x03	; 3
    31b8:	31 05       	cpc	r19, r1
    31ba:	34 f4       	brge	.+12     	; 0x31c8 <MDIO_stderrSetPinValue+0x56>
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	91 05       	cpc	r25, r1
    31c4:	69 f0       	breq	.+26     	; 0x31e0 <MDIO_stderrSetPinValue+0x6e>
    31c6:	64 c0       	rjmp	.+200    	; 0x3290 <MDIO_stderrSetPinValue+0x11e>
    31c8:	2f 81       	ldd	r18, Y+7	; 0x07
    31ca:	38 85       	ldd	r19, Y+8	; 0x08
    31cc:	23 30       	cpi	r18, 0x03	; 3
    31ce:	31 05       	cpc	r19, r1
    31d0:	99 f1       	breq	.+102    	; 0x3238 <MDIO_stderrSetPinValue+0xc6>
    31d2:	8f 81       	ldd	r24, Y+7	; 0x07
    31d4:	98 85       	ldd	r25, Y+8	; 0x08
    31d6:	84 30       	cpi	r24, 0x04	; 4
    31d8:	91 05       	cpc	r25, r1
    31da:	09 f4       	brne	.+2      	; 0x31de <MDIO_stderrSetPinValue+0x6c>
    31dc:	43 c0       	rjmp	.+134    	; 0x3264 <MDIO_stderrSetPinValue+0xf2>
    31de:	58 c0       	rjmp	.+176    	; 0x3290 <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    31e0:	a9 e3       	ldi	r26, 0x39	; 57
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e9 e3       	ldi	r30, 0x39	; 57
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	48 2f       	mov	r20, r24
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	02 2e       	mov	r0, r18
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <MDIO_stderrSetPinValue+0x8c>
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	0a 94       	dec	r0
    3200:	e2 f7       	brpl	.-8      	; 0x31fa <MDIO_stderrSetPinValue+0x88>
    3202:	84 2b       	or	r24, r20
    3204:	12 96       	adiw	r26, 0x02	; 2
    3206:	8c 93       	st	X, r24
    3208:	12 97       	sbiw	r26, 0x02	; 2
    320a:	ce c0       	rjmp	.+412    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    320c:	a6 e3       	ldi	r26, 0x36	; 54
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e6 e3       	ldi	r30, 0x36	; 54
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	48 2f       	mov	r20, r24
    3218:	8b 81       	ldd	r24, Y+3	; 0x03
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	02 2e       	mov	r0, r18
    3224:	02 c0       	rjmp	.+4      	; 0x322a <MDIO_stderrSetPinValue+0xb8>
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	0a 94       	dec	r0
    322c:	e2 f7       	brpl	.-8      	; 0x3226 <MDIO_stderrSetPinValue+0xb4>
    322e:	84 2b       	or	r24, r20
    3230:	12 96       	adiw	r26, 0x02	; 2
    3232:	8c 93       	st	X, r24
    3234:	12 97       	sbiw	r26, 0x02	; 2
    3236:	b8 c0       	rjmp	.+368    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    3238:	a3 e3       	ldi	r26, 0x33	; 51
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e3 e3       	ldi	r30, 0x33	; 51
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	82 81       	ldd	r24, Z+2	; 0x02
    3242:	48 2f       	mov	r20, r24
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	02 2e       	mov	r0, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <MDIO_stderrSetPinValue+0xe4>
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	0a 94       	dec	r0
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <MDIO_stderrSetPinValue+0xe0>
    325a:	84 2b       	or	r24, r20
    325c:	12 96       	adiw	r26, 0x02	; 2
    325e:	8c 93       	st	X, r24
    3260:	12 97       	sbiw	r26, 0x02	; 2
    3262:	a2 c0       	rjmp	.+324    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    3264:	a0 e3       	ldi	r26, 0x30	; 48
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e0 e3       	ldi	r30, 0x30	; 48
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	48 2f       	mov	r20, r24
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 2e       	mov	r0, r18
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <MDIO_stderrSetPinValue+0x110>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <MDIO_stderrSetPinValue+0x10c>
    3286:	84 2b       	or	r24, r20
    3288:	12 96       	adiw	r26, 0x02	; 2
    328a:	8c 93       	st	X, r24
    328c:	12 97       	sbiw	r26, 0x02	; 2
    328e:	8c c0       	rjmp	.+280    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	89 c0       	rjmp	.+274    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    3296:	8c 81       	ldd	r24, Y+4	; 0x04
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	09 f0       	breq	.+2      	; 0x329e <MDIO_stderrSetPinValue+0x12c>
    329c:	80 c0       	rjmp	.+256    	; 0x339e <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    329e:	8a 81       	ldd	r24, Y+2	; 0x02
    32a0:	28 2f       	mov	r18, r24
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	3e 83       	std	Y+6, r19	; 0x06
    32a6:	2d 83       	std	Y+5, r18	; 0x05
    32a8:	8d 81       	ldd	r24, Y+5	; 0x05
    32aa:	9e 81       	ldd	r25, Y+6	; 0x06
    32ac:	82 30       	cpi	r24, 0x02	; 2
    32ae:	91 05       	cpc	r25, r1
    32b0:	71 f1       	breq	.+92     	; 0x330e <MDIO_stderrSetPinValue+0x19c>
    32b2:	2d 81       	ldd	r18, Y+5	; 0x05
    32b4:	3e 81       	ldd	r19, Y+6	; 0x06
    32b6:	23 30       	cpi	r18, 0x03	; 3
    32b8:	31 05       	cpc	r19, r1
    32ba:	34 f4       	brge	.+12     	; 0x32c8 <MDIO_stderrSetPinValue+0x156>
    32bc:	8d 81       	ldd	r24, Y+5	; 0x05
    32be:	9e 81       	ldd	r25, Y+6	; 0x06
    32c0:	81 30       	cpi	r24, 0x01	; 1
    32c2:	91 05       	cpc	r25, r1
    32c4:	69 f0       	breq	.+26     	; 0x32e0 <MDIO_stderrSetPinValue+0x16e>
    32c6:	68 c0       	rjmp	.+208    	; 0x3398 <MDIO_stderrSetPinValue+0x226>
    32c8:	2d 81       	ldd	r18, Y+5	; 0x05
    32ca:	3e 81       	ldd	r19, Y+6	; 0x06
    32cc:	23 30       	cpi	r18, 0x03	; 3
    32ce:	31 05       	cpc	r19, r1
    32d0:	a9 f1       	breq	.+106    	; 0x333c <MDIO_stderrSetPinValue+0x1ca>
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	84 30       	cpi	r24, 0x04	; 4
    32d8:	91 05       	cpc	r25, r1
    32da:	09 f4       	brne	.+2      	; 0x32de <MDIO_stderrSetPinValue+0x16c>
    32dc:	46 c0       	rjmp	.+140    	; 0x336a <MDIO_stderrSetPinValue+0x1f8>
    32de:	5c c0       	rjmp	.+184    	; 0x3398 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    32e0:	a9 e3       	ldi	r26, 0x39	; 57
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	e9 e3       	ldi	r30, 0x39	; 57
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	48 2f       	mov	r20, r24
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	02 2e       	mov	r0, r18
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <MDIO_stderrSetPinValue+0x18c>
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	0a 94       	dec	r0
    3300:	e2 f7       	brpl	.-8      	; 0x32fa <MDIO_stderrSetPinValue+0x188>
    3302:	80 95       	com	r24
    3304:	84 23       	and	r24, r20
    3306:	12 96       	adiw	r26, 0x02	; 2
    3308:	8c 93       	st	X, r24
    330a:	12 97       	sbiw	r26, 0x02	; 2
    330c:	4d c0       	rjmp	.+154    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    330e:	a6 e3       	ldi	r26, 0x36	; 54
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e6 e3       	ldi	r30, 0x36	; 54
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	48 2f       	mov	r20, r24
    331a:	8b 81       	ldd	r24, Y+3	; 0x03
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	02 2e       	mov	r0, r18
    3326:	02 c0       	rjmp	.+4      	; 0x332c <MDIO_stderrSetPinValue+0x1ba>
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	0a 94       	dec	r0
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <MDIO_stderrSetPinValue+0x1b6>
    3330:	80 95       	com	r24
    3332:	84 23       	and	r24, r20
    3334:	12 96       	adiw	r26, 0x02	; 2
    3336:	8c 93       	st	X, r24
    3338:	12 97       	sbiw	r26, 0x02	; 2
    333a:	36 c0       	rjmp	.+108    	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    333c:	a3 e3       	ldi	r26, 0x33	; 51
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e3 e3       	ldi	r30, 0x33	; 51
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	82 81       	ldd	r24, Z+2	; 0x02
    3346:	48 2f       	mov	r20, r24
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	28 2f       	mov	r18, r24
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	02 2e       	mov	r0, r18
    3354:	02 c0       	rjmp	.+4      	; 0x335a <MDIO_stderrSetPinValue+0x1e8>
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	0a 94       	dec	r0
    335c:	e2 f7       	brpl	.-8      	; 0x3356 <MDIO_stderrSetPinValue+0x1e4>
    335e:	80 95       	com	r24
    3360:	84 23       	and	r24, r20
    3362:	12 96       	adiw	r26, 0x02	; 2
    3364:	8c 93       	st	X, r24
    3366:	12 97       	sbiw	r26, 0x02	; 2
    3368:	1f c0       	rjmp	.+62     	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    336a:	a0 e3       	ldi	r26, 0x30	; 48
    336c:	b0 e0       	ldi	r27, 0x00	; 0
    336e:	e0 e3       	ldi	r30, 0x30	; 48
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	82 81       	ldd	r24, Z+2	; 0x02
    3374:	48 2f       	mov	r20, r24
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	02 2e       	mov	r0, r18
    3382:	02 c0       	rjmp	.+4      	; 0x3388 <MDIO_stderrSetPinValue+0x216>
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	0a 94       	dec	r0
    338a:	e2 f7       	brpl	.-8      	; 0x3384 <MDIO_stderrSetPinValue+0x212>
    338c:	80 95       	com	r24
    338e:	84 23       	and	r24, r20
    3390:	12 96       	adiw	r26, 0x02	; 2
    3392:	8c 93       	st	X, r24
    3394:	12 97       	sbiw	r26, 0x02	; 2
    3396:	08 c0       	rjmp	.+16     	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	05 c0       	rjmp	.+10     	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33aa:	28 96       	adiw	r28, 0x08	; 8
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	27 97       	sbiw	r28, 0x07	; 7
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	9b 83       	std	Y+3, r25	; 0x03
    33d2:	8a 83       	std	Y+2, r24	; 0x02
    33d4:	6c 83       	std	Y+4, r22	; 0x04
    33d6:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    33d8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	9b 81       	ldd	r25, Y+3	; 0x03
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	19 f4       	brne	.+6      	; 0x33e8 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	7a c0       	rjmp	.+244    	; 0x34dc <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    33e8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ea:	88 30       	cpi	r24, 0x08	; 8
    33ec:	08 f0       	brcs	.+2      	; 0x33f0 <MDIO_stderrGetPinValue+0x34>
    33ee:	74 c0       	rjmp	.+232    	; 0x34d8 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    33f0:	8c 81       	ldd	r24, Y+4	; 0x04
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3f 83       	std	Y+7, r19	; 0x07
    33f8:	2e 83       	std	Y+6, r18	; 0x06
    33fa:	4e 81       	ldd	r20, Y+6	; 0x06
    33fc:	5f 81       	ldd	r21, Y+7	; 0x07
    33fe:	42 30       	cpi	r20, 0x02	; 2
    3400:	51 05       	cpc	r21, r1
    3402:	59 f1       	breq	.+86     	; 0x345a <MDIO_stderrGetPinValue+0x9e>
    3404:	8e 81       	ldd	r24, Y+6	; 0x06
    3406:	9f 81       	ldd	r25, Y+7	; 0x07
    3408:	83 30       	cpi	r24, 0x03	; 3
    340a:	91 05       	cpc	r25, r1
    340c:	34 f4       	brge	.+12     	; 0x341a <MDIO_stderrGetPinValue+0x5e>
    340e:	2e 81       	ldd	r18, Y+6	; 0x06
    3410:	3f 81       	ldd	r19, Y+7	; 0x07
    3412:	21 30       	cpi	r18, 0x01	; 1
    3414:	31 05       	cpc	r19, r1
    3416:	69 f0       	breq	.+26     	; 0x3432 <MDIO_stderrGetPinValue+0x76>
    3418:	5c c0       	rjmp	.+184    	; 0x34d2 <MDIO_stderrGetPinValue+0x116>
    341a:	4e 81       	ldd	r20, Y+6	; 0x06
    341c:	5f 81       	ldd	r21, Y+7	; 0x07
    341e:	43 30       	cpi	r20, 0x03	; 3
    3420:	51 05       	cpc	r21, r1
    3422:	79 f1       	breq	.+94     	; 0x3482 <MDIO_stderrGetPinValue+0xc6>
    3424:	8e 81       	ldd	r24, Y+6	; 0x06
    3426:	9f 81       	ldd	r25, Y+7	; 0x07
    3428:	84 30       	cpi	r24, 0x04	; 4
    342a:	91 05       	cpc	r25, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <MDIO_stderrGetPinValue+0x74>
    342e:	3d c0       	rjmp	.+122    	; 0x34aa <MDIO_stderrGetPinValue+0xee>
    3430:	50 c0       	rjmp	.+160    	; 0x34d2 <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    3432:	e9 e3       	ldi	r30, 0x39	; 57
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	a9 01       	movw	r20, r18
    3444:	02 c0       	rjmp	.+4      	; 0x344a <MDIO_stderrGetPinValue+0x8e>
    3446:	55 95       	asr	r21
    3448:	47 95       	ror	r20
    344a:	8a 95       	dec	r24
    344c:	e2 f7       	brpl	.-8      	; 0x3446 <MDIO_stderrGetPinValue+0x8a>
    344e:	ca 01       	movw	r24, r20
    3450:	81 70       	andi	r24, 0x01	; 1
    3452:	ea 81       	ldd	r30, Y+2	; 0x02
    3454:	fb 81       	ldd	r31, Y+3	; 0x03
    3456:	80 83       	st	Z, r24
    3458:	41 c0       	rjmp	.+130    	; 0x34dc <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    345a:	e6 e3       	ldi	r30, 0x36	; 54
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	28 2f       	mov	r18, r24
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	88 2f       	mov	r24, r24
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	a9 01       	movw	r20, r18
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <MDIO_stderrGetPinValue+0xb6>
    346e:	55 95       	asr	r21
    3470:	47 95       	ror	r20
    3472:	8a 95       	dec	r24
    3474:	e2 f7       	brpl	.-8      	; 0x346e <MDIO_stderrGetPinValue+0xb2>
    3476:	ca 01       	movw	r24, r20
    3478:	81 70       	andi	r24, 0x01	; 1
    347a:	ea 81       	ldd	r30, Y+2	; 0x02
    347c:	fb 81       	ldd	r31, Y+3	; 0x03
    347e:	80 83       	st	Z, r24
    3480:	2d c0       	rjmp	.+90     	; 0x34dc <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    3482:	e3 e3       	ldi	r30, 0x33	; 51
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	8d 81       	ldd	r24, Y+5	; 0x05
    348e:	88 2f       	mov	r24, r24
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	a9 01       	movw	r20, r18
    3494:	02 c0       	rjmp	.+4      	; 0x349a <MDIO_stderrGetPinValue+0xde>
    3496:	55 95       	asr	r21
    3498:	47 95       	ror	r20
    349a:	8a 95       	dec	r24
    349c:	e2 f7       	brpl	.-8      	; 0x3496 <MDIO_stderrGetPinValue+0xda>
    349e:	ca 01       	movw	r24, r20
    34a0:	81 70       	andi	r24, 0x01	; 1
    34a2:	ea 81       	ldd	r30, Y+2	; 0x02
    34a4:	fb 81       	ldd	r31, Y+3	; 0x03
    34a6:	80 83       	st	Z, r24
    34a8:	19 c0       	rjmp	.+50     	; 0x34dc <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    34aa:	e0 e3       	ldi	r30, 0x30	; 48
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	28 2f       	mov	r18, r24
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	88 2f       	mov	r24, r24
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a9 01       	movw	r20, r18
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <MDIO_stderrGetPinValue+0x106>
    34be:	55 95       	asr	r21
    34c0:	47 95       	ror	r20
    34c2:	8a 95       	dec	r24
    34c4:	e2 f7       	brpl	.-8      	; 0x34be <MDIO_stderrGetPinValue+0x102>
    34c6:	ca 01       	movw	r24, r20
    34c8:	81 70       	andi	r24, 0x01	; 1
    34ca:	ea 81       	ldd	r30, Y+2	; 0x02
    34cc:	fb 81       	ldd	r31, Y+3	; 0x03
    34ce:	80 83       	st	Z, r24
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	02 c0       	rjmp	.+4      	; 0x34dc <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    34de:	27 96       	adiw	r28, 0x07	; 7
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <MDIO_stderrTogglePinValue+0x6>
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <MDIO_stderrTogglePinValue+0x8>
    34f8:	0f 92       	push	r0
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	8a 83       	std	Y+2, r24	; 0x02
    3500:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    3502:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	88 30       	cpi	r24, 0x08	; 8
    3508:	08 f0       	brcs	.+2      	; 0x350c <MDIO_stderrTogglePinValue+0x1c>
    350a:	7c c0       	rjmp	.+248    	; 0x3604 <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	28 2f       	mov	r18, r24
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	3d 83       	std	Y+5, r19	; 0x05
    3514:	2c 83       	std	Y+4, r18	; 0x04
    3516:	8c 81       	ldd	r24, Y+4	; 0x04
    3518:	9d 81       	ldd	r25, Y+5	; 0x05
    351a:	82 30       	cpi	r24, 0x02	; 2
    351c:	91 05       	cpc	r25, r1
    351e:	69 f1       	breq	.+90     	; 0x357a <MDIO_stderrTogglePinValue+0x8a>
    3520:	2c 81       	ldd	r18, Y+4	; 0x04
    3522:	3d 81       	ldd	r19, Y+5	; 0x05
    3524:	23 30       	cpi	r18, 0x03	; 3
    3526:	31 05       	cpc	r19, r1
    3528:	34 f4       	brge	.+12     	; 0x3536 <MDIO_stderrTogglePinValue+0x46>
    352a:	8c 81       	ldd	r24, Y+4	; 0x04
    352c:	9d 81       	ldd	r25, Y+5	; 0x05
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	91 05       	cpc	r25, r1
    3532:	69 f0       	breq	.+26     	; 0x354e <MDIO_stderrTogglePinValue+0x5e>
    3534:	64 c0       	rjmp	.+200    	; 0x35fe <MDIO_stderrTogglePinValue+0x10e>
    3536:	2c 81       	ldd	r18, Y+4	; 0x04
    3538:	3d 81       	ldd	r19, Y+5	; 0x05
    353a:	23 30       	cpi	r18, 0x03	; 3
    353c:	31 05       	cpc	r19, r1
    353e:	99 f1       	breq	.+102    	; 0x35a6 <MDIO_stderrTogglePinValue+0xb6>
    3540:	8c 81       	ldd	r24, Y+4	; 0x04
    3542:	9d 81       	ldd	r25, Y+5	; 0x05
    3544:	84 30       	cpi	r24, 0x04	; 4
    3546:	91 05       	cpc	r25, r1
    3548:	09 f4       	brne	.+2      	; 0x354c <MDIO_stderrTogglePinValue+0x5c>
    354a:	43 c0       	rjmp	.+134    	; 0x35d2 <MDIO_stderrTogglePinValue+0xe2>
    354c:	58 c0       	rjmp	.+176    	; 0x35fe <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    354e:	a9 e3       	ldi	r26, 0x39	; 57
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	e9 e3       	ldi	r30, 0x39	; 57
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	82 81       	ldd	r24, Z+2	; 0x02
    3558:	48 2f       	mov	r20, r24
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	28 2f       	mov	r18, r24
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	02 2e       	mov	r0, r18
    3566:	02 c0       	rjmp	.+4      	; 0x356c <MDIO_stderrTogglePinValue+0x7c>
    3568:	88 0f       	add	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	0a 94       	dec	r0
    356e:	e2 f7       	brpl	.-8      	; 0x3568 <MDIO_stderrTogglePinValue+0x78>
    3570:	84 27       	eor	r24, r20
    3572:	12 96       	adiw	r26, 0x02	; 2
    3574:	8c 93       	st	X, r24
    3576:	12 97       	sbiw	r26, 0x02	; 2
    3578:	47 c0       	rjmp	.+142    	; 0x3608 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    357a:	a6 e3       	ldi	r26, 0x36	; 54
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e6 e3       	ldi	r30, 0x36	; 54
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	82 81       	ldd	r24, Z+2	; 0x02
    3584:	48 2f       	mov	r20, r24
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	28 2f       	mov	r18, r24
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	02 2e       	mov	r0, r18
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <MDIO_stderrTogglePinValue+0xa8>
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	0a 94       	dec	r0
    359a:	e2 f7       	brpl	.-8      	; 0x3594 <MDIO_stderrTogglePinValue+0xa4>
    359c:	84 27       	eor	r24, r20
    359e:	12 96       	adiw	r26, 0x02	; 2
    35a0:	8c 93       	st	X, r24
    35a2:	12 97       	sbiw	r26, 0x02	; 2
    35a4:	31 c0       	rjmp	.+98     	; 0x3608 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    35a6:	a3 e3       	ldi	r26, 0x33	; 51
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	e3 e3       	ldi	r30, 0x33	; 51
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	48 2f       	mov	r20, r24
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	02 2e       	mov	r0, r18
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <MDIO_stderrTogglePinValue+0xd4>
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	0a 94       	dec	r0
    35c6:	e2 f7       	brpl	.-8      	; 0x35c0 <MDIO_stderrTogglePinValue+0xd0>
    35c8:	84 27       	eor	r24, r20
    35ca:	12 96       	adiw	r26, 0x02	; 2
    35cc:	8c 93       	st	X, r24
    35ce:	12 97       	sbiw	r26, 0x02	; 2
    35d0:	1b c0       	rjmp	.+54     	; 0x3608 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    35d2:	a0 e3       	ldi	r26, 0x30	; 48
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e0 e3       	ldi	r30, 0x30	; 48
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	82 81       	ldd	r24, Z+2	; 0x02
    35dc:	48 2f       	mov	r20, r24
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	02 2e       	mov	r0, r18
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <MDIO_stderrTogglePinValue+0x100>
    35ec:	88 0f       	add	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	0a 94       	dec	r0
    35f2:	e2 f7       	brpl	.-8      	; 0x35ec <MDIO_stderrTogglePinValue+0xfc>
    35f4:	84 27       	eor	r24, r20
    35f6:	12 96       	adiw	r26, 0x02	; 2
    35f8:	8c 93       	st	X, r24
    35fa:	12 97       	sbiw	r26, 0x02	; 2
    35fc:	05 c0       	rjmp	.+10     	; 0x3608 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    3604:	82 e0       	ldi	r24, 0x02	; 2
    3606:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3608:	89 81       	ldd	r24, Y+1	; 0x01
}
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <MTWI_stderrInit>:
 static void (*MTWI_pvoidfUserFunction)(void) = NULL_POINTER ;
 
 
 
STD_error_t MTWI_stderrInit(u32 ARG_u32DataRate, u8 ARG_u8Prescalar)
{
    361a:	0f 93       	push	r16
    361c:	1f 93       	push	r17
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	28 97       	sbiw	r28, 0x08	; 8
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	6a 83       	std	Y+2, r22	; 0x02
    3634:	7b 83       	std	Y+3, r23	; 0x03
    3636:	8c 83       	std	Y+4, r24	; 0x04
    3638:	9d 83       	std	Y+5, r25	; 0x05
    363a:	4e 83       	std	Y+6, r20	; 0x06
	STD_error_t L_stderrStatus = E_OK ;
    363c:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Prescalar)
    363e:	8e 81       	ldd	r24, Y+6	; 0x06
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	38 87       	std	Y+8, r19	; 0x08
    3646:	2f 83       	std	Y+7, r18	; 0x07
    3648:	8f 81       	ldd	r24, Y+7	; 0x07
    364a:	98 85       	ldd	r25, Y+8	; 0x08
    364c:	81 30       	cpi	r24, 0x01	; 1
    364e:	91 05       	cpc	r25, r1
    3650:	91 f1       	breq	.+100    	; 0x36b6 <MTWI_stderrInit+0x9c>
    3652:	ef 81       	ldd	r30, Y+7	; 0x07
    3654:	f8 85       	ldd	r31, Y+8	; 0x08
    3656:	e2 30       	cpi	r30, 0x02	; 2
    3658:	f1 05       	cpc	r31, r1
    365a:	34 f4       	brge	.+12     	; 0x3668 <MTWI_stderrInit+0x4e>
    365c:	2f 81       	ldd	r18, Y+7	; 0x07
    365e:	38 85       	ldd	r19, Y+8	; 0x08
    3660:	21 15       	cp	r18, r1
    3662:	31 05       	cpc	r19, r1
    3664:	71 f0       	breq	.+28     	; 0x3682 <MTWI_stderrInit+0x68>
    3666:	81 c0       	rjmp	.+258    	; 0x376a <MTWI_stderrInit+0x150>
    3668:	8f 81       	ldd	r24, Y+7	; 0x07
    366a:	98 85       	ldd	r25, Y+8	; 0x08
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	91 05       	cpc	r25, r1
    3670:	09 f4       	brne	.+2      	; 0x3674 <MTWI_stderrInit+0x5a>
    3672:	3f c0       	rjmp	.+126    	; 0x36f2 <MTWI_stderrInit+0xd8>
    3674:	ef 81       	ldd	r30, Y+7	; 0x07
    3676:	f8 85       	ldd	r31, Y+8	; 0x08
    3678:	e3 30       	cpi	r30, 0x03	; 3
    367a:	f1 05       	cpc	r31, r1
    367c:	09 f4       	brne	.+2      	; 0x3680 <MTWI_stderrInit+0x66>
    367e:	57 c0       	rjmp	.+174    	; 0x372e <MTWI_stderrInit+0x114>
    3680:	74 c0       	rjmp	.+232    	; 0x376a <MTWI_stderrInit+0x150>
	{
		case MTWI_PRESCALER_1 : TWBR = ((F_CPU/ARG_u32DataRate) - 16) / (2 * 1 ); break ;
    3682:	00 e2       	ldi	r16, 0x20	; 32
    3684:	10 e0       	ldi	r17, 0x00	; 0
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	92 e1       	ldi	r25, 0x12	; 18
    368a:	aa e7       	ldi	r26, 0x7A	; 122
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	2a 81       	ldd	r18, Y+2	; 0x02
    3690:	3b 81       	ldd	r19, Y+3	; 0x03
    3692:	4c 81       	ldd	r20, Y+4	; 0x04
    3694:	5d 81       	ldd	r21, Y+5	; 0x05
    3696:	bc 01       	movw	r22, r24
    3698:	cd 01       	movw	r24, r26
    369a:	0e 94 84 21 	call	0x4308	; 0x4308 <__udivmodsi4>
    369e:	da 01       	movw	r26, r20
    36a0:	c9 01       	movw	r24, r18
    36a2:	40 97       	sbiw	r24, 0x10	; 16
    36a4:	a1 09       	sbc	r26, r1
    36a6:	b1 09       	sbc	r27, r1
    36a8:	b6 95       	lsr	r27
    36aa:	a7 95       	ror	r26
    36ac:	97 95       	ror	r25
    36ae:	87 95       	ror	r24
    36b0:	f8 01       	movw	r30, r16
    36b2:	80 83       	st	Z, r24
    36b4:	5c c0       	rjmp	.+184    	; 0x376e <MTWI_stderrInit+0x154>
		case MTWI_PRESCALER_4 : TWBR = ((F_CPU/ARG_u32DataRate) - 16) / (2 * 4 ); break ;
    36b6:	00 e2       	ldi	r16, 0x20	; 32
    36b8:	10 e0       	ldi	r17, 0x00	; 0
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	92 e1       	ldi	r25, 0x12	; 18
    36be:	aa e7       	ldi	r26, 0x7A	; 122
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	2a 81       	ldd	r18, Y+2	; 0x02
    36c4:	3b 81       	ldd	r19, Y+3	; 0x03
    36c6:	4c 81       	ldd	r20, Y+4	; 0x04
    36c8:	5d 81       	ldd	r21, Y+5	; 0x05
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 84 21 	call	0x4308	; 0x4308 <__udivmodsi4>
    36d2:	da 01       	movw	r26, r20
    36d4:	c9 01       	movw	r24, r18
    36d6:	40 97       	sbiw	r24, 0x10	; 16
    36d8:	a1 09       	sbc	r26, r1
    36da:	b1 09       	sbc	r27, r1
    36dc:	68 94       	set
    36de:	12 f8       	bld	r1, 2
    36e0:	b6 95       	lsr	r27
    36e2:	a7 95       	ror	r26
    36e4:	97 95       	ror	r25
    36e6:	87 95       	ror	r24
    36e8:	16 94       	lsr	r1
    36ea:	d1 f7       	brne	.-12     	; 0x36e0 <MTWI_stderrInit+0xc6>
    36ec:	f8 01       	movw	r30, r16
    36ee:	80 83       	st	Z, r24
    36f0:	3e c0       	rjmp	.+124    	; 0x376e <MTWI_stderrInit+0x154>
		case MTWI_PRESCALER_16: TWBR = ((F_CPU/ARG_u32DataRate) - 16) / (2 * 16); break ;
    36f2:	00 e2       	ldi	r16, 0x20	; 32
    36f4:	10 e0       	ldi	r17, 0x00	; 0
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	92 e1       	ldi	r25, 0x12	; 18
    36fa:	aa e7       	ldi	r26, 0x7A	; 122
    36fc:	b0 e0       	ldi	r27, 0x00	; 0
    36fe:	2a 81       	ldd	r18, Y+2	; 0x02
    3700:	3b 81       	ldd	r19, Y+3	; 0x03
    3702:	4c 81       	ldd	r20, Y+4	; 0x04
    3704:	5d 81       	ldd	r21, Y+5	; 0x05
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	0e 94 84 21 	call	0x4308	; 0x4308 <__udivmodsi4>
    370e:	da 01       	movw	r26, r20
    3710:	c9 01       	movw	r24, r18
    3712:	40 97       	sbiw	r24, 0x10	; 16
    3714:	a1 09       	sbc	r26, r1
    3716:	b1 09       	sbc	r27, r1
    3718:	68 94       	set
    371a:	14 f8       	bld	r1, 4
    371c:	b6 95       	lsr	r27
    371e:	a7 95       	ror	r26
    3720:	97 95       	ror	r25
    3722:	87 95       	ror	r24
    3724:	16 94       	lsr	r1
    3726:	d1 f7       	brne	.-12     	; 0x371c <MTWI_stderrInit+0x102>
    3728:	f8 01       	movw	r30, r16
    372a:	80 83       	st	Z, r24
    372c:	20 c0       	rjmp	.+64     	; 0x376e <MTWI_stderrInit+0x154>
		case MTWI_PRESCALER_64: TWBR = ((F_CPU/ARG_u32DataRate) - 16) / (2 * 64); break ;
    372e:	00 e2       	ldi	r16, 0x20	; 32
    3730:	10 e0       	ldi	r17, 0x00	; 0
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	92 e1       	ldi	r25, 0x12	; 18
    3736:	aa e7       	ldi	r26, 0x7A	; 122
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	2a 81       	ldd	r18, Y+2	; 0x02
    373c:	3b 81       	ldd	r19, Y+3	; 0x03
    373e:	4c 81       	ldd	r20, Y+4	; 0x04
    3740:	5d 81       	ldd	r21, Y+5	; 0x05
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 84 21 	call	0x4308	; 0x4308 <__udivmodsi4>
    374a:	da 01       	movw	r26, r20
    374c:	c9 01       	movw	r24, r18
    374e:	40 97       	sbiw	r24, 0x10	; 16
    3750:	a1 09       	sbc	r26, r1
    3752:	b1 09       	sbc	r27, r1
    3754:	68 94       	set
    3756:	16 f8       	bld	r1, 6
    3758:	b6 95       	lsr	r27
    375a:	a7 95       	ror	r26
    375c:	97 95       	ror	r25
    375e:	87 95       	ror	r24
    3760:	16 94       	lsr	r1
    3762:	d1 f7       	brne	.-12     	; 0x3758 <MTWI_stderrInit+0x13e>
    3764:	f8 01       	movw	r30, r16
    3766:	80 83       	st	Z, r24
    3768:	02 c0       	rjmp	.+4      	; 0x376e <MTWI_stderrInit+0x154>
		default : L_stderrStatus = E_NOK  ; break ;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(ARG_u8Prescalar<=3)
    376e:	8e 81       	ldd	r24, Y+6	; 0x06
    3770:	84 30       	cpi	r24, 0x04	; 4
    3772:	58 f4       	brcc	.+22     	; 0x378a <MTWI_stderrInit+0x170>
	{
	TWSR = (TWSR & 0xFC) | (ARG_u8Prescalar) ; 
    3774:	a1 e2       	ldi	r26, 0x21	; 33
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	e1 e2       	ldi	r30, 0x21	; 33
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	98 2f       	mov	r25, r24
    3780:	9c 7f       	andi	r25, 0xFC	; 252
    3782:	8e 81       	ldd	r24, Y+6	; 0x06
    3784:	89 2b       	or	r24, r25
    3786:	8c 93       	st	X, r24
    3788:	02 c0       	rjmp	.+4      	; 0x378e <MTWI_stderrInit+0x174>
	}
	else
	{
		L_stderrStatus = E_NOK ;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrStatus ; 
    378e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    3790:	28 96       	adiw	r28, 0x08	; 8
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	08 95       	ret

000037a6 <MTWI_voidEnable>:

void 		MTWI_voidEnable()
{
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TWCR, TWEN);
    37ae:	a6 e5       	ldi	r26, 0x56	; 86
    37b0:	b0 e0       	ldi	r27, 0x00	; 0
    37b2:	e6 e5       	ldi	r30, 0x56	; 86
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	84 60       	ori	r24, 0x04	; 4
    37ba:	8c 93       	st	X, r24
}
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <MTWI_voidDisable>:
void 		MTWI_voidDisable()
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TWCR, TWEN);
    37ca:	a6 e5       	ldi	r26, 0x56	; 86
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e6 e5       	ldi	r30, 0x56	; 86
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	8b 7f       	andi	r24, 0xFB	; 251
    37d6:	8c 93       	st	X, r24
}
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <MTWI_voidInterrupt>:

void 		MTWI_voidInterrupt()
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TWCR, TWIE);
    37e6:	a6 e5       	ldi	r26, 0x56	; 86
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e6 e5       	ldi	r30, 0x56	; 86
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	81 60       	ori	r24, 0x01	; 1
    37f2:	8c 93       	st	X, r24

}
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <MTWI_voidDisableInterrupt>:
void 		MTWI_voidDisableInterrupt()
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	cd b7       	in	r28, 0x3d	; 61
    3800:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TWCR, TWIE);
    3802:	a6 e5       	ldi	r26, 0x56	; 86
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e6 e5       	ldi	r30, 0x56	; 86
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	8e 7f       	andi	r24, 0xFE	; 254
    380e:	8c 93       	st	X, r24

}
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <MTWI_stderrSetCallback>:

STD_error_t MTWI_stderrSetCallback(void(*ARG_pvoidfUserFunction)(void))
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	00 d0       	rcall	.+0      	; 0x381c <MTWI_stderrSetCallback+0x6>
    381c:	0f 92       	push	r0
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	9b 83       	std	Y+3, r25	; 0x03
    3824:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t  L_stderrStatus = E_OK ; 
    3826:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction== NULL_POINTER)
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
    382c:	00 97       	sbiw	r24, 0x00	; 0
    382e:	39 f4       	brne	.+14     	; 0x383e <MTWI_stderrSetCallback+0x28>
	{
		MTWI_pvoidfUserFunction = ARG_pvoidfUserFunction;
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	90 93 91 00 	sts	0x0091, r25
    3838:	80 93 90 00 	sts	0x0090, r24
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <MTWI_stderrSetCallback+0x2c>
	}
	else
	{
		L_stderrStatus = E_NOK ; 
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrStatus ; 
    3842:	89 81       	ldd	r24, Y+1	; 0x01
}
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <MTWI_voidSendStartCondition>:

void 		MTWI_voidSendStartCondition(void)
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
			TWCR = (TWCR & (0x5F)) | (1<< TWINT) | (1<< TWSTA) ;
    3858:	a6 e5       	ldi	r26, 0x56	; 86
    385a:	b0 e0       	ldi	r27, 0x00	; 0
    385c:	e6 e5       	ldi	r30, 0x56	; 86
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	80 81       	ld	r24, Z
    3862:	80 6a       	ori	r24, 0xA0	; 160
    3864:	8c 93       	st	X, r24
}
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <MTWI_voidSendStopCondition>:
void 		MTWI_voidSendStopCondition(void)
{
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
			TWCR = (TWCR & (0x6F)) | (1<< TWINT) | (1<< TWSTO) ;
    3874:	a6 e5       	ldi	r26, 0x56	; 86
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	e6 e5       	ldi	r30, 0x56	; 86
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	80 69       	ori	r24, 0x90	; 144
    3880:	8c 93       	st	X, r24
}
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	08 95       	ret

00003888 <MTWI_voidEnableAck>:


void 		MTWI_voidEnableAck(void)
{
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TWCR,TWEA);
    3890:	a6 e5       	ldi	r26, 0x56	; 86
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	e6 e5       	ldi	r30, 0x56	; 86
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	80 64       	ori	r24, 0x40	; 64
    389c:	8c 93       	st	X, r24
}
    389e:	cf 91       	pop	r28
    38a0:	df 91       	pop	r29
    38a2:	08 95       	ret

000038a4 <MTWI_voidDisableAck>:
void 		MTWI_voidDisableAck(void)
{
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TWCR,TWEA);
    38ac:	a6 e5       	ldi	r26, 0x56	; 86
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e6 e5       	ldi	r30, 0x56	; 86
    38b2:	f0 e0       	ldi	r31, 0x00	; 0
    38b4:	80 81       	ld	r24, Z
    38b6:	8f 7b       	andi	r24, 0xBF	; 191
    38b8:	8c 93       	st	X, r24
}
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <MTWI_voidEnableGeneralCall>:

void 		MTWI_voidEnableGeneralCall(void)
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TWAR, TWGCE);
    38c8:	a2 e2       	ldi	r26, 0x22	; 34
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	e2 e2       	ldi	r30, 0x22	; 34
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	81 60       	ori	r24, 0x01	; 1
    38d4:	8c 93       	st	X, r24
}
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <MTWI_voidDisableGeneralCall>:
void 		MTWI_voidDisableGeneralCall(void)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
			CLEAR_BIT(TWAR, TWGCE);
    38e4:	a2 e2       	ldi	r26, 0x22	; 34
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	e2 e2       	ldi	r30, 0x22	; 34
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	80 81       	ld	r24, Z
    38ee:	8e 7f       	andi	r24, 0xFE	; 254
    38f0:	8c 93       	st	X, r24
}
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <MTWI_voidSetSlaveAddress>:

void 		MTWI_voidSetSlaveAddress(u8 ARG_u8SlaveAddress)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	0f 92       	push	r0
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
    3902:	89 83       	std	Y+1, r24	; 0x01
			TWAR = (TWAR & 0x01)  | (ARG_u8SlaveAddress << 1 ) ; 
    3904:	a2 e2       	ldi	r26, 0x22	; 34
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	e2 e2       	ldi	r30, 0x22	; 34
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	28 2f       	mov	r18, r24
    3910:	21 70       	andi	r18, 0x01	; 1
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	88 2f       	mov	r24, r24
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	82 2b       	or	r24, r18
    391e:	8c 93       	st	X, r24
}
    3920:	0f 90       	pop	r0
    3922:	cf 91       	pop	r28
    3924:	df 91       	pop	r29
    3926:	08 95       	ret

00003928 <MTWI_twistatusCheckStatus>:

MTWI_status	MTWI_twistatusCheckStatus(void)
{
    3928:	df 93       	push	r29
    392a:	cf 93       	push	r28
    392c:	cd b7       	in	r28, 0x3d	; 61
    392e:	de b7       	in	r29, 0x3e	; 62
		return (TWSR & TWS_MASK) ; 
    3930:	e1 e2       	ldi	r30, 0x21	; 33
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	80 81       	ld	r24, Z
    3936:	88 7f       	andi	r24, 0xF8	; 248
}
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <MTWI_voidFlagPolling>:

void 		MTWI_voidFlagPolling(void)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
			while(!GET_BIT(TWCR, TWINT));
    3946:	e6 e5       	ldi	r30, 0x56	; 86
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	80 81       	ld	r24, Z
    394c:	88 23       	and	r24, r24
    394e:	dc f7       	brge	.-10     	; 0x3946 <MTWI_voidFlagPolling+0x8>
}
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	08 95       	ret

00003956 <MTWI_voidClearFlag>:
void 		MTWI_voidClearFlag(void)
{
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
			TWCR = (TWCR & 0x4F) | (1<<TWINT);
    395e:	a6 e5       	ldi	r26, 0x56	; 86
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e6 e5       	ldi	r30, 0x56	; 86
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	8f 74       	andi	r24, 0x4F	; 79
    396a:	80 68       	ori	r24, 0x80	; 128
    396c:	8c 93       	st	X, r24
}
    396e:	cf 91       	pop	r28
    3970:	df 91       	pop	r29
    3972:	08 95       	ret

00003974 <MTWI_voidLoadTWDR>:

void 		MTWI_voidLoadTWDR(u8 ARG_u8Data)
{
    3974:	df 93       	push	r29
    3976:	cf 93       	push	r28
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	89 83       	std	Y+1, r24	; 0x01
			TWDR = ARG_u8Data ; 
    3980:	e3 e2       	ldi	r30, 0x23	; 35
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	89 81       	ldd	r24, Y+1	; 0x01
    3986:	80 83       	st	Z, r24
}
    3988:	0f 90       	pop	r0
    398a:	cf 91       	pop	r28
    398c:	df 91       	pop	r29
    398e:	08 95       	ret

00003990 <MTWI_charReadTWDR>:
char 		MTWI_charReadTWDR(void)
{
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
			return TWDR ; 
    3998:	e3 e2       	ldi	r30, 0x23	; 35
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
}
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <MTWI_voidSendChar>:

void 		MTWI_voidSendChar(u8 ARG_u8SlaveAddress, char ARG_charChar)
{
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	00 d0       	rcall	.+0      	; 0x39aa <MTWI_voidSendChar+0x6>
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	89 83       	std	Y+1, r24	; 0x01
    39b0:	6a 83       	std	Y+2, r22	; 0x02
	
		MTWI_voidSendStartCondition();	
    39b2:	0e 94 28 1c 	call	0x3850	; 0x3850 <MTWI_voidSendStartCondition>
		MTWI_voidFlagPolling();
    39b6:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
		if(MTWI_STATUS_MASTER_START_CONDITION == MTWI_twistatusCheckStatus())
    39ba:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    39be:	88 30       	cpi	r24, 0x08	; 8
    39c0:	e1 f4       	brne	.+56     	; 0x39fa <MTWI_voidSendChar+0x56>
			/*Load the twdr before clearing the flag because once you clear the flag the data in twdr is sent*/
			/* we want to load the slave address + the read/write bit so we take the slave address which is 7 bit
			   we shift the slave address left with one bit and and it with 0xFE mask then or it with the read/write bit
			   which is zero in case of write
			*/
			MTWI_voidLoadTWDR(((ARG_u8SlaveAddress<<1) & (0xFE)) | (0x00));
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    39d0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
			MTWI_voidFlagPolling();
    39d4:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
			/*after sending the slave address with the read/write bit we check the status*/
			if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    39d8:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    39dc:	88 31       	cpi	r24, 0x18	; 24
    39de:	69 f4       	brne	.+26     	; 0x39fa <MTWI_voidSendChar+0x56>
				{
					MTWI_voidLoadTWDR(ARG_charChar);
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
					MTWI_voidClearFlag();
    39e6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
					MTWI_voidFlagPolling();
    39ea:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
					if(MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus())
    39ee:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    39f2:	88 32       	cpi	r24, 0x28	; 40
    39f4:	11 f4       	brne	.+4      	; 0x39fa <MTWI_voidSendChar+0x56>
					{
						MTWI_voidSendStopCondition();
    39f6:	0e 94 36 1c 	call	0x386c	; 0x386c <MTWI_voidSendStopCondition>
		{
			
		}
		
		
}
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <MTWI_voidSendMultiple>:
void 		MTWI_voidSendMultiple(u8 ARG_u8SlaveAddress, const char* ARG_cchar)
{	
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	00 d0       	rcall	.+0      	; 0x3a0a <MTWI_voidSendMultiple+0x6>
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <MTWI_voidSendMultiple+0x8>
    3a0c:	0f 92       	push	r0
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	8b 83       	std	Y+3, r24	; 0x03
    3a14:	7d 83       	std	Y+5, r23	; 0x05
    3a16:	6c 83       	std	Y+4, r22	; 0x04
		u16 L_u16Counter = 0 ;
    3a18:	1a 82       	std	Y+2, r1	; 0x02
    3a1a:	19 82       	std	Y+1, r1	; 0x01
		MTWI_voidSendStartCondition();	
    3a1c:	0e 94 28 1c 	call	0x3850	; 0x3850 <MTWI_voidSendStartCondition>
		MTWI_voidFlagPolling();
    3a20:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
		if(MTWI_STATUS_MASTER_START_CONDITION == MTWI_twistatusCheckStatus())
    3a24:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3a28:	88 30       	cpi	r24, 0x08	; 8
    3a2a:	91 f5       	brne	.+100    	; 0x3a90 <MTWI_voidSendMultiple+0x8c>
			/*Load the twdr before clearing the flag because once you clear the flag the data in twdr is sent*/
			/* we want to load the slave address + the read/write bit so we take the slave address which is 7 bit
			   we shift the slave address left with one bit and and it with 0xFE mask then or it with the read/write bit
			   which is zero in case of write
			*/
			MTWI_voidLoadTWDR(((ARG_u8SlaveAddress<<1) & (0xFE)) | (0x00));
    3a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2e:	88 2f       	mov	r24, r24
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	88 0f       	add	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    3a3a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
			MTWI_voidFlagPolling();
    3a3e:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
			/*after sending the slave address with the read/write bit we check the status*/
			if(MTWI_STATUS_MASTER_TX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    3a42:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3a46:	88 31       	cpi	r24, 0x18	; 24
    3a48:	19 f5       	brne	.+70     	; 0x3a90 <MTWI_voidSendMultiple+0x8c>
				{
					do
					{
						MTWI_voidLoadTWDR(ARG_cchar[L_u16Counter]);
    3a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    3a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	f9 01       	movw	r30, r18
    3a54:	e8 0f       	add	r30, r24
    3a56:	f9 1f       	adc	r31, r25
    3a58:	80 81       	ld	r24, Z
    3a5a:	0e 94 ba 1c 	call	0x3974	; 0x3974 <MTWI_voidLoadTWDR>
						MTWI_voidClearFlag();
    3a5e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
						MTWI_voidFlagPolling();
    3a62:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
						L_u16Counter++;
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	89 83       	std	Y+1, r24	; 0x01
					}while((MTWI_STATUS_MASTER_TX_DATA_ACK == MTWI_twistatusCheckStatus()) && (ARG_cchar[L_u16Counter]!= '\0'));
    3a70:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3a74:	88 32       	cpi	r24, 0x28	; 40
    3a76:	51 f4       	brne	.+20     	; 0x3a8c <MTWI_voidSendMultiple+0x88>
    3a78:	2c 81       	ldd	r18, Y+4	; 0x04
    3a7a:	3d 81       	ldd	r19, Y+5	; 0x05
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a80:	f9 01       	movw	r30, r18
    3a82:	e8 0f       	add	r30, r24
    3a84:	f9 1f       	adc	r31, r25
    3a86:	80 81       	ld	r24, Z
    3a88:	88 23       	and	r24, r24
    3a8a:	f9 f6       	brne	.-66     	; 0x3a4a <MTWI_voidSendMultiple+0x46>
				
	
					MTWI_voidSendStopCondition();
    3a8c:	0e 94 36 1c 	call	0x386c	; 0x386c <MTWI_voidSendStopCondition>
		else
		{
			
		}
		
}
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <MTWI_charSlaveRecieve>:
char		MTWI_charSlaveRecieve(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	0f 92       	push	r0
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
		u8 L_u8Data = 0 ;
    3aaa:	19 82       	std	Y+1, r1	; 0x01
		MTWI_voidFlagPolling();
    3aac:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
		if(MTWI_STATUS_SLAVE_RX_SLA_W_ACK == MTWI_twistatusCheckStatus())
    3ab0:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3ab4:	80 36       	cpi	r24, 0x60	; 96
    3ab6:	a9 f4       	brne	.+42     	; 0x3ae2 <MTWI_charSlaveRecieve+0x42>
		{
			MTWI_voidClearFlag();
    3ab8:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
			MTWI_voidFlagPolling();
    3abc:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
			if(MTWI_STATUS_SLAVE_RX_SLA_W_DATA_ACK == MTWI_twistatusCheckStatus())
    3ac0:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3ac4:	80 38       	cpi	r24, 0x80	; 128
    3ac6:	69 f4       	brne	.+26     	; 0x3ae2 <MTWI_charSlaveRecieve+0x42>
			{
				L_u8Data = MTWI_charReadTWDR (); 
    3ac8:	0e 94 c8 1c 	call	0x3990	; 0x3990 <MTWI_charReadTWDR>
    3acc:	89 83       	std	Y+1, r24	; 0x01
				MTWI_voidClearFlag();
    3ace:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				MTWI_voidFlagPolling();
    3ad2:	0e 94 9f 1c 	call	0x393e	; 0x393e <MTWI_voidFlagPolling>
				if(MTWI_STATUS_SLAVE_RX_STOP_RSTART == MTWI_twistatusCheckStatus())
    3ad6:	0e 94 94 1c 	call	0x3928	; 0x3928 <MTWI_twistatusCheckStatus>
    3ada:	80 3a       	cpi	r24, 0xA0	; 160
    3adc:	11 f4       	brne	.+4      	; 0x3ae2 <MTWI_charSlaveRecieve+0x42>
				{
					MTWI_voidClearFlag();
    3ade:	0e 94 ab 1c 	call	0x3956	; 0x3956 <MTWI_voidClearFlag>
				}
				
			}
		}
		return L_u8Data ; 
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3ae4:	0f 90       	pop	r0
    3ae6:	cf 91       	pop	r28
    3ae8:	df 91       	pop	r29
    3aea:	08 95       	ret

00003aec <main>:

#include"HLCD_interface.h"
#include"HNVM_interface.h"

int main(void)
{
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	c3 56       	subi	r28, 0x63	; 99
    3afa:	d0 40       	sbci	r29, 0x00	; 0
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Data=0;
    3b06:	fe 01       	movw	r30, r28
    3b08:	ed 59       	subi	r30, 0x9D	; 157
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	10 82       	st	Z, r1
	MDIO_stderrSetPinDirection(MDIO_PORTC,0,MDIO_INPUT_PULLUP); // SCL and SDA must be input
    3b0e:	83 e0       	ldi	r24, 0x03	; 3
    3b10:	60 e0       	ldi	r22, 0x00	; 0
    3b12:	43 e0       	ldi	r20, 0x03	; 3
    3b14:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
    MDIO_stderrSetPinDirection(MDIO_PORTC,1,MDIO_INPUT_PULLUP);
    3b18:	83 e0       	ldi	r24, 0x03	; 3
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	43 e0       	ldi	r20, 0x03	; 3
    3b1e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MDIO_stderrSetPinDirection>
    MTWI_voidEnable();
    3b22:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <MTWI_voidEnable>
    HNVM_stderrInit();
    3b26:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <HNVM_stderrInit>
    HLCD_voidInit();
    3b2a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_voidInit>
    HLCD_voidSendString("Welcome");
    3b2e:	80 e6       	ldi	r24, 0x60	; 96
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <HLCD_voidSendString>
    3b36:	fe 01       	movw	r30, r28
    3b38:	e1 5a       	subi	r30, 0xA1	; 161
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	aa e7       	ldi	r26, 0x7A	; 122
    3b42:	b4 e4       	ldi	r27, 0x44	; 68
    3b44:	80 83       	st	Z, r24
    3b46:	91 83       	std	Z+1, r25	; 0x01
    3b48:	a2 83       	std	Z+2, r26	; 0x02
    3b4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4c:	8e 01       	movw	r16, r28
    3b4e:	05 5a       	subi	r16, 0xA5	; 165
    3b50:	1f 4f       	sbci	r17, 0xFF	; 255
    3b52:	fe 01       	movw	r30, r28
    3b54:	e1 5a       	subi	r30, 0xA1	; 161
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	60 81       	ld	r22, Z
    3b5a:	71 81       	ldd	r23, Z+1	; 0x01
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	93 81       	ldd	r25, Z+3	; 0x03
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	4a ef       	ldi	r20, 0xFA	; 250
    3b66:	54 e4       	ldi	r21, 0x44	; 68
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	f8 01       	movw	r30, r16
    3b72:	80 83       	st	Z, r24
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	a2 83       	std	Z+2, r26	; 0x02
    3b78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e5 5a       	subi	r30, 0xA5	; 165
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e8       	ldi	r20, 0x80	; 128
    3b8e:	5f e3       	ldi	r21, 0x3F	; 63
    3b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b94:	88 23       	and	r24, r24
    3b96:	44 f4       	brge	.+16     	; 0x3ba8 <main+0xbc>
		__ticks = 1;
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e7 5a       	subi	r30, 0xA7	; 167
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	80 83       	st	Z, r24
    3ba6:	64 c0       	rjmp	.+200    	; 0x3c70 <main+0x184>
	else if (__tmp > 65535)
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e5 5a       	subi	r30, 0xA5	; 165
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	0c f0       	brlt	.+2      	; 0x3bc8 <main+0xdc>
    3bc6:	43 c0       	rjmp	.+134    	; 0x3c4e <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e1 5a       	subi	r30, 0xA1	; 161
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	82 81       	ldd	r24, Z+2	; 0x02
    3bd4:	93 81       	ldd	r25, Z+3	; 0x03
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e2       	ldi	r20, 0x20	; 32
    3bdc:	51 e4       	ldi	r21, 0x41	; 65
    3bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	8e 01       	movw	r16, r28
    3be8:	07 5a       	subi	r16, 0xA7	; 167
    3bea:	1f 4f       	sbci	r17, 0xFF	; 255
    3bec:	bc 01       	movw	r22, r24
    3bee:	cd 01       	movw	r24, r26
    3bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf4:	dc 01       	movw	r26, r24
    3bf6:	cb 01       	movw	r24, r22
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	80 83       	st	Z, r24
    3bfe:	1f c0       	rjmp	.+62     	; 0x3c3e <main+0x152>
    3c00:	fe 01       	movw	r30, r28
    3c02:	e9 5a       	subi	r30, 0xA9	; 169
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	88 ec       	ldi	r24, 0xC8	; 200
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	80 83       	st	Z, r24
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e9 5a       	subi	r30, 0xA9	; 169
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 81       	ld	r24, Z
    3c16:	91 81       	ldd	r25, Z+1	; 0x01
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <main+0x12c>
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e9 5a       	subi	r30, 0xA9	; 169
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	91 83       	std	Z+1, r25	; 0x01
    3c24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c26:	de 01       	movw	r26, r28
    3c28:	a7 5a       	subi	r26, 0xA7	; 167
    3c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e7 5a       	subi	r30, 0xA7	; 167
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	11 96       	adiw	r26, 0x01	; 1
    3c3a:	9c 93       	st	X, r25
    3c3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e7 5a       	subi	r30, 0xA7	; 167
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	d1 f6       	brne	.-76     	; 0x3c00 <main+0x114>
    3c4c:	27 c0       	rjmp	.+78     	; 0x3c9c <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c4e:	8e 01       	movw	r16, r28
    3c50:	07 5a       	subi	r16, 0xA7	; 167
    3c52:	1f 4f       	sbci	r17, 0xFF	; 255
    3c54:	fe 01       	movw	r30, r28
    3c56:	e5 5a       	subi	r30, 0xA5	; 165
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	91 83       	std	Z+1, r25	; 0x01
    3c6e:	80 83       	st	Z, r24
    3c70:	de 01       	movw	r26, r28
    3c72:	ab 5a       	subi	r26, 0xAB	; 171
    3c74:	bf 4f       	sbci	r27, 0xFF	; 255
    3c76:	fe 01       	movw	r30, r28
    3c78:	e7 5a       	subi	r30, 0xA7	; 167
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	80 81       	ld	r24, Z
    3c7e:	91 81       	ldd	r25, Z+1	; 0x01
    3c80:	8d 93       	st	X+, r24
    3c82:	9c 93       	st	X, r25
    3c84:	fe 01       	movw	r30, r28
    3c86:	eb 5a       	subi	r30, 0xAB	; 171
    3c88:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8a:	80 81       	ld	r24, Z
    3c8c:	91 81       	ldd	r25, Z+1	; 0x01
    3c8e:	01 97       	sbiw	r24, 0x01	; 1
    3c90:	f1 f7       	brne	.-4      	; 0x3c8e <main+0x1a2>
    3c92:	fe 01       	movw	r30, r28
    3c94:	eb 5a       	subi	r30, 0xAB	; 171
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	91 83       	std	Z+1, r25	; 0x01
    3c9a:	80 83       	st	Z, r24
    _delay_ms(1000);
    HLCD_voidClear();
    3c9c:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidClear>
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	ef 5a       	subi	r30, 0xAF	; 175
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	aa e7       	ldi	r26, 0x7A	; 122
    3cac:	b4 e4       	ldi	r27, 0x44	; 68
    3cae:	80 83       	st	Z, r24
    3cb0:	91 83       	std	Z+1, r25	; 0x01
    3cb2:	a2 83       	std	Z+2, r26	; 0x02
    3cb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb6:	8e 01       	movw	r16, r28
    3cb8:	03 5b       	subi	r16, 0xB3	; 179
    3cba:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	ef 5a       	subi	r30, 0xAF	; 175
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	60 81       	ld	r22, Z
    3cc4:	71 81       	ldd	r23, Z+1	; 0x01
    3cc6:	82 81       	ldd	r24, Z+2	; 0x02
    3cc8:	93 81       	ldd	r25, Z+3	; 0x03
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a ef       	ldi	r20, 0xFA	; 250
    3cd0:	54 e4       	ldi	r21, 0x44	; 68
    3cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	f8 01       	movw	r30, r16
    3cdc:	80 83       	st	Z, r24
    3cde:	91 83       	std	Z+1, r25	; 0x01
    3ce0:	a2 83       	std	Z+2, r26	; 0x02
    3ce2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e3 5b       	subi	r30, 0xB3	; 179
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e8       	ldi	r20, 0x80	; 128
    3cf8:	5f e3       	ldi	r21, 0x3F	; 63
    3cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cfe:	88 23       	and	r24, r24
    3d00:	44 f4       	brge	.+16     	; 0x3d12 <main+0x226>
		__ticks = 1;
    3d02:	fe 01       	movw	r30, r28
    3d04:	e5 5b       	subi	r30, 0xB5	; 181
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	91 83       	std	Z+1, r25	; 0x01
    3d0e:	80 83       	st	Z, r24
    3d10:	64 c0       	rjmp	.+200    	; 0x3dda <main+0x2ee>
	else if (__tmp > 65535)
    3d12:	fe 01       	movw	r30, r28
    3d14:	e3 5b       	subi	r30, 0xB3	; 179
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	3f ef       	ldi	r19, 0xFF	; 255
    3d24:	4f e7       	ldi	r20, 0x7F	; 127
    3d26:	57 e4       	ldi	r21, 0x47	; 71
    3d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d2c:	18 16       	cp	r1, r24
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <main+0x246>
    3d30:	43 c0       	rjmp	.+134    	; 0x3db8 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d32:	fe 01       	movw	r30, r28
    3d34:	ef 5a       	subi	r30, 0xAF	; 175
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	60 81       	ld	r22, Z
    3d3a:	71 81       	ldd	r23, Z+1	; 0x01
    3d3c:	82 81       	ldd	r24, Z+2	; 0x02
    3d3e:	93 81       	ldd	r25, Z+3	; 0x03
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e2       	ldi	r20, 0x20	; 32
    3d46:	51 e4       	ldi	r21, 0x41	; 65
    3d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	8e 01       	movw	r16, r28
    3d52:	05 5b       	subi	r16, 0xB5	; 181
    3d54:	1f 4f       	sbci	r17, 0xFF	; 255
    3d56:	bc 01       	movw	r22, r24
    3d58:	cd 01       	movw	r24, r26
    3d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	f8 01       	movw	r30, r16
    3d64:	91 83       	std	Z+1, r25	; 0x01
    3d66:	80 83       	st	Z, r24
    3d68:	1f c0       	rjmp	.+62     	; 0x3da8 <main+0x2bc>
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e7 5b       	subi	r30, 0xB7	; 183
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	88 ec       	ldi	r24, 0xC8	; 200
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	fe 01       	movw	r30, r28
    3d7a:	e7 5b       	subi	r30, 0xB7	; 183
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	80 81       	ld	r24, Z
    3d80:	91 81       	ldd	r25, Z+1	; 0x01
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <main+0x296>
    3d86:	fe 01       	movw	r30, r28
    3d88:	e7 5b       	subi	r30, 0xB7	; 183
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d90:	de 01       	movw	r26, r28
    3d92:	a5 5b       	subi	r26, 0xB5	; 181
    3d94:	bf 4f       	sbci	r27, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	e5 5b       	subi	r30, 0xB5	; 181
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	11 96       	adiw	r26, 0x01	; 1
    3da4:	9c 93       	st	X, r25
    3da6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da8:	fe 01       	movw	r30, r28
    3daa:	e5 5b       	subi	r30, 0xB5	; 181
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 81       	ld	r24, Z
    3db0:	91 81       	ldd	r25, Z+1	; 0x01
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	d1 f6       	brne	.-76     	; 0x3d6a <main+0x27e>
    3db6:	27 c0       	rjmp	.+78     	; 0x3e06 <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db8:	8e 01       	movw	r16, r28
    3dba:	05 5b       	subi	r16, 0xB5	; 181
    3dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e3 5b       	subi	r30, 0xB3	; 179
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	60 81       	ld	r22, Z
    3dc6:	71 81       	ldd	r23, Z+1	; 0x01
    3dc8:	82 81       	ldd	r24, Z+2	; 0x02
    3dca:	93 81       	ldd	r25, Z+3	; 0x03
    3dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd0:	dc 01       	movw	r26, r24
    3dd2:	cb 01       	movw	r24, r22
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	80 83       	st	Z, r24
    3dda:	de 01       	movw	r26, r28
    3ddc:	a9 5b       	subi	r26, 0xB9	; 185
    3dde:	bf 4f       	sbci	r27, 0xFF	; 255
    3de0:	fe 01       	movw	r30, r28
    3de2:	e5 5b       	subi	r30, 0xB5	; 181
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	8d 93       	st	X+, r24
    3dec:	9c 93       	st	X, r25
    3dee:	fe 01       	movw	r30, r28
    3df0:	e9 5b       	subi	r30, 0xB9	; 185
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <main+0x30c>
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e9 5b       	subi	r30, 0xB9	; 185
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	91 83       	std	Z+1, r25	; 0x01
    3e04:	80 83       	st	Z, r24
    _delay_ms(1000);

	while(1)
	{
		HNVM_voidWrite(0x00,'A');
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	61 e4       	ldi	r22, 0x41	; 65
    3e0c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <HNVM_voidWrite>
		HLCD_voidSendString("DATA WRITTEN : A");
    3e10:	88 e6       	ldi	r24, 0x68	; 104
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <HLCD_voidSendString>
    3e18:	fe 01       	movw	r30, r28
    3e1a:	ed 5b       	subi	r30, 0xBD	; 189
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	aa e7       	ldi	r26, 0x7A	; 122
    3e24:	b4 e4       	ldi	r27, 0x44	; 68
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2e:	8e 01       	movw	r16, r28
    3e30:	01 5c       	subi	r16, 0xC1	; 193
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	fe 01       	movw	r30, r28
    3e36:	ed 5b       	subi	r30, 0xBD	; 189
    3e38:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3a:	60 81       	ld	r22, Z
    3e3c:	71 81       	ldd	r23, Z+1	; 0x01
    3e3e:	82 81       	ldd	r24, Z+2	; 0x02
    3e40:	93 81       	ldd	r25, Z+3	; 0x03
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	4a ef       	ldi	r20, 0xFA	; 250
    3e48:	54 e4       	ldi	r21, 0x44	; 68
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	f8 01       	movw	r30, r16
    3e54:	80 83       	st	Z, r24
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	a2 83       	std	Z+2, r26	; 0x02
    3e5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	ff 96       	adiw	r30, 0x3f	; 63
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	40 e8       	ldi	r20, 0x80	; 128
    3e6e:	5f e3       	ldi	r21, 0x3F	; 63
    3e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e74:	88 23       	and	r24, r24
    3e76:	2c f4       	brge	.+10     	; 0x3e82 <main+0x396>
		__ticks = 1;
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	9e af       	std	Y+62, r25	; 0x3e
    3e7e:	8d af       	std	Y+61, r24	; 0x3d
    3e80:	46 c0       	rjmp	.+140    	; 0x3f0e <main+0x422>
	else if (__tmp > 65535)
    3e82:	fe 01       	movw	r30, r28
    3e84:	ff 96       	adiw	r30, 0x3f	; 63
    3e86:	60 81       	ld	r22, Z
    3e88:	71 81       	ldd	r23, Z+1	; 0x01
    3e8a:	82 81       	ldd	r24, Z+2	; 0x02
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	3f ef       	ldi	r19, 0xFF	; 255
    3e92:	4f e7       	ldi	r20, 0x7F	; 127
    3e94:	57 e4       	ldi	r21, 0x47	; 71
    3e96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e9a:	18 16       	cp	r1, r24
    3e9c:	64 f5       	brge	.+88     	; 0x3ef6 <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	ed 5b       	subi	r30, 0xBD	; 189
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	60 81       	ld	r22, Z
    3ea6:	71 81       	ldd	r23, Z+1	; 0x01
    3ea8:	82 81       	ldd	r24, Z+2	; 0x02
    3eaa:	93 81       	ldd	r25, Z+3	; 0x03
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	40 e2       	ldi	r20, 0x20	; 32
    3eb2:	51 e4       	ldi	r21, 0x41	; 65
    3eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	bc 01       	movw	r22, r24
    3ebe:	cd 01       	movw	r24, r26
    3ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	9e af       	std	Y+62, r25	; 0x3e
    3eca:	8d af       	std	Y+61, r24	; 0x3d
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <main+0x400>
    3ece:	88 ec       	ldi	r24, 0xC8	; 200
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	9c af       	std	Y+60, r25	; 0x3c
    3ed4:	8b af       	std	Y+59, r24	; 0x3b
    3ed6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ed8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <main+0x3ee>
    3ede:	9c af       	std	Y+60, r25	; 0x3c
    3ee0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ee4:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ee6:	01 97       	sbiw	r24, 0x01	; 1
    3ee8:	9e af       	std	Y+62, r25	; 0x3e
    3eea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    3eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	69 f7       	brne	.-38     	; 0x3ece <main+0x3e2>
    3ef4:	16 c0       	rjmp	.+44     	; 0x3f22 <main+0x436>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef6:	fe 01       	movw	r30, r28
    3ef8:	ff 96       	adiw	r30, 0x3f	; 63
    3efa:	60 81       	ld	r22, Z
    3efc:	71 81       	ldd	r23, Z+1	; 0x01
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	9e af       	std	Y+62, r25	; 0x3e
    3f0c:	8d af       	std	Y+61, r24	; 0x3d
    3f0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f10:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f12:	9a af       	std	Y+58, r25	; 0x3a
    3f14:	89 af       	std	Y+57, r24	; 0x39
    3f16:	89 ad       	ldd	r24, Y+57	; 0x39
    3f18:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <main+0x42e>
    3f1e:	9a af       	std	Y+58, r25	; 0x3a
    3f20:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		HLCD_voidClear();
    3f22:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidClear>
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	a0 e0       	ldi	r26, 0x00	; 0
    3f2c:	b0 e4       	ldi	r27, 0x40	; 64
    3f2e:	8d ab       	std	Y+53, r24	; 0x35
    3f30:	9e ab       	std	Y+54, r25	; 0x36
    3f32:	af ab       	std	Y+55, r26	; 0x37
    3f34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f36:	6d a9       	ldd	r22, Y+53	; 0x35
    3f38:	7e a9       	ldd	r23, Y+54	; 0x36
    3f3a:	8f a9       	ldd	r24, Y+55	; 0x37
    3f3c:	98 ad       	ldd	r25, Y+56	; 0x38
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	4a ef       	ldi	r20, 0xFA	; 250
    3f44:	54 e4       	ldi	r21, 0x44	; 68
    3f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	89 ab       	std	Y+49, r24	; 0x31
    3f50:	9a ab       	std	Y+50, r25	; 0x32
    3f52:	ab ab       	std	Y+51, r26	; 0x33
    3f54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f56:	69 a9       	ldd	r22, Y+49	; 0x31
    3f58:	7a a9       	ldd	r23, Y+50	; 0x32
    3f5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	40 e8       	ldi	r20, 0x80	; 128
    3f64:	5f e3       	ldi	r21, 0x3F	; 63
    3f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f6a:	88 23       	and	r24, r24
    3f6c:	2c f4       	brge	.+10     	; 0x3f78 <main+0x48c>
		__ticks = 1;
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	98 ab       	std	Y+48, r25	; 0x30
    3f74:	8f a7       	std	Y+47, r24	; 0x2f
    3f76:	3f c0       	rjmp	.+126    	; 0x3ff6 <main+0x50a>
	else if (__tmp > 65535)
    3f78:	69 a9       	ldd	r22, Y+49	; 0x31
    3f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	3f ef       	ldi	r19, 0xFF	; 255
    3f84:	4f e7       	ldi	r20, 0x7F	; 127
    3f86:	57 e4       	ldi	r21, 0x47	; 71
    3f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f8c:	18 16       	cp	r1, r24
    3f8e:	4c f5       	brge	.+82     	; 0x3fe2 <main+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f90:	6d a9       	ldd	r22, Y+53	; 0x35
    3f92:	7e a9       	ldd	r23, Y+54	; 0x36
    3f94:	8f a9       	ldd	r24, Y+55	; 0x37
    3f96:	98 ad       	ldd	r25, Y+56	; 0x38
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	40 e2       	ldi	r20, 0x20	; 32
    3f9e:	51 e4       	ldi	r21, 0x41	; 65
    3fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	bc 01       	movw	r22, r24
    3faa:	cd 01       	movw	r24, r26
    3fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	98 ab       	std	Y+48, r25	; 0x30
    3fb6:	8f a7       	std	Y+47, r24	; 0x2f
    3fb8:	0f c0       	rjmp	.+30     	; 0x3fd8 <main+0x4ec>
    3fba:	88 ec       	ldi	r24, 0xC8	; 200
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	9e a7       	std	Y+46, r25	; 0x2e
    3fc0:	8d a7       	std	Y+45, r24	; 0x2d
    3fc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	f1 f7       	brne	.-4      	; 0x3fc6 <main+0x4da>
    3fca:	9e a7       	std	Y+46, r25	; 0x2e
    3fcc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fce:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd0:	98 a9       	ldd	r25, Y+48	; 0x30
    3fd2:	01 97       	sbiw	r24, 0x01	; 1
    3fd4:	98 ab       	std	Y+48, r25	; 0x30
    3fd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fda:	98 a9       	ldd	r25, Y+48	; 0x30
    3fdc:	00 97       	sbiw	r24, 0x00	; 0
    3fde:	69 f7       	brne	.-38     	; 0x3fba <main+0x4ce>
    3fe0:	14 c0       	rjmp	.+40     	; 0x400a <main+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe2:	69 a9       	ldd	r22, Y+49	; 0x31
    3fe4:	7a a9       	ldd	r23, Y+50	; 0x32
    3fe6:	8b a9       	ldd	r24, Y+51	; 0x33
    3fe8:	9c a9       	ldd	r25, Y+52	; 0x34
    3fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	98 ab       	std	Y+48, r25	; 0x30
    3ff4:	8f a7       	std	Y+47, r24	; 0x2f
    3ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ff8:	98 a9       	ldd	r25, Y+48	; 0x30
    3ffa:	9c a7       	std	Y+44, r25	; 0x2c
    3ffc:	8b a7       	std	Y+43, r24	; 0x2b
    3ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    4000:	9c a5       	ldd	r25, Y+44	; 0x2c
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	f1 f7       	brne	.-4      	; 0x4002 <main+0x516>
    4006:	9c a7       	std	Y+44, r25	; 0x2c
    4008:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		L_u8Data = HNVM_u8Read(0x00);
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <HNVM_u8Read>
    4012:	fe 01       	movw	r30, r28
    4014:	ed 59       	subi	r30, 0x9D	; 157
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 83       	st	Z, r24
		HLCD_voidSendString("DATA READ :  ");
    401a:	89 e7       	ldi	r24, 0x79	; 121
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <HLCD_voidSendString>
		HLCD_voidSendChar(L_u8Data);
    4022:	fe 01       	movw	r30, r28
    4024:	ed 59       	subi	r30, 0x9D	; 157
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <HLCD_voidSendChar>
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	aa e7       	ldi	r26, 0x7A	; 122
    4034:	b4 e4       	ldi	r27, 0x44	; 68
    4036:	8f a3       	std	Y+39, r24	; 0x27
    4038:	98 a7       	std	Y+40, r25	; 0x28
    403a:	a9 a7       	std	Y+41, r26	; 0x29
    403c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403e:	6f a1       	ldd	r22, Y+39	; 0x27
    4040:	78 a5       	ldd	r23, Y+40	; 0x28
    4042:	89 a5       	ldd	r24, Y+41	; 0x29
    4044:	9a a5       	ldd	r25, Y+42	; 0x2a
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	4a ef       	ldi	r20, 0xFA	; 250
    404c:	54 e4       	ldi	r21, 0x44	; 68
    404e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	8b a3       	std	Y+35, r24	; 0x23
    4058:	9c a3       	std	Y+36, r25	; 0x24
    405a:	ad a3       	std	Y+37, r26	; 0x25
    405c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    405e:	6b a1       	ldd	r22, Y+35	; 0x23
    4060:	7c a1       	ldd	r23, Y+36	; 0x24
    4062:	8d a1       	ldd	r24, Y+37	; 0x25
    4064:	9e a1       	ldd	r25, Y+38	; 0x26
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e8       	ldi	r20, 0x80	; 128
    406c:	5f e3       	ldi	r21, 0x3F	; 63
    406e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4072:	88 23       	and	r24, r24
    4074:	2c f4       	brge	.+10     	; 0x4080 <main+0x594>
		__ticks = 1;
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	9a a3       	std	Y+34, r25	; 0x22
    407c:	89 a3       	std	Y+33, r24	; 0x21
    407e:	3f c0       	rjmp	.+126    	; 0x40fe <main+0x612>
	else if (__tmp > 65535)
    4080:	6b a1       	ldd	r22, Y+35	; 0x23
    4082:	7c a1       	ldd	r23, Y+36	; 0x24
    4084:	8d a1       	ldd	r24, Y+37	; 0x25
    4086:	9e a1       	ldd	r25, Y+38	; 0x26
    4088:	20 e0       	ldi	r18, 0x00	; 0
    408a:	3f ef       	ldi	r19, 0xFF	; 255
    408c:	4f e7       	ldi	r20, 0x7F	; 127
    408e:	57 e4       	ldi	r21, 0x47	; 71
    4090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4094:	18 16       	cp	r1, r24
    4096:	4c f5       	brge	.+82     	; 0x40ea <main+0x5fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4098:	6f a1       	ldd	r22, Y+39	; 0x27
    409a:	78 a5       	ldd	r23, Y+40	; 0x28
    409c:	89 a5       	ldd	r24, Y+41	; 0x29
    409e:	9a a5       	ldd	r25, Y+42	; 0x2a
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e2       	ldi	r20, 0x20	; 32
    40a6:	51 e4       	ldi	r21, 0x41	; 65
    40a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	bc 01       	movw	r22, r24
    40b2:	cd 01       	movw	r24, r26
    40b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	9a a3       	std	Y+34, r25	; 0x22
    40be:	89 a3       	std	Y+33, r24	; 0x21
    40c0:	0f c0       	rjmp	.+30     	; 0x40e0 <main+0x5f4>
    40c2:	88 ec       	ldi	r24, 0xC8	; 200
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	98 a3       	std	Y+32, r25	; 0x20
    40c8:	8f 8f       	std	Y+31, r24	; 0x1f
    40ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40cc:	98 a1       	ldd	r25, Y+32	; 0x20
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	f1 f7       	brne	.-4      	; 0x40ce <main+0x5e2>
    40d2:	98 a3       	std	Y+32, r25	; 0x20
    40d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d6:	89 a1       	ldd	r24, Y+33	; 0x21
    40d8:	9a a1       	ldd	r25, Y+34	; 0x22
    40da:	01 97       	sbiw	r24, 0x01	; 1
    40dc:	9a a3       	std	Y+34, r25	; 0x22
    40de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e0:	89 a1       	ldd	r24, Y+33	; 0x21
    40e2:	9a a1       	ldd	r25, Y+34	; 0x22
    40e4:	00 97       	sbiw	r24, 0x00	; 0
    40e6:	69 f7       	brne	.-38     	; 0x40c2 <main+0x5d6>
    40e8:	14 c0       	rjmp	.+40     	; 0x4112 <main+0x626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ea:	6b a1       	ldd	r22, Y+35	; 0x23
    40ec:	7c a1       	ldd	r23, Y+36	; 0x24
    40ee:	8d a1       	ldd	r24, Y+37	; 0x25
    40f0:	9e a1       	ldd	r25, Y+38	; 0x26
    40f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	9a a3       	std	Y+34, r25	; 0x22
    40fc:	89 a3       	std	Y+33, r24	; 0x21
    40fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4100:	9a a1       	ldd	r25, Y+34	; 0x22
    4102:	9e 8f       	std	Y+30, r25	; 0x1e
    4104:	8d 8f       	std	Y+29, r24	; 0x1d
    4106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4108:	9e 8d       	ldd	r25, Y+30	; 0x1e
    410a:	01 97       	sbiw	r24, 0x01	; 1
    410c:	f1 f7       	brne	.-4      	; 0x410a <main+0x61e>
    410e:	9e 8f       	std	Y+30, r25	; 0x1e
    4110:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		HLCD_voidClear();
    4112:	0e 94 94 14 	call	0x2928	; 0x2928 <HLCD_voidClear>
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	a0 e0       	ldi	r26, 0x00	; 0
    411c:	b0 e4       	ldi	r27, 0x40	; 64
    411e:	89 8f       	std	Y+25, r24	; 0x19
    4120:	9a 8f       	std	Y+26, r25	; 0x1a
    4122:	ab 8f       	std	Y+27, r26	; 0x1b
    4124:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4126:	69 8d       	ldd	r22, Y+25	; 0x19
    4128:	7a 8d       	ldd	r23, Y+26	; 0x1a
    412a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    412c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	4a ef       	ldi	r20, 0xFA	; 250
    4134:	54 e4       	ldi	r21, 0x44	; 68
    4136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	8d 8b       	std	Y+21, r24	; 0x15
    4140:	9e 8b       	std	Y+22, r25	; 0x16
    4142:	af 8b       	std	Y+23, r26	; 0x17
    4144:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4146:	6d 89       	ldd	r22, Y+21	; 0x15
    4148:	7e 89       	ldd	r23, Y+22	; 0x16
    414a:	8f 89       	ldd	r24, Y+23	; 0x17
    414c:	98 8d       	ldd	r25, Y+24	; 0x18
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e8       	ldi	r20, 0x80	; 128
    4154:	5f e3       	ldi	r21, 0x3F	; 63
    4156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    415a:	88 23       	and	r24, r24
    415c:	2c f4       	brge	.+10     	; 0x4168 <main+0x67c>
		__ticks = 1;
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	9c 8b       	std	Y+20, r25	; 0x14
    4164:	8b 8b       	std	Y+19, r24	; 0x13
    4166:	3f c0       	rjmp	.+126    	; 0x41e6 <main+0x6fa>
	else if (__tmp > 65535)
    4168:	6d 89       	ldd	r22, Y+21	; 0x15
    416a:	7e 89       	ldd	r23, Y+22	; 0x16
    416c:	8f 89       	ldd	r24, Y+23	; 0x17
    416e:	98 8d       	ldd	r25, Y+24	; 0x18
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	4c f5       	brge	.+82     	; 0x41d2 <main+0x6e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	69 8d       	ldd	r22, Y+25	; 0x19
    4182:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4184:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4186:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e2       	ldi	r20, 0x20	; 32
    418e:	51 e4       	ldi	r21, 0x41	; 65
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	bc 01       	movw	r22, r24
    419a:	cd 01       	movw	r24, r26
    419c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	9c 8b       	std	Y+20, r25	; 0x14
    41a6:	8b 8b       	std	Y+19, r24	; 0x13
    41a8:	0f c0       	rjmp	.+30     	; 0x41c8 <main+0x6dc>
    41aa:	88 ec       	ldi	r24, 0xC8	; 200
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	9a 8b       	std	Y+18, r25	; 0x12
    41b0:	89 8b       	std	Y+17, r24	; 0x11
    41b2:	89 89       	ldd	r24, Y+17	; 0x11
    41b4:	9a 89       	ldd	r25, Y+18	; 0x12
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <main+0x6ca>
    41ba:	9a 8b       	std	Y+18, r25	; 0x12
    41bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41be:	8b 89       	ldd	r24, Y+19	; 0x13
    41c0:	9c 89       	ldd	r25, Y+20	; 0x14
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	9c 8b       	std	Y+20, r25	; 0x14
    41c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c8:	8b 89       	ldd	r24, Y+19	; 0x13
    41ca:	9c 89       	ldd	r25, Y+20	; 0x14
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	69 f7       	brne	.-38     	; 0x41aa <main+0x6be>
    41d0:	14 c0       	rjmp	.+40     	; 0x41fa <main+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d2:	6d 89       	ldd	r22, Y+21	; 0x15
    41d4:	7e 89       	ldd	r23, Y+22	; 0x16
    41d6:	8f 89       	ldd	r24, Y+23	; 0x17
    41d8:	98 8d       	ldd	r25, Y+24	; 0x18
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	9c 8b       	std	Y+20, r25	; 0x14
    41e4:	8b 8b       	std	Y+19, r24	; 0x13
    41e6:	8b 89       	ldd	r24, Y+19	; 0x13
    41e8:	9c 89       	ldd	r25, Y+20	; 0x14
    41ea:	98 8b       	std	Y+16, r25	; 0x10
    41ec:	8f 87       	std	Y+15, r24	; 0x0f
    41ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f0:	98 89       	ldd	r25, Y+16	; 0x10
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	f1 f7       	brne	.-4      	; 0x41f2 <main+0x706>
    41f6:	98 8b       	std	Y+16, r25	; 0x10
    41f8:	8f 87       	std	Y+15, r24	; 0x0f
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	aa e7       	ldi	r26, 0x7A	; 122
    4200:	b3 e4       	ldi	r27, 0x43	; 67
    4202:	8b 87       	std	Y+11, r24	; 0x0b
    4204:	9c 87       	std	Y+12, r25	; 0x0c
    4206:	ad 87       	std	Y+13, r26	; 0x0d
    4208:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    420a:	6b 85       	ldd	r22, Y+11	; 0x0b
    420c:	7c 85       	ldd	r23, Y+12	; 0x0c
    420e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4210:	9e 85       	ldd	r25, Y+14	; 0x0e
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4a ef       	ldi	r20, 0xFA	; 250
    4218:	54 e4       	ldi	r21, 0x44	; 68
    421a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	8f 83       	std	Y+7, r24	; 0x07
    4224:	98 87       	std	Y+8, r25	; 0x08
    4226:	a9 87       	std	Y+9, r26	; 0x09
    4228:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    422a:	6f 81       	ldd	r22, Y+7	; 0x07
    422c:	78 85       	ldd	r23, Y+8	; 0x08
    422e:	89 85       	ldd	r24, Y+9	; 0x09
    4230:	9a 85       	ldd	r25, Y+10	; 0x0a
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	40 e8       	ldi	r20, 0x80	; 128
    4238:	5f e3       	ldi	r21, 0x3F	; 63
    423a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    423e:	88 23       	and	r24, r24
    4240:	2c f4       	brge	.+10     	; 0x424c <main+0x760>
		__ticks = 1;
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	9e 83       	std	Y+6, r25	; 0x06
    4248:	8d 83       	std	Y+5, r24	; 0x05
    424a:	3f c0       	rjmp	.+126    	; 0x42ca <main+0x7de>
	else if (__tmp > 65535)
    424c:	6f 81       	ldd	r22, Y+7	; 0x07
    424e:	78 85       	ldd	r23, Y+8	; 0x08
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	3f ef       	ldi	r19, 0xFF	; 255
    4258:	4f e7       	ldi	r20, 0x7F	; 127
    425a:	57 e4       	ldi	r21, 0x47	; 71
    425c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4260:	18 16       	cp	r1, r24
    4262:	4c f5       	brge	.+82     	; 0x42b6 <main+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4264:	6b 85       	ldd	r22, Y+11	; 0x0b
    4266:	7c 85       	ldd	r23, Y+12	; 0x0c
    4268:	8d 85       	ldd	r24, Y+13	; 0x0d
    426a:	9e 85       	ldd	r25, Y+14	; 0x0e
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	40 e2       	ldi	r20, 0x20	; 32
    4272:	51 e4       	ldi	r21, 0x41	; 65
    4274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	9e 83       	std	Y+6, r25	; 0x06
    428a:	8d 83       	std	Y+5, r24	; 0x05
    428c:	0f c0       	rjmp	.+30     	; 0x42ac <main+0x7c0>
    428e:	88 ec       	ldi	r24, 0xC8	; 200
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	9c 83       	std	Y+4, r25	; 0x04
    4294:	8b 83       	std	Y+3, r24	; 0x03
    4296:	8b 81       	ldd	r24, Y+3	; 0x03
    4298:	9c 81       	ldd	r25, Y+4	; 0x04
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	f1 f7       	brne	.-4      	; 0x429a <main+0x7ae>
    429e:	9c 83       	std	Y+4, r25	; 0x04
    42a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a2:	8d 81       	ldd	r24, Y+5	; 0x05
    42a4:	9e 81       	ldd	r25, Y+6	; 0x06
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	9e 83       	std	Y+6, r25	; 0x06
    42aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ac:	8d 81       	ldd	r24, Y+5	; 0x05
    42ae:	9e 81       	ldd	r25, Y+6	; 0x06
    42b0:	00 97       	sbiw	r24, 0x00	; 0
    42b2:	69 f7       	brne	.-38     	; 0x428e <main+0x7a2>
    42b4:	a8 cd       	rjmp	.-1200   	; 0x3e06 <main+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b6:	6f 81       	ldd	r22, Y+7	; 0x07
    42b8:	78 85       	ldd	r23, Y+8	; 0x08
    42ba:	89 85       	ldd	r24, Y+9	; 0x09
    42bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	9e 83       	std	Y+6, r25	; 0x06
    42c8:	8d 83       	std	Y+5, r24	; 0x05
    42ca:	8d 81       	ldd	r24, Y+5	; 0x05
    42cc:	9e 81       	ldd	r25, Y+6	; 0x06
    42ce:	9a 83       	std	Y+2, r25	; 0x02
    42d0:	89 83       	std	Y+1, r24	; 0x01
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	01 97       	sbiw	r24, 0x01	; 1
    42d8:	f1 f7       	brne	.-4      	; 0x42d6 <main+0x7ea>
    42da:	9a 83       	std	Y+2, r25	; 0x02
    42dc:	89 83       	std	Y+1, r24	; 0x01
    42de:	93 cd       	rjmp	.-1242   	; 0x3e06 <main+0x31a>

000042e0 <__udivmodhi4>:
    42e0:	aa 1b       	sub	r26, r26
    42e2:	bb 1b       	sub	r27, r27
    42e4:	51 e1       	ldi	r21, 0x11	; 17
    42e6:	07 c0       	rjmp	.+14     	; 0x42f6 <__udivmodhi4_ep>

000042e8 <__udivmodhi4_loop>:
    42e8:	aa 1f       	adc	r26, r26
    42ea:	bb 1f       	adc	r27, r27
    42ec:	a6 17       	cp	r26, r22
    42ee:	b7 07       	cpc	r27, r23
    42f0:	10 f0       	brcs	.+4      	; 0x42f6 <__udivmodhi4_ep>
    42f2:	a6 1b       	sub	r26, r22
    42f4:	b7 0b       	sbc	r27, r23

000042f6 <__udivmodhi4_ep>:
    42f6:	88 1f       	adc	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	5a 95       	dec	r21
    42fc:	a9 f7       	brne	.-22     	; 0x42e8 <__udivmodhi4_loop>
    42fe:	80 95       	com	r24
    4300:	90 95       	com	r25
    4302:	bc 01       	movw	r22, r24
    4304:	cd 01       	movw	r24, r26
    4306:	08 95       	ret

00004308 <__udivmodsi4>:
    4308:	a1 e2       	ldi	r26, 0x21	; 33
    430a:	1a 2e       	mov	r1, r26
    430c:	aa 1b       	sub	r26, r26
    430e:	bb 1b       	sub	r27, r27
    4310:	fd 01       	movw	r30, r26
    4312:	0d c0       	rjmp	.+26     	; 0x432e <__udivmodsi4_ep>

00004314 <__udivmodsi4_loop>:
    4314:	aa 1f       	adc	r26, r26
    4316:	bb 1f       	adc	r27, r27
    4318:	ee 1f       	adc	r30, r30
    431a:	ff 1f       	adc	r31, r31
    431c:	a2 17       	cp	r26, r18
    431e:	b3 07       	cpc	r27, r19
    4320:	e4 07       	cpc	r30, r20
    4322:	f5 07       	cpc	r31, r21
    4324:	20 f0       	brcs	.+8      	; 0x432e <__udivmodsi4_ep>
    4326:	a2 1b       	sub	r26, r18
    4328:	b3 0b       	sbc	r27, r19
    432a:	e4 0b       	sbc	r30, r20
    432c:	f5 0b       	sbc	r31, r21

0000432e <__udivmodsi4_ep>:
    432e:	66 1f       	adc	r22, r22
    4330:	77 1f       	adc	r23, r23
    4332:	88 1f       	adc	r24, r24
    4334:	99 1f       	adc	r25, r25
    4336:	1a 94       	dec	r1
    4338:	69 f7       	brne	.-38     	; 0x4314 <__udivmodsi4_loop>
    433a:	60 95       	com	r22
    433c:	70 95       	com	r23
    433e:	80 95       	com	r24
    4340:	90 95       	com	r25
    4342:	9b 01       	movw	r18, r22
    4344:	ac 01       	movw	r20, r24
    4346:	bd 01       	movw	r22, r26
    4348:	cf 01       	movw	r24, r30
    434a:	08 95       	ret

0000434c <__prologue_saves__>:
    434c:	2f 92       	push	r2
    434e:	3f 92       	push	r3
    4350:	4f 92       	push	r4
    4352:	5f 92       	push	r5
    4354:	6f 92       	push	r6
    4356:	7f 92       	push	r7
    4358:	8f 92       	push	r8
    435a:	9f 92       	push	r9
    435c:	af 92       	push	r10
    435e:	bf 92       	push	r11
    4360:	cf 92       	push	r12
    4362:	df 92       	push	r13
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	cf 93       	push	r28
    436e:	df 93       	push	r29
    4370:	cd b7       	in	r28, 0x3d	; 61
    4372:	de b7       	in	r29, 0x3e	; 62
    4374:	ca 1b       	sub	r28, r26
    4376:	db 0b       	sbc	r29, r27
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
    4382:	09 94       	ijmp

00004384 <__epilogue_restores__>:
    4384:	2a 88       	ldd	r2, Y+18	; 0x12
    4386:	39 88       	ldd	r3, Y+17	; 0x11
    4388:	48 88       	ldd	r4, Y+16	; 0x10
    438a:	5f 84       	ldd	r5, Y+15	; 0x0f
    438c:	6e 84       	ldd	r6, Y+14	; 0x0e
    438e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4390:	8c 84       	ldd	r8, Y+12	; 0x0c
    4392:	9b 84       	ldd	r9, Y+11	; 0x0b
    4394:	aa 84       	ldd	r10, Y+10	; 0x0a
    4396:	b9 84       	ldd	r11, Y+9	; 0x09
    4398:	c8 84       	ldd	r12, Y+8	; 0x08
    439a:	df 80       	ldd	r13, Y+7	; 0x07
    439c:	ee 80       	ldd	r14, Y+6	; 0x06
    439e:	fd 80       	ldd	r15, Y+5	; 0x05
    43a0:	0c 81       	ldd	r16, Y+4	; 0x04
    43a2:	1b 81       	ldd	r17, Y+3	; 0x03
    43a4:	aa 81       	ldd	r26, Y+2	; 0x02
    43a6:	b9 81       	ldd	r27, Y+1	; 0x01
    43a8:	ce 0f       	add	r28, r30
    43aa:	d1 1d       	adc	r29, r1
    43ac:	0f b6       	in	r0, 0x3f	; 63
    43ae:	f8 94       	cli
    43b0:	de bf       	out	0x3e, r29	; 62
    43b2:	0f be       	out	0x3f, r0	; 63
    43b4:	cd bf       	out	0x3d, r28	; 61
    43b6:	ed 01       	movw	r28, r26
    43b8:	08 95       	ret

000043ba <_exit>:
    43ba:	f8 94       	cli

000043bc <__stop_program>:
    43bc:	ff cf       	rjmp	.-2      	; 0x43bc <__stop_program>
