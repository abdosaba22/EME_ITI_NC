
SPI_Slave_spaghiti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003708  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00003708  0000377c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000022bc  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a90  00000000  00000000  00005a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000064e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000aa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000acde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b56c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 44 1a 	call	0x3488	; 0x3488 <main>
      7a:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e7       	ldi	r26, 0x73	; 115
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e7       	ldi	r24, 0x73	; 115
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e7       	ldi	r22, 0x73	; 115
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 57 1b 	jmp	0x36ae	; 0x36ae <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <HLCD_voidInit>:
/* SWC includes */
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit(void){
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c2 57       	subi	r28, 0x72	; 114
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/* 4 bit mode init */
	#elif HLCD_MODE == HLCD_4BIT_MODE
	/* init direction */

	HLCD_CTRL_INIT(HLCD_RS_PIN);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_RW_PIN);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	HLCD_CTRL_INIT(HLCD_EN_PIN);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	62 e0       	ldi	r22, 0x02	; 2
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>

	HLCD_DATA_INIT(HLCD_D4_PIN);
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	64 e0       	ldi	r22, 0x04	; 4
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D5_PIN);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	65 e0       	ldi	r22, 0x05	; 5
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D6_PIN);
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	66 e0       	ldi	r22, 0x06	; 6
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	HLCD_DATA_INIT(HLCD_D7_PIN);
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	67 e0       	ldi	r22, 0x07	; 7
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
     cee:	fe 01       	movw	r30, r28
     cf0:	e1 59       	subi	r30, 0x91	; 145
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e2       	ldi	r26, 0x20	; 32
     cfa:	b2 e4       	ldi	r27, 0x42	; 66
     cfc:	80 83       	st	Z, r24
     cfe:	91 83       	std	Z+1, r25	; 0x01
     d00:	a2 83       	std	Z+2, r26	; 0x02
     d02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	8e 01       	movw	r16, r28
     d06:	05 59       	subi	r16, 0x95	; 149
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	fe 01       	movw	r30, r28
     d0c:	e1 59       	subi	r30, 0x91	; 145
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4a ef       	ldi	r20, 0xFA	; 250
     d1e:	54 e4       	ldi	r21, 0x44	; 68
     d20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	f8 01       	movw	r30, r16
     d2a:	80 83       	st	Z, r24
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	a2 83       	std	Z+2, r26	; 0x02
     d30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d32:	fe 01       	movw	r30, r28
     d34:	e5 59       	subi	r30, 0x95	; 149
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	82 81       	ldd	r24, Z+2	; 0x02
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e8       	ldi	r20, 0x80	; 128
     d46:	5f e3       	ldi	r21, 0x3F	; 63
     d48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	44 f4       	brge	.+16     	; 0xd60 <HLCD_voidInit+0xd2>
		__ticks = 1;
     d50:	fe 01       	movw	r30, r28
     d52:	e7 59       	subi	r30, 0x97	; 151
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	64 c0       	rjmp	.+200    	; 0xe28 <HLCD_voidInit+0x19a>
	else if (__tmp > 65535)
     d60:	fe 01       	movw	r30, r28
     d62:	e5 59       	subi	r30, 0x95	; 149
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d7a:	18 16       	cp	r1, r24
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <HLCD_voidInit+0xf2>
     d7e:	43 c0       	rjmp	.+134    	; 0xe06 <HLCD_voidInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	fe 01       	movw	r30, r28
     d82:	e1 59       	subi	r30, 0x91	; 145
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e2       	ldi	r20, 0x20	; 32
     d94:	51 e4       	ldi	r21, 0x41	; 65
     d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	8e 01       	movw	r16, r28
     da0:	07 59       	subi	r16, 0x97	; 151
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	bc 01       	movw	r22, r24
     da6:	cd 01       	movw	r24, r26
     da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	f8 01       	movw	r30, r16
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
     db6:	1f c0       	rjmp	.+62     	; 0xdf6 <HLCD_voidInit+0x168>
     db8:	fe 01       	movw	r30, r28
     dba:	e9 59       	subi	r30, 0x99	; 153
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	88 ec       	ldi	r24, 0xC8	; 200
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc6:	fe 01       	movw	r30, r28
     dc8:	e9 59       	subi	r30, 0x99	; 153
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <HLCD_voidInit+0x142>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e9 59       	subi	r30, 0x99	; 153
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dde:	de 01       	movw	r26, r28
     de0:	a7 59       	subi	r26, 0x97	; 151
     de2:	bf 4f       	sbci	r27, 0xFF	; 255
     de4:	fe 01       	movw	r30, r28
     de6:	e7 59       	subi	r30, 0x97	; 151
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	9c 93       	st	X, r25
     df4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	fe 01       	movw	r30, r28
     df8:	e7 59       	subi	r30, 0x97	; 151
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	d1 f6       	brne	.-76     	; 0xdb8 <HLCD_voidInit+0x12a>
     e04:	27 c0       	rjmp	.+78     	; 0xe54 <HLCD_voidInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e06:	8e 01       	movw	r16, r28
     e08:	07 59       	subi	r16, 0x97	; 151
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	fe 01       	movw	r30, r28
     e0e:	e5 59       	subi	r30, 0x95	; 149
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	60 81       	ld	r22, Z
     e14:	71 81       	ldd	r23, Z+1	; 0x01
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	f8 01       	movw	r30, r16
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	de 01       	movw	r26, r28
     e2a:	ab 59       	subi	r26, 0x9B	; 155
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	fe 01       	movw	r30, r28
     e30:	e7 59       	subi	r30, 0x97	; 151
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	8d 93       	st	X+, r24
     e3a:	9c 93       	st	X, r25
     e3c:	fe 01       	movw	r30, r28
     e3e:	eb 59       	subi	r30, 0x9B	; 155
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <HLCD_voidInit+0x1b8>
     e4a:	fe 01       	movw	r30, r28
     e4c:	eb 59       	subi	r30, 0x9B	; 155
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24


	_delay_ms(40) ;

	HLCD_voidSendCmd(HLCD_INIT);//send most first
     e54:	83 e3       	ldi	r24, 0x33	; 51
     e56:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
     e5a:	fe 01       	movw	r30, r28
     e5c:	ef 59       	subi	r30, 0x9F	; 159
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a0 ea       	ldi	r26, 0xA0	; 160
     e66:	b0 e4       	ldi	r27, 0x40	; 64
     e68:	80 83       	st	Z, r24
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	a2 83       	std	Z+2, r26	; 0x02
     e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	8e 01       	movw	r16, r28
     e72:	03 5a       	subi	r16, 0xA3	; 163
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	fe 01       	movw	r30, r28
     e78:	ef 59       	subi	r30, 0x9F	; 159
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a ef       	ldi	r20, 0xFA	; 250
     e8a:	54 e4       	ldi	r21, 0x44	; 68
     e8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	f8 01       	movw	r30, r16
     e96:	80 83       	st	Z, r24
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e9e:	fe 01       	movw	r30, r28
     ea0:	e3 5a       	subi	r30, 0xA3	; 163
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     eb8:	88 23       	and	r24, r24
     eba:	44 f4       	brge	.+16     	; 0xecc <HLCD_voidInit+0x23e>
		__ticks = 1;
     ebc:	fe 01       	movw	r30, r28
     ebe:	e5 5a       	subi	r30, 0xA5	; 165
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
     eca:	64 c0       	rjmp	.+200    	; 0xf94 <HLCD_voidInit+0x306>
	else if (__tmp > 65535)
     ecc:	fe 01       	movw	r30, r28
     ece:	e3 5a       	subi	r30, 0xA3	; 163
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	60 81       	ld	r22, Z
     ed4:	71 81       	ldd	r23, Z+1	; 0x01
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	93 81       	ldd	r25, Z+3	; 0x03
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	0c f0       	brlt	.+2      	; 0xeec <HLCD_voidInit+0x25e>
     eea:	43 c0       	rjmp	.+134    	; 0xf72 <HLCD_voidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	fe 01       	movw	r30, r28
     eee:	ef 59       	subi	r30, 0x9F	; 159
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	82 81       	ldd	r24, Z+2	; 0x02
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e2       	ldi	r20, 0x20	; 32
     f00:	51 e4       	ldi	r21, 0x41	; 65
     f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8e 01       	movw	r16, r28
     f0c:	05 5a       	subi	r16, 0xA5	; 165
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	f8 01       	movw	r30, r16
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	1f c0       	rjmp	.+62     	; 0xf62 <HLCD_voidInit+0x2d4>
     f24:	fe 01       	movw	r30, r28
     f26:	e7 5a       	subi	r30, 0xA7	; 167
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	88 ec       	ldi	r24, 0xC8	; 200
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
     f32:	fe 01       	movw	r30, r28
     f34:	e7 5a       	subi	r30, 0xA7	; 167
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <HLCD_voidInit+0x2ae>
     f40:	fe 01       	movw	r30, r28
     f42:	e7 5a       	subi	r30, 0xA7	; 167
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4a:	de 01       	movw	r26, r28
     f4c:	a5 5a       	subi	r26, 0xA5	; 165
     f4e:	bf 4f       	sbci	r27, 0xFF	; 255
     f50:	fe 01       	movw	r30, r28
     f52:	e5 5a       	subi	r30, 0xA5	; 165
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	fe 01       	movw	r30, r28
     f64:	e5 5a       	subi	r30, 0xA5	; 165
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	d1 f6       	brne	.-76     	; 0xf24 <HLCD_voidInit+0x296>
     f70:	27 c0       	rjmp	.+78     	; 0xfc0 <HLCD_voidInit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	8e 01       	movw	r16, r28
     f74:	05 5a       	subi	r16, 0xA5	; 165
     f76:	1f 4f       	sbci	r17, 0xFF	; 255
     f78:	fe 01       	movw	r30, r28
     f7a:	e3 5a       	subi	r30, 0xA3	; 163
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	60 81       	ld	r22, Z
     f80:	71 81       	ldd	r23, Z+1	; 0x01
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	f8 01       	movw	r30, r16
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
     f94:	de 01       	movw	r26, r28
     f96:	a9 5a       	subi	r26, 0xA9	; 169
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 5a       	subi	r30, 0xA5	; 165
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	8d 93       	st	X+, r24
     fa6:	9c 93       	st	X, r25
     fa8:	fe 01       	movw	r30, r28
     faa:	e9 5a       	subi	r30, 0xA9	; 169
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <HLCD_voidInit+0x324>
     fb6:	fe 01       	movw	r30, r28
     fb8:	e9 5a       	subi	r30, 0xA9	; 169
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
	_delay_ms(5);
	HLCD_voidSendCmd(HLCD_ENABLE_4BIT_MODE);//send most first
     fc0:	82 e3       	ldi	r24, 0x32	; 50
     fc2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
     fc6:	fe 01       	movw	r30, r28
     fc8:	ed 5a       	subi	r30, 0xAD	; 173
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a8 ec       	ldi	r26, 0xC8	; 200
     fd2:	b2 e4       	ldi	r27, 0x42	; 66
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	a2 83       	std	Z+2, r26	; 0x02
     fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fdc:	8e 01       	movw	r16, r28
     fde:	01 5b       	subi	r16, 0xB1	; 177
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	fe 01       	movw	r30, r28
     fe4:	ed 5a       	subi	r30, 0xAD	; 173
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	2b ea       	ldi	r18, 0xAB	; 171
     ff2:	3a ea       	ldi	r19, 0xAA	; 170
     ff4:	4a e2       	ldi	r20, 0x2A	; 42
     ff6:	50 e4       	ldi	r21, 0x40	; 64
     ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	f8 01       	movw	r30, r16
    1002:	80 83       	st	Z, r24
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	a2 83       	std	Z+2, r26	; 0x02
    1008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    100a:	fe 01       	movw	r30, r28
    100c:	e1 5b       	subi	r30, 0xB1	; 177
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	34 f4       	brge	.+12     	; 0x1034 <HLCD_voidInit+0x3a6>
		__ticks = 1;
    1028:	fe 01       	movw	r30, r28
    102a:	e2 5b       	subi	r30, 0xB2	; 178
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 83       	st	Z, r24
    1032:	e0 c0       	rjmp	.+448    	; 0x11f4 <HLCD_voidInit+0x566>
	else if (__tmp > 255)
    1034:	fe 01       	movw	r30, r28
    1036:	e1 5b       	subi	r30, 0xB1	; 177
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	53 e4       	ldi	r21, 0x43	; 67
    104a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	0c f0       	brlt	.+2      	; 0x1054 <HLCD_voidInit+0x3c6>
    1052:	c0 c0       	rjmp	.+384    	; 0x11d4 <HLCD_voidInit+0x546>
	{
		_delay_ms(__us / 1000.0);
    1054:	fe 01       	movw	r30, r28
    1056:	ed 5a       	subi	r30, 0xAD	; 173
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a e7       	ldi	r20, 0x7A	; 122
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	fe 01       	movw	r30, r28
    1074:	e6 5b       	subi	r30, 0xB6	; 182
    1076:	ff 4f       	sbci	r31, 0xFF	; 255
    1078:	80 83       	st	Z, r24
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	a2 83       	std	Z+2, r26	; 0x02
    107e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1080:	8e 01       	movw	r16, r28
    1082:	0a 5b       	subi	r16, 0xBA	; 186
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	fe 01       	movw	r30, r28
    1088:	e6 5b       	subi	r30, 0xB6	; 182
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	60 81       	ld	r22, Z
    108e:	71 81       	ldd	r23, Z+1	; 0x01
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a ef       	ldi	r20, 0xFA	; 250
    109a:	54 e4       	ldi	r21, 0x44	; 68
    109c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	80 83       	st	Z, r24
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	a2 83       	std	Z+2, r26	; 0x02
    10ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10ae:	fe 01       	movw	r30, r28
    10b0:	ea 5b       	subi	r30, 0xBA	; 186
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	44 f4       	brge	.+16     	; 0x10dc <HLCD_voidInit+0x44e>
		__ticks = 1;
    10cc:	fe 01       	movw	r30, r28
    10ce:	ec 5b       	subi	r30, 0xBC	; 188
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    10da:	64 c0       	rjmp	.+200    	; 0x11a4 <HLCD_voidInit+0x516>
	else if (__tmp > 65535)
    10dc:	fe 01       	movw	r30, r28
    10de:	ea 5b       	subi	r30, 0xBA	; 186
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	0c f0       	brlt	.+2      	; 0x10fc <HLCD_voidInit+0x46e>
    10fa:	43 c0       	rjmp	.+134    	; 0x1182 <HLCD_voidInit+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fc:	fe 01       	movw	r30, r28
    10fe:	e6 5b       	subi	r30, 0xB6	; 182
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	8e 01       	movw	r16, r28
    111c:	0c 5b       	subi	r16, 0xBC	; 188
    111e:	1f 4f       	sbci	r17, 0xFF	; 255
    1120:	bc 01       	movw	r22, r24
    1122:	cd 01       	movw	r24, r26
    1124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	f8 01       	movw	r30, r16
    112e:	91 83       	std	Z+1, r25	; 0x01
    1130:	80 83       	st	Z, r24
    1132:	1f c0       	rjmp	.+62     	; 0x1172 <HLCD_voidInit+0x4e4>
    1134:	fe 01       	movw	r30, r28
    1136:	ee 5b       	subi	r30, 0xBE	; 190
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	88 ec       	ldi	r24, 0xC8	; 200
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
    1142:	fe 01       	movw	r30, r28
    1144:	ee 5b       	subi	r30, 0xBE	; 190
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <HLCD_voidInit+0x4be>
    1150:	fe 01       	movw	r30, r28
    1152:	ee 5b       	subi	r30, 0xBE	; 190
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	91 83       	std	Z+1, r25	; 0x01
    1158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115a:	de 01       	movw	r26, r28
    115c:	ac 5b       	subi	r26, 0xBC	; 188
    115e:	bf 4f       	sbci	r27, 0xFF	; 255
    1160:	fe 01       	movw	r30, r28
    1162:	ec 5b       	subi	r30, 0xBC	; 188
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	80 81       	ld	r24, Z
    1168:	91 81       	ldd	r25, Z+1	; 0x01
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	9c 93       	st	X, r25
    1170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	fe 01       	movw	r30, r28
    1174:	ec 5b       	subi	r30, 0xBC	; 188
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	d1 f6       	brne	.-76     	; 0x1134 <HLCD_voidInit+0x4a6>
    1180:	42 c0       	rjmp	.+132    	; 0x1206 <HLCD_voidInit+0x578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	8e 01       	movw	r16, r28
    1184:	0c 5b       	subi	r16, 0xBC	; 188
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	fe 01       	movw	r30, r28
    118a:	ea 5b       	subi	r30, 0xBA	; 186
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	f8 01       	movw	r30, r16
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
    11a4:	de 01       	movw	r26, r28
    11a6:	a0 5c       	subi	r26, 0xC0	; 192
    11a8:	bf 4f       	sbci	r27, 0xFF	; 255
    11aa:	fe 01       	movw	r30, r28
    11ac:	ec 5b       	subi	r30, 0xBC	; 188
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	91 81       	ldd	r25, Z+1	; 0x01
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	fe 01       	movw	r30, r28
    11bc:	e0 5c       	subi	r30, 0xC0	; 192
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <HLCD_voidInit+0x536>
    11c8:	fe 01       	movw	r30, r28
    11ca:	e0 5c       	subi	r30, 0xC0	; 192
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	80 83       	st	Z, r24
    11d2:	19 c0       	rjmp	.+50     	; 0x1206 <HLCD_voidInit+0x578>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11d4:	8e 01       	movw	r16, r28
    11d6:	02 5b       	subi	r16, 0xB2	; 178
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	fe 01       	movw	r30, r28
    11dc:	e1 5b       	subi	r30, 0xB1	; 177
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	f8 01       	movw	r30, r16
    11f2:	80 83       	st	Z, r24
    11f4:	fe 01       	movw	r30, r28
    11f6:	e2 5b       	subi	r30, 0xB2	; 178
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    1200:	8a 95       	dec	r24
    1202:	f1 f7       	brne	.-4      	; 0x1200 <HLCD_voidInit+0x572>
    1204:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(100);
	HLCD_voidSendCmd(0x28);//send most first
    1206:	88 e2       	ldi	r24, 0x28	; 40
    1208:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a8 ec       	ldi	r26, 0xC8	; 200
    1212:	b2 e4       	ldi	r27, 0x42	; 66
    1214:	8b af       	std	Y+59, r24	; 0x3b
    1216:	9c af       	std	Y+60, r25	; 0x3c
    1218:	ad af       	std	Y+61, r26	; 0x3d
    121a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    121c:	6b ad       	ldd	r22, Y+59	; 0x3b
    121e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1220:	8d ad       	ldd	r24, Y+61	; 0x3d
    1222:	9e ad       	ldd	r25, Y+62	; 0x3e
    1224:	2b ea       	ldi	r18, 0xAB	; 171
    1226:	3a ea       	ldi	r19, 0xAA	; 170
    1228:	4a e2       	ldi	r20, 0x2A	; 42
    122a:	50 e4       	ldi	r21, 0x40	; 64
    122c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8f ab       	std	Y+55, r24	; 0x37
    1236:	98 af       	std	Y+56, r25	; 0x38
    1238:	a9 af       	std	Y+57, r26	; 0x39
    123a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    123c:	6f a9       	ldd	r22, Y+55	; 0x37
    123e:	78 ad       	ldd	r23, Y+56	; 0x38
    1240:	89 ad       	ldd	r24, Y+57	; 0x39
    1242:	9a ad       	ldd	r25, Y+58	; 0x3a
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e8       	ldi	r20, 0x80	; 128
    124a:	5f e3       	ldi	r21, 0x3F	; 63
    124c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1250:	88 23       	and	r24, r24
    1252:	1c f4       	brge	.+6      	; 0x125a <HLCD_voidInit+0x5cc>
		__ticks = 1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	8e ab       	std	Y+54, r24	; 0x36
    1258:	91 c0       	rjmp	.+290    	; 0x137c <HLCD_voidInit+0x6ee>
	else if (__tmp > 255)
    125a:	6f a9       	ldd	r22, Y+55	; 0x37
    125c:	78 ad       	ldd	r23, Y+56	; 0x38
    125e:	89 ad       	ldd	r24, Y+57	; 0x39
    1260:	9a ad       	ldd	r25, Y+58	; 0x3a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4f e7       	ldi	r20, 0x7F	; 127
    1268:	53 e4       	ldi	r21, 0x43	; 67
    126a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    126e:	18 16       	cp	r1, r24
    1270:	0c f0       	brlt	.+2      	; 0x1274 <HLCD_voidInit+0x5e6>
    1272:	7b c0       	rjmp	.+246    	; 0x136a <HLCD_voidInit+0x6dc>
	{
		_delay_ms(__us / 1000.0);
    1274:	6b ad       	ldd	r22, Y+59	; 0x3b
    1276:	7c ad       	ldd	r23, Y+60	; 0x3c
    1278:	8d ad       	ldd	r24, Y+61	; 0x3d
    127a:	9e ad       	ldd	r25, Y+62	; 0x3e
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	4a e7       	ldi	r20, 0x7A	; 122
    1282:	54 e4       	ldi	r21, 0x44	; 68
    1284:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8a ab       	std	Y+50, r24	; 0x32
    128e:	9b ab       	std	Y+51, r25	; 0x33
    1290:	ac ab       	std	Y+52, r26	; 0x34
    1292:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1294:	6a a9       	ldd	r22, Y+50	; 0x32
    1296:	7b a9       	ldd	r23, Y+51	; 0x33
    1298:	8c a9       	ldd	r24, Y+52	; 0x34
    129a:	9d a9       	ldd	r25, Y+53	; 0x35
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	4a ef       	ldi	r20, 0xFA	; 250
    12a2:	54 e4       	ldi	r21, 0x44	; 68
    12a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8e a7       	std	Y+46, r24	; 0x2e
    12ae:	9f a7       	std	Y+47, r25	; 0x2f
    12b0:	a8 ab       	std	Y+48, r26	; 0x30
    12b2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    12b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    12b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    12b8:	88 a9       	ldd	r24, Y+48	; 0x30
    12ba:	99 a9       	ldd	r25, Y+49	; 0x31
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e8       	ldi	r20, 0x80	; 128
    12c2:	5f e3       	ldi	r21, 0x3F	; 63
    12c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12c8:	88 23       	and	r24, r24
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <HLCD_voidInit+0x648>
		__ticks = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9d a7       	std	Y+45, r25	; 0x2d
    12d2:	8c a7       	std	Y+44, r24	; 0x2c
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <HLCD_voidInit+0x6c6>
	else if (__tmp > 65535)
    12d6:	6e a5       	ldd	r22, Y+46	; 0x2e
    12d8:	7f a5       	ldd	r23, Y+47	; 0x2f
    12da:	88 a9       	ldd	r24, Y+48	; 0x30
    12dc:	99 a9       	ldd	r25, Y+49	; 0x31
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f e7       	ldi	r20, 0x7F	; 127
    12e4:	57 e4       	ldi	r21, 0x47	; 71
    12e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12ea:	18 16       	cp	r1, r24
    12ec:	4c f5       	brge	.+82     	; 0x1340 <HLCD_voidInit+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ee:	6a a9       	ldd	r22, Y+50	; 0x32
    12f0:	7b a9       	ldd	r23, Y+51	; 0x33
    12f2:	8c a9       	ldd	r24, Y+52	; 0x34
    12f4:	9d a9       	ldd	r25, Y+53	; 0x35
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	bc 01       	movw	r22, r24
    1308:	cd 01       	movw	r24, r26
    130a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9d a7       	std	Y+45, r25	; 0x2d
    1314:	8c a7       	std	Y+44, r24	; 0x2c
    1316:	0f c0       	rjmp	.+30     	; 0x1336 <HLCD_voidInit+0x6a8>
    1318:	88 ec       	ldi	r24, 0xC8	; 200
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9b a7       	std	Y+43, r25	; 0x2b
    131e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1320:	8a a5       	ldd	r24, Y+42	; 0x2a
    1322:	9b a5       	ldd	r25, Y+43	; 0x2b
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <HLCD_voidInit+0x696>
    1328:	9b a7       	std	Y+43, r25	; 0x2b
    132a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132c:	8c a5       	ldd	r24, Y+44	; 0x2c
    132e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	9d a7       	std	Y+45, r25	; 0x2d
    1334:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	8c a5       	ldd	r24, Y+44	; 0x2c
    1338:	9d a5       	ldd	r25, Y+45	; 0x2d
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	69 f7       	brne	.-38     	; 0x1318 <HLCD_voidInit+0x68a>
    133e:	24 c0       	rjmp	.+72     	; 0x1388 <HLCD_voidInit+0x6fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1340:	6e a5       	ldd	r22, Y+46	; 0x2e
    1342:	7f a5       	ldd	r23, Y+47	; 0x2f
    1344:	88 a9       	ldd	r24, Y+48	; 0x30
    1346:	99 a9       	ldd	r25, Y+49	; 0x31
    1348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9d a7       	std	Y+45, r25	; 0x2d
    1352:	8c a7       	std	Y+44, r24	; 0x2c
    1354:	8c a5       	ldd	r24, Y+44	; 0x2c
    1356:	9d a5       	ldd	r25, Y+45	; 0x2d
    1358:	99 a7       	std	Y+41, r25	; 0x29
    135a:	88 a7       	std	Y+40, r24	; 0x28
    135c:	88 a5       	ldd	r24, Y+40	; 0x28
    135e:	99 a5       	ldd	r25, Y+41	; 0x29
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <HLCD_voidInit+0x6d2>
    1364:	99 a7       	std	Y+41, r25	; 0x29
    1366:	88 a7       	std	Y+40, r24	; 0x28
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <HLCD_voidInit+0x6fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    136a:	6f a9       	ldd	r22, Y+55	; 0x37
    136c:	78 ad       	ldd	r23, Y+56	; 0x38
    136e:	89 ad       	ldd	r24, Y+57	; 0x39
    1370:	9a ad       	ldd	r25, Y+58	; 0x3a
    1372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	8e ab       	std	Y+54, r24	; 0x36
    137c:	8e a9       	ldd	r24, Y+54	; 0x36
    137e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1380:	8f a1       	ldd	r24, Y+39	; 0x27
    1382:	8a 95       	dec	r24
    1384:	f1 f7       	brne	.-4      	; 0x1382 <HLCD_voidInit+0x6f4>
    1386:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(100);
	HLCD_voidSendCmd(0x0C);
    1388:	8c e0       	ldi	r24, 0x0C	; 12
    138a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a8 e4       	ldi	r26, 0x48	; 72
    1394:	b3 e4       	ldi	r27, 0x43	; 67
    1396:	8b a3       	std	Y+35, r24	; 0x23
    1398:	9c a3       	std	Y+36, r25	; 0x24
    139a:	ad a3       	std	Y+37, r26	; 0x25
    139c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    139e:	6b a1       	ldd	r22, Y+35	; 0x23
    13a0:	7c a1       	ldd	r23, Y+36	; 0x24
    13a2:	8d a1       	ldd	r24, Y+37	; 0x25
    13a4:	9e a1       	ldd	r25, Y+38	; 0x26
    13a6:	2b ea       	ldi	r18, 0xAB	; 171
    13a8:	3a ea       	ldi	r19, 0xAA	; 170
    13aa:	4a e2       	ldi	r20, 0x2A	; 42
    13ac:	50 e4       	ldi	r21, 0x40	; 64
    13ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8f 8f       	std	Y+31, r24	; 0x1f
    13b8:	98 a3       	std	Y+32, r25	; 0x20
    13ba:	a9 a3       	std	Y+33, r26	; 0x21
    13bc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13c0:	78 a1       	ldd	r23, Y+32	; 0x20
    13c2:	89 a1       	ldd	r24, Y+33	; 0x21
    13c4:	9a a1       	ldd	r25, Y+34	; 0x22
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	1c f4       	brge	.+6      	; 0x13dc <HLCD_voidInit+0x74e>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8e 8f       	std	Y+30, r24	; 0x1e
    13da:	91 c0       	rjmp	.+290    	; 0x14fe <HLCD_voidInit+0x870>
	else if (__tmp > 255)
    13dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13de:	78 a1       	ldd	r23, Y+32	; 0x20
    13e0:	89 a1       	ldd	r24, Y+33	; 0x21
    13e2:	9a a1       	ldd	r25, Y+34	; 0x22
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	53 e4       	ldi	r21, 0x43	; 67
    13ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <HLCD_voidInit+0x768>
    13f4:	7b c0       	rjmp	.+246    	; 0x14ec <HLCD_voidInit+0x85e>
	{
		_delay_ms(__us / 1000.0);
    13f6:	6b a1       	ldd	r22, Y+35	; 0x23
    13f8:	7c a1       	ldd	r23, Y+36	; 0x24
    13fa:	8d a1       	ldd	r24, Y+37	; 0x25
    13fc:	9e a1       	ldd	r25, Y+38	; 0x26
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4a e7       	ldi	r20, 0x7A	; 122
    1404:	54 e4       	ldi	r21, 0x44	; 68
    1406:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	8a 8f       	std	Y+26, r24	; 0x1a
    1410:	9b 8f       	std	Y+27, r25	; 0x1b
    1412:	ac 8f       	std	Y+28, r26	; 0x1c
    1414:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1418:	7b 8d       	ldd	r23, Y+27	; 0x1b
    141a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    141c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8e 8b       	std	Y+22, r24	; 0x16
    1430:	9f 8b       	std	Y+23, r25	; 0x17
    1432:	a8 8f       	std	Y+24, r26	; 0x18
    1434:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1436:	6e 89       	ldd	r22, Y+22	; 0x16
    1438:	7f 89       	ldd	r23, Y+23	; 0x17
    143a:	88 8d       	ldd	r24, Y+24	; 0x18
    143c:	99 8d       	ldd	r25, Y+25	; 0x19
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <HLCD_voidInit+0x7ca>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9d 8b       	std	Y+21, r25	; 0x15
    1454:	8c 8b       	std	Y+20, r24	; 0x14
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <HLCD_voidInit+0x848>
	else if (__tmp > 65535)
    1458:	6e 89       	ldd	r22, Y+22	; 0x16
    145a:	7f 89       	ldd	r23, Y+23	; 0x17
    145c:	88 8d       	ldd	r24, Y+24	; 0x18
    145e:	99 8d       	ldd	r25, Y+25	; 0x19
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <HLCD_voidInit+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1472:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1474:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1476:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9d 8b       	std	Y+21, r25	; 0x15
    1496:	8c 8b       	std	Y+20, r24	; 0x14
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <HLCD_voidInit+0x82a>
    149a:	88 ec       	ldi	r24, 0xC8	; 200
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9b 8b       	std	Y+19, r25	; 0x13
    14a0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a2:	8a 89       	ldd	r24, Y+18	; 0x12
    14a4:	9b 89       	ldd	r25, Y+19	; 0x13
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <HLCD_voidInit+0x818>
    14aa:	9b 8b       	std	Y+19, r25	; 0x13
    14ac:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8c 89       	ldd	r24, Y+20	; 0x14
    14b0:	9d 89       	ldd	r25, Y+21	; 0x15
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9d 8b       	std	Y+21, r25	; 0x15
    14b6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8c 89       	ldd	r24, Y+20	; 0x14
    14ba:	9d 89       	ldd	r25, Y+21	; 0x15
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <HLCD_voidInit+0x80c>
    14c0:	24 c0       	rjmp	.+72     	; 0x150a <HLCD_voidInit+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6e 89       	ldd	r22, Y+22	; 0x16
    14c4:	7f 89       	ldd	r23, Y+23	; 0x17
    14c6:	88 8d       	ldd	r24, Y+24	; 0x18
    14c8:	99 8d       	ldd	r25, Y+25	; 0x19
    14ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9d 8b       	std	Y+21, r25	; 0x15
    14d4:	8c 8b       	std	Y+20, r24	; 0x14
    14d6:	8c 89       	ldd	r24, Y+20	; 0x14
    14d8:	9d 89       	ldd	r25, Y+21	; 0x15
    14da:	99 8b       	std	Y+17, r25	; 0x11
    14dc:	88 8b       	std	Y+16, r24	; 0x10
    14de:	88 89       	ldd	r24, Y+16	; 0x10
    14e0:	99 89       	ldd	r25, Y+17	; 0x11
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <HLCD_voidInit+0x854>
    14e6:	99 8b       	std	Y+17, r25	; 0x11
    14e8:	88 8b       	std	Y+16, r24	; 0x10
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <HLCD_voidInit+0x87c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14ec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14ee:	78 a1       	ldd	r23, Y+32	; 0x20
    14f0:	89 a1       	ldd	r24, Y+33	; 0x21
    14f2:	9a a1       	ldd	r25, Y+34	; 0x22
    14f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8e 8f       	std	Y+30, r24	; 0x1e
    14fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1500:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1502:	8f 85       	ldd	r24, Y+15	; 0x0f
    1504:	8a 95       	dec	r24
    1506:	f1 f7       	brne	.-4      	; 0x1504 <HLCD_voidInit+0x876>
    1508:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(200);


	HLCD_voidSendCmd(0x06);
    150a:	86 e0       	ldi	r24, 0x06	; 6
    150c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x0F);
    1510:	8f e0       	ldi	r24, 0x0F	; 15
    1512:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
	HLCD_voidSendCmd(0x01);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	b0 e4       	ldi	r27, 0x40	; 64
    1524:	8b 87       	std	Y+11, r24	; 0x0b
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	ad 87       	std	Y+13, r26	; 0x0d
    152a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a ef       	ldi	r20, 0xFA	; 250
    153a:	54 e4       	ldi	r21, 0x44	; 68
    153c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	98 87       	std	Y+8, r25	; 0x08
    1548:	a9 87       	std	Y+9, r26	; 0x09
    154a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <HLCD_voidInit+0x8e0>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <HLCD_voidInit+0x95e>
	else if (__tmp > 65535)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <HLCD_voidInit+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	6b 85       	ldd	r22, Y+11	; 0x0b
    1588:	7c 85       	ldd	r23, Y+12	; 0x0c
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <HLCD_voidInit+0x940>
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <HLCD_voidInit+0x92e>
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <HLCD_voidInit+0x922>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <HLCD_voidInit+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <HLCD_voidInit+0x96a>
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

}
    1600:	ce 58       	subi	r28, 0x8E	; 142
    1602:	df 4f       	sbci	r29, 0xFF	; 255
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <HLCD_voidSendCmd>:

void HLCD_voidSendCmd(u8 ARG_u8Cmd){
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	c1 56       	subi	r28, 0x61	; 97
    1626:	d0 40       	sbci	r29, 0x00	; 0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	fe 01       	movw	r30, r28
    1634:	ef 59       	subi	r30, 0x9F	; 159
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	80 83       	st	Z, r24
	
	HLCD_RS(MDIO_LOW);
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	41 e0       	ldi	r20, 0x01	; 1
    164a:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	62 e0       	ldi	r22, 0x02	; 2
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,4) +1);  /*if bit is 0 or 1 increment it by 1 cause MDIO driver #MDIO_HIGH is 2 low is 1  */
    1658:	fe 01       	movw	r30, r28
    165a:	ef 59       	subi	r30, 0x9F	; 159
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 81       	ld	r24, Z
    1660:	82 95       	swap	r24
    1662:	8f 70       	andi	r24, 0x0F	; 15
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	98 2f       	mov	r25, r24
    1668:	9f 5f       	subi	r25, 0xFF	; 255
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	49 2f       	mov	r20, r25
    1670:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,5) +1);	/* we can change the macro in MDIO_driver but we don't need to define macro with 0 */
    1674:	fe 01       	movw	r30, r28
    1676:	ef 59       	subi	r30, 0x9F	; 159
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 81       	ld	r24, Z
    167c:	82 95       	swap	r24
    167e:	86 95       	lsr	r24
    1680:	87 70       	andi	r24, 0x07	; 7
    1682:	81 70       	andi	r24, 0x01	; 1
    1684:	98 2f       	mov	r25, r24
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	65 e0       	ldi	r22, 0x05	; 5
    168c:	49 2f       	mov	r20, r25
    168e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,6) +1);
    1692:	fe 01       	movw	r30, r28
    1694:	ef 59       	subi	r30, 0x9F	; 159
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 81       	ld	r24, Z
    169a:	82 95       	swap	r24
    169c:	86 95       	lsr	r24
    169e:	86 95       	lsr	r24
    16a0:	83 70       	andi	r24, 0x03	; 3
    16a2:	81 70       	andi	r24, 0x01	; 1
    16a4:	98 2f       	mov	r25, r24
    16a6:	9f 5f       	subi	r25, 0xFF	; 255
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	66 e0       	ldi	r22, 0x06	; 6
    16ac:	49 2f       	mov	r20, r25
    16ae:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,7) +1);
    16b2:	fe 01       	movw	r30, r28
    16b4:	ef 59       	subi	r30, 0x9F	; 159
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	88 1f       	adc	r24, r24
    16bc:	88 27       	eor	r24, r24
    16be:	88 1f       	adc	r24, r24
    16c0:	98 2f       	mov	r25, r24
    16c2:	9f 5f       	subi	r25, 0xFF	; 255
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	67 e0       	ldi	r22, 0x07	; 7
    16c8:	49 2f       	mov	r20, r25
    16ca:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	42 e0       	ldi	r20, 0x02	; 2
    16d4:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    16d8:	fe 01       	movw	r30, r28
    16da:	e3 5a       	subi	r30, 0xA3	; 163
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e2       	ldi	r26, 0x20	; 32
    16e4:	b1 e4       	ldi	r27, 0x41	; 65
    16e6:	80 83       	st	Z, r24
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	a2 83       	std	Z+2, r26	; 0x02
    16ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ee:	8e 01       	movw	r16, r28
    16f0:	07 5a       	subi	r16, 0xA7	; 167
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e3 5a       	subi	r30, 0xA3	; 163
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	2b ea       	ldi	r18, 0xAB	; 171
    1704:	3a ea       	ldi	r19, 0xAA	; 170
    1706:	4a e2       	ldi	r20, 0x2A	; 42
    1708:	50 e4       	ldi	r21, 0x40	; 64
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	f8 01       	movw	r30, r16
    1714:	80 83       	st	Z, r24
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	a2 83       	std	Z+2, r26	; 0x02
    171a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    171c:	fe 01       	movw	r30, r28
    171e:	e7 5a       	subi	r30, 0xA7	; 167
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e8       	ldi	r20, 0x80	; 128
    1730:	5f e3       	ldi	r21, 0x3F	; 63
    1732:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1736:	88 23       	and	r24, r24
    1738:	34 f4       	brge	.+12     	; 0x1746 <HLCD_voidSendCmd+0x12e>
		__ticks = 1;
    173a:	fe 01       	movw	r30, r28
    173c:	e8 5a       	subi	r30, 0xA8	; 168
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 83       	st	Z, r24
    1744:	e0 c0       	rjmp	.+448    	; 0x1906 <HLCD_voidSendCmd+0x2ee>
	else if (__tmp > 255)
    1746:	fe 01       	movw	r30, r28
    1748:	e7 5a       	subi	r30, 0xA7	; 167
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	60 81       	ld	r22, Z
    174e:	71 81       	ldd	r23, Z+1	; 0x01
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	93 81       	ldd	r25, Z+3	; 0x03
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	0c f0       	brlt	.+2      	; 0x1766 <HLCD_voidSendCmd+0x14e>
    1764:	c0 c0       	rjmp	.+384    	; 0x18e6 <HLCD_voidSendCmd+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1766:	fe 01       	movw	r30, r28
    1768:	e3 5a       	subi	r30, 0xA3	; 163
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a e7       	ldi	r20, 0x7A	; 122
    177a:	54 e4       	ldi	r21, 0x44	; 68
    177c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	fe 01       	movw	r30, r28
    1786:	ec 5a       	subi	r30, 0xAC	; 172
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 83       	st	Z, r24
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	a2 83       	std	Z+2, r26	; 0x02
    1790:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	8e 01       	movw	r16, r28
    1794:	00 5b       	subi	r16, 0xB0	; 176
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	fe 01       	movw	r30, r28
    179a:	ec 5a       	subi	r30, 0xAC	; 172
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	60 81       	ld	r22, Z
    17a0:	71 81       	ldd	r23, Z+1	; 0x01
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a ef       	ldi	r20, 0xFA	; 250
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	f8 01       	movw	r30, r16
    17b8:	80 83       	st	Z, r24
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	a2 83       	std	Z+2, r26	; 0x02
    17be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17c0:	fe 01       	movw	r30, r28
    17c2:	e0 5b       	subi	r30, 0xB0	; 176
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17da:	88 23       	and	r24, r24
    17dc:	44 f4       	brge	.+16     	; 0x17ee <HLCD_voidSendCmd+0x1d6>
		__ticks = 1;
    17de:	fe 01       	movw	r30, r28
    17e0:	e2 5b       	subi	r30, 0xB2	; 178
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
    17ec:	64 c0       	rjmp	.+200    	; 0x18b6 <HLCD_voidSendCmd+0x29e>
	else if (__tmp > 65535)
    17ee:	fe 01       	movw	r30, r28
    17f0:	e0 5b       	subi	r30, 0xB0	; 176
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	60 81       	ld	r22, Z
    17f6:	71 81       	ldd	r23, Z+1	; 0x01
    17f8:	82 81       	ldd	r24, Z+2	; 0x02
    17fa:	93 81       	ldd	r25, Z+3	; 0x03
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	0c f0       	brlt	.+2      	; 0x180e <HLCD_voidSendCmd+0x1f6>
    180c:	43 c0       	rjmp	.+134    	; 0x1894 <HLCD_voidSendCmd+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180e:	fe 01       	movw	r30, r28
    1810:	ec 5a       	subi	r30, 0xAC	; 172
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e2       	ldi	r20, 0x20	; 32
    1822:	51 e4       	ldi	r21, 0x41	; 65
    1824:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8e 01       	movw	r16, r28
    182e:	02 5b       	subi	r16, 0xB2	; 178
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	f8 01       	movw	r30, r16
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
    1844:	1f c0       	rjmp	.+62     	; 0x1884 <HLCD_voidSendCmd+0x26c>
    1846:	fe 01       	movw	r30, r28
    1848:	e4 5b       	subi	r30, 0xB4	; 180
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	fe 01       	movw	r30, r28
    1856:	e4 5b       	subi	r30, 0xB4	; 180
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <HLCD_voidSendCmd+0x246>
    1862:	fe 01       	movw	r30, r28
    1864:	e4 5b       	subi	r30, 0xB4	; 180
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	de 01       	movw	r26, r28
    186e:	a2 5b       	subi	r26, 0xB2	; 178
    1870:	bf 4f       	sbci	r27, 0xFF	; 255
    1872:	fe 01       	movw	r30, r28
    1874:	e2 5b       	subi	r30, 0xB2	; 178
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 81       	ld	r24, Z
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	11 96       	adiw	r26, 0x01	; 1
    1880:	9c 93       	st	X, r25
    1882:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1884:	fe 01       	movw	r30, r28
    1886:	e2 5b       	subi	r30, 0xB2	; 178
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	d1 f6       	brne	.-76     	; 0x1846 <HLCD_voidSendCmd+0x22e>
    1892:	4b c0       	rjmp	.+150    	; 0x192a <HLCD_voidSendCmd+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	8e 01       	movw	r16, r28
    1896:	02 5b       	subi	r16, 0xB2	; 178
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	fe 01       	movw	r30, r28
    189c:	e0 5b       	subi	r30, 0xB0	; 176
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	f8 01       	movw	r30, r16
    18b2:	91 83       	std	Z+1, r25	; 0x01
    18b4:	80 83       	st	Z, r24
    18b6:	de 01       	movw	r26, r28
    18b8:	a6 5b       	subi	r26, 0xB6	; 182
    18ba:	bf 4f       	sbci	r27, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e2 5b       	subi	r30, 0xB2	; 178
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	11 96       	adiw	r26, 0x01	; 1
    18c8:	9c 93       	st	X, r25
    18ca:	8e 93       	st	-X, r24
    18cc:	fe 01       	movw	r30, r28
    18ce:	e6 5b       	subi	r30, 0xB6	; 182
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <HLCD_voidSendCmd+0x2be>
    18da:	fe 01       	movw	r30, r28
    18dc:	e6 5b       	subi	r30, 0xB6	; 182
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    18e4:	22 c0       	rjmp	.+68     	; 0x192a <HLCD_voidSendCmd+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18e6:	8e 01       	movw	r16, r28
    18e8:	08 5a       	subi	r16, 0xA8	; 168
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5a       	subi	r30, 0xA7	; 167
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	80 83       	st	Z, r24
    1906:	de 01       	movw	r26, r28
    1908:	a7 5b       	subi	r26, 0xB7	; 183
    190a:	bf 4f       	sbci	r27, 0xFF	; 255
    190c:	fe 01       	movw	r30, r28
    190e:	e8 5a       	subi	r30, 0xA8	; 168
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1916:	fe 01       	movw	r30, r28
    1918:	e7 5b       	subi	r30, 0xB7	; 183
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	8a 95       	dec	r24
    1920:	f1 f7       	brne	.-4      	; 0x191e <HLCD_voidSendCmd+0x306>
    1922:	fe 01       	movw	r30, r28
    1924:	e7 5b       	subi	r30, 0xB7	; 183
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    1934:	fe 01       	movw	r30, r28
    1936:	eb 5b       	subi	r30, 0xBB	; 187
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a8 ec       	ldi	r26, 0xC8	; 200
    1940:	b2 e4       	ldi	r27, 0x42	; 66
    1942:	80 83       	st	Z, r24
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	a2 83       	std	Z+2, r26	; 0x02
    1948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    194a:	8e 01       	movw	r16, r28
    194c:	0f 5b       	subi	r16, 0xBF	; 191
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	eb 5b       	subi	r30, 0xBB	; 187
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	2b ea       	ldi	r18, 0xAB	; 171
    1960:	3a ea       	ldi	r19, 0xAA	; 170
    1962:	4a e2       	ldi	r20, 0x2A	; 42
    1964:	50 e4       	ldi	r21, 0x40	; 64
    1966:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	f8 01       	movw	r30, r16
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1978:	fe 01       	movw	r30, r28
    197a:	ef 5b       	subi	r30, 0xBF	; 191
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	60 81       	ld	r22, Z
    1980:	71 81       	ldd	r23, Z+1	; 0x01
    1982:	82 81       	ldd	r24, Z+2	; 0x02
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	34 f4       	brge	.+12     	; 0x19a2 <HLCD_voidSendCmd+0x38a>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	fe 01       	movw	r30, r28
    199a:	e0 5c       	subi	r30, 0xC0	; 192
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 83       	st	Z, r24
    19a0:	9d c0       	rjmp	.+314    	; 0x1adc <HLCD_voidSendCmd+0x4c4>
	else if (__tmp > 255)
    19a2:	fe 01       	movw	r30, r28
    19a4:	ef 5b       	subi	r30, 0xBF	; 191
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	53 e4       	ldi	r21, 0x43	; 67
    19b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <HLCD_voidSendCmd+0x3aa>
    19c0:	7e c0       	rjmp	.+252    	; 0x1abe <HLCD_voidSendCmd+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    19c2:	fe 01       	movw	r30, r28
    19c4:	eb 5b       	subi	r30, 0xBB	; 187
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a e7       	ldi	r20, 0x7A	; 122
    19d6:	54 e4       	ldi	r21, 0x44	; 68
    19d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8c af       	std	Y+60, r24	; 0x3c
    19e2:	9d af       	std	Y+61, r25	; 0x3d
    19e4:	ae af       	std	Y+62, r26	; 0x3e
    19e6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    19ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    19ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    19ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	88 af       	std	Y+56, r24	; 0x38
    1a02:	99 af       	std	Y+57, r25	; 0x39
    1a04:	aa af       	std	Y+58, r26	; 0x3a
    1a06:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1a08:	68 ad       	ldd	r22, Y+56	; 0x38
    1a0a:	79 ad       	ldd	r23, Y+57	; 0x39
    1a0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <HLCD_voidSendCmd+0x412>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9f ab       	std	Y+55, r25	; 0x37
    1a26:	8e ab       	std	Y+54, r24	; 0x36
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <HLCD_voidSendCmd+0x490>
	else if (__tmp > 65535)
    1a2a:	68 ad       	ldd	r22, Y+56	; 0x38
    1a2c:	79 ad       	ldd	r23, Y+57	; 0x39
    1a2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a30:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <HLCD_voidSendCmd+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a44:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a46:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9f ab       	std	Y+55, r25	; 0x37
    1a68:	8e ab       	std	Y+54, r24	; 0x36
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <HLCD_voidSendCmd+0x472>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9d ab       	std	Y+53, r25	; 0x35
    1a72:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a74:	8c a9       	ldd	r24, Y+52	; 0x34
    1a76:	9d a9       	ldd	r25, Y+53	; 0x35
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <HLCD_voidSendCmd+0x460>
    1a7c:	9d ab       	std	Y+53, r25	; 0x35
    1a7e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8e a9       	ldd	r24, Y+54	; 0x36
    1a82:	9f a9       	ldd	r25, Y+55	; 0x37
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9f ab       	std	Y+55, r25	; 0x37
    1a88:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8e a9       	ldd	r24, Y+54	; 0x36
    1a8c:	9f a9       	ldd	r25, Y+55	; 0x37
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <HLCD_voidSendCmd+0x454>
    1a92:	2d c0       	rjmp	.+90     	; 0x1aee <HLCD_voidSendCmd+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	68 ad       	ldd	r22, Y+56	; 0x38
    1a96:	79 ad       	ldd	r23, Y+57	; 0x39
    1a98:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a9a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9f ab       	std	Y+55, r25	; 0x37
    1aa6:	8e ab       	std	Y+54, r24	; 0x36
    1aa8:	8e a9       	ldd	r24, Y+54	; 0x36
    1aaa:	9f a9       	ldd	r25, Y+55	; 0x37
    1aac:	9b ab       	std	Y+51, r25	; 0x33
    1aae:	8a ab       	std	Y+50, r24	; 0x32
    1ab0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ab2:	9b a9       	ldd	r25, Y+51	; 0x33
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <HLCD_voidSendCmd+0x49c>
    1ab8:	9b ab       	std	Y+51, r25	; 0x33
    1aba:	8a ab       	std	Y+50, r24	; 0x32
    1abc:	18 c0       	rjmp	.+48     	; 0x1aee <HLCD_voidSendCmd+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ef 5b       	subi	r30, 0xBF	; 191
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	e0 5c       	subi	r30, 0xC0	; 192
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 83       	st	Z, r24
    1adc:	fe 01       	movw	r30, r28
    1ade:	e0 5c       	subi	r30, 0xC0	; 192
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 81       	ld	r24, Z
    1ae4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae6:	89 a9       	ldd	r24, Y+49	; 0x31
    1ae8:	8a 95       	dec	r24
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <HLCD_voidSendCmd+0x4d0>
    1aec:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_u8Cmd,0)+1 );
    1aee:	fe 01       	movw	r30, r28
    1af0:	ef 59       	subi	r30, 0x9F	; 159
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	98 2f       	mov	r25, r24
    1afa:	9f 5f       	subi	r25, 0xFF	; 255
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	64 e0       	ldi	r22, 0x04	; 4
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_u8Cmd,1)+1 );
    1b06:	fe 01       	movw	r30, r28
    1b08:	ef 59       	subi	r30, 0x9F	; 159
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	86 95       	lsr	r24
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	98 2f       	mov	r25, r24
    1b14:	9f 5f       	subi	r25, 0xFF	; 255
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	65 e0       	ldi	r22, 0x05	; 5
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_u8Cmd,2)+1 );
    1b20:	fe 01       	movw	r30, r28
    1b22:	ef 59       	subi	r30, 0x9F	; 159
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	86 95       	lsr	r24
    1b2a:	86 95       	lsr	r24
    1b2c:	81 70       	andi	r24, 0x01	; 1
    1b2e:	98 2f       	mov	r25, r24
    1b30:	9f 5f       	subi	r25, 0xFF	; 255
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	66 e0       	ldi	r22, 0x06	; 6
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_u8Cmd,3)+1 );
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ef 59       	subi	r30, 0x9F	; 159
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	86 95       	lsr	r24
    1b46:	86 95       	lsr	r24
    1b48:	86 95       	lsr	r24
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	9f 5f       	subi	r25, 0xFF	; 255
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	67 e0       	ldi	r22, 0x07	; 7
    1b54:	49 2f       	mov	r20, r25
    1b56:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	62 e0       	ldi	r22, 0x02	; 2
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e2       	ldi	r26, 0x20	; 32
    1b6a:	b1 e4       	ldi	r27, 0x41	; 65
    1b6c:	8d a7       	std	Y+45, r24	; 0x2d
    1b6e:	9e a7       	std	Y+46, r25	; 0x2e
    1b70:	af a7       	std	Y+47, r26	; 0x2f
    1b72:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b74:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b76:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b7c:	2b ea       	ldi	r18, 0xAB	; 171
    1b7e:	3a ea       	ldi	r19, 0xAA	; 170
    1b80:	4a e2       	ldi	r20, 0x2A	; 42
    1b82:	50 e4       	ldi	r21, 0x40	; 64
    1b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	89 a7       	std	Y+41, r24	; 0x29
    1b8e:	9a a7       	std	Y+42, r25	; 0x2a
    1b90:	ab a7       	std	Y+43, r26	; 0x2b
    1b92:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b94:	69 a5       	ldd	r22, Y+41	; 0x29
    1b96:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b98:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	1c f4       	brge	.+6      	; 0x1bb2 <HLCD_voidSendCmd+0x59a>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	88 a7       	std	Y+40, r24	; 0x28
    1bb0:	91 c0       	rjmp	.+290    	; 0x1cd4 <HLCD_voidSendCmd+0x6bc>
	else if (__tmp > 255)
    1bb2:	69 a5       	ldd	r22, Y+41	; 0x29
    1bb4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	53 e4       	ldi	r21, 0x43	; 67
    1bc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	0c f0       	brlt	.+2      	; 0x1bcc <HLCD_voidSendCmd+0x5b4>
    1bca:	7b c0       	rjmp	.+246    	; 0x1cc2 <HLCD_voidSendCmd+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    1bcc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bce:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	8c a3       	std	Y+36, r24	; 0x24
    1be6:	9d a3       	std	Y+37, r25	; 0x25
    1be8:	ae a3       	std	Y+38, r26	; 0x26
    1bea:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	6c a1       	ldd	r22, Y+36	; 0x24
    1bee:	7d a1       	ldd	r23, Y+37	; 0x25
    1bf0:	8e a1       	ldd	r24, Y+38	; 0x26
    1bf2:	9f a1       	ldd	r25, Y+39	; 0x27
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a ef       	ldi	r20, 0xFA	; 250
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	88 a3       	std	Y+32, r24	; 0x20
    1c06:	99 a3       	std	Y+33, r25	; 0x21
    1c08:	aa a3       	std	Y+34, r26	; 0x22
    1c0a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c0c:	68 a1       	ldd	r22, Y+32	; 0x20
    1c0e:	79 a1       	ldd	r23, Y+33	; 0x21
    1c10:	8a a1       	ldd	r24, Y+34	; 0x22
    1c12:	9b a1       	ldd	r25, Y+35	; 0x23
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <HLCD_voidSendCmd+0x616>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9f 8f       	std	Y+31, r25	; 0x1f
    1c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <HLCD_voidSendCmd+0x694>
	else if (__tmp > 65535)
    1c2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1c30:	79 a1       	ldd	r23, Y+33	; 0x21
    1c32:	8a a1       	ldd	r24, Y+34	; 0x22
    1c34:	9b a1       	ldd	r25, Y+35	; 0x23
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <HLCD_voidSendCmd+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	6c a1       	ldd	r22, Y+36	; 0x24
    1c48:	7d a1       	ldd	r23, Y+37	; 0x25
    1c4a:	8e a1       	ldd	r24, Y+38	; 0x26
    1c4c:	9f a1       	ldd	r25, Y+39	; 0x27
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c6c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <HLCD_voidSendCmd+0x676>
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9d 8f       	std	Y+29, r25	; 0x1d
    1c76:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <HLCD_voidSendCmd+0x664>
    1c80:	9d 8f       	std	Y+29, r25	; 0x1d
    1c82:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c86:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c8c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <HLCD_voidSendCmd+0x658>
    1c96:	24 c0       	rjmp	.+72     	; 0x1ce0 <HLCD_voidSendCmd+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	68 a1       	ldd	r22, Y+32	; 0x20
    1c9a:	79 a1       	ldd	r23, Y+33	; 0x21
    1c9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9f 8f       	std	Y+31, r25	; 0x1f
    1caa:	8e 8f       	std	Y+30, r24	; 0x1e
    1cac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cb0:	9b 8f       	std	Y+27, r25	; 0x1b
    1cb2:	8a 8f       	std	Y+26, r24	; 0x1a
    1cb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cb6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <HLCD_voidSendCmd+0x6a0>
    1cbc:	9b 8f       	std	Y+27, r25	; 0x1b
    1cbe:	8a 8f       	std	Y+26, r24	; 0x1a
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <HLCD_voidSendCmd+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc2:	69 a5       	ldd	r22, Y+41	; 0x29
    1cc4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	88 a7       	std	Y+40, r24	; 0x28
    1cd4:	88 a5       	ldd	r24, Y+40	; 0x28
    1cd6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd8:	89 8d       	ldd	r24, Y+25	; 0x19
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <HLCD_voidSendCmd+0x6c2>
    1cde:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a8 ec       	ldi	r26, 0xC8	; 200
    1cf0:	b2 e4       	ldi	r27, 0x42	; 66
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	2b ea       	ldi	r18, 0xAB	; 171
    1d04:	3a ea       	ldi	r19, 0xAA	; 170
    1d06:	4a e2       	ldi	r20, 0x2A	; 42
    1d08:	50 e4       	ldi	r21, 0x40	; 64
    1d0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	89 8b       	std	Y+17, r24	; 0x11
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	ab 8b       	std	Y+19, r26	; 0x13
    1d18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d1a:	69 89       	ldd	r22, Y+17	; 0x11
    1d1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	1c f4       	brge	.+6      	; 0x1d38 <HLCD_voidSendCmd+0x720>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	88 8b       	std	Y+16, r24	; 0x10
    1d36:	91 c0       	rjmp	.+290    	; 0x1e5a <HLCD_voidSendCmd+0x842>
	else if (__tmp > 255)
    1d38:	69 89       	ldd	r22, Y+17	; 0x11
    1d3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	53 e4       	ldi	r21, 0x43	; 67
    1d48:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <HLCD_voidSendCmd+0x73a>
    1d50:	7b c0       	rjmp	.+246    	; 0x1e48 <HLCD_voidSendCmd+0x830>
	{
		_delay_ms(__us / 1000.0);
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8c 87       	std	Y+12, r24	; 0x0c
    1d6c:	9d 87       	std	Y+13, r25	; 0x0d
    1d6e:	ae 87       	std	Y+14, r26	; 0x0e
    1d70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	88 87       	std	Y+8, r24	; 0x08
    1d8c:	99 87       	std	Y+9, r25	; 0x09
    1d8e:	aa 87       	std	Y+10, r26	; 0x0a
    1d90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d92:	68 85       	ldd	r22, Y+8	; 0x08
    1d94:	79 85       	ldd	r23, Y+9	; 0x09
    1d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <HLCD_voidSendCmd+0x79c>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9f 83       	std	Y+7, r25	; 0x07
    1db0:	8e 83       	std	Y+6, r24	; 0x06
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <HLCD_voidSendCmd+0x81a>
	else if (__tmp > 65535)
    1db4:	68 85       	ldd	r22, Y+8	; 0x08
    1db6:	79 85       	ldd	r23, Y+9	; 0x09
    1db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <HLCD_voidSendCmd+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	8e 83       	std	Y+6, r24	; 0x06
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <HLCD_voidSendCmd+0x7fc>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9d 83       	std	Y+5, r25	; 0x05
    1dfc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <HLCD_voidSendCmd+0x7ea>
    1e06:	9d 83       	std	Y+5, r25	; 0x05
    1e08:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9f 83       	std	Y+7, r25	; 0x07
    1e12:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <HLCD_voidSendCmd+0x7de>
    1e1c:	24 c0       	rjmp	.+72     	; 0x1e66 <HLCD_voidSendCmd+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	68 85       	ldd	r22, Y+8	; 0x08
    1e20:	79 85       	ldd	r23, Y+9	; 0x09
    1e22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9f 83       	std	Y+7, r25	; 0x07
    1e30:	8e 83       	std	Y+6, r24	; 0x06
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <HLCD_voidSendCmd+0x826>
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <HLCD_voidSendCmd+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e48:	69 89       	ldd	r22, Y+17	; 0x11
    1e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	88 8b       	std	Y+16, r24	; 0x10
    1e5a:	88 89       	ldd	r24, Y+16	; 0x10
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8a 95       	dec	r24
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <HLCD_voidSendCmd+0x848>
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif
}
    1e66:	cf 59       	subi	r28, 0x9F	; 159
    1e68:	df 4f       	sbci	r29, 0xFF	; 255
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	08 95       	ret

00001e7e <HLCD_voidSendChar>:

void HLCD_voidSendChar(char ARG_charChar){
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	c1 56       	subi	r28, 0x61	; 97
    1e8c:	d0 40       	sbci	r29, 0x00	; 0
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ef 59       	subi	r30, 0x9F	; 159
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 83       	st	Z, r24
	HLCD_RS(MDIO_HIGH);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	42 e0       	ldi	r20, 0x02	; 2
    1ea6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_RW(MDIO_LOW);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	61 e0       	ldi	r22, 0x01	; 1
    1eae:	41 e0       	ldi	r20, 0x01	; 1
    1eb0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_EN(MDIO_LOW);
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	62 e0       	ldi	r22, 0x02	; 2
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	
	/* 4 - bit mode */
	#elif HLCD_MODE == HLCD_4BIT_MODE

	/* send 4-MS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,4)+1 );
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ef 59       	subi	r30, 0x9F	; 159
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	82 95       	swap	r24
    1ec8:	8f 70       	andi	r24, 0x0F	; 15
    1eca:	81 70       	andi	r24, 0x01	; 1
    1ecc:	98 2f       	mov	r25, r24
    1ece:	9f 5f       	subi	r25, 0xFF	; 255
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	64 e0       	ldi	r22, 0x04	; 4
    1ed4:	49 2f       	mov	r20, r25
    1ed6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,5)+1 );
    1eda:	fe 01       	movw	r30, r28
    1edc:	ef 59       	subi	r30, 0x9F	; 159
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	82 95       	swap	r24
    1ee4:	86 95       	lsr	r24
    1ee6:	87 70       	andi	r24, 0x07	; 7
    1ee8:	81 70       	andi	r24, 0x01	; 1
    1eea:	98 2f       	mov	r25, r24
    1eec:	9f 5f       	subi	r25, 0xFF	; 255
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	49 2f       	mov	r20, r25
    1ef4:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,6)+1 );
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ef 59       	subi	r30, 0x9F	; 159
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	82 95       	swap	r24
    1f02:	86 95       	lsr	r24
    1f04:	86 95       	lsr	r24
    1f06:	83 70       	andi	r24, 0x03	; 3
    1f08:	81 70       	andi	r24, 0x01	; 1
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	66 e0       	ldi	r22, 0x06	; 6
    1f12:	49 2f       	mov	r20, r25
    1f14:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,7)+1 );
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ef 59       	subi	r30, 0x9F	; 159
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 1f       	adc	r24, r24
    1f22:	88 27       	eor	r24, r24
    1f24:	88 1f       	adc	r24, r24
    1f26:	98 2f       	mov	r25, r24
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	67 e0       	ldi	r22, 0x07	; 7
    1f2e:	49 2f       	mov	r20, r25
    1f30:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	62 e0       	ldi	r22, 0x02	; 2
    1f38:	42 e0       	ldi	r20, 0x02	; 2
    1f3a:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e3 5a       	subi	r30, 0xA3	; 163
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e2       	ldi	r26, 0x20	; 32
    1f4a:	b1 e4       	ldi	r27, 0x41	; 65
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f54:	8e 01       	movw	r16, r28
    1f56:	07 5a       	subi	r16, 0xA7	; 167
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e3 5a       	subi	r30, 0xA3	; 163
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	2b ea       	ldi	r18, 0xAB	; 171
    1f6a:	3a ea       	ldi	r19, 0xAA	; 170
    1f6c:	4a e2       	ldi	r20, 0x2A	; 42
    1f6e:	50 e4       	ldi	r21, 0x40	; 64
    1f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	a2 83       	std	Z+2, r26	; 0x02
    1f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e7 5a       	subi	r30, 0xA7	; 167
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	34 f4       	brge	.+12     	; 0x1fac <HLCD_voidSendChar+0x12e>
		__ticks = 1;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e8 5a       	subi	r30, 0xA8	; 168
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	80 83       	st	Z, r24
    1faa:	e0 c0       	rjmp	.+448    	; 0x216c <HLCD_voidSendChar+0x2ee>
	else if (__tmp > 255)
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 5a       	subi	r30, 0xA7	; 167
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 81       	ld	r22, Z
    1fb4:	71 81       	ldd	r23, Z+1	; 0x01
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	53 e4       	ldi	r21, 0x43	; 67
    1fc2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	0c f0       	brlt	.+2      	; 0x1fcc <HLCD_voidSendChar+0x14e>
    1fca:	c0 c0       	rjmp	.+384    	; 0x214c <HLCD_voidSendChar+0x2ce>
	{
		_delay_ms(__us / 1000.0);
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e3 5a       	subi	r30, 0xA3	; 163
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	60 81       	ld	r22, Z
    1fd4:	71 81       	ldd	r23, Z+1	; 0x01
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	93 81       	ldd	r25, Z+3	; 0x03
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	fe 01       	movw	r30, r28
    1fec:	ec 5a       	subi	r30, 0xAC	; 172
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 83       	st	Z, r24
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	a2 83       	std	Z+2, r26	; 0x02
    1ff6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff8:	8e 01       	movw	r16, r28
    1ffa:	00 5b       	subi	r16, 0xB0	; 176
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	fe 01       	movw	r30, r28
    2000:	ec 5a       	subi	r30, 0xAC	; 172
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	4a ef       	ldi	r20, 0xFA	; 250
    2012:	54 e4       	ldi	r21, 0x44	; 68
    2014:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	f8 01       	movw	r30, r16
    201e:	80 83       	st	Z, r24
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	a2 83       	std	Z+2, r26	; 0x02
    2024:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2026:	fe 01       	movw	r30, r28
    2028:	e0 5b       	subi	r30, 0xB0	; 176
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	44 f4       	brge	.+16     	; 0x2054 <HLCD_voidSendChar+0x1d6>
		__ticks = 1;
    2044:	fe 01       	movw	r30, r28
    2046:	e2 5b       	subi	r30, 0xB2	; 178
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
    2052:	64 c0       	rjmp	.+200    	; 0x211c <HLCD_voidSendChar+0x29e>
	else if (__tmp > 65535)
    2054:	fe 01       	movw	r30, r28
    2056:	e0 5b       	subi	r30, 0xB0	; 176
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	0c f0       	brlt	.+2      	; 0x2074 <HLCD_voidSendChar+0x1f6>
    2072:	43 c0       	rjmp	.+134    	; 0x20fa <HLCD_voidSendChar+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	fe 01       	movw	r30, r28
    2076:	ec 5a       	subi	r30, 0xAC	; 172
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8e 01       	movw	r16, r28
    2094:	02 5b       	subi	r16, 0xB2	; 178
    2096:	1f 4f       	sbci	r17, 0xFF	; 255
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	1f c0       	rjmp	.+62     	; 0x20ea <HLCD_voidSendChar+0x26c>
    20ac:	fe 01       	movw	r30, r28
    20ae:	e4 5b       	subi	r30, 0xB4	; 180
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	88 ec       	ldi	r24, 0xC8	; 200
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	91 83       	std	Z+1, r25	; 0x01
    20b8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ba:	fe 01       	movw	r30, r28
    20bc:	e4 5b       	subi	r30, 0xB4	; 180
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <HLCD_voidSendChar+0x246>
    20c8:	fe 01       	movw	r30, r28
    20ca:	e4 5b       	subi	r30, 0xB4	; 180
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	91 83       	std	Z+1, r25	; 0x01
    20d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	de 01       	movw	r26, r28
    20d4:	a2 5b       	subi	r26, 0xB2	; 178
    20d6:	bf 4f       	sbci	r27, 0xFF	; 255
    20d8:	fe 01       	movw	r30, r28
    20da:	e2 5b       	subi	r30, 0xB2	; 178
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	9c 93       	st	X, r25
    20e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	fe 01       	movw	r30, r28
    20ec:	e2 5b       	subi	r30, 0xB2	; 178
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	d1 f6       	brne	.-76     	; 0x20ac <HLCD_voidSendChar+0x22e>
    20f8:	4b c0       	rjmp	.+150    	; 0x2190 <HLCD_voidSendChar+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fa:	8e 01       	movw	r16, r28
    20fc:	02 5b       	subi	r16, 0xB2	; 178
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	fe 01       	movw	r30, r28
    2102:	e0 5b       	subi	r30, 0xB0	; 176
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	f8 01       	movw	r30, r16
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
    211c:	de 01       	movw	r26, r28
    211e:	a6 5b       	subi	r26, 0xB6	; 182
    2120:	bf 4f       	sbci	r27, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	e2 5b       	subi	r30, 0xB2	; 178
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	9c 93       	st	X, r25
    2130:	8e 93       	st	-X, r24
    2132:	fe 01       	movw	r30, r28
    2134:	e6 5b       	subi	r30, 0xB6	; 182
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <HLCD_voidSendChar+0x2be>
    2140:	fe 01       	movw	r30, r28
    2142:	e6 5b       	subi	r30, 0xB6	; 182
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
    214a:	22 c0       	rjmp	.+68     	; 0x2190 <HLCD_voidSendChar+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    214c:	8e 01       	movw	r16, r28
    214e:	08 5a       	subi	r16, 0xA8	; 168
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e7 5a       	subi	r30, 0xA7	; 167
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	f8 01       	movw	r30, r16
    216a:	80 83       	st	Z, r24
    216c:	de 01       	movw	r26, r28
    216e:	a7 5b       	subi	r26, 0xB7	; 183
    2170:	bf 4f       	sbci	r27, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e8 5a       	subi	r30, 0xA8	; 168
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 81       	ld	r24, Z
    217a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    217c:	fe 01       	movw	r30, r28
    217e:	e7 5b       	subi	r30, 0xB7	; 183
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	8a 95       	dec	r24
    2186:	f1 f7       	brne	.-4      	; 0x2184 <HLCD_voidSendChar+0x306>
    2188:	fe 01       	movw	r30, r28
    218a:	e7 5b       	subi	r30, 0xB7	; 183
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 83       	st	Z, r24
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	62 e0       	ldi	r22, 0x02	; 2
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    219a:	fe 01       	movw	r30, r28
    219c:	eb 5b       	subi	r30, 0xBB	; 187
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	a8 ec       	ldi	r26, 0xC8	; 200
    21a6:	b2 e4       	ldi	r27, 0x42	; 66
    21a8:	80 83       	st	Z, r24
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	a2 83       	std	Z+2, r26	; 0x02
    21ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b0:	8e 01       	movw	r16, r28
    21b2:	0f 5b       	subi	r16, 0xBF	; 191
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	fe 01       	movw	r30, r28
    21b8:	eb 5b       	subi	r30, 0xBB	; 187
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	2b ea       	ldi	r18, 0xAB	; 171
    21c6:	3a ea       	ldi	r19, 0xAA	; 170
    21c8:	4a e2       	ldi	r20, 0x2A	; 42
    21ca:	50 e4       	ldi	r21, 0x40	; 64
    21cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 83       	st	Z, r24
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	a2 83       	std	Z+2, r26	; 0x02
    21dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21de:	fe 01       	movw	r30, r28
    21e0:	ef 5b       	subi	r30, 0xBF	; 191
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e8       	ldi	r20, 0x80	; 128
    21f2:	5f e3       	ldi	r21, 0x3F	; 63
    21f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21f8:	88 23       	and	r24, r24
    21fa:	34 f4       	brge	.+12     	; 0x2208 <HLCD_voidSendChar+0x38a>
		__ticks = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	fe 01       	movw	r30, r28
    2200:	e0 5c       	subi	r30, 0xC0	; 192
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 83       	st	Z, r24
    2206:	9d c0       	rjmp	.+314    	; 0x2342 <HLCD_voidSendChar+0x4c4>
	else if (__tmp > 255)
    2208:	fe 01       	movw	r30, r28
    220a:	ef 5b       	subi	r30, 0xBF	; 191
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	93 81       	ldd	r25, Z+3	; 0x03
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	0c f0       	brlt	.+2      	; 0x2228 <HLCD_voidSendChar+0x3aa>
    2226:	7e c0       	rjmp	.+252    	; 0x2324 <HLCD_voidSendChar+0x4a6>
	{
		_delay_ms(__us / 1000.0);
    2228:	fe 01       	movw	r30, r28
    222a:	eb 5b       	subi	r30, 0xBB	; 187
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a e7       	ldi	r20, 0x7A	; 122
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8c af       	std	Y+60, r24	; 0x3c
    2248:	9d af       	std	Y+61, r25	; 0x3d
    224a:	ae af       	std	Y+62, r26	; 0x3e
    224c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2250:	7d ad       	ldd	r23, Y+61	; 0x3d
    2252:	8e ad       	ldd	r24, Y+62	; 0x3e
    2254:	9f ad       	ldd	r25, Y+63	; 0x3f
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	88 af       	std	Y+56, r24	; 0x38
    2268:	99 af       	std	Y+57, r25	; 0x39
    226a:	aa af       	std	Y+58, r26	; 0x3a
    226c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    226e:	68 ad       	ldd	r22, Y+56	; 0x38
    2270:	79 ad       	ldd	r23, Y+57	; 0x39
    2272:	8a ad       	ldd	r24, Y+58	; 0x3a
    2274:	9b ad       	ldd	r25, Y+59	; 0x3b
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <HLCD_voidSendChar+0x412>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9f ab       	std	Y+55, r25	; 0x37
    228c:	8e ab       	std	Y+54, r24	; 0x36
    228e:	3f c0       	rjmp	.+126    	; 0x230e <HLCD_voidSendChar+0x490>
	else if (__tmp > 65535)
    2290:	68 ad       	ldd	r22, Y+56	; 0x38
    2292:	79 ad       	ldd	r23, Y+57	; 0x39
    2294:	8a ad       	ldd	r24, Y+58	; 0x3a
    2296:	9b ad       	ldd	r25, Y+59	; 0x3b
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <HLCD_voidSendChar+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6c ad       	ldd	r22, Y+60	; 0x3c
    22aa:	7d ad       	ldd	r23, Y+61	; 0x3d
    22ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    22ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9f ab       	std	Y+55, r25	; 0x37
    22ce:	8e ab       	std	Y+54, r24	; 0x36
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <HLCD_voidSendChar+0x472>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9d ab       	std	Y+53, r25	; 0x35
    22d8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22da:	8c a9       	ldd	r24, Y+52	; 0x34
    22dc:	9d a9       	ldd	r25, Y+53	; 0x35
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <HLCD_voidSendChar+0x460>
    22e2:	9d ab       	std	Y+53, r25	; 0x35
    22e4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8e a9       	ldd	r24, Y+54	; 0x36
    22e8:	9f a9       	ldd	r25, Y+55	; 0x37
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9f ab       	std	Y+55, r25	; 0x37
    22ee:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8e a9       	ldd	r24, Y+54	; 0x36
    22f2:	9f a9       	ldd	r25, Y+55	; 0x37
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <HLCD_voidSendChar+0x454>
    22f8:	2d c0       	rjmp	.+90     	; 0x2354 <HLCD_voidSendChar+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	68 ad       	ldd	r22, Y+56	; 0x38
    22fc:	79 ad       	ldd	r23, Y+57	; 0x39
    22fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2300:	9b ad       	ldd	r25, Y+59	; 0x3b
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9f ab       	std	Y+55, r25	; 0x37
    230c:	8e ab       	std	Y+54, r24	; 0x36
    230e:	8e a9       	ldd	r24, Y+54	; 0x36
    2310:	9f a9       	ldd	r25, Y+55	; 0x37
    2312:	9b ab       	std	Y+51, r25	; 0x33
    2314:	8a ab       	std	Y+50, r24	; 0x32
    2316:	8a a9       	ldd	r24, Y+50	; 0x32
    2318:	9b a9       	ldd	r25, Y+51	; 0x33
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <HLCD_voidSendChar+0x49c>
    231e:	9b ab       	std	Y+51, r25	; 0x33
    2320:	8a ab       	std	Y+50, r24	; 0x32
    2322:	18 c0       	rjmp	.+48     	; 0x2354 <HLCD_voidSendChar+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2324:	fe 01       	movw	r30, r28
    2326:	ef 5b       	subi	r30, 0xBF	; 191
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	fe 01       	movw	r30, r28
    233c:	e0 5c       	subi	r30, 0xC0	; 192
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 83       	st	Z, r24
    2342:	fe 01       	movw	r30, r28
    2344:	e0 5c       	subi	r30, 0xC0	; 192
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    234c:	89 a9       	ldd	r24, Y+49	; 0x31
    234e:	8a 95       	dec	r24
    2350:	f1 f7       	brne	.-4      	; 0x234e <HLCD_voidSendChar+0x4d0>
    2352:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);

	/* send 4-LS bits  */
	HLCD_D4( GET_BIT(ARG_charChar,0)+1 );
    2354:	fe 01       	movw	r30, r28
    2356:	ef 59       	subi	r30, 0x9F	; 159
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	81 70       	andi	r24, 0x01	; 1
    235e:	98 2f       	mov	r25, r24
    2360:	9f 5f       	subi	r25, 0xFF	; 255
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	64 e0       	ldi	r22, 0x04	; 4
    2366:	49 2f       	mov	r20, r25
    2368:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D5( GET_BIT(ARG_charChar,1)+1 );
    236c:	fe 01       	movw	r30, r28
    236e:	ef 59       	subi	r30, 0x9F	; 159
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	86 95       	lsr	r24
    2376:	81 70       	andi	r24, 0x01	; 1
    2378:	98 2f       	mov	r25, r24
    237a:	9f 5f       	subi	r25, 0xFF	; 255
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	65 e0       	ldi	r22, 0x05	; 5
    2380:	49 2f       	mov	r20, r25
    2382:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D6( GET_BIT(ARG_charChar,2)+1 );
    2386:	fe 01       	movw	r30, r28
    2388:	ef 59       	subi	r30, 0x9F	; 159
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	86 95       	lsr	r24
    2390:	86 95       	lsr	r24
    2392:	81 70       	andi	r24, 0x01	; 1
    2394:	98 2f       	mov	r25, r24
    2396:	9f 5f       	subi	r25, 0xFF	; 255
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	49 2f       	mov	r20, r25
    239e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
	HLCD_D7( GET_BIT(ARG_charChar,3)+1 );
    23a2:	fe 01       	movw	r30, r28
    23a4:	ef 59       	subi	r30, 0x9F	; 159
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	86 95       	lsr	r24
    23ac:	86 95       	lsr	r24
    23ae:	86 95       	lsr	r24
    23b0:	81 70       	andi	r24, 0x01	; 1
    23b2:	98 2f       	mov	r25, r24
    23b4:	9f 5f       	subi	r25, 0xFF	; 255
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	67 e0       	ldi	r22, 0x07	; 7
    23ba:	49 2f       	mov	r20, r25
    23bc:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>

	HLCD_EN(MDIO_HIGH);
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	42 e0       	ldi	r20, 0x02	; 2
    23c6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e2       	ldi	r26, 0x20	; 32
    23d0:	b1 e4       	ldi	r27, 0x41	; 65
    23d2:	8d a7       	std	Y+45, r24	; 0x2d
    23d4:	9e a7       	std	Y+46, r25	; 0x2e
    23d6:	af a7       	std	Y+47, r26	; 0x2f
    23d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23da:	6d a5       	ldd	r22, Y+45	; 0x2d
    23dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    23de:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e0:	98 a9       	ldd	r25, Y+48	; 0x30
    23e2:	2b ea       	ldi	r18, 0xAB	; 171
    23e4:	3a ea       	ldi	r19, 0xAA	; 170
    23e6:	4a e2       	ldi	r20, 0x2A	; 42
    23e8:	50 e4       	ldi	r21, 0x40	; 64
    23ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	89 a7       	std	Y+41, r24	; 0x29
    23f4:	9a a7       	std	Y+42, r25	; 0x2a
    23f6:	ab a7       	std	Y+43, r26	; 0x2b
    23f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23fa:	69 a5       	ldd	r22, Y+41	; 0x29
    23fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    23fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2400:	9c a5       	ldd	r25, Y+44	; 0x2c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	1c f4       	brge	.+6      	; 0x2418 <HLCD_voidSendChar+0x59a>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	88 a7       	std	Y+40, r24	; 0x28
    2416:	91 c0       	rjmp	.+290    	; 0x253a <HLCD_voidSendChar+0x6bc>
	else if (__tmp > 255)
    2418:	69 a5       	ldd	r22, Y+41	; 0x29
    241a:	7a a5       	ldd	r23, Y+42	; 0x2a
    241c:	8b a5       	ldd	r24, Y+43	; 0x2b
    241e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	53 e4       	ldi	r21, 0x43	; 67
    2428:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	0c f0       	brlt	.+2      	; 0x2432 <HLCD_voidSendChar+0x5b4>
    2430:	7b c0       	rjmp	.+246    	; 0x2528 <HLCD_voidSendChar+0x6aa>
	{
		_delay_ms(__us / 1000.0);
    2432:	6d a5       	ldd	r22, Y+45	; 0x2d
    2434:	7e a5       	ldd	r23, Y+46	; 0x2e
    2436:	8f a5       	ldd	r24, Y+47	; 0x2f
    2438:	98 a9       	ldd	r25, Y+48	; 0x30
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	54 e4       	ldi	r21, 0x44	; 68
    2442:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8c a3       	std	Y+36, r24	; 0x24
    244c:	9d a3       	std	Y+37, r25	; 0x25
    244e:	ae a3       	std	Y+38, r26	; 0x26
    2450:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6c a1       	ldd	r22, Y+36	; 0x24
    2454:	7d a1       	ldd	r23, Y+37	; 0x25
    2456:	8e a1       	ldd	r24, Y+38	; 0x26
    2458:	9f a1       	ldd	r25, Y+39	; 0x27
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a ef       	ldi	r20, 0xFA	; 250
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	88 a3       	std	Y+32, r24	; 0x20
    246c:	99 a3       	std	Y+33, r25	; 0x21
    246e:	aa a3       	std	Y+34, r26	; 0x22
    2470:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2472:	68 a1       	ldd	r22, Y+32	; 0x20
    2474:	79 a1       	ldd	r23, Y+33	; 0x21
    2476:	8a a1       	ldd	r24, Y+34	; 0x22
    2478:	9b a1       	ldd	r25, Y+35	; 0x23
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <HLCD_voidSendChar+0x616>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9f 8f       	std	Y+31, r25	; 0x1f
    2490:	8e 8f       	std	Y+30, r24	; 0x1e
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <HLCD_voidSendChar+0x694>
	else if (__tmp > 65535)
    2494:	68 a1       	ldd	r22, Y+32	; 0x20
    2496:	79 a1       	ldd	r23, Y+33	; 0x21
    2498:	8a a1       	ldd	r24, Y+34	; 0x22
    249a:	9b a1       	ldd	r25, Y+35	; 0x23
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <HLCD_voidSendChar+0x680>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6c a1       	ldd	r22, Y+36	; 0x24
    24ae:	7d a1       	ldd	r23, Y+37	; 0x25
    24b0:	8e a1       	ldd	r24, Y+38	; 0x26
    24b2:	9f a1       	ldd	r25, Y+39	; 0x27
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9f 8f       	std	Y+31, r25	; 0x1f
    24d2:	8e 8f       	std	Y+30, r24	; 0x1e
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <HLCD_voidSendChar+0x676>
    24d6:	88 ec       	ldi	r24, 0xC8	; 200
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	9d 8f       	std	Y+29, r25	; 0x1d
    24dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <HLCD_voidSendChar+0x664>
    24e6:	9d 8f       	std	Y+29, r25	; 0x1d
    24e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9f 8f       	std	Y+31, r25	; 0x1f
    24f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <HLCD_voidSendChar+0x658>
    24fc:	24 c0       	rjmp	.+72     	; 0x2546 <HLCD_voidSendChar+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2500:	79 a1       	ldd	r23, Y+33	; 0x21
    2502:	8a a1       	ldd	r24, Y+34	; 0x22
    2504:	9b a1       	ldd	r25, Y+35	; 0x23
    2506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9f 8f       	std	Y+31, r25	; 0x1f
    2510:	8e 8f       	std	Y+30, r24	; 0x1e
    2512:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2514:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2516:	9b 8f       	std	Y+27, r25	; 0x1b
    2518:	8a 8f       	std	Y+26, r24	; 0x1a
    251a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    251c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <HLCD_voidSendChar+0x6a0>
    2522:	9b 8f       	std	Y+27, r25	; 0x1b
    2524:	8a 8f       	std	Y+26, r24	; 0x1a
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <HLCD_voidSendChar+0x6c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2528:	69 a5       	ldd	r22, Y+41	; 0x29
    252a:	7a a5       	ldd	r23, Y+42	; 0x2a
    252c:	8b a5       	ldd	r24, Y+43	; 0x2b
    252e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	88 a7       	std	Y+40, r24	; 0x28
    253a:	88 a5       	ldd	r24, Y+40	; 0x28
    253c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    253e:	89 8d       	ldd	r24, Y+25	; 0x19
    2540:	8a 95       	dec	r24
    2542:	f1 f7       	brne	.-4      	; 0x2540 <HLCD_voidSendChar+0x6c2>
    2544:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	HLCD_EN(MDIO_LOW);
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	62 e0       	ldi	r22, 0x02	; 2
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MDIO_stderrSetPinValue>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a8 ec       	ldi	r26, 0xC8	; 200
    2556:	b2 e4       	ldi	r27, 0x42	; 66
    2558:	8d 8b       	std	Y+21, r24	; 0x15
    255a:	9e 8b       	std	Y+22, r25	; 0x16
    255c:	af 8b       	std	Y+23, r26	; 0x17
    255e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	2b ea       	ldi	r18, 0xAB	; 171
    256a:	3a ea       	ldi	r19, 0xAA	; 170
    256c:	4a e2       	ldi	r20, 0x2A	; 42
    256e:	50 e4       	ldi	r21, 0x40	; 64
    2570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	89 8b       	std	Y+17, r24	; 0x11
    257a:	9a 8b       	std	Y+18, r25	; 0x12
    257c:	ab 8b       	std	Y+19, r26	; 0x13
    257e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2580:	69 89       	ldd	r22, Y+17	; 0x11
    2582:	7a 89       	ldd	r23, Y+18	; 0x12
    2584:	8b 89       	ldd	r24, Y+19	; 0x13
    2586:	9c 89       	ldd	r25, Y+20	; 0x14
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	1c f4       	brge	.+6      	; 0x259e <HLCD_voidSendChar+0x720>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	88 8b       	std	Y+16, r24	; 0x10
    259c:	91 c0       	rjmp	.+290    	; 0x26c0 <HLCD_voidSendChar+0x842>
	else if (__tmp > 255)
    259e:	69 89       	ldd	r22, Y+17	; 0x11
    25a0:	7a 89       	ldd	r23, Y+18	; 0x12
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	9c 89       	ldd	r25, Y+20	; 0x14
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	53 e4       	ldi	r21, 0x43	; 67
    25ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	0c f0       	brlt	.+2      	; 0x25b8 <HLCD_voidSendChar+0x73a>
    25b6:	7b c0       	rjmp	.+246    	; 0x26ae <HLCD_voidSendChar+0x830>
	{
		_delay_ms(__us / 1000.0);
    25b8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ba:	7e 89       	ldd	r23, Y+22	; 0x16
    25bc:	8f 89       	ldd	r24, Y+23	; 0x17
    25be:	98 8d       	ldd	r25, Y+24	; 0x18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8c 87       	std	Y+12, r24	; 0x0c
    25d2:	9d 87       	std	Y+13, r25	; 0x0d
    25d4:	ae 87       	std	Y+14, r26	; 0x0e
    25d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25da:	7d 85       	ldd	r23, Y+13	; 0x0d
    25dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25de:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a ef       	ldi	r20, 0xFA	; 250
    25e6:	54 e4       	ldi	r21, 0x44	; 68
    25e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	88 87       	std	Y+8, r24	; 0x08
    25f2:	99 87       	std	Y+9, r25	; 0x09
    25f4:	aa 87       	std	Y+10, r26	; 0x0a
    25f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25f8:	68 85       	ldd	r22, Y+8	; 0x08
    25fa:	79 85       	ldd	r23, Y+9	; 0x09
    25fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <HLCD_voidSendChar+0x79c>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9f 83       	std	Y+7, r25	; 0x07
    2616:	8e 83       	std	Y+6, r24	; 0x06
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <HLCD_voidSendChar+0x81a>
	else if (__tmp > 65535)
    261a:	68 85       	ldd	r22, Y+8	; 0x08
    261c:	79 85       	ldd	r23, Y+9	; 0x09
    261e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2620:	9b 85       	ldd	r25, Y+11	; 0x0b
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <HLCD_voidSendChar+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6c 85       	ldd	r22, Y+12	; 0x0c
    2634:	7d 85       	ldd	r23, Y+13	; 0x0d
    2636:	8e 85       	ldd	r24, Y+14	; 0x0e
    2638:	9f 85       	ldd	r25, Y+15	; 0x0f
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9f 83       	std	Y+7, r25	; 0x07
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	0f c0       	rjmp	.+30     	; 0x267a <HLCD_voidSendChar+0x7fc>
    265c:	88 ec       	ldi	r24, 0xC8	; 200
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9d 83       	std	Y+5, r25	; 0x05
    2662:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	9d 81       	ldd	r25, Y+5	; 0x05
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <HLCD_voidSendChar+0x7ea>
    266c:	9d 83       	std	Y+5, r25	; 0x05
    266e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8e 81       	ldd	r24, Y+6	; 0x06
    2672:	9f 81       	ldd	r25, Y+7	; 0x07
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9f 83       	std	Y+7, r25	; 0x07
    2678:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8e 81       	ldd	r24, Y+6	; 0x06
    267c:	9f 81       	ldd	r25, Y+7	; 0x07
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <HLCD_voidSendChar+0x7de>
    2682:	24 c0       	rjmp	.+72     	; 0x26cc <HLCD_voidSendChar+0x84e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	68 85       	ldd	r22, Y+8	; 0x08
    2686:	79 85       	ldd	r23, Y+9	; 0x09
    2688:	8a 85       	ldd	r24, Y+10	; 0x0a
    268a:	9b 85       	ldd	r25, Y+11	; 0x0b
    268c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9f 83       	std	Y+7, r25	; 0x07
    2696:	8e 83       	std	Y+6, r24	; 0x06
    2698:	8e 81       	ldd	r24, Y+6	; 0x06
    269a:	9f 81       	ldd	r25, Y+7	; 0x07
    269c:	9b 83       	std	Y+3, r25	; 0x03
    269e:	8a 83       	std	Y+2, r24	; 0x02
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <HLCD_voidSendChar+0x826>
    26a8:	9b 83       	std	Y+3, r25	; 0x03
    26aa:	8a 83       	std	Y+2, r24	; 0x02
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <HLCD_voidSendChar+0x84e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ae:	69 89       	ldd	r22, Y+17	; 0x11
    26b0:	7a 89       	ldd	r23, Y+18	; 0x12
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	88 8b       	std	Y+16, r24	; 0x10
    26c0:	88 89       	ldd	r24, Y+16	; 0x10
    26c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	8a 95       	dec	r24
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <HLCD_voidSendChar+0x848>
    26ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	#endif	
}
    26cc:	cf 59       	subi	r28, 0x9F	; 159
    26ce:	df 4f       	sbci	r29, 0xFF	; 255
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	08 95       	ret

000026e4 <HLCD_voidSendNum>:

void HLCD_voidSendNum(u16 ARG_u16Number){
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	29 97       	sbiw	r28, 0x09	; 9
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	99 87       	std	Y+9, r25	; 0x09
    26fa:	88 87       	std	Y+8, r24	; 0x08
	if (0 == ARG_u16Number ) 
    26fc:	88 85       	ldd	r24, Y+8	; 0x08
    26fe:	99 85       	ldd	r25, Y+9	; 0x09
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	21 f4       	brne	.+8      	; 0x270c <HLCD_voidSendNum+0x28>
	{
		HLCD_voidSendChar('0');
    2704:	80 e3       	ldi	r24, 0x30	; 48
    2706:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendChar>
    270a:	3d c0       	rjmp	.+122    	; 0x2786 <HLCD_voidSendNum+0xa2>
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
    270c:	19 82       	std	Y+1, r1	; 0x01
    270e:	20 c0       	rjmp	.+64     	; 0x2750 <HLCD_voidSendNum+0x6c>
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	e8 2f       	mov	r30, r24
    2714:	ff 27       	eor	r31, r31
    2716:	e7 fd       	sbrc	r30, 7
    2718:	f0 95       	com	r31
    271a:	88 85       	ldd	r24, Y+8	; 0x08
    271c:	99 85       	ldd	r25, Y+9	; 0x09
    271e:	2a e0       	ldi	r18, 0x0A	; 10
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	b9 01       	movw	r22, r18
    2724:	0e 94 37 1b 	call	0x366e	; 0x366e <__udivmodhi4>
    2728:	28 2f       	mov	r18, r24
    272a:	20 5d       	subi	r18, 0xD0	; 208
    272c:	ce 01       	movw	r24, r28
    272e:	02 96       	adiw	r24, 0x02	; 2
    2730:	e8 0f       	add	r30, r24
    2732:	f9 1f       	adc	r31, r25
    2734:	20 83       	st	Z, r18
			ARG_u16Number/=10;
    2736:	88 85       	ldd	r24, Y+8	; 0x08
    2738:	99 85       	ldd	r25, Y+9	; 0x09
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	b9 01       	movw	r22, r18
    2740:	0e 94 37 1b 	call	0x366e	; 0x366e <__udivmodhi4>
    2744:	cb 01       	movw	r24, r22
    2746:	99 87       	std	Y+9, r25	; 0x09
    2748:	88 87       	std	Y+8, r24	; 0x08
	}
	else{
		u8 L_u8arrNum[6]; 
		s8	L_s8Iterator=0;
		//save every digit of num in our array separately
		for(;ARG_u16Number!=0;L_s8Iterator++)
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	88 85       	ldd	r24, Y+8	; 0x08
    2752:	99 85       	ldd	r25, Y+9	; 0x09
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	e1 f6       	brne	.-72     	; 0x2710 <HLCD_voidSendNum+0x2c>
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	81 50       	subi	r24, 0x01	; 1
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	10 c0       	rjmp	.+32     	; 0x2780 <HLCD_voidSendNum+0x9c>
		while(L_s8Iterator!=-1){
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	33 27       	eor	r19, r19
    2766:	27 fd       	sbrc	r18, 7
    2768:	30 95       	com	r19
    276a:	ce 01       	movw	r24, r28
    276c:	02 96       	adiw	r24, 0x02	; 2
    276e:	fc 01       	movw	r30, r24
    2770:	e2 0f       	add	r30, r18
    2772:	f3 1f       	adc	r31, r19
    2774:	80 81       	ld	r24, Z
    2776:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendChar>
			L_s8Iterator--;
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	81 50       	subi	r24, 0x01	; 1
    277e:	89 83       	std	Y+1, r24	; 0x01
		{
			L_u8arrNum[L_s8Iterator]=(ARG_u16Number%10) +'0';
			ARG_u16Number/=10;
		}
		L_s8Iterator--;
		while(L_s8Iterator!=-1){
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	8f 3f       	cpi	r24, 0xFF	; 255
    2784:	69 f7       	brne	.-38     	; 0x2760 <HLCD_voidSendNum+0x7c>
			HLCD_voidSendChar(L_u8arrNum[L_s8Iterator]);
			L_s8Iterator--;
		}	
	}
}
    2786:	29 96       	adiw	r28, 0x09	; 9
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <HLCD_voidSendString>:

void HLCD_voidSendString(const char *ARG_charptrString){
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <HLCD_voidSendString+0x6>
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	9b 83       	std	Y+3, r25	; 0x03
    27a6:	8a 83       	std	Y+2, r24	; 0x02
	
	if(ARG_charptrString != NULL_POINTER )
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	d1 f0       	breq	.+52     	; 0x27e4 <HLCD_voidSendString+0x4c>
	{	
		u8 L_u8Iterator =0;
    27b0:	19 82       	std	Y+1, r1	; 0x01
		do{
			HLCD_voidSendChar(ARG_charptrString[L_u8Iterator]);
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	fc 01       	movw	r30, r24
    27be:	e2 0f       	add	r30, r18
    27c0:	f3 1f       	adc	r31, r19
    27c2:	80 81       	ld	r24, Z
    27c4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendChar>
			L_u8Iterator++;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	89 83       	std	Y+1, r24	; 0x01
		}while(ARG_charptrString[L_u8Iterator]!='\0');
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	8a 81       	ldd	r24, Y+2	; 0x02
    27d6:	9b 81       	ldd	r25, Y+3	; 0x03
    27d8:	fc 01       	movw	r30, r24
    27da:	e2 0f       	add	r30, r18
    27dc:	f3 1f       	adc	r31, r19
    27de:	80 81       	ld	r24, Z
    27e0:	88 23       	and	r24, r24
    27e2:	39 f7       	brne	.-50     	; 0x27b2 <HLCD_voidSendString+0x1a>
		 }*/
	}
	else{
		/* return NULL_POINTER_ERROR */
	}
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <HLCD_voidSetCur>:

void HLCD_voidSetCur(u8 ARG_u8Row, u8 ARG_u8Col)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	61 97       	sbiw	r28, 0x11	; 17
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	88 8b       	std	Y+16, r24	; 0x10
    2806:	69 8b       	std	Y+17, r22	; 0x11
    u8 L_u8Temp=HLCD_START_LINE_1 | (ARG_u8Col ) | (ARG_u8Row<<6);
    2808:	88 89       	ldd	r24, Y+16	; 0x10
    280a:	98 2f       	mov	r25, r24
    280c:	92 95       	swap	r25
    280e:	99 0f       	add	r25, r25
    2810:	99 0f       	add	r25, r25
    2812:	90 7c       	andi	r25, 0xC0	; 192
    2814:	89 89       	ldd	r24, Y+17	; 0x11
    2816:	89 2b       	or	r24, r25
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	8f 87       	std	Y+15, r24	; 0x0f

    HLCD_voidSendCmd(L_u8Temp);
    281c:	8f 85       	ldd	r24, Y+15	; 0x0f
    281e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e8       	ldi	r26, 0x80	; 128
    2828:	bf e3       	ldi	r27, 0x3F	; 63
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <HLCD_voidSetCur+0x84>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <HLCD_voidSetCur+0x102>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <HLCD_voidSetCur+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <HLCD_voidSetCur+0xe4>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <HLCD_voidSetCur+0xd2>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <HLCD_voidSetCur+0xc6>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <HLCD_voidSetCur+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <HLCD_voidSetCur+0x10e>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
            case 1:
                ARG_u8Col |= HLCD_START_LINE_2;
                break;
        }
     */
}
    2906:	61 96       	adiw	r28, 0x11	; 17
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <HLCD_voidClear>:

void HLCD_voidClear(void)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	2e 97       	sbiw	r28, 0x0e	; 14
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCmd(HLCD_CLEAR_DISPLAY);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <HLCD_voidSendCmd>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e8       	ldi	r26, 0x80	; 128
    2938:	bf e3       	ldi	r27, 0x3F	; 63
    293a:	8b 87       	std	Y+11, r24	; 0x0b
    293c:	9c 87       	std	Y+12, r25	; 0x0c
    293e:	ad 87       	std	Y+13, r26	; 0x0d
    2940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a ef       	ldi	r20, 0xFA	; 250
    2950:	54 e4       	ldi	r21, 0x44	; 68
    2952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8f 83       	std	Y+7, r24	; 0x07
    295c:	98 87       	std	Y+8, r25	; 0x08
    295e:	a9 87       	std	Y+9, r26	; 0x09
    2960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2962:	6f 81       	ldd	r22, Y+7	; 0x07
    2964:	78 85       	ldd	r23, Y+8	; 0x08
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <HLCD_voidClear+0x6c>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <HLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <HLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6b 85       	ldd	r22, Y+11	; 0x0b
    299e:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <HLCD_voidClear+0xcc>
    29c6:	88 ec       	ldi	r24, 0xC8	; 200
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <HLCD_voidClear+0xba>
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <HLCD_voidClear+0xae>
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <HLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <HLCD_voidClear+0xf6>
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2a16:	2e 96       	adiw	r28, 0x0e	; 14
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <MDIO_stderrSetPortDirection+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <MDIO_stderrSetPortDirection+0x8>
    2a30:	0f 92       	push	r0
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	8a 83       	std	Y+2, r24	; 0x02
    2a38:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2a3a:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	3d 83       	std	Y+5, r19	; 0x05
    2a44:	2c 83       	std	Y+4, r18	; 0x04
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	82 30       	cpi	r24, 0x02	; 2
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	d9 f0       	breq	.+54     	; 0x2a86 <MDIO_stderrSetPortDirection+0x5e>
    2a50:	2c 81       	ldd	r18, Y+4	; 0x04
    2a52:	3d 81       	ldd	r19, Y+5	; 0x05
    2a54:	23 30       	cpi	r18, 0x03	; 3
    2a56:	31 05       	cpc	r19, r1
    2a58:	34 f4       	brge	.+12     	; 0x2a66 <MDIO_stderrSetPortDirection+0x3e>
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	91 05       	cpc	r25, r1
    2a62:	61 f0       	breq	.+24     	; 0x2a7c <MDIO_stderrSetPortDirection+0x54>
    2a64:	1f c0       	rjmp	.+62     	; 0x2aa4 <MDIO_stderrSetPortDirection+0x7c>
    2a66:	2c 81       	ldd	r18, Y+4	; 0x04
    2a68:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6a:	23 30       	cpi	r18, 0x03	; 3
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	81 f0       	breq	.+32     	; 0x2a90 <MDIO_stderrSetPortDirection+0x68>
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	84 30       	cpi	r24, 0x04	; 4
    2a76:	91 05       	cpc	r25, r1
    2a78:	81 f0       	breq	.+32     	; 0x2a9a <MDIO_stderrSetPortDirection+0x72>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
    2a7c:	e9 e3       	ldi	r30, 0x39	; 57
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	81 83       	std	Z+1, r24	; 0x01
    2a84:	11 c0       	rjmp	.+34     	; 0x2aa8 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
    2a86:	e6 e3       	ldi	r30, 0x36	; 54
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	81 83       	std	Z+1, r24	; 0x01
    2a8e:	0c c0       	rjmp	.+24     	; 0x2aa8 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
    2a90:	e3 e3       	ldi	r30, 0x33	; 51
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	81 83       	std	Z+1, r24	; 0x01
    2a98:	07 c0       	rjmp	.+14     	; 0x2aa8 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
    2a9a:	e0 e3       	ldi	r30, 0x30	; 48
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	81 83       	std	Z+1, r24	; 0x01
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <MDIO_stderrSetPortValue+0x6>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <MDIO_stderrSetPortValue+0x8>
    2ac2:	0f 92       	push	r0
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	8a 83       	std	Y+2, r24	; 0x02
    2aca:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
    2acc:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3d 83       	std	Y+5, r19	; 0x05
    2ad6:	2c 83       	std	Y+4, r18	; 0x04
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	9d 81       	ldd	r25, Y+5	; 0x05
    2adc:	82 30       	cpi	r24, 0x02	; 2
    2ade:	91 05       	cpc	r25, r1
    2ae0:	d9 f0       	breq	.+54     	; 0x2b18 <MDIO_stderrSetPortValue+0x5e>
    2ae2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae6:	23 30       	cpi	r18, 0x03	; 3
    2ae8:	31 05       	cpc	r19, r1
    2aea:	34 f4       	brge	.+12     	; 0x2af8 <MDIO_stderrSetPortValue+0x3e>
    2aec:	8c 81       	ldd	r24, Y+4	; 0x04
    2aee:	9d 81       	ldd	r25, Y+5	; 0x05
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	91 05       	cpc	r25, r1
    2af4:	61 f0       	breq	.+24     	; 0x2b0e <MDIO_stderrSetPortValue+0x54>
    2af6:	1f c0       	rjmp	.+62     	; 0x2b36 <MDIO_stderrSetPortValue+0x7c>
    2af8:	2c 81       	ldd	r18, Y+4	; 0x04
    2afa:	3d 81       	ldd	r19, Y+5	; 0x05
    2afc:	23 30       	cpi	r18, 0x03	; 3
    2afe:	31 05       	cpc	r19, r1
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <MDIO_stderrSetPortValue+0x68>
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	9d 81       	ldd	r25, Y+5	; 0x05
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	91 05       	cpc	r25, r1
    2b0a:	81 f0       	breq	.+32     	; 0x2b2c <MDIO_stderrSetPortValue+0x72>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
    2b0e:	e9 e3       	ldi	r30, 0x39	; 57
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	82 83       	std	Z+2, r24	; 0x02
    2b16:	11 c0       	rjmp	.+34     	; 0x2b3a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    2b18:	e6 e3       	ldi	r30, 0x36	; 54
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	82 83       	std	Z+2, r24	; 0x02
    2b20:	0c c0       	rjmp	.+24     	; 0x2b3a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    2b22:	e3 e3       	ldi	r30, 0x33	; 51
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	82 83       	std	Z+2, r24	; 0x02
    2b2a:	07 c0       	rjmp	.+14     	; 0x2b3a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    2b2c:	e0 e3       	ldi	r30, 0x30	; 48
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	82 83       	std	Z+2, r24	; 0x02
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <MDIO_stderrGetPortValue+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <MDIO_stderrGetPortValue+0x8>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <MDIO_stderrGetPortValue+0xa>
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	9b 83       	std	Y+3, r25	; 0x03
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
    2b5e:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    2b60:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	3e 83       	std	Y+6, r19	; 0x06
    2b6a:	2d 83       	std	Y+5, r18	; 0x05
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	91 05       	cpc	r25, r1
    2b74:	e9 f0       	breq	.+58     	; 0x2bb0 <MDIO_stderrGetPortValue+0x64>
    2b76:	2d 81       	ldd	r18, Y+5	; 0x05
    2b78:	3e 81       	ldd	r19, Y+6	; 0x06
    2b7a:	23 30       	cpi	r18, 0x03	; 3
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	34 f4       	brge	.+12     	; 0x2b8c <MDIO_stderrGetPortValue+0x40>
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	81 30       	cpi	r24, 0x01	; 1
    2b86:	91 05       	cpc	r25, r1
    2b88:	61 f0       	breq	.+24     	; 0x2ba2 <MDIO_stderrGetPortValue+0x56>
    2b8a:	27 c0       	rjmp	.+78     	; 0x2bda <MDIO_stderrGetPortValue+0x8e>
    2b8c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b8e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b90:	23 30       	cpi	r18, 0x03	; 3
    2b92:	31 05       	cpc	r19, r1
    2b94:	a1 f0       	breq	.+40     	; 0x2bbe <MDIO_stderrGetPortValue+0x72>
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	84 30       	cpi	r24, 0x04	; 4
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	b1 f0       	breq	.+44     	; 0x2bcc <MDIO_stderrGetPortValue+0x80>
    2ba0:	1c c0       	rjmp	.+56     	; 0x2bda <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    2ba2:	e9 e3       	ldi	r30, 0x39	; 57
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	ea 81       	ldd	r30, Y+2	; 0x02
    2baa:	fb 81       	ldd	r31, Y+3	; 0x03
    2bac:	80 83       	st	Z, r24
    2bae:	17 c0       	rjmp	.+46     	; 0x2bde <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    2bb0:	e6 e3       	ldi	r30, 0x36	; 54
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bba:	80 83       	st	Z, r24
    2bbc:	10 c0       	rjmp	.+32     	; 0x2bde <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    2bbe:	e3 e3       	ldi	r30, 0x33	; 51
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc8:	80 83       	st	Z, r24
    2bca:	09 c0       	rjmp	.+18     	; 0x2bde <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    2bcc:	e0 e3       	ldi	r30, 0x30	; 48
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bd6:	80 83       	st	Z, r24
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be0:	26 96       	adiw	r28, 0x06	; 6
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	de bf       	out	0x3e, r29	; 62
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	cd bf       	out	0x3d, r28	; 61
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	2a 97       	sbiw	r28, 0x0a	; 10
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	8a 83       	std	Y+2, r24	; 0x02
    2c08:	6b 83       	std	Y+3, r22	; 0x03
    2c0a:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2c0c:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	88 30       	cpi	r24, 0x08	; 8
    2c12:	08 f0       	brcs	.+2      	; 0x2c16 <MDIO_stderrSetPinDirection+0x24>
    2c14:	d9 c1       	rjmp	.+946    	; 0x2fc8 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    2c16:	8c 81       	ldd	r24, Y+4	; 0x04
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <MDIO_stderrSetPinDirection+0x2c>
    2c1c:	7c c0       	rjmp	.+248    	; 0x2d16 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	3a 87       	std	Y+10, r19	; 0x0a
    2c26:	29 87       	std	Y+9, r18	; 0x09
    2c28:	89 85       	ldd	r24, Y+9	; 0x09
    2c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	91 05       	cpc	r25, r1
    2c30:	69 f1       	breq	.+90     	; 0x2c8c <MDIO_stderrSetPinDirection+0x9a>
    2c32:	29 85       	ldd	r18, Y+9	; 0x09
    2c34:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c36:	23 30       	cpi	r18, 0x03	; 3
    2c38:	31 05       	cpc	r19, r1
    2c3a:	34 f4       	brge	.+12     	; 0x2c48 <MDIO_stderrSetPinDirection+0x56>
    2c3c:	89 85       	ldd	r24, Y+9	; 0x09
    2c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	69 f0       	breq	.+26     	; 0x2c60 <MDIO_stderrSetPinDirection+0x6e>
    2c46:	64 c0       	rjmp	.+200    	; 0x2d10 <MDIO_stderrSetPinDirection+0x11e>
    2c48:	29 85       	ldd	r18, Y+9	; 0x09
    2c4a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c4c:	23 30       	cpi	r18, 0x03	; 3
    2c4e:	31 05       	cpc	r19, r1
    2c50:	99 f1       	breq	.+102    	; 0x2cb8 <MDIO_stderrSetPinDirection+0xc6>
    2c52:	89 85       	ldd	r24, Y+9	; 0x09
    2c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c56:	84 30       	cpi	r24, 0x04	; 4
    2c58:	91 05       	cpc	r25, r1
    2c5a:	09 f4       	brne	.+2      	; 0x2c5e <MDIO_stderrSetPinDirection+0x6c>
    2c5c:	43 c0       	rjmp	.+134    	; 0x2ce4 <MDIO_stderrSetPinDirection+0xf2>
    2c5e:	58 c0       	rjmp	.+176    	; 0x2d10 <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2c60:	a9 e3       	ldi	r26, 0x39	; 57
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e9 e3       	ldi	r30, 0x39	; 57
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	81 81       	ldd	r24, Z+1	; 0x01
    2c6a:	48 2f       	mov	r20, r24
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	02 2e       	mov	r0, r18
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <MDIO_stderrSetPinDirection+0x8c>
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	0a 94       	dec	r0
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <MDIO_stderrSetPinDirection+0x88>
    2c82:	84 2b       	or	r24, r20
    2c84:	11 96       	adiw	r26, 0x01	; 1
    2c86:	8c 93       	st	X, r24
    2c88:	11 97       	sbiw	r26, 0x01	; 1
    2c8a:	a0 c1       	rjmp	.+832    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2c8c:	a6 e3       	ldi	r26, 0x36	; 54
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e6 e3       	ldi	r30, 0x36	; 54
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	81 81       	ldd	r24, Z+1	; 0x01
    2c96:	48 2f       	mov	r20, r24
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	02 2e       	mov	r0, r18
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <MDIO_stderrSetPinDirection+0xb8>
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	0a 94       	dec	r0
    2cac:	e2 f7       	brpl	.-8      	; 0x2ca6 <MDIO_stderrSetPinDirection+0xb4>
    2cae:	84 2b       	or	r24, r20
    2cb0:	11 96       	adiw	r26, 0x01	; 1
    2cb2:	8c 93       	st	X, r24
    2cb4:	11 97       	sbiw	r26, 0x01	; 1
    2cb6:	8a c1       	rjmp	.+788    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2cb8:	a3 e3       	ldi	r26, 0x33	; 51
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e3 e3       	ldi	r30, 0x33	; 51
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	81 81       	ldd	r24, Z+1	; 0x01
    2cc2:	48 2f       	mov	r20, r24
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 2e       	mov	r0, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <MDIO_stderrSetPinDirection+0xe4>
    2cd2:	88 0f       	add	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	0a 94       	dec	r0
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <MDIO_stderrSetPinDirection+0xe0>
    2cda:	84 2b       	or	r24, r20
    2cdc:	11 96       	adiw	r26, 0x01	; 1
    2cde:	8c 93       	st	X, r24
    2ce0:	11 97       	sbiw	r26, 0x01	; 1
    2ce2:	74 c1       	rjmp	.+744    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    2ce4:	a0 e3       	ldi	r26, 0x30	; 48
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e0 e3       	ldi	r30, 0x30	; 48
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	81 81       	ldd	r24, Z+1	; 0x01
    2cee:	48 2f       	mov	r20, r24
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	02 2e       	mov	r0, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <MDIO_stderrSetPinDirection+0x110>
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	0a 94       	dec	r0
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <MDIO_stderrSetPinDirection+0x10c>
    2d06:	84 2b       	or	r24, r20
    2d08:	11 96       	adiw	r26, 0x01	; 1
    2d0a:	8c 93       	st	X, r24
    2d0c:	11 97       	sbiw	r26, 0x01	; 1
    2d0e:	5e c1       	rjmp	.+700    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	5b c1       	rjmp	.+694    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	82 30       	cpi	r24, 0x02	; 2
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <MDIO_stderrSetPinDirection+0x12c>
    2d1c:	80 c0       	rjmp	.+256    	; 0x2e1e <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	28 2f       	mov	r18, r24
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	38 87       	std	Y+8, r19	; 0x08
    2d26:	2f 83       	std	Y+7, r18	; 0x07
    2d28:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2a:	98 85       	ldd	r25, Y+8	; 0x08
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	91 05       	cpc	r25, r1
    2d30:	71 f1       	breq	.+92     	; 0x2d8e <MDIO_stderrSetPinDirection+0x19c>
    2d32:	2f 81       	ldd	r18, Y+7	; 0x07
    2d34:	38 85       	ldd	r19, Y+8	; 0x08
    2d36:	23 30       	cpi	r18, 0x03	; 3
    2d38:	31 05       	cpc	r19, r1
    2d3a:	34 f4       	brge	.+12     	; 0x2d48 <MDIO_stderrSetPinDirection+0x156>
    2d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3e:	98 85       	ldd	r25, Y+8	; 0x08
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	91 05       	cpc	r25, r1
    2d44:	69 f0       	breq	.+26     	; 0x2d60 <MDIO_stderrSetPinDirection+0x16e>
    2d46:	68 c0       	rjmp	.+208    	; 0x2e18 <MDIO_stderrSetPinDirection+0x226>
    2d48:	2f 81       	ldd	r18, Y+7	; 0x07
    2d4a:	38 85       	ldd	r19, Y+8	; 0x08
    2d4c:	23 30       	cpi	r18, 0x03	; 3
    2d4e:	31 05       	cpc	r19, r1
    2d50:	a9 f1       	breq	.+106    	; 0x2dbc <MDIO_stderrSetPinDirection+0x1ca>
    2d52:	8f 81       	ldd	r24, Y+7	; 0x07
    2d54:	98 85       	ldd	r25, Y+8	; 0x08
    2d56:	84 30       	cpi	r24, 0x04	; 4
    2d58:	91 05       	cpc	r25, r1
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <MDIO_stderrSetPinDirection+0x16c>
    2d5c:	46 c0       	rjmp	.+140    	; 0x2dea <MDIO_stderrSetPinDirection+0x1f8>
    2d5e:	5c c0       	rjmp	.+184    	; 0x2e18 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    2d60:	a9 e3       	ldi	r26, 0x39	; 57
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e9 e3       	ldi	r30, 0x39	; 57
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	81 81       	ldd	r24, Z+1	; 0x01
    2d6a:	48 2f       	mov	r20, r24
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	02 2e       	mov	r0, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <MDIO_stderrSetPinDirection+0x18c>
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	0a 94       	dec	r0
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <MDIO_stderrSetPinDirection+0x188>
    2d82:	80 95       	com	r24
    2d84:	84 23       	and	r24, r20
    2d86:	11 96       	adiw	r26, 0x01	; 1
    2d88:	8c 93       	st	X, r24
    2d8a:	11 97       	sbiw	r26, 0x01	; 1
    2d8c:	1f c1       	rjmp	.+574    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    2d8e:	a6 e3       	ldi	r26, 0x36	; 54
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	e6 e3       	ldi	r30, 0x36	; 54
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	81 81       	ldd	r24, Z+1	; 0x01
    2d98:	48 2f       	mov	r20, r24
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	02 2e       	mov	r0, r18
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <MDIO_stderrSetPinDirection+0x1ba>
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	0a 94       	dec	r0
    2dae:	e2 f7       	brpl	.-8      	; 0x2da8 <MDIO_stderrSetPinDirection+0x1b6>
    2db0:	80 95       	com	r24
    2db2:	84 23       	and	r24, r20
    2db4:	11 96       	adiw	r26, 0x01	; 1
    2db6:	8c 93       	st	X, r24
    2db8:	11 97       	sbiw	r26, 0x01	; 1
    2dba:	08 c1       	rjmp	.+528    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    2dbc:	a3 e3       	ldi	r26, 0x33	; 51
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e3 e3       	ldi	r30, 0x33	; 51
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	81 81       	ldd	r24, Z+1	; 0x01
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <MDIO_stderrSetPinDirection+0x1e8>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <MDIO_stderrSetPinDirection+0x1e4>
    2dde:	80 95       	com	r24
    2de0:	84 23       	and	r24, r20
    2de2:	11 96       	adiw	r26, 0x01	; 1
    2de4:	8c 93       	st	X, r24
    2de6:	11 97       	sbiw	r26, 0x01	; 1
    2de8:	f1 c0       	rjmp	.+482    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    2dea:	a0 e3       	ldi	r26, 0x30	; 48
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e0 e3       	ldi	r30, 0x30	; 48
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	81 81       	ldd	r24, Z+1	; 0x01
    2df4:	48 2f       	mov	r20, r24
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	02 2e       	mov	r0, r18
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <MDIO_stderrSetPinDirection+0x216>
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	0a 94       	dec	r0
    2e0a:	e2 f7       	brpl	.-8      	; 0x2e04 <MDIO_stderrSetPinDirection+0x212>
    2e0c:	80 95       	com	r24
    2e0e:	84 23       	and	r24, r20
    2e10:	11 96       	adiw	r26, 0x01	; 1
    2e12:	8c 93       	st	X, r24
    2e14:	11 97       	sbiw	r26, 0x01	; 1
    2e16:	da c0       	rjmp	.+436    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	d7 c0       	rjmp	.+430    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	83 30       	cpi	r24, 0x03	; 3
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <MDIO_stderrSetPinDirection+0x234>
    2e24:	ce c0       	rjmp	.+412    	; 0x2fc2 <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	3e 83       	std	Y+6, r19	; 0x06
    2e2e:	2d 83       	std	Y+5, r18	; 0x05
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	91 05       	cpc	r25, r1
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <MDIO_stderrSetPinDirection+0x24a>
    2e3a:	42 c0       	rjmp	.+132    	; 0x2ec0 <MDIO_stderrSetPinDirection+0x2ce>
    2e3c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e3e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e40:	23 30       	cpi	r18, 0x03	; 3
    2e42:	31 05       	cpc	r19, r1
    2e44:	34 f4       	brge	.+12     	; 0x2e52 <MDIO_stderrSetPinDirection+0x260>
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	71 f0       	breq	.+28     	; 0x2e6c <MDIO_stderrSetPinDirection+0x27a>
    2e50:	b5 c0       	rjmp	.+362    	; 0x2fbc <MDIO_stderrSetPinDirection+0x3ca>
    2e52:	2d 81       	ldd	r18, Y+5	; 0x05
    2e54:	3e 81       	ldd	r19, Y+6	; 0x06
    2e56:	23 30       	cpi	r18, 0x03	; 3
    2e58:	31 05       	cpc	r19, r1
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <MDIO_stderrSetPinDirection+0x26c>
    2e5c:	5b c0       	rjmp	.+182    	; 0x2f14 <MDIO_stderrSetPinDirection+0x322>
    2e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e60:	9e 81       	ldd	r25, Y+6	; 0x06
    2e62:	84 30       	cpi	r24, 0x04	; 4
    2e64:	91 05       	cpc	r25, r1
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <MDIO_stderrSetPinDirection+0x278>
    2e68:	7f c0       	rjmp	.+254    	; 0x2f68 <MDIO_stderrSetPinDirection+0x376>
    2e6a:	a8 c0       	rjmp	.+336    	; 0x2fbc <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    2e6c:	a9 e3       	ldi	r26, 0x39	; 57
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e9 e3       	ldi	r30, 0x39	; 57
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	81 81       	ldd	r24, Z+1	; 0x01
    2e76:	48 2f       	mov	r20, r24
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <MDIO_stderrSetPinDirection+0x296>
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	2a 95       	dec	r18
    2e8a:	e2 f7       	brpl	.-8      	; 0x2e84 <MDIO_stderrSetPinDirection+0x292>
    2e8c:	80 95       	com	r24
    2e8e:	84 23       	and	r24, r20
    2e90:	11 96       	adiw	r26, 0x01	; 1
    2e92:	8c 93       	st	X, r24
    2e94:	a9 e3       	ldi	r26, 0x39	; 57
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e9 e3       	ldi	r30, 0x39	; 57
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	48 2f       	mov	r20, r24
    2ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	02 2e       	mov	r0, r18
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <MDIO_stderrSetPinDirection+0x2c0>
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	0a 94       	dec	r0
    2eb4:	e2 f7       	brpl	.-8      	; 0x2eae <MDIO_stderrSetPinDirection+0x2bc>
    2eb6:	84 2b       	or	r24, r20
    2eb8:	12 96       	adiw	r26, 0x02	; 2
    2eba:	8c 93       	st	X, r24
    2ebc:	12 97       	sbiw	r26, 0x02	; 2
    2ebe:	86 c0       	rjmp	.+268    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    2ec0:	a6 e3       	ldi	r26, 0x36	; 54
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e6 e3       	ldi	r30, 0x36	; 54
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	81 81       	ldd	r24, Z+1	; 0x01
    2eca:	48 2f       	mov	r20, r24
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <MDIO_stderrSetPinDirection+0x2ea>
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	2a 95       	dec	r18
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <MDIO_stderrSetPinDirection+0x2e6>
    2ee0:	80 95       	com	r24
    2ee2:	84 23       	and	r24, r20
    2ee4:	11 96       	adiw	r26, 0x01	; 1
    2ee6:	8c 93       	st	X, r24
    2ee8:	a6 e3       	ldi	r26, 0x36	; 54
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e6 e3       	ldi	r30, 0x36	; 54
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	48 2f       	mov	r20, r24
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	02 2e       	mov	r0, r18
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <MDIO_stderrSetPinDirection+0x314>
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	0a 94       	dec	r0
    2f08:	e2 f7       	brpl	.-8      	; 0x2f02 <MDIO_stderrSetPinDirection+0x310>
    2f0a:	84 2b       	or	r24, r20
    2f0c:	12 96       	adiw	r26, 0x02	; 2
    2f0e:	8c 93       	st	X, r24
    2f10:	12 97       	sbiw	r26, 0x02	; 2
    2f12:	5c c0       	rjmp	.+184    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    2f14:	a3 e3       	ldi	r26, 0x33	; 51
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	e3 e3       	ldi	r30, 0x33	; 51
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	81 81       	ldd	r24, Z+1	; 0x01
    2f1e:	48 2f       	mov	r20, r24
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <MDIO_stderrSetPinDirection+0x33e>
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	2a 95       	dec	r18
    2f32:	e2 f7       	brpl	.-8      	; 0x2f2c <MDIO_stderrSetPinDirection+0x33a>
    2f34:	80 95       	com	r24
    2f36:	84 23       	and	r24, r20
    2f38:	11 96       	adiw	r26, 0x01	; 1
    2f3a:	8c 93       	st	X, r24
    2f3c:	a3 e3       	ldi	r26, 0x33	; 51
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e3 e3       	ldi	r30, 0x33	; 51
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	48 2f       	mov	r20, r24
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	02 2e       	mov	r0, r18
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <MDIO_stderrSetPinDirection+0x368>
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	0a 94       	dec	r0
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <MDIO_stderrSetPinDirection+0x364>
    2f5e:	84 2b       	or	r24, r20
    2f60:	12 96       	adiw	r26, 0x02	; 2
    2f62:	8c 93       	st	X, r24
    2f64:	12 97       	sbiw	r26, 0x02	; 2
    2f66:	32 c0       	rjmp	.+100    	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    2f68:	a0 e3       	ldi	r26, 0x30	; 48
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e0 e3       	ldi	r30, 0x30	; 48
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	81 81       	ldd	r24, Z+1	; 0x01
    2f72:	48 2f       	mov	r20, r24
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <MDIO_stderrSetPinDirection+0x392>
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	2a 95       	dec	r18
    2f86:	e2 f7       	brpl	.-8      	; 0x2f80 <MDIO_stderrSetPinDirection+0x38e>
    2f88:	80 95       	com	r24
    2f8a:	84 23       	and	r24, r20
    2f8c:	11 96       	adiw	r26, 0x01	; 1
    2f8e:	8c 93       	st	X, r24
    2f90:	a0 e3       	ldi	r26, 0x30	; 48
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e0 e3       	ldi	r30, 0x30	; 48
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	48 2f       	mov	r20, r24
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	28 2f       	mov	r18, r24
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	02 2e       	mov	r0, r18
    2fa8:	02 c0       	rjmp	.+4      	; 0x2fae <MDIO_stderrSetPinDirection+0x3bc>
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	0a 94       	dec	r0
    2fb0:	e2 f7       	brpl	.-8      	; 0x2faa <MDIO_stderrSetPinDirection+0x3b8>
    2fb2:	84 2b       	or	r24, r20
    2fb4:	12 96       	adiw	r26, 0x02	; 2
    2fb6:	8c 93       	st	X, r24
    2fb8:	12 97       	sbiw	r26, 0x02	; 2
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	89 83       	std	Y+1, r24	; 0x01
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fce:	2a 96       	adiw	r28, 0x0a	; 10
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	28 97       	sbiw	r28, 0x08	; 8
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	8a 83       	std	Y+2, r24	; 0x02
    2ff6:	6b 83       	std	Y+3, r22	; 0x03
    2ff8:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    2ffa:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	88 30       	cpi	r24, 0x08	; 8
    3000:	08 f0       	brcs	.+2      	; 0x3004 <MDIO_stderrSetPinValue+0x24>
    3002:	07 c1       	rjmp	.+526    	; 0x3212 <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    3004:	8c 81       	ldd	r24, Y+4	; 0x04
    3006:	82 30       	cpi	r24, 0x02	; 2
    3008:	09 f0       	breq	.+2      	; 0x300c <MDIO_stderrSetPinValue+0x2c>
    300a:	7c c0       	rjmp	.+248    	; 0x3104 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	28 2f       	mov	r18, r24
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	38 87       	std	Y+8, r19	; 0x08
    3014:	2f 83       	std	Y+7, r18	; 0x07
    3016:	8f 81       	ldd	r24, Y+7	; 0x07
    3018:	98 85       	ldd	r25, Y+8	; 0x08
    301a:	82 30       	cpi	r24, 0x02	; 2
    301c:	91 05       	cpc	r25, r1
    301e:	69 f1       	breq	.+90     	; 0x307a <MDIO_stderrSetPinValue+0x9a>
    3020:	2f 81       	ldd	r18, Y+7	; 0x07
    3022:	38 85       	ldd	r19, Y+8	; 0x08
    3024:	23 30       	cpi	r18, 0x03	; 3
    3026:	31 05       	cpc	r19, r1
    3028:	34 f4       	brge	.+12     	; 0x3036 <MDIO_stderrSetPinValue+0x56>
    302a:	8f 81       	ldd	r24, Y+7	; 0x07
    302c:	98 85       	ldd	r25, Y+8	; 0x08
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	91 05       	cpc	r25, r1
    3032:	69 f0       	breq	.+26     	; 0x304e <MDIO_stderrSetPinValue+0x6e>
    3034:	64 c0       	rjmp	.+200    	; 0x30fe <MDIO_stderrSetPinValue+0x11e>
    3036:	2f 81       	ldd	r18, Y+7	; 0x07
    3038:	38 85       	ldd	r19, Y+8	; 0x08
    303a:	23 30       	cpi	r18, 0x03	; 3
    303c:	31 05       	cpc	r19, r1
    303e:	99 f1       	breq	.+102    	; 0x30a6 <MDIO_stderrSetPinValue+0xc6>
    3040:	8f 81       	ldd	r24, Y+7	; 0x07
    3042:	98 85       	ldd	r25, Y+8	; 0x08
    3044:	84 30       	cpi	r24, 0x04	; 4
    3046:	91 05       	cpc	r25, r1
    3048:	09 f4       	brne	.+2      	; 0x304c <MDIO_stderrSetPinValue+0x6c>
    304a:	43 c0       	rjmp	.+134    	; 0x30d2 <MDIO_stderrSetPinValue+0xf2>
    304c:	58 c0       	rjmp	.+176    	; 0x30fe <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    304e:	a9 e3       	ldi	r26, 0x39	; 57
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e9 e3       	ldi	r30, 0x39	; 57
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	82 81       	ldd	r24, Z+2	; 0x02
    3058:	48 2f       	mov	r20, r24
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	02 2e       	mov	r0, r18
    3066:	02 c0       	rjmp	.+4      	; 0x306c <MDIO_stderrSetPinValue+0x8c>
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	0a 94       	dec	r0
    306e:	e2 f7       	brpl	.-8      	; 0x3068 <MDIO_stderrSetPinValue+0x88>
    3070:	84 2b       	or	r24, r20
    3072:	12 96       	adiw	r26, 0x02	; 2
    3074:	8c 93       	st	X, r24
    3076:	12 97       	sbiw	r26, 0x02	; 2
    3078:	ce c0       	rjmp	.+412    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    307a:	a6 e3       	ldi	r26, 0x36	; 54
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	e6 e3       	ldi	r30, 0x36	; 54
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	82 81       	ldd	r24, Z+2	; 0x02
    3084:	48 2f       	mov	r20, r24
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 2e       	mov	r0, r18
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <MDIO_stderrSetPinValue+0xb8>
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <MDIO_stderrSetPinValue+0xb4>
    309c:	84 2b       	or	r24, r20
    309e:	12 96       	adiw	r26, 0x02	; 2
    30a0:	8c 93       	st	X, r24
    30a2:	12 97       	sbiw	r26, 0x02	; 2
    30a4:	b8 c0       	rjmp	.+368    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    30a6:	a3 e3       	ldi	r26, 0x33	; 51
    30a8:	b0 e0       	ldi	r27, 0x00	; 0
    30aa:	e3 e3       	ldi	r30, 0x33	; 51
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	48 2f       	mov	r20, r24
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	02 2e       	mov	r0, r18
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <MDIO_stderrSetPinValue+0xe4>
    30c0:	88 0f       	add	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	0a 94       	dec	r0
    30c6:	e2 f7       	brpl	.-8      	; 0x30c0 <MDIO_stderrSetPinValue+0xe0>
    30c8:	84 2b       	or	r24, r20
    30ca:	12 96       	adiw	r26, 0x02	; 2
    30cc:	8c 93       	st	X, r24
    30ce:	12 97       	sbiw	r26, 0x02	; 2
    30d0:	a2 c0       	rjmp	.+324    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    30d2:	a0 e3       	ldi	r26, 0x30	; 48
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	e0 e3       	ldi	r30, 0x30	; 48
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	48 2f       	mov	r20, r24
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	28 2f       	mov	r18, r24
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	02 2e       	mov	r0, r18
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <MDIO_stderrSetPinValue+0x110>
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	0a 94       	dec	r0
    30f2:	e2 f7       	brpl	.-8      	; 0x30ec <MDIO_stderrSetPinValue+0x10c>
    30f4:	84 2b       	or	r24, r20
    30f6:	12 96       	adiw	r26, 0x02	; 2
    30f8:	8c 93       	st	X, r24
    30fa:	12 97       	sbiw	r26, 0x02	; 2
    30fc:	8c c0       	rjmp	.+280    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	89 c0       	rjmp	.+274    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    3104:	8c 81       	ldd	r24, Y+4	; 0x04
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	09 f0       	breq	.+2      	; 0x310c <MDIO_stderrSetPinValue+0x12c>
    310a:	80 c0       	rjmp	.+256    	; 0x320c <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3e 83       	std	Y+6, r19	; 0x06
    3114:	2d 83       	std	Y+5, r18	; 0x05
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	91 05       	cpc	r25, r1
    311e:	71 f1       	breq	.+92     	; 0x317c <MDIO_stderrSetPinValue+0x19c>
    3120:	2d 81       	ldd	r18, Y+5	; 0x05
    3122:	3e 81       	ldd	r19, Y+6	; 0x06
    3124:	23 30       	cpi	r18, 0x03	; 3
    3126:	31 05       	cpc	r19, r1
    3128:	34 f4       	brge	.+12     	; 0x3136 <MDIO_stderrSetPinValue+0x156>
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	81 30       	cpi	r24, 0x01	; 1
    3130:	91 05       	cpc	r25, r1
    3132:	69 f0       	breq	.+26     	; 0x314e <MDIO_stderrSetPinValue+0x16e>
    3134:	68 c0       	rjmp	.+208    	; 0x3206 <MDIO_stderrSetPinValue+0x226>
    3136:	2d 81       	ldd	r18, Y+5	; 0x05
    3138:	3e 81       	ldd	r19, Y+6	; 0x06
    313a:	23 30       	cpi	r18, 0x03	; 3
    313c:	31 05       	cpc	r19, r1
    313e:	a9 f1       	breq	.+106    	; 0x31aa <MDIO_stderrSetPinValue+0x1ca>
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	84 30       	cpi	r24, 0x04	; 4
    3146:	91 05       	cpc	r25, r1
    3148:	09 f4       	brne	.+2      	; 0x314c <MDIO_stderrSetPinValue+0x16c>
    314a:	46 c0       	rjmp	.+140    	; 0x31d8 <MDIO_stderrSetPinValue+0x1f8>
    314c:	5c c0       	rjmp	.+184    	; 0x3206 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    314e:	a9 e3       	ldi	r26, 0x39	; 57
    3150:	b0 e0       	ldi	r27, 0x00	; 0
    3152:	e9 e3       	ldi	r30, 0x39	; 57
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	48 2f       	mov	r20, r24
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	02 2e       	mov	r0, r18
    3166:	02 c0       	rjmp	.+4      	; 0x316c <MDIO_stderrSetPinValue+0x18c>
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	0a 94       	dec	r0
    316e:	e2 f7       	brpl	.-8      	; 0x3168 <MDIO_stderrSetPinValue+0x188>
    3170:	80 95       	com	r24
    3172:	84 23       	and	r24, r20
    3174:	12 96       	adiw	r26, 0x02	; 2
    3176:	8c 93       	st	X, r24
    3178:	12 97       	sbiw	r26, 0x02	; 2
    317a:	4d c0       	rjmp	.+154    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    317c:	a6 e3       	ldi	r26, 0x36	; 54
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e6 e3       	ldi	r30, 0x36	; 54
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	48 2f       	mov	r20, r24
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	02 2e       	mov	r0, r18
    3194:	02 c0       	rjmp	.+4      	; 0x319a <MDIO_stderrSetPinValue+0x1ba>
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	0a 94       	dec	r0
    319c:	e2 f7       	brpl	.-8      	; 0x3196 <MDIO_stderrSetPinValue+0x1b6>
    319e:	80 95       	com	r24
    31a0:	84 23       	and	r24, r20
    31a2:	12 96       	adiw	r26, 0x02	; 2
    31a4:	8c 93       	st	X, r24
    31a6:	12 97       	sbiw	r26, 0x02	; 2
    31a8:	36 c0       	rjmp	.+108    	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    31aa:	a3 e3       	ldi	r26, 0x33	; 51
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e3 e3       	ldi	r30, 0x33	; 51
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	82 81       	ldd	r24, Z+2	; 0x02
    31b4:	48 2f       	mov	r20, r24
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <MDIO_stderrSetPinValue+0x1e8>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <MDIO_stderrSetPinValue+0x1e4>
    31cc:	80 95       	com	r24
    31ce:	84 23       	and	r24, r20
    31d0:	12 96       	adiw	r26, 0x02	; 2
    31d2:	8c 93       	st	X, r24
    31d4:	12 97       	sbiw	r26, 0x02	; 2
    31d6:	1f c0       	rjmp	.+62     	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    31d8:	a0 e3       	ldi	r26, 0x30	; 48
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e0 e3       	ldi	r30, 0x30	; 48
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	48 2f       	mov	r20, r24
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	28 2f       	mov	r18, r24
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	02 2e       	mov	r0, r18
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <MDIO_stderrSetPinValue+0x216>
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	0a 94       	dec	r0
    31f8:	e2 f7       	brpl	.-8      	; 0x31f2 <MDIO_stderrSetPinValue+0x212>
    31fa:	80 95       	com	r24
    31fc:	84 23       	and	r24, r20
    31fe:	12 96       	adiw	r26, 0x02	; 2
    3200:	8c 93       	st	X, r24
    3202:	12 97       	sbiw	r26, 0x02	; 2
    3204:	08 c0       	rjmp	.+16     	; 0x3216 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	05 c0       	rjmp	.+10     	; 0x3216 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3216:	89 81       	ldd	r24, Y+1	; 0x01
}
    3218:	28 96       	adiw	r28, 0x08	; 8
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	27 97       	sbiw	r28, 0x07	; 7
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	de bf       	out	0x3e, r29	; 62
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	cd bf       	out	0x3d, r28	; 61
    323e:	9b 83       	std	Y+3, r25	; 0x03
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	6c 83       	std	Y+4, r22	; 0x04
    3244:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    3246:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	9b 81       	ldd	r25, Y+3	; 0x03
    324c:	00 97       	sbiw	r24, 0x00	; 0
    324e:	19 f4       	brne	.+6      	; 0x3256 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    3250:	82 e0       	ldi	r24, 0x02	; 2
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	7a c0       	rjmp	.+244    	; 0x334a <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    3256:	8d 81       	ldd	r24, Y+5	; 0x05
    3258:	88 30       	cpi	r24, 0x08	; 8
    325a:	08 f0       	brcs	.+2      	; 0x325e <MDIO_stderrGetPinValue+0x34>
    325c:	74 c0       	rjmp	.+232    	; 0x3346 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	28 2f       	mov	r18, r24
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	3f 83       	std	Y+7, r19	; 0x07
    3266:	2e 83       	std	Y+6, r18	; 0x06
    3268:	4e 81       	ldd	r20, Y+6	; 0x06
    326a:	5f 81       	ldd	r21, Y+7	; 0x07
    326c:	42 30       	cpi	r20, 0x02	; 2
    326e:	51 05       	cpc	r21, r1
    3270:	59 f1       	breq	.+86     	; 0x32c8 <MDIO_stderrGetPinValue+0x9e>
    3272:	8e 81       	ldd	r24, Y+6	; 0x06
    3274:	9f 81       	ldd	r25, Y+7	; 0x07
    3276:	83 30       	cpi	r24, 0x03	; 3
    3278:	91 05       	cpc	r25, r1
    327a:	34 f4       	brge	.+12     	; 0x3288 <MDIO_stderrGetPinValue+0x5e>
    327c:	2e 81       	ldd	r18, Y+6	; 0x06
    327e:	3f 81       	ldd	r19, Y+7	; 0x07
    3280:	21 30       	cpi	r18, 0x01	; 1
    3282:	31 05       	cpc	r19, r1
    3284:	69 f0       	breq	.+26     	; 0x32a0 <MDIO_stderrGetPinValue+0x76>
    3286:	5c c0       	rjmp	.+184    	; 0x3340 <MDIO_stderrGetPinValue+0x116>
    3288:	4e 81       	ldd	r20, Y+6	; 0x06
    328a:	5f 81       	ldd	r21, Y+7	; 0x07
    328c:	43 30       	cpi	r20, 0x03	; 3
    328e:	51 05       	cpc	r21, r1
    3290:	79 f1       	breq	.+94     	; 0x32f0 <MDIO_stderrGetPinValue+0xc6>
    3292:	8e 81       	ldd	r24, Y+6	; 0x06
    3294:	9f 81       	ldd	r25, Y+7	; 0x07
    3296:	84 30       	cpi	r24, 0x04	; 4
    3298:	91 05       	cpc	r25, r1
    329a:	09 f4       	brne	.+2      	; 0x329e <MDIO_stderrGetPinValue+0x74>
    329c:	3d c0       	rjmp	.+122    	; 0x3318 <MDIO_stderrGetPinValue+0xee>
    329e:	50 c0       	rjmp	.+160    	; 0x3340 <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    32a0:	e9 e3       	ldi	r30, 0x39	; 57
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	28 2f       	mov	r18, r24
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	88 2f       	mov	r24, r24
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a9 01       	movw	r20, r18
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <MDIO_stderrGetPinValue+0x8e>
    32b4:	55 95       	asr	r21
    32b6:	47 95       	ror	r20
    32b8:	8a 95       	dec	r24
    32ba:	e2 f7       	brpl	.-8      	; 0x32b4 <MDIO_stderrGetPinValue+0x8a>
    32bc:	ca 01       	movw	r24, r20
    32be:	81 70       	andi	r24, 0x01	; 1
    32c0:	ea 81       	ldd	r30, Y+2	; 0x02
    32c2:	fb 81       	ldd	r31, Y+3	; 0x03
    32c4:	80 83       	st	Z, r24
    32c6:	41 c0       	rjmp	.+130    	; 0x334a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    32c8:	e6 e3       	ldi	r30, 0x36	; 54
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	88 2f       	mov	r24, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	a9 01       	movw	r20, r18
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <MDIO_stderrGetPinValue+0xb6>
    32dc:	55 95       	asr	r21
    32de:	47 95       	ror	r20
    32e0:	8a 95       	dec	r24
    32e2:	e2 f7       	brpl	.-8      	; 0x32dc <MDIO_stderrGetPinValue+0xb2>
    32e4:	ca 01       	movw	r24, r20
    32e6:	81 70       	andi	r24, 0x01	; 1
    32e8:	ea 81       	ldd	r30, Y+2	; 0x02
    32ea:	fb 81       	ldd	r31, Y+3	; 0x03
    32ec:	80 83       	st	Z, r24
    32ee:	2d c0       	rjmp	.+90     	; 0x334a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    32f0:	e3 e3       	ldi	r30, 0x33	; 51
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	a9 01       	movw	r20, r18
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <MDIO_stderrGetPinValue+0xde>
    3304:	55 95       	asr	r21
    3306:	47 95       	ror	r20
    3308:	8a 95       	dec	r24
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <MDIO_stderrGetPinValue+0xda>
    330c:	ca 01       	movw	r24, r20
    330e:	81 70       	andi	r24, 0x01	; 1
    3310:	ea 81       	ldd	r30, Y+2	; 0x02
    3312:	fb 81       	ldd	r31, Y+3	; 0x03
    3314:	80 83       	st	Z, r24
    3316:	19 c0       	rjmp	.+50     	; 0x334a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    3318:	e0 e3       	ldi	r30, 0x30	; 48
    331a:	f0 e0       	ldi	r31, 0x00	; 0
    331c:	80 81       	ld	r24, Z
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	8d 81       	ldd	r24, Y+5	; 0x05
    3324:	88 2f       	mov	r24, r24
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a9 01       	movw	r20, r18
    332a:	02 c0       	rjmp	.+4      	; 0x3330 <MDIO_stderrGetPinValue+0x106>
    332c:	55 95       	asr	r21
    332e:	47 95       	ror	r20
    3330:	8a 95       	dec	r24
    3332:	e2 f7       	brpl	.-8      	; 0x332c <MDIO_stderrGetPinValue+0x102>
    3334:	ca 01       	movw	r24, r20
    3336:	81 70       	andi	r24, 0x01	; 1
    3338:	ea 81       	ldd	r30, Y+2	; 0x02
    333a:	fb 81       	ldd	r31, Y+3	; 0x03
    333c:	80 83       	st	Z, r24
    333e:	05 c0       	rjmp	.+10     	; 0x334a <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	89 83       	std	Y+1, r24	; 0x01
    3344:	02 c0       	rjmp	.+4      	; 0x334a <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    334a:	89 81       	ldd	r24, Y+1	; 0x01
}
    334c:	27 96       	adiw	r28, 0x07	; 7
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	00 d0       	rcall	.+0      	; 0x3364 <MDIO_stderrTogglePinValue+0x6>
    3364:	00 d0       	rcall	.+0      	; 0x3366 <MDIO_stderrTogglePinValue+0x8>
    3366:	0f 92       	push	r0
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	8a 83       	std	Y+2, r24	; 0x02
    336e:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    3370:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	88 30       	cpi	r24, 0x08	; 8
    3376:	08 f0       	brcs	.+2      	; 0x337a <MDIO_stderrTogglePinValue+0x1c>
    3378:	7c c0       	rjmp	.+248    	; 0x3472 <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	3d 83       	std	Y+5, r19	; 0x05
    3382:	2c 83       	std	Y+4, r18	; 0x04
    3384:	8c 81       	ldd	r24, Y+4	; 0x04
    3386:	9d 81       	ldd	r25, Y+5	; 0x05
    3388:	82 30       	cpi	r24, 0x02	; 2
    338a:	91 05       	cpc	r25, r1
    338c:	69 f1       	breq	.+90     	; 0x33e8 <MDIO_stderrTogglePinValue+0x8a>
    338e:	2c 81       	ldd	r18, Y+4	; 0x04
    3390:	3d 81       	ldd	r19, Y+5	; 0x05
    3392:	23 30       	cpi	r18, 0x03	; 3
    3394:	31 05       	cpc	r19, r1
    3396:	34 f4       	brge	.+12     	; 0x33a4 <MDIO_stderrTogglePinValue+0x46>
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
    339a:	9d 81       	ldd	r25, Y+5	; 0x05
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	91 05       	cpc	r25, r1
    33a0:	69 f0       	breq	.+26     	; 0x33bc <MDIO_stderrTogglePinValue+0x5e>
    33a2:	64 c0       	rjmp	.+200    	; 0x346c <MDIO_stderrTogglePinValue+0x10e>
    33a4:	2c 81       	ldd	r18, Y+4	; 0x04
    33a6:	3d 81       	ldd	r19, Y+5	; 0x05
    33a8:	23 30       	cpi	r18, 0x03	; 3
    33aa:	31 05       	cpc	r19, r1
    33ac:	99 f1       	breq	.+102    	; 0x3414 <MDIO_stderrTogglePinValue+0xb6>
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	9d 81       	ldd	r25, Y+5	; 0x05
    33b2:	84 30       	cpi	r24, 0x04	; 4
    33b4:	91 05       	cpc	r25, r1
    33b6:	09 f4       	brne	.+2      	; 0x33ba <MDIO_stderrTogglePinValue+0x5c>
    33b8:	43 c0       	rjmp	.+134    	; 0x3440 <MDIO_stderrTogglePinValue+0xe2>
    33ba:	58 c0       	rjmp	.+176    	; 0x346c <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    33bc:	a9 e3       	ldi	r26, 0x39	; 57
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	e9 e3       	ldi	r30, 0x39	; 57
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	48 2f       	mov	r20, r24
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	28 2f       	mov	r18, r24
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	02 2e       	mov	r0, r18
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <MDIO_stderrTogglePinValue+0x7c>
    33d6:	88 0f       	add	r24, r24
    33d8:	99 1f       	adc	r25, r25
    33da:	0a 94       	dec	r0
    33dc:	e2 f7       	brpl	.-8      	; 0x33d6 <MDIO_stderrTogglePinValue+0x78>
    33de:	84 27       	eor	r24, r20
    33e0:	12 96       	adiw	r26, 0x02	; 2
    33e2:	8c 93       	st	X, r24
    33e4:	12 97       	sbiw	r26, 0x02	; 2
    33e6:	47 c0       	rjmp	.+142    	; 0x3476 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    33e8:	a6 e3       	ldi	r26, 0x36	; 54
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e6 e3       	ldi	r30, 0x36	; 54
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	82 81       	ldd	r24, Z+2	; 0x02
    33f2:	48 2f       	mov	r20, r24
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	02 2e       	mov	r0, r18
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <MDIO_stderrTogglePinValue+0xa8>
    3402:	88 0f       	add	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	0a 94       	dec	r0
    3408:	e2 f7       	brpl	.-8      	; 0x3402 <MDIO_stderrTogglePinValue+0xa4>
    340a:	84 27       	eor	r24, r20
    340c:	12 96       	adiw	r26, 0x02	; 2
    340e:	8c 93       	st	X, r24
    3410:	12 97       	sbiw	r26, 0x02	; 2
    3412:	31 c0       	rjmp	.+98     	; 0x3476 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    3414:	a3 e3       	ldi	r26, 0x33	; 51
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e3 e3       	ldi	r30, 0x33	; 51
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	82 81       	ldd	r24, Z+2	; 0x02
    341e:	48 2f       	mov	r20, r24
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	28 2f       	mov	r18, r24
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	02 2e       	mov	r0, r18
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <MDIO_stderrTogglePinValue+0xd4>
    342e:	88 0f       	add	r24, r24
    3430:	99 1f       	adc	r25, r25
    3432:	0a 94       	dec	r0
    3434:	e2 f7       	brpl	.-8      	; 0x342e <MDIO_stderrTogglePinValue+0xd0>
    3436:	84 27       	eor	r24, r20
    3438:	12 96       	adiw	r26, 0x02	; 2
    343a:	8c 93       	st	X, r24
    343c:	12 97       	sbiw	r26, 0x02	; 2
    343e:	1b c0       	rjmp	.+54     	; 0x3476 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    3440:	a0 e3       	ldi	r26, 0x30	; 48
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	e0 e3       	ldi	r30, 0x30	; 48
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	48 2f       	mov	r20, r24
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	28 2f       	mov	r18, r24
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	02 2e       	mov	r0, r18
    3458:	02 c0       	rjmp	.+4      	; 0x345e <MDIO_stderrTogglePinValue+0x100>
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	0a 94       	dec	r0
    3460:	e2 f7       	brpl	.-8      	; 0x345a <MDIO_stderrTogglePinValue+0xfc>
    3462:	84 27       	eor	r24, r20
    3464:	12 96       	adiw	r26, 0x02	; 2
    3466:	8c 93       	st	X, r24
    3468:	12 97       	sbiw	r26, 0x02	; 2
    346a:	05 c0       	rjmp	.+10     	; 0x3476 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	89 83       	std	Y+1, r24	; 0x01
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    3472:	82 e0       	ldi	r24, 0x02	; 2
    3474:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    3476:	89 81       	ldd	r24, Y+1	; 0x01
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <main>:
#define MISO	6
#define SCK		7


int main(void)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	61 97       	sbiw	r28, 0x11	; 17
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Data = 0;
    349c:	1f 86       	std	Y+15, r1	; 0x0f
	MDIO_stderrSetPinDirection(MDIO_PORTD, 0 , MDIO_OUTPUT);
    349e:	84 e0       	ldi	r24, 0x04	; 4
    34a0:	60 e0       	ldi	r22, 0x00	; 0
    34a2:	41 e0       	ldi	r20, 0x01	; 1
    34a4:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTD, 1 , MDIO_OUTPUT);
    34a8:	84 e0       	ldi	r24, 0x04	; 4
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	41 e0       	ldi	r20, 0x01	; 1
    34ae:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>
	MDIO_stderrSetPinDirection(MDIO_PORTD, 2 , MDIO_OUTPUT);
    34b2:	84 e0       	ldi	r24, 0x04	; 4
    34b4:	62 e0       	ldi	r22, 0x02	; 2
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>

	MDIO_stderrSetPinDirection(MDIO_PORTB, MISO, MDIO_OUTPUT);
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	66 e0       	ldi	r22, 0x06	; 6
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <MDIO_stderrSetPinDirection>

	CLEAR_BIT(SPCR , DORD);
    34c6:	ad e2       	ldi	r26, 0x2D	; 45
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	ed e2       	ldi	r30, 0x2D	; 45
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	8f 7d       	andi	r24, 0xDF	; 223
    34d2:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, MSTR);
    34d4:	ad e2       	ldi	r26, 0x2D	; 45
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	ed e2       	ldi	r30, 0x2D	; 45
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	8f 7e       	andi	r24, 0xEF	; 239
    34e0:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, CPOL);
    34e2:	ad e2       	ldi	r26, 0x2D	; 45
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	ed e2       	ldi	r30, 0x2D	; 45
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	87 7f       	andi	r24, 0xF7	; 247
    34ee:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR, CPHA);
    34f0:	ad e2       	ldi	r26, 0x2D	; 45
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	ed e2       	ldi	r30, 0x2D	; 45
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	8b 7f       	andi	r24, 0xFB	; 251
    34fc:	8c 93       	st	X, r24
	SET_BIT(SPCR, SPE); /* Enable */
    34fe:	ad e2       	ldi	r26, 0x2D	; 45
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	ed e2       	ldi	r30, 0x2D	; 45
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	80 64       	ori	r24, 0x40	; 64
    350a:	8c 93       	st	X, r24

	HLCD_voidInit();
    350c:	0e 94 47 06 	call	0xc8e	; 0xc8e <HLCD_voidInit>

	HLCD_voidSendString("*_*");
    3510:	80 e6       	ldi	r24, 0x60	; 96
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 cc 13 	call	0x2798	; 0x2798 <HLCD_voidSendString>
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	aa ef       	ldi	r26, 0xFA	; 250
    351e:	b3 e4       	ldi	r27, 0x43	; 67
    3520:	8b 87       	std	Y+11, r24	; 0x0b
    3522:	9c 87       	std	Y+12, r25	; 0x0c
    3524:	ad 87       	std	Y+13, r26	; 0x0d
    3526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3528:	6b 85       	ldd	r22, Y+11	; 0x0b
    352a:	7c 85       	ldd	r23, Y+12	; 0x0c
    352c:	8d 85       	ldd	r24, Y+13	; 0x0d
    352e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	4a ef       	ldi	r20, 0xFA	; 250
    3536:	54 e4       	ldi	r21, 0x44	; 68
    3538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	8f 83       	std	Y+7, r24	; 0x07
    3542:	98 87       	std	Y+8, r25	; 0x08
    3544:	a9 87       	std	Y+9, r26	; 0x09
    3546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3548:	6f 81       	ldd	r22, Y+7	; 0x07
    354a:	78 85       	ldd	r23, Y+8	; 0x08
    354c:	89 85       	ldd	r24, Y+9	; 0x09
    354e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e8       	ldi	r20, 0x80	; 128
    3556:	5f e3       	ldi	r21, 0x3F	; 63
    3558:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    355c:	88 23       	and	r24, r24
    355e:	2c f4       	brge	.+10     	; 0x356a <main+0xe2>
		__ticks = 1;
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	9e 83       	std	Y+6, r25	; 0x06
    3566:	8d 83       	std	Y+5, r24	; 0x05
    3568:	3f c0       	rjmp	.+126    	; 0x35e8 <main+0x160>
	else if (__tmp > 65535)
    356a:	6f 81       	ldd	r22, Y+7	; 0x07
    356c:	78 85       	ldd	r23, Y+8	; 0x08
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	4c f5       	brge	.+82     	; 0x35d4 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	40 e2       	ldi	r20, 0x20	; 32
    3590:	51 e4       	ldi	r21, 0x41	; 65
    3592:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	bc 01       	movw	r22, r24
    359c:	cd 01       	movw	r24, r26
    359e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9e 83       	std	Y+6, r25	; 0x06
    35a8:	8d 83       	std	Y+5, r24	; 0x05
    35aa:	0f c0       	rjmp	.+30     	; 0x35ca <main+0x142>
    35ac:	88 ec       	ldi	r24, 0xC8	; 200
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	9c 83       	std	Y+4, r25	; 0x04
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	9c 81       	ldd	r25, Y+4	; 0x04
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	f1 f7       	brne	.-4      	; 0x35b8 <main+0x130>
    35bc:	9c 83       	std	Y+4, r25	; 0x04
    35be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	9e 83       	std	Y+6, r25	; 0x06
    35c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	69 f7       	brne	.-38     	; 0x35ac <main+0x124>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d4:	6f 81       	ldd	r22, Y+7	; 0x07
    35d6:	78 85       	ldd	r23, Y+8	; 0x08
    35d8:	89 85       	ldd	r24, Y+9	; 0x09
    35da:	9a 85       	ldd	r25, Y+10	; 0x0a
    35dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ea:	9e 81       	ldd	r25, Y+6	; 0x06
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	9a 81       	ldd	r25, Y+2	; 0x02
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <main+0x16c>
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	HLCD_voidClear();
    35fc:	0e 94 8c 14 	call	0x2918	; 0x2918 <HLCD_voidClear>
	while(1)
	{
		while(!GET_BIT(SPSR, SPIF));
    3600:	ee e2       	ldi	r30, 0x2E	; 46
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	88 23       	and	r24, r24
    3608:	dc f7       	brge	.-10     	; 0x3600 <main+0x178>
		L_u8Data=SPDR;
    360a:	ef e2       	ldi	r30, 0x2F	; 47
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	8f 87       	std	Y+15, r24	; 0x0f
		switch(L_u8Data)
    3612:	8f 85       	ldd	r24, Y+15	; 0x0f
    3614:	28 2f       	mov	r18, r24
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	39 8b       	std	Y+17, r19	; 0x11
    361a:	28 8b       	std	Y+16, r18	; 0x10
    361c:	88 89       	ldd	r24, Y+16	; 0x10
    361e:	99 89       	ldd	r25, Y+17	; 0x11
    3620:	82 33       	cpi	r24, 0x32	; 50
    3622:	91 05       	cpc	r25, r1
    3624:	79 f0       	breq	.+30     	; 0x3644 <main+0x1bc>
    3626:	28 89       	ldd	r18, Y+16	; 0x10
    3628:	39 89       	ldd	r19, Y+17	; 0x11
    362a:	23 33       	cpi	r18, 0x33	; 51
    362c:	31 05       	cpc	r19, r1
    362e:	79 f0       	breq	.+30     	; 0x364e <main+0x1c6>
    3630:	88 89       	ldd	r24, Y+16	; 0x10
    3632:	99 89       	ldd	r25, Y+17	; 0x11
    3634:	81 33       	cpi	r24, 0x31	; 49
    3636:	91 05       	cpc	r25, r1
    3638:	71 f4       	brne	.+28     	; 0x3656 <main+0x1ce>
		{
		case '1': MDIO_stderrTogglePinValue(MDIO_PORTD,0);  break;
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	0e 94 af 19 	call	0x335e	; 0x335e <MDIO_stderrTogglePinValue>
    3642:	09 c0       	rjmp	.+18     	; 0x3656 <main+0x1ce>
		case '2': MDIO_stderrTogglePinValue(MDIO_PORTD,1);  break;
    3644:	84 e0       	ldi	r24, 0x04	; 4
    3646:	61 e0       	ldi	r22, 0x01	; 1
    3648:	0e 94 af 19 	call	0x335e	; 0x335e <MDIO_stderrTogglePinValue>
    364c:	04 c0       	rjmp	.+8      	; 0x3656 <main+0x1ce>
		case '3': MDIO_stderrTogglePinValue(MDIO_PORTD,2);  break;
    364e:	84 e0       	ldi	r24, 0x04	; 4
    3650:	62 e0       	ldi	r22, 0x02	; 2
    3652:	0e 94 af 19 	call	0x335e	; 0x335e <MDIO_stderrTogglePinValue>
		default: break;
		}
		HLCD_voidSetCur(0,0);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <HLCD_voidSetCur>
		HLCD_voidSendString("Received Data:");
    365e:	84 e6       	ldi	r24, 0x64	; 100
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 94 cc 13 	call	0x2798	; 0x2798 <HLCD_voidSendString>
		HLCD_voidSendChar(L_u8Data);
    3666:	8f 85       	ldd	r24, Y+15	; 0x0f
    3668:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <HLCD_voidSendChar>
    366c:	c9 cf       	rjmp	.-110    	; 0x3600 <main+0x178>

0000366e <__udivmodhi4>:
    366e:	aa 1b       	sub	r26, r26
    3670:	bb 1b       	sub	r27, r27
    3672:	51 e1       	ldi	r21, 0x11	; 17
    3674:	07 c0       	rjmp	.+14     	; 0x3684 <__udivmodhi4_ep>

00003676 <__udivmodhi4_loop>:
    3676:	aa 1f       	adc	r26, r26
    3678:	bb 1f       	adc	r27, r27
    367a:	a6 17       	cp	r26, r22
    367c:	b7 07       	cpc	r27, r23
    367e:	10 f0       	brcs	.+4      	; 0x3684 <__udivmodhi4_ep>
    3680:	a6 1b       	sub	r26, r22
    3682:	b7 0b       	sbc	r27, r23

00003684 <__udivmodhi4_ep>:
    3684:	88 1f       	adc	r24, r24
    3686:	99 1f       	adc	r25, r25
    3688:	5a 95       	dec	r21
    368a:	a9 f7       	brne	.-22     	; 0x3676 <__udivmodhi4_loop>
    368c:	80 95       	com	r24
    368e:	90 95       	com	r25
    3690:	bc 01       	movw	r22, r24
    3692:	cd 01       	movw	r24, r26
    3694:	08 95       	ret

00003696 <__prologue_saves__>:
    3696:	2f 92       	push	r2
    3698:	3f 92       	push	r3
    369a:	4f 92       	push	r4
    369c:	5f 92       	push	r5
    369e:	6f 92       	push	r6
    36a0:	7f 92       	push	r7
    36a2:	8f 92       	push	r8
    36a4:	9f 92       	push	r9
    36a6:	af 92       	push	r10
    36a8:	bf 92       	push	r11
    36aa:	cf 92       	push	r12
    36ac:	df 92       	push	r13
    36ae:	ef 92       	push	r14
    36b0:	ff 92       	push	r15
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	cf 93       	push	r28
    36b8:	df 93       	push	r29
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	ca 1b       	sub	r28, r26
    36c0:	db 0b       	sbc	r29, r27
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	09 94       	ijmp

000036ce <__epilogue_restores__>:
    36ce:	2a 88       	ldd	r2, Y+18	; 0x12
    36d0:	39 88       	ldd	r3, Y+17	; 0x11
    36d2:	48 88       	ldd	r4, Y+16	; 0x10
    36d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36da:	8c 84       	ldd	r8, Y+12	; 0x0c
    36dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36de:	aa 84       	ldd	r10, Y+10	; 0x0a
    36e0:	b9 84       	ldd	r11, Y+9	; 0x09
    36e2:	c8 84       	ldd	r12, Y+8	; 0x08
    36e4:	df 80       	ldd	r13, Y+7	; 0x07
    36e6:	ee 80       	ldd	r14, Y+6	; 0x06
    36e8:	fd 80       	ldd	r15, Y+5	; 0x05
    36ea:	0c 81       	ldd	r16, Y+4	; 0x04
    36ec:	1b 81       	ldd	r17, Y+3	; 0x03
    36ee:	aa 81       	ldd	r26, Y+2	; 0x02
    36f0:	b9 81       	ldd	r27, Y+1	; 0x01
    36f2:	ce 0f       	add	r28, r30
    36f4:	d1 1d       	adc	r29, r1
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	de bf       	out	0x3e, r29	; 62
    36fc:	0f be       	out	0x3f, r0	; 63
    36fe:	cd bf       	out	0x3d, r28	; 61
    3700:	ed 01       	movw	r28, r26
    3702:	08 95       	ret

00003704 <_exit>:
    3704:	f8 94       	cli

00003706 <__stop_program>:
    3706:	ff cf       	rjmp	.-2      	; 0x3706 <__stop_program>
