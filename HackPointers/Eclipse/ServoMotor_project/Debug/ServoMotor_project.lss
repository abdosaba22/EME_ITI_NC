
ServoMotor_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002176  0000220a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800168  00800168  00002312  2**0
                  ALLOC
  3 .stab         0000165c  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000998  00000000  00000000  00003970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  0000461e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000652b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000075fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  000087b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00008a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000938c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_10>
      2c:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e7       	ldi	r30, 0x76	; 118
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 07 10 	call	0x200e	; 0x200e <main>
      8a:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 10 	jmp	0x213c	; 0x213c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <MADC_stderrInit>:
/* SWC Includes */
#include "MADC_private.h"
#include "MADC_interface.h"

STD_error_t MADC_stderrInit(u8 ARG_u8VoltageReference, u8 ARG_u8Prescaler, u8 ARG_u8ADCAdjust)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <MADC_stderrInit+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <MADC_stderrInit+0x8>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	8a 83       	std	Y+2, r24	; 0x02
     d7c:	6b 83       	std	Y+3, r22	; 0x03
     d7e:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError =E_OK;
     d80:	19 82       	std	Y+1, r1	; 0x01
	if(  (ARG_u8VoltageReference<=1 || 3==ARG_u8VoltageReference)   &&  ARG_u8Prescaler<=7 &&ARG_u8ADCAdjust<=MADC_ADJUST_LEFT )
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	18 f0       	brcs	.+6      	; 0xd8e <MADC_stderrInit+0x20>
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	61 f5       	brne	.+88     	; 0xde6 <MADC_stderrInit+0x78>
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	88 30       	cpi	r24, 0x08	; 8
     d92:	48 f5       	brcc	.+82     	; 0xde6 <MADC_stderrInit+0x78>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	30 f5       	brcc	.+76     	; 0xde6 <MADC_stderrInit+0x78>
	{
		/* mask Then OR with the needed val */
		ADMUX = ( ADMUX & 0x1F ) | (ARG_u8VoltageReference<<REFS0) | (ARG_u8ADCAdjust<<ADLAR) ; /* set voltage Ref, ADLAR=1 */
     d9a:	a7 e2       	ldi	r26, 0x27	; 39
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e2       	ldi	r30, 0x27	; 39
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	28 2f       	mov	r18, r24
     da6:	2f 71       	andi	r18, 0x1F	; 31
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	00 24       	eor	r0, r0
     db0:	96 95       	lsr	r25
     db2:	87 95       	ror	r24
     db4:	07 94       	ror	r0
     db6:	96 95       	lsr	r25
     db8:	87 95       	ror	r24
     dba:	07 94       	ror	r0
     dbc:	98 2f       	mov	r25, r24
     dbe:	80 2d       	mov	r24, r0
     dc0:	28 2b       	or	r18, r24
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	82 95       	swap	r24
     dce:	92 95       	swap	r25
     dd0:	90 7f       	andi	r25, 0xF0	; 240
     dd2:	98 27       	eor	r25, r24
     dd4:	80 7f       	andi	r24, 0xF0	; 240
     dd6:	98 27       	eor	r25, r24
     dd8:	82 2b       	or	r24, r18
     dda:	8c 93       	st	X, r24
		ADCSRA = (ADLAR & 0xF8) | (ARG_u8Prescaler<<ADPS0) ; /* note ADPS0 is 0 not important, set prescaler */
     ddc:	e6 e2       	ldi	r30, 0x26	; 38
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	80 83       	st	Z, r24
     de4:	02 c0       	rjmp	.+4      	; 0xdea <MADC_stderrInit+0x7c>
	}
	else {
		L_stderrError =E_NOK;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <MADC_stderrReadADC>:

STD_error_t MADC_stderrReadADC(u16* ARG_u16pADCReading, u8 ARG_u8Channel)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <MADC_stderrReadADC+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <MADC_stderrReadADC+0x8>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9b 83       	std	Y+3, r25	; 0x03
     e08:	8a 83       	std	Y+2, r24	; 0x02
     e0a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
     e0c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER != ARG_u16pADCReading)
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	9b 81       	ldd	r25, Y+3	; 0x03
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	b9 f0       	breq	.+46     	; 0xe44 <MADC_stderrReadADC+0x4a>
	{	
		MADC_voidEnableADC(); /* enable ADC to convert */
     e16:	0e 94 50 07 	call	0xea0	; 0xea0 <MADC_voidEnableADC>
		L_stderrError = MADC_stderrStartConversion(ARG_u8Channel);
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	0e 94 2c 07 	call	0xe58	; 0xe58 <MADC_stderrStartConversion>
     e20:	89 83       	std	Y+1, r24	; 0x01
		
		if(E_OK==L_stderrError)
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 23       	and	r24, r24
     e26:	81 f4       	brne	.+32     	; 0xe48 <MADC_stderrReadADC+0x4e>
		{
			MADC_voidPollFlag(); /* polling wait flag ADIF be 1 */
     e28:	0e 94 6c 07 	call	0xed8	; 0xed8 <MADC_voidPollFlag>
			*ARG_u16pADCReading	= ADCH ; /* in this case we read the 8-MSB that mean we use 8 bit Resolution */
     e2c:	e5 e2       	ldi	r30, 0x25	; 37
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	ea 81       	ldd	r30, Y+2	; 0x02
     e38:	fb 81       	ldd	r31, Y+3	; 0x03
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
			MADC_voidClearFlag(); /* CLear flag by SW */	
     e3e:	0e 94 7e 07 	call	0xefc	; 0xefc <MADC_voidClearFlag>
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <MADC_stderrReadADC+0x4e>
		else{
			/*do nothing*/
		}
	}
	else{
		L_stderrError = E_NULL_POINTER;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return L_stderrError;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
}		
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <MADC_stderrStartConversion>:
	
STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{	
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <MADC_stderrStartConversion+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrError = E_OK;
     e64:	19 82       	std	Y+1, r1	; 0x01
    
    if (ARG_u8Channel <= 7) {
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	88 30       	cpi	r24, 0x08	; 8
     e6a:	90 f4       	brcc	.+36     	; 0xe90 <MADC_stderrStartConversion+0x38>
        /* Select the channel using the ADMUX register */
        ADMUX = (ADMUX & 0xE0) | (ARG_u8Channel<<MUX0); /* note MUX0 is 0 not important*/
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	98 2f       	mov	r25, r24
     e78:	90 7e       	andi	r25, 0xE0	; 224
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	89 2b       	or	r24, r25
     e7e:	8c 93       	st	X, r24
		/* Start the conversion by setting the ADSC bit */
		SET_BIT(ADCSRA,ADSC);	//ADCSRA |= (1 << ADSC);
     e80:	a6 e2       	ldi	r26, 0x26	; 38
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e2       	ldi	r30, 0x26	; 38
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	80 64       	ori	r24, 0x40	; 64
     e8c:	8c 93       	st	X, r24
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <MADC_stderrStartConversion+0x3c>
    } else {
        L_stderrError = E_NOK;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
    }
    return L_stderrError;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <MADC_voidEnableADC>:

void MADC_voidEnableADC(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24
}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <MADC_voidDisableADC>:

void MADC_voidDisableADC(void)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 77       	andi	r24, 0x7F	; 127
     ed0:	8c 93       	st	X, r24
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <MADC_voidPollFlag>:

void MADC_voidPollFlag(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF)); /* POLL , stuck while flag is low */
     ee0:	e6 e2       	ldi	r30, 0x26	; 38
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	82 95       	swap	r24
     ee8:	8f 70       	andi	r24, 0x0F	; 15
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	90 70       	andi	r25, 0x00	; 0
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	a9 f3       	breq	.-22     	; 0xee0 <MADC_voidPollFlag+0x8>
}
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <MADC_voidClearFlag>:

void MADC_voidClearFlag(void)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF); /* Clear flag by set it */
     f04:	a6 e2       	ldi	r26, 0x26	; 38
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e6 e2       	ldi	r30, 0x26	; 38
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	8c 93       	st	X, r24
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <MDIO_stderrSetPortDirection>:
/* SWC Includes */
#include "MDIO_private.h"
#include "MDIO_interface.h"

STD_error_t MDIO_stderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <MDIO_stderrSetPortDirection+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <MDIO_stderrSetPortDirection+0x8>
     f20:	0f 92       	push	r0
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	8a 83       	std	Y+2, r24	; 0x02
     f28:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 83       	std	Y+5, r19	; 0x05
     f34:	2c 83       	std	Y+4, r18	; 0x04
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	91 05       	cpc	r25, r1
     f3e:	d9 f0       	breq	.+54     	; 0xf76 <MDIO_stderrSetPortDirection+0x5e>
     f40:	2c 81       	ldd	r18, Y+4	; 0x04
     f42:	3d 81       	ldd	r19, Y+5	; 0x05
     f44:	23 30       	cpi	r18, 0x03	; 3
     f46:	31 05       	cpc	r19, r1
     f48:	34 f4       	brge	.+12     	; 0xf56 <MDIO_stderrSetPortDirection+0x3e>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	61 f0       	breq	.+24     	; 0xf6c <MDIO_stderrSetPortDirection+0x54>
     f54:	1f c0       	rjmp	.+62     	; 0xf94 <MDIO_stderrSetPortDirection+0x7c>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	23 30       	cpi	r18, 0x03	; 3
     f5c:	31 05       	cpc	r19, r1
     f5e:	81 f0       	breq	.+32     	; 0xf80 <MDIO_stderrSetPortDirection+0x68>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	91 05       	cpc	r25, r1
     f68:	81 f0       	breq	.+32     	; 0xf8a <MDIO_stderrSetPortDirection+0x72>
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <MDIO_stderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA: GPIOA -> DDR = ARG_u8Direction; break;
     f6c:	e9 e3       	ldi	r30, 0x39	; 57
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 83       	std	Z+1, r24	; 0x01
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTB: GPIOB -> DDR = ARG_u8Direction; break;
     f76:	e6 e3       	ldi	r30, 0x36	; 54
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	81 83       	std	Z+1, r24	; 0x01
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTC: GPIOC -> DDR = ARG_u8Direction; break;
     f80:	e3 e3       	ldi	r30, 0x33	; 51
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 83       	std	Z+1, r24	; 0x01
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <MDIO_stderrSetPortDirection+0x80>
		case MDIO_PORTD: GPIOD -> DDR = ARG_u8Direction; break;
     f8a:	e0 e3       	ldi	r30, 0x30	; 48
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 83       	std	Z+1, r24	; 0x01
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <MDIO_stderrSetPortDirection+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
     f98:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <MDIO_stderrSetPortValue>:

STD_error_t MDIO_stderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <MDIO_stderrSetPortValue+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <MDIO_stderrSetPortValue+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError = E_OK;
     fbc:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <MDIO_stderrSetPortValue+0x5e>
     fd2:	2c 81       	ldd	r18, Y+4	; 0x04
     fd4:	3d 81       	ldd	r19, Y+5	; 0x05
     fd6:	23 30       	cpi	r18, 0x03	; 3
     fd8:	31 05       	cpc	r19, r1
     fda:	34 f4       	brge	.+12     	; 0xfe8 <MDIO_stderrSetPortValue+0x3e>
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	9d 81       	ldd	r25, Y+5	; 0x05
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	61 f0       	breq	.+24     	; 0xffe <MDIO_stderrSetPortValue+0x54>
     fe6:	1f c0       	rjmp	.+62     	; 0x1026 <MDIO_stderrSetPortValue+0x7c>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	23 30       	cpi	r18, 0x03	; 3
     fee:	31 05       	cpc	r19, r1
     ff0:	81 f0       	breq	.+32     	; 0x1012 <MDIO_stderrSetPortValue+0x68>
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	91 05       	cpc	r25, r1
     ffa:	81 f0       	breq	.+32     	; 0x101c <MDIO_stderrSetPortValue+0x72>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <MDIO_stderrSetPortValue+0x7c>
	{
		case MDIO_PORTA: GPIOA -> PORT = ARG_u8Value; break;
     ffe:	e9 e3       	ldi	r30, 0x39	; 57
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	82 83       	std	Z+2, r24	; 0x02
    1006:	11 c0       	rjmp	.+34     	; 0x102a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTB: GPIOB -> PORT = ARG_u8Value; break;
    1008:	e6 e3       	ldi	r30, 0x36	; 54
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	82 83       	std	Z+2, r24	; 0x02
    1010:	0c c0       	rjmp	.+24     	; 0x102a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTC: GPIOC -> PORT = ARG_u8Value; break;
    1012:	e3 e3       	ldi	r30, 0x33	; 51
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	07 c0       	rjmp	.+14     	; 0x102a <MDIO_stderrSetPortValue+0x80>
		case MDIO_PORTD: GPIOD -> PORT = ARG_u8Value; break;
    101c:	e0 e3       	ldi	r30, 0x30	; 48
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	82 83       	std	Z+2, r24	; 0x02
    1024:	02 c0       	rjmp	.+4      	; 0x102a <MDIO_stderrSetPortValue+0x80>
		default: L_stderrError = E_NOK; break; /* Report an Error */
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <MDIO_stderrGetPortValue>:

STD_error_t	MDIO_stderrGetPortValue(u8* ARG_u8pValue, u8 ARG_u8Port)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <MDIO_stderrGetPortValue+0x6>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <MDIO_stderrGetPortValue+0x8>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <MDIO_stderrGetPortValue+0xa>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
    104e:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrError = E_OK;
    1050:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	91 05       	cpc	r25, r1
    1064:	e9 f0       	breq	.+58     	; 0x10a0 <MDIO_stderrGetPortValue+0x64>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	23 30       	cpi	r18, 0x03	; 3
    106c:	31 05       	cpc	r19, r1
    106e:	34 f4       	brge	.+12     	; 0x107c <MDIO_stderrGetPortValue+0x40>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	61 f0       	breq	.+24     	; 0x1092 <MDIO_stderrGetPortValue+0x56>
    107a:	27 c0       	rjmp	.+78     	; 0x10ca <MDIO_stderrGetPortValue+0x8e>
    107c:	2d 81       	ldd	r18, Y+5	; 0x05
    107e:	3e 81       	ldd	r19, Y+6	; 0x06
    1080:	23 30       	cpi	r18, 0x03	; 3
    1082:	31 05       	cpc	r19, r1
    1084:	a1 f0       	breq	.+40     	; 0x10ae <MDIO_stderrGetPortValue+0x72>
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	91 05       	cpc	r25, r1
    108e:	b1 f0       	breq	.+44     	; 0x10bc <MDIO_stderrGetPortValue+0x80>
    1090:	1c c0       	rjmp	.+56     	; 0x10ca <MDIO_stderrGetPortValue+0x8e>
	{
		case MDIO_PORTA: *ARG_u8pValue = GPIOA -> PIN; break;
    1092:	e9 e3       	ldi	r30, 0x39	; 57
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	ea 81       	ldd	r30, Y+2	; 0x02
    109a:	fb 81       	ldd	r31, Y+3	; 0x03
    109c:	80 83       	st	Z, r24
    109e:	17 c0       	rjmp	.+46     	; 0x10ce <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTB: *ARG_u8pValue = GPIOB -> PIN; break;
    10a0:	e6 e3       	ldi	r30, 0x36	; 54
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	ea 81       	ldd	r30, Y+2	; 0x02
    10a8:	fb 81       	ldd	r31, Y+3	; 0x03
    10aa:	80 83       	st	Z, r24
    10ac:	10 c0       	rjmp	.+32     	; 0x10ce <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTC: *ARG_u8pValue = GPIOC -> PIN; break;
    10ae:	e3 e3       	ldi	r30, 0x33	; 51
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	ea 81       	ldd	r30, Y+2	; 0x02
    10b6:	fb 81       	ldd	r31, Y+3	; 0x03
    10b8:	80 83       	st	Z, r24
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <MDIO_stderrGetPortValue+0x92>
        case MDIO_PORTD: *ARG_u8pValue = GPIOD -> PIN; break;
    10bc:	e0 e3       	ldi	r30, 0x30	; 48
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	ea 81       	ldd	r30, Y+2	; 0x02
    10c4:	fb 81       	ldd	r31, Y+3	; 0x03
    10c6:	80 83       	st	Z, r24
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <MDIO_stderrGetPortValue+0x92>
        default: L_stderrError = E_NOK; break; /* Report an Error */
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d0:	26 96       	adiw	r28, 0x06	; 6
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <MDIO_stderrSetPinDirection>:

STD_error_t MDIO_stderrSetPinDirection(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	2a 97       	sbiw	r28, 0x0a	; 10
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	8a 83       	std	Y+2, r24	; 0x02
    10f8:	6b 83       	std	Y+3, r22	; 0x03
    10fa:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    10fc:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 30       	cpi	r24, 0x08	; 8
    1102:	08 f0       	brcs	.+2      	; 0x1106 <MDIO_stderrSetPinDirection+0x24>
    1104:	d9 c1       	rjmp	.+946    	; 0x14b8 <MDIO_stderrSetPinDirection+0x3d6>
	{
		if(MDIO_OUTPUT == ARG_u8Direction)
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f0       	breq	.+2      	; 0x110e <MDIO_stderrSetPinDirection+0x2c>
    110c:	7c c0       	rjmp	.+248    	; 0x1206 <MDIO_stderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	3a 87       	std	Y+10, r19	; 0x0a
    1116:	29 87       	std	Y+9, r18	; 0x09
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	91 05       	cpc	r25, r1
    1120:	69 f1       	breq	.+90     	; 0x117c <MDIO_stderrSetPinDirection+0x9a>
    1122:	29 85       	ldd	r18, Y+9	; 0x09
    1124:	3a 85       	ldd	r19, Y+10	; 0x0a
    1126:	23 30       	cpi	r18, 0x03	; 3
    1128:	31 05       	cpc	r19, r1
    112a:	34 f4       	brge	.+12     	; 0x1138 <MDIO_stderrSetPinDirection+0x56>
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	69 f0       	breq	.+26     	; 0x1150 <MDIO_stderrSetPinDirection+0x6e>
    1136:	64 c0       	rjmp	.+200    	; 0x1200 <MDIO_stderrSetPinDirection+0x11e>
    1138:	29 85       	ldd	r18, Y+9	; 0x09
    113a:	3a 85       	ldd	r19, Y+10	; 0x0a
    113c:	23 30       	cpi	r18, 0x03	; 3
    113e:	31 05       	cpc	r19, r1
    1140:	99 f1       	breq	.+102    	; 0x11a8 <MDIO_stderrSetPinDirection+0xc6>
    1142:	89 85       	ldd	r24, Y+9	; 0x09
    1144:	9a 85       	ldd	r25, Y+10	; 0x0a
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	91 05       	cpc	r25, r1
    114a:	09 f4       	brne	.+2      	; 0x114e <MDIO_stderrSetPinDirection+0x6c>
    114c:	43 c0       	rjmp	.+134    	; 0x11d4 <MDIO_stderrSetPinDirection+0xf2>
    114e:	58 c0       	rjmp	.+176    	; 0x1200 <MDIO_stderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    1150:	a9 e3       	ldi	r26, 0x39	; 57
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e9 e3       	ldi	r30, 0x39	; 57
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	81 81       	ldd	r24, Z+1	; 0x01
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <MDIO_stderrSetPinDirection+0x8c>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <MDIO_stderrSetPinDirection+0x88>
    1172:	84 2b       	or	r24, r20
    1174:	11 96       	adiw	r26, 0x01	; 1
    1176:	8c 93       	st	X, r24
    1178:	11 97       	sbiw	r26, 0x01	; 1
    117a:	a0 c1       	rjmp	.+832    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: SET_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    117c:	a6 e3       	ldi	r26, 0x36	; 54
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e6 e3       	ldi	r30, 0x36	; 54
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <MDIO_stderrSetPinDirection+0xb8>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <MDIO_stderrSetPinDirection+0xb4>
    119e:	84 2b       	or	r24, r20
    11a0:	11 96       	adiw	r26, 0x01	; 1
    11a2:	8c 93       	st	X, r24
    11a4:	11 97       	sbiw	r26, 0x01	; 1
    11a6:	8a c1       	rjmp	.+788    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: SET_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    11a8:	a3 e3       	ldi	r26, 0x33	; 51
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e3 e3       	ldi	r30, 0x33	; 51
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <MDIO_stderrSetPinDirection+0xe4>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <MDIO_stderrSetPinDirection+0xe0>
    11ca:	84 2b       	or	r24, r20
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	8c 93       	st	X, r24
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	74 c1       	rjmp	.+744    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: SET_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    11d4:	a0 e3       	ldi	r26, 0x30	; 48
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e0 e3       	ldi	r30, 0x30	; 48
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	48 2f       	mov	r20, r24
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <MDIO_stderrSetPinDirection+0x110>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <MDIO_stderrSetPinDirection+0x10c>
    11f6:	84 2b       	or	r24, r20
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	8c 93       	st	X, r24
    11fc:	11 97       	sbiw	r26, 0x01	; 1
    11fe:	5e c1       	rjmp	.+700    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	5b c1       	rjmp	.+694    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT == ARG_u8Direction)
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	09 f0       	breq	.+2      	; 0x120e <MDIO_stderrSetPinDirection+0x12c>
    120c:	80 c0       	rjmp	.+256    	; 0x130e <MDIO_stderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	38 87       	std	Y+8, r19	; 0x08
    1216:	2f 83       	std	Y+7, r18	; 0x07
    1218:	8f 81       	ldd	r24, Y+7	; 0x07
    121a:	98 85       	ldd	r25, Y+8	; 0x08
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	71 f1       	breq	.+92     	; 0x127e <MDIO_stderrSetPinDirection+0x19c>
    1222:	2f 81       	ldd	r18, Y+7	; 0x07
    1224:	38 85       	ldd	r19, Y+8	; 0x08
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	34 f4       	brge	.+12     	; 0x1238 <MDIO_stderrSetPinDirection+0x156>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	98 85       	ldd	r25, Y+8	; 0x08
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	69 f0       	breq	.+26     	; 0x1250 <MDIO_stderrSetPinDirection+0x16e>
    1236:	68 c0       	rjmp	.+208    	; 0x1308 <MDIO_stderrSetPinDirection+0x226>
    1238:	2f 81       	ldd	r18, Y+7	; 0x07
    123a:	38 85       	ldd	r19, Y+8	; 0x08
    123c:	23 30       	cpi	r18, 0x03	; 3
    123e:	31 05       	cpc	r19, r1
    1240:	a9 f1       	breq	.+106    	; 0x12ac <MDIO_stderrSetPinDirection+0x1ca>
    1242:	8f 81       	ldd	r24, Y+7	; 0x07
    1244:	98 85       	ldd	r25, Y+8	; 0x08
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <MDIO_stderrSetPinDirection+0x16c>
    124c:	46 c0       	rjmp	.+140    	; 0x12da <MDIO_stderrSetPinDirection+0x1f8>
    124e:	5c c0       	rjmp	.+184    	; 0x1308 <MDIO_stderrSetPinDirection+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); break;
    1250:	a9 e3       	ldi	r26, 0x39	; 57
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e9 e3       	ldi	r30, 0x39	; 57
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	48 2f       	mov	r20, r24
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <MDIO_stderrSetPinDirection+0x18c>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <MDIO_stderrSetPinDirection+0x188>
    1272:	80 95       	com	r24
    1274:	84 23       	and	r24, r20
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	8c 93       	st	X, r24
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	1f c1       	rjmp	.+574    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); break;
    127e:	a6 e3       	ldi	r26, 0x36	; 54
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e6 e3       	ldi	r30, 0x36	; 54
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	81 81       	ldd	r24, Z+1	; 0x01
    1288:	48 2f       	mov	r20, r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <MDIO_stderrSetPinDirection+0x1ba>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <MDIO_stderrSetPinDirection+0x1b6>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	11 96       	adiw	r26, 0x01	; 1
    12a6:	8c 93       	st	X, r24
    12a8:	11 97       	sbiw	r26, 0x01	; 1
    12aa:	08 c1       	rjmp	.+528    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); break;
    12ac:	a3 e3       	ldi	r26, 0x33	; 51
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e3 e3       	ldi	r30, 0x33	; 51
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <MDIO_stderrSetPinDirection+0x1e8>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <MDIO_stderrSetPinDirection+0x1e4>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	11 96       	adiw	r26, 0x01	; 1
    12d4:	8c 93       	st	X, r24
    12d6:	11 97       	sbiw	r26, 0x01	; 1
    12d8:	f1 c0       	rjmp	.+482    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); break;
    12da:	a0 e3       	ldi	r26, 0x30	; 48
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e0 e3       	ldi	r30, 0x30	; 48
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	81 81       	ldd	r24, Z+1	; 0x01
    12e4:	48 2f       	mov	r20, r24
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <MDIO_stderrSetPinDirection+0x216>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <MDIO_stderrSetPinDirection+0x212>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	8c 93       	st	X, r24
    1304:	11 97       	sbiw	r26, 0x01	; 1
    1306:	da c0       	rjmp	.+436    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	d7 c0       	rjmp	.+430    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_INPUT_PULLUP == ARG_u8Direction)
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	09 f0       	breq	.+2      	; 0x1316 <MDIO_stderrSetPinDirection+0x234>
    1314:	ce c0       	rjmp	.+412    	; 0x14b2 <MDIO_stderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3e 83       	std	Y+6, r19	; 0x06
    131e:	2d 83       	std	Y+5, r18	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	91 05       	cpc	r25, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <MDIO_stderrSetPinDirection+0x24a>
    132a:	42 c0       	rjmp	.+132    	; 0x13b0 <MDIO_stderrSetPinDirection+0x2ce>
    132c:	2d 81       	ldd	r18, Y+5	; 0x05
    132e:	3e 81       	ldd	r19, Y+6	; 0x06
    1330:	23 30       	cpi	r18, 0x03	; 3
    1332:	31 05       	cpc	r19, r1
    1334:	34 f4       	brge	.+12     	; 0x1342 <MDIO_stderrSetPinDirection+0x260>
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	71 f0       	breq	.+28     	; 0x135c <MDIO_stderrSetPinDirection+0x27a>
    1340:	b5 c0       	rjmp	.+362    	; 0x14ac <MDIO_stderrSetPinDirection+0x3ca>
    1342:	2d 81       	ldd	r18, Y+5	; 0x05
    1344:	3e 81       	ldd	r19, Y+6	; 0x06
    1346:	23 30       	cpi	r18, 0x03	; 3
    1348:	31 05       	cpc	r19, r1
    134a:	09 f4       	brne	.+2      	; 0x134e <MDIO_stderrSetPinDirection+0x26c>
    134c:	5b c0       	rjmp	.+182    	; 0x1404 <MDIO_stderrSetPinDirection+0x322>
    134e:	8d 81       	ldd	r24, Y+5	; 0x05
    1350:	9e 81       	ldd	r25, Y+6	; 0x06
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <MDIO_stderrSetPinDirection+0x278>
    1358:	7f c0       	rjmp	.+254    	; 0x1458 <MDIO_stderrSetPinDirection+0x376>
    135a:	a8 c0       	rjmp	.+336    	; 0x14ac <MDIO_stderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> DDR, ARG_u8Pin); SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    135c:	a9 e3       	ldi	r26, 0x39	; 57
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e9 e3       	ldi	r30, 0x39	; 57
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	81 81       	ldd	r24, Z+1	; 0x01
    1366:	48 2f       	mov	r20, r24
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <MDIO_stderrSetPinDirection+0x296>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	2a 95       	dec	r18
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <MDIO_stderrSetPinDirection+0x292>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	8c 93       	st	X, r24
    1384:	a9 e3       	ldi	r26, 0x39	; 57
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e9 e3       	ldi	r30, 0x39	; 57
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <MDIO_stderrSetPinDirection+0x2c0>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <MDIO_stderrSetPinDirection+0x2bc>
    13a6:	84 2b       	or	r24, r20
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8c 93       	st	X, r24
    13ac:	12 97       	sbiw	r26, 0x02	; 2
    13ae:	86 c0       	rjmp	.+268    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> DDR, ARG_u8Pin); SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    13b0:	a6 e3       	ldi	r26, 0x36	; 54
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e6 e3       	ldi	r30, 0x36	; 54
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	48 2f       	mov	r20, r24
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MDIO_stderrSetPinDirection+0x2ea>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	2a 95       	dec	r18
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <MDIO_stderrSetPinDirection+0x2e6>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	8c 93       	st	X, r24
    13d8:	a6 e3       	ldi	r26, 0x36	; 54
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e6 e3       	ldi	r30, 0x36	; 54
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <MDIO_stderrSetPinDirection+0x314>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <MDIO_stderrSetPinDirection+0x310>
    13fa:	84 2b       	or	r24, r20
    13fc:	12 96       	adiw	r26, 0x02	; 2
    13fe:	8c 93       	st	X, r24
    1400:	12 97       	sbiw	r26, 0x02	; 2
    1402:	5c c0       	rjmp	.+184    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> DDR, ARG_u8Pin); SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    1404:	a3 e3       	ldi	r26, 0x33	; 51
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e3 e3       	ldi	r30, 0x33	; 51
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	81 81       	ldd	r24, Z+1	; 0x01
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <MDIO_stderrSetPinDirection+0x33e>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	2a 95       	dec	r18
    1422:	e2 f7       	brpl	.-8      	; 0x141c <MDIO_stderrSetPinDirection+0x33a>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	11 96       	adiw	r26, 0x01	; 1
    142a:	8c 93       	st	X, r24
    142c:	a3 e3       	ldi	r26, 0x33	; 51
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e3 e3       	ldi	r30, 0x33	; 51
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	48 2f       	mov	r20, r24
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_stderrSetPinDirection+0x368>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_stderrSetPinDirection+0x364>
    144e:	84 2b       	or	r24, r20
    1450:	12 96       	adiw	r26, 0x02	; 2
    1452:	8c 93       	st	X, r24
    1454:	12 97       	sbiw	r26, 0x02	; 2
    1456:	32 c0       	rjmp	.+100    	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> DDR, ARG_u8Pin); SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    1458:	a0 e3       	ldi	r26, 0x30	; 48
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e0 e3       	ldi	r30, 0x30	; 48
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	81 81       	ldd	r24, Z+1	; 0x01
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <MDIO_stderrSetPinDirection+0x392>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	2a 95       	dec	r18
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <MDIO_stderrSetPinDirection+0x38e>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	8c 93       	st	X, r24
    1480:	a0 e3       	ldi	r26, 0x30	; 48
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e0 e3       	ldi	r30, 0x30	; 48
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	82 81       	ldd	r24, Z+2	; 0x02
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <MDIO_stderrSetPinDirection+0x3bc>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <MDIO_stderrSetPinDirection+0x3b8>
    14a2:	84 2b       	or	r24, r20
    14a4:	12 96       	adiw	r26, 0x02	; 2
    14a6:	8c 93       	st	X, r24
    14a8:	12 97       	sbiw	r26, 0x02	; 2
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <MDIO_stderrSetPinDirection+0x3da>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	2a 96       	adiw	r28, 0x0a	; 10
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <MDIO_stderrSetPinValue>:

STD_error_t MDIO_stderrSetPinValue(u8 ARG_u8Port, u8 ARG_u8Pin, u8 ARG_u8Value)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	28 97       	sbiw	r28, 0x08	; 8
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	6b 83       	std	Y+3, r22	; 0x03
    14e8:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_stderrError = E_OK;
    14ea:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <MDIO_stderrSetPinValue+0x24>
    14f2:	07 c1       	rjmp	.+526    	; 0x1702 <MDIO_stderrSetPinValue+0x232>
	{
		if(MDIO_HIGH == ARG_u8Value)
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	09 f0       	breq	.+2      	; 0x14fc <MDIO_stderrSetPinValue+0x2c>
    14fa:	7c c0       	rjmp	.+248    	; 0x15f4 <MDIO_stderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	38 87       	std	Y+8, r19	; 0x08
    1504:	2f 83       	std	Y+7, r18	; 0x07
    1506:	8f 81       	ldd	r24, Y+7	; 0x07
    1508:	98 85       	ldd	r25, Y+8	; 0x08
    150a:	82 30       	cpi	r24, 0x02	; 2
    150c:	91 05       	cpc	r25, r1
    150e:	69 f1       	breq	.+90     	; 0x156a <MDIO_stderrSetPinValue+0x9a>
    1510:	2f 81       	ldd	r18, Y+7	; 0x07
    1512:	38 85       	ldd	r19, Y+8	; 0x08
    1514:	23 30       	cpi	r18, 0x03	; 3
    1516:	31 05       	cpc	r19, r1
    1518:	34 f4       	brge	.+12     	; 0x1526 <MDIO_stderrSetPinValue+0x56>
    151a:	8f 81       	ldd	r24, Y+7	; 0x07
    151c:	98 85       	ldd	r25, Y+8	; 0x08
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	69 f0       	breq	.+26     	; 0x153e <MDIO_stderrSetPinValue+0x6e>
    1524:	64 c0       	rjmp	.+200    	; 0x15ee <MDIO_stderrSetPinValue+0x11e>
    1526:	2f 81       	ldd	r18, Y+7	; 0x07
    1528:	38 85       	ldd	r19, Y+8	; 0x08
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	99 f1       	breq	.+102    	; 0x1596 <MDIO_stderrSetPinValue+0xc6>
    1530:	8f 81       	ldd	r24, Y+7	; 0x07
    1532:	98 85       	ldd	r25, Y+8	; 0x08
    1534:	84 30       	cpi	r24, 0x04	; 4
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <MDIO_stderrSetPinValue+0x6c>
    153a:	43 c0       	rjmp	.+134    	; 0x15c2 <MDIO_stderrSetPinValue+0xf2>
    153c:	58 c0       	rjmp	.+176    	; 0x15ee <MDIO_stderrSetPinValue+0x11e>
			{
				case MDIO_PORTA: SET_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    153e:	a9 e3       	ldi	r26, 0x39	; 57
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	82 81       	ldd	r24, Z+2	; 0x02
    1548:	48 2f       	mov	r20, r24
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <MDIO_stderrSetPinValue+0x8c>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <MDIO_stderrSetPinValue+0x88>
    1560:	84 2b       	or	r24, r20
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	8c 93       	st	X, r24
    1566:	12 97       	sbiw	r26, 0x02	; 2
    1568:	ce c0       	rjmp	.+412    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: SET_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    156a:	a6 e3       	ldi	r26, 0x36	; 54
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e6 e3       	ldi	r30, 0x36	; 54
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <MDIO_stderrSetPinValue+0xb8>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <MDIO_stderrSetPinValue+0xb4>
    158c:	84 2b       	or	r24, r20
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	8c 93       	st	X, r24
    1592:	12 97       	sbiw	r26, 0x02	; 2
    1594:	b8 c0       	rjmp	.+368    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: SET_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    1596:	a3 e3       	ldi	r26, 0x33	; 51
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e3 e3       	ldi	r30, 0x33	; 51
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	48 2f       	mov	r20, r24
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <MDIO_stderrSetPinValue+0xe4>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <MDIO_stderrSetPinValue+0xe0>
    15b8:	84 2b       	or	r24, r20
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	8c 93       	st	X, r24
    15be:	12 97       	sbiw	r26, 0x02	; 2
    15c0:	a2 c0       	rjmp	.+324    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: SET_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    15c2:	a0 e3       	ldi	r26, 0x30	; 48
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e0 e3       	ldi	r30, 0x30	; 48
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	48 2f       	mov	r20, r24
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <MDIO_stderrSetPinValue+0x110>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <MDIO_stderrSetPinValue+0x10c>
    15e4:	84 2b       	or	r24, r20
    15e6:	12 96       	adiw	r26, 0x02	; 2
    15e8:	8c 93       	st	X, r24
    15ea:	12 97       	sbiw	r26, 0x02	; 2
    15ec:	8c c0       	rjmp	.+280    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	89 c0       	rjmp	.+274    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else if(MDIO_LOW == ARG_u8Value)
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	09 f0       	breq	.+2      	; 0x15fc <MDIO_stderrSetPinValue+0x12c>
    15fa:	80 c0       	rjmp	.+256    	; 0x16fc <MDIO_stderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3e 83       	std	Y+6, r19	; 0x06
    1604:	2d 83       	std	Y+5, r18	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	71 f1       	breq	.+92     	; 0x166c <MDIO_stderrSetPinValue+0x19c>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	23 30       	cpi	r18, 0x03	; 3
    1616:	31 05       	cpc	r19, r1
    1618:	34 f4       	brge	.+12     	; 0x1626 <MDIO_stderrSetPinValue+0x156>
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	69 f0       	breq	.+26     	; 0x163e <MDIO_stderrSetPinValue+0x16e>
    1624:	68 c0       	rjmp	.+208    	; 0x16f6 <MDIO_stderrSetPinValue+0x226>
    1626:	2d 81       	ldd	r18, Y+5	; 0x05
    1628:	3e 81       	ldd	r19, Y+6	; 0x06
    162a:	23 30       	cpi	r18, 0x03	; 3
    162c:	31 05       	cpc	r19, r1
    162e:	a9 f1       	breq	.+106    	; 0x169a <MDIO_stderrSetPinValue+0x1ca>
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
    1632:	9e 81       	ldd	r25, Y+6	; 0x06
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <MDIO_stderrSetPinValue+0x16c>
    163a:	46 c0       	rjmp	.+140    	; 0x16c8 <MDIO_stderrSetPinValue+0x1f8>
    163c:	5c c0       	rjmp	.+184    	; 0x16f6 <MDIO_stderrSetPinValue+0x226>
			{
				case MDIO_PORTA: CLEAR_BIT(GPIOA -> PORT, ARG_u8Pin); break;
    163e:	a9 e3       	ldi	r26, 0x39	; 57
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e9 e3       	ldi	r30, 0x39	; 57
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	48 2f       	mov	r20, r24
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <MDIO_stderrSetPinValue+0x18c>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <MDIO_stderrSetPinValue+0x188>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	12 96       	adiw	r26, 0x02	; 2
    1666:	8c 93       	st	X, r24
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	4d c0       	rjmp	.+154    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTB: CLEAR_BIT(GPIOB -> PORT, ARG_u8Pin); break;
    166c:	a6 e3       	ldi	r26, 0x36	; 54
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e6 e3       	ldi	r30, 0x36	; 54
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	48 2f       	mov	r20, r24
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <MDIO_stderrSetPinValue+0x1ba>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <MDIO_stderrSetPinValue+0x1b6>
    168e:	80 95       	com	r24
    1690:	84 23       	and	r24, r20
    1692:	12 96       	adiw	r26, 0x02	; 2
    1694:	8c 93       	st	X, r24
    1696:	12 97       	sbiw	r26, 0x02	; 2
    1698:	36 c0       	rjmp	.+108    	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTC: CLEAR_BIT(GPIOC -> PORT, ARG_u8Pin); break;
    169a:	a3 e3       	ldi	r26, 0x33	; 51
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e3 e3       	ldi	r30, 0x33	; 51
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	48 2f       	mov	r20, r24
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <MDIO_stderrSetPinValue+0x1e8>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <MDIO_stderrSetPinValue+0x1e4>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	12 96       	adiw	r26, 0x02	; 2
    16c2:	8c 93       	st	X, r24
    16c4:	12 97       	sbiw	r26, 0x02	; 2
    16c6:	1f c0       	rjmp	.+62     	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				case MDIO_PORTD: CLEAR_BIT(GPIOD -> PORT, ARG_u8Pin); break;
    16c8:	a0 e3       	ldi	r26, 0x30	; 48
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e0 e3       	ldi	r30, 0x30	; 48
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <MDIO_stderrSetPinValue+0x216>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <MDIO_stderrSetPinValue+0x212>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	8c 93       	st	X, r24
    16f2:	12 97       	sbiw	r26, 0x02	; 2
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <MDIO_stderrSetPinValue+0x236>
				default: L_stderrError = E_NOK; break; /* Report an Error */
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	89 83       	std	Y+1, r24	; 0x01
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <MDIO_stderrSetPinValue+0x236>
			}
		}
		else
		{
			/* Report an Error */
			L_stderrError = E_NOK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <MDIO_stderrSetPinValue+0x236>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
}
    1708:	28 96       	adiw	r28, 0x08	; 8
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <MDIO_stderrGetPinValue>:

STD_error_t MDIO_stderrGetPinValue(u8* ARG_u8pValue, u8 ARG_u8Port, u8 ARG_u8Pin)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	27 97       	sbiw	r28, 0x07	; 7
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	9b 83       	std	Y+3, r25	; 0x03
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	6c 83       	std	Y+4, r22	; 0x04
    1734:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_stderrError = E_OK;
    1736:	19 82       	std	Y+1, r1	; 0x01
	if(NULL_POINTER==ARG_u8pValue)
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	19 f4       	brne	.+6      	; 0x1746 <MDIO_stderrGetPinValue+0x2c>
	{
		L_stderrError = E_NULL_POINTER;
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	7a c0       	rjmp	.+244    	; 0x183a <MDIO_stderrGetPinValue+0x120>
	}
	else if((ARG_u8Pin>=MDIO_PIN0) && (ARG_u8Pin<=MDIO_PIN7))
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	88 30       	cpi	r24, 0x08	; 8
    174a:	08 f0       	brcs	.+2      	; 0x174e <MDIO_stderrGetPinValue+0x34>
    174c:	74 c0       	rjmp	.+232    	; 0x1836 <MDIO_stderrGetPinValue+0x11c>
	{
		switch(ARG_u8Port)
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3f 83       	std	Y+7, r19	; 0x07
    1756:	2e 83       	std	Y+6, r18	; 0x06
    1758:	4e 81       	ldd	r20, Y+6	; 0x06
    175a:	5f 81       	ldd	r21, Y+7	; 0x07
    175c:	42 30       	cpi	r20, 0x02	; 2
    175e:	51 05       	cpc	r21, r1
    1760:	59 f1       	breq	.+86     	; 0x17b8 <MDIO_stderrGetPinValue+0x9e>
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <MDIO_stderrGetPinValue+0x5e>
    176c:	2e 81       	ldd	r18, Y+6	; 0x06
    176e:	3f 81       	ldd	r19, Y+7	; 0x07
    1770:	21 30       	cpi	r18, 0x01	; 1
    1772:	31 05       	cpc	r19, r1
    1774:	69 f0       	breq	.+26     	; 0x1790 <MDIO_stderrGetPinValue+0x76>
    1776:	5c c0       	rjmp	.+184    	; 0x1830 <MDIO_stderrGetPinValue+0x116>
    1778:	4e 81       	ldd	r20, Y+6	; 0x06
    177a:	5f 81       	ldd	r21, Y+7	; 0x07
    177c:	43 30       	cpi	r20, 0x03	; 3
    177e:	51 05       	cpc	r21, r1
    1780:	79 f1       	breq	.+94     	; 0x17e0 <MDIO_stderrGetPinValue+0xc6>
    1782:	8e 81       	ldd	r24, Y+6	; 0x06
    1784:	9f 81       	ldd	r25, Y+7	; 0x07
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <MDIO_stderrGetPinValue+0x74>
    178c:	3d c0       	rjmp	.+122    	; 0x1808 <MDIO_stderrGetPinValue+0xee>
    178e:	50 c0       	rjmp	.+160    	; 0x1830 <MDIO_stderrGetPinValue+0x116>
		{
			case MDIO_PORTA: *ARG_u8pValue = GET_BIT(GPIOA -> PIN, ARG_u8Pin); break;
    1790:	e9 e3       	ldi	r30, 0x39	; 57
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <MDIO_stderrGetPinValue+0x8e>
    17a4:	55 95       	asr	r21
    17a6:	47 95       	ror	r20
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <MDIO_stderrGetPinValue+0x8a>
    17ac:	ca 01       	movw	r24, r20
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	ea 81       	ldd	r30, Y+2	; 0x02
    17b2:	fb 81       	ldd	r31, Y+3	; 0x03
    17b4:	80 83       	st	Z, r24
    17b6:	41 c0       	rjmp	.+130    	; 0x183a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTB: *ARG_u8pValue = GET_BIT(GPIOB -> PIN, ARG_u8Pin); break;
    17b8:	e6 e3       	ldi	r30, 0x36	; 54
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a9 01       	movw	r20, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <MDIO_stderrGetPinValue+0xb6>
    17cc:	55 95       	asr	r21
    17ce:	47 95       	ror	r20
    17d0:	8a 95       	dec	r24
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <MDIO_stderrGetPinValue+0xb2>
    17d4:	ca 01       	movw	r24, r20
    17d6:	81 70       	andi	r24, 0x01	; 1
    17d8:	ea 81       	ldd	r30, Y+2	; 0x02
    17da:	fb 81       	ldd	r31, Y+3	; 0x03
    17dc:	80 83       	st	Z, r24
    17de:	2d c0       	rjmp	.+90     	; 0x183a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTC: *ARG_u8pValue = GET_BIT(GPIOC -> PIN, ARG_u8Pin); break;
    17e0:	e3 e3       	ldi	r30, 0x33	; 51
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a9 01       	movw	r20, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <MDIO_stderrGetPinValue+0xde>
    17f4:	55 95       	asr	r21
    17f6:	47 95       	ror	r20
    17f8:	8a 95       	dec	r24
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <MDIO_stderrGetPinValue+0xda>
    17fc:	ca 01       	movw	r24, r20
    17fe:	81 70       	andi	r24, 0x01	; 1
    1800:	ea 81       	ldd	r30, Y+2	; 0x02
    1802:	fb 81       	ldd	r31, Y+3	; 0x03
    1804:	80 83       	st	Z, r24
    1806:	19 c0       	rjmp	.+50     	; 0x183a <MDIO_stderrGetPinValue+0x120>
			case MDIO_PORTD: *ARG_u8pValue = GET_BIT(GPIOD -> PIN, ARG_u8Pin); break;
    1808:	e0 e3       	ldi	r30, 0x30	; 48
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <MDIO_stderrGetPinValue+0x106>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <MDIO_stderrGetPinValue+0x102>
    1824:	ca 01       	movw	r24, r20
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	ea 81       	ldd	r30, Y+2	; 0x02
    182a:	fb 81       	ldd	r31, Y+3	; 0x03
    182c:	80 83       	st	Z, r24
    182e:	05 c0       	rjmp	.+10     	; 0x183a <MDIO_stderrGetPinValue+0x120>
			default: L_stderrError = E_NOK; break; /* Report an Error */
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	02 c0       	rjmp	.+4      	; 0x183a <MDIO_stderrGetPinValue+0x120>
		}
	}
	else
	{
		/* Report an Error */
		L_stderrError = E_NOK;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	27 96       	adiw	r28, 0x07	; 7
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <MDIO_stderrTogglePinValue>:

STD_error_t MDIO_stderrTogglePinValue(u8 ARG_u8Port ,u8 ARG_u8Pin)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <MDIO_stderrTogglePinValue+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <MDIO_stderrTogglePinValue+0x8>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrError= E_OK;
    1860:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Pin>= MDIO_PIN0 && ARG_u8Pin<= MDIO_PIN7)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	08 f0       	brcs	.+2      	; 0x186a <MDIO_stderrTogglePinValue+0x1c>
    1868:	7c c0       	rjmp	.+248    	; 0x1962 <MDIO_stderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	3d 83       	std	Y+5, r19	; 0x05
    1872:	2c 83       	std	Y+4, r18	; 0x04
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	91 05       	cpc	r25, r1
    187c:	69 f1       	breq	.+90     	; 0x18d8 <MDIO_stderrTogglePinValue+0x8a>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	23 30       	cpi	r18, 0x03	; 3
    1884:	31 05       	cpc	r19, r1
    1886:	34 f4       	brge	.+12     	; 0x1894 <MDIO_stderrTogglePinValue+0x46>
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	69 f0       	breq	.+26     	; 0x18ac <MDIO_stderrTogglePinValue+0x5e>
    1892:	64 c0       	rjmp	.+200    	; 0x195c <MDIO_stderrTogglePinValue+0x10e>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	23 30       	cpi	r18, 0x03	; 3
    189a:	31 05       	cpc	r19, r1
    189c:	99 f1       	breq	.+102    	; 0x1904 <MDIO_stderrTogglePinValue+0xb6>
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	9d 81       	ldd	r25, Y+5	; 0x05
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <MDIO_stderrTogglePinValue+0x5c>
    18a8:	43 c0       	rjmp	.+134    	; 0x1930 <MDIO_stderrTogglePinValue+0xe2>
    18aa:	58 c0       	rjmp	.+176    	; 0x195c <MDIO_stderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA: TOGGLE_BIT(GPIOA->PORT ,ARG_u8Pin) ; break;
    18ac:	a9 e3       	ldi	r26, 0x39	; 57
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e9 e3       	ldi	r30, 0x39	; 57
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	48 2f       	mov	r20, r24
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <MDIO_stderrTogglePinValue+0x7c>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <MDIO_stderrTogglePinValue+0x78>
    18ce:	84 27       	eor	r24, r20
    18d0:	12 96       	adiw	r26, 0x02	; 2
    18d2:	8c 93       	st	X, r24
    18d4:	12 97       	sbiw	r26, 0x02	; 2
    18d6:	47 c0       	rjmp	.+142    	; 0x1966 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTB: TOGGLE_BIT(GPIOB->PORT ,ARG_u8Pin) ; break;
    18d8:	a6 e3       	ldi	r26, 0x36	; 54
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e6 e3       	ldi	r30, 0x36	; 54
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	48 2f       	mov	r20, r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <MDIO_stderrTogglePinValue+0xa8>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <MDIO_stderrTogglePinValue+0xa4>
    18fa:	84 27       	eor	r24, r20
    18fc:	12 96       	adiw	r26, 0x02	; 2
    18fe:	8c 93       	st	X, r24
    1900:	12 97       	sbiw	r26, 0x02	; 2
    1902:	31 c0       	rjmp	.+98     	; 0x1966 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTC: TOGGLE_BIT(GPIOC->PORT ,ARG_u8Pin) ; break;
    1904:	a3 e3       	ldi	r26, 0x33	; 51
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e3 e3       	ldi	r30, 0x33	; 51
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	48 2f       	mov	r20, r24
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <MDIO_stderrTogglePinValue+0xd4>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <MDIO_stderrTogglePinValue+0xd0>
    1926:	84 27       	eor	r24, r20
    1928:	12 96       	adiw	r26, 0x02	; 2
    192a:	8c 93       	st	X, r24
    192c:	12 97       	sbiw	r26, 0x02	; 2
    192e:	1b c0       	rjmp	.+54     	; 0x1966 <MDIO_stderrTogglePinValue+0x118>
			case MDIO_PORTD: TOGGLE_BIT(GPIOD->PORT ,ARG_u8Pin) ; break;
    1930:	a0 e3       	ldi	r26, 0x30	; 48
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e0 e3       	ldi	r30, 0x30	; 48
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	48 2f       	mov	r20, r24
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <MDIO_stderrTogglePinValue+0x100>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <MDIO_stderrTogglePinValue+0xfc>
    1952:	84 27       	eor	r24, r20
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	8c 93       	st	X, r24
    1958:	12 97       	sbiw	r26, 0x02	; 2
    195a:	05 c0       	rjmp	.+10     	; 0x1966 <MDIO_stderrTogglePinValue+0x118>
			default: L_stderrError = E_NOK; break; /* report an error*/
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <MDIO_stderrTogglePinValue+0x118>
		}	
	}
	else{
		/* Report an Error */
		L_stderrError=E_NULL_POINTER;
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrError;
    1966:	89 81       	ldd	r24, Y+1	; 0x01
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <MTIM_stderrInit>:
void (*MTIM_pvoidfUserFunctionT0OVF)(void)=NULL_POINTER;
void (*MTIM_pvoidfUserFunctionT0OCM)(void)=NULL_POINTER;


STD_error_t MTIM_stderrInit(u8 ARG_u8TimerNo,u8 ARG_u8ClockSource,u8 ARG_u8u8Mode ,u8 ARG_u8HWPinMode)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	29 97       	sbiw	r28, 0x09	; 9
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	8a 83       	std	Y+2, r24	; 0x02
    198e:	6b 83       	std	Y+3, r22	; 0x03
    1990:	4c 83       	std	Y+4, r20	; 0x04
    1992:	2d 83       	std	Y+5, r18	; 0x05
	STD_error_t L_stderrState=E_OK;
    1994:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8TimerNo<=2 &&ARG_u8ClockSource<=7 && ARG_u8u8Mode<=3 && ARG_u8HWPinMode<=3)
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	08 f0       	brcs	.+2      	; 0x199e <MTIM_stderrInit+0x26>
    199c:	98 c0       	rjmp	.+304    	; 0x1ace <MTIM_stderrInit+0x156>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <MTIM_stderrInit+0x2e>
    19a4:	94 c0       	rjmp	.+296    	; 0x1ace <MTIM_stderrInit+0x156>
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <MTIM_stderrInit+0x36>
    19ac:	90 c0       	rjmp	.+288    	; 0x1ace <MTIM_stderrInit+0x156>
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <MTIM_stderrInit+0x3e>
    19b4:	8c c0       	rjmp	.+280    	; 0x1ace <MTIM_stderrInit+0x156>
	{
		switch(ARG_u8TimerNo){
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	39 87       	std	Y+9, r19	; 0x09
    19be:	28 87       	std	Y+8, r18	; 0x08
    19c0:	88 85       	ldd	r24, Y+8	; 0x08
    19c2:	99 85       	ldd	r25, Y+9	; 0x09
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <MTIM_stderrInit+0x54>
    19ca:	83 c0       	rjmp	.+262    	; 0x1ad2 <MTIM_stderrInit+0x15a>
    19cc:	28 85       	ldd	r18, Y+8	; 0x08
    19ce:	39 85       	ldd	r19, Y+9	; 0x09
    19d0:	22 30       	cpi	r18, 0x02	; 2
    19d2:	31 05       	cpc	r19, r1
    19d4:	09 f4       	brne	.+2      	; 0x19d8 <MTIM_stderrInit+0x60>
    19d6:	7d c0       	rjmp	.+250    	; 0x1ad2 <MTIM_stderrInit+0x15a>
    19d8:	88 85       	ldd	r24, Y+8	; 0x08
    19da:	99 85       	ldd	r25, Y+9	; 0x09
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	09 f0       	breq	.+2      	; 0x19e2 <MTIM_stderrInit+0x6a>
    19e0:	73 c0       	rjmp	.+230    	; 0x1ac8 <MTIM_stderrInit+0x150>
			case MTIM_TIMER0:
				switch(ARG_u8u8Mode){
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3f 83       	std	Y+7, r19	; 0x07
    19ea:	2e 83       	std	Y+6, r18	; 0x06
    19ec:	8e 81       	ldd	r24, Y+6	; 0x06
    19ee:	9f 81       	ldd	r25, Y+7	; 0x07
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	21 f1       	breq	.+72     	; 0x1a3e <MTIM_stderrInit+0xc6>
    19f6:	2e 81       	ldd	r18, Y+6	; 0x06
    19f8:	3f 81       	ldd	r19, Y+7	; 0x07
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <MTIM_stderrInit+0x92>
    1a00:	8e 81       	ldd	r24, Y+6	; 0x06
    1a02:	9f 81       	ldd	r25, Y+7	; 0x07
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <MTIM_stderrInit+0xa8>
    1a08:	47 c0       	rjmp	.+142    	; 0x1a98 <MTIM_stderrInit+0x120>
    1a0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	21 f1       	breq	.+72     	; 0x1a5c <MTIM_stderrInit+0xe4>
    1a14:	8e 81       	ldd	r24, Y+6	; 0x06
    1a16:	9f 81       	ldd	r25, Y+7	; 0x07
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	71 f1       	breq	.+92     	; 0x1a7a <MTIM_stderrInit+0x102>
    1a1e:	3c c0       	rjmp	.+120    	; 0x1a98 <MTIM_stderrInit+0x120>
					case MTIM_MODE_NORMAL:
						CLEAR_BIT(TCCR0,WGM01);
    1a20:	a3 e5       	ldi	r26, 0x53	; 83
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e3 e5       	ldi	r30, 0x53	; 83
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	87 7f       	andi	r24, 0xF7	; 247
    1a2c:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    1a2e:	a3 e5       	ldi	r26, 0x53	; 83
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e3 e5       	ldi	r30, 0x53	; 83
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	8f 7b       	andi	r24, 0xBF	; 191
    1a3a:	8c 93       	st	X, r24
    1a3c:	2f c0       	rjmp	.+94     	; 0x1a9c <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_CTC:
						SET_BIT(TCCR0,WGM01);
    1a3e:	a3 e5       	ldi	r26, 0x53	; 83
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e3 e5       	ldi	r30, 0x53	; 83
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	88 60       	ori	r24, 0x08	; 8
    1a4a:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM00);
    1a4c:	a3 e5       	ldi	r26, 0x53	; 83
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e3 e5       	ldi	r30, 0x53	; 83
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8f 7b       	andi	r24, 0xBF	; 191
    1a58:	8c 93       	st	X, r24
    1a5a:	20 c0       	rjmp	.+64     	; 0x1a9c <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_FASTPWM:
						SET_BIT(TCCR0,WGM01);
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 60       	ori	r24, 0x08	; 8
    1a68:	8c 93       	st	X, r24
						SET_BIT(TCCR0,WGM00);
    1a6a:	a3 e5       	ldi	r26, 0x53	; 83
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e3 e5       	ldi	r30, 0x53	; 83
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 64       	ori	r24, 0x40	; 64
    1a76:	8c 93       	st	X, r24
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <MTIM_stderrInit+0x124>
					break;
					case MTIM_MODE_PHASECORRECTPWM:
						SET_BIT(TCCR0,WGM00);
    1a7a:	a3 e5       	ldi	r26, 0x53	; 83
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e5       	ldi	r30, 0x53	; 83
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,WGM01);
    1a88:	a3 e5       	ldi	r26, 0x53	; 83
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e3 e5       	ldi	r30, 0x53	; 83
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	87 7f       	andi	r24, 0xF7	; 247
    1a94:	8c 93       	st	X, r24
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <MTIM_stderrInit+0x124>
					break;
					default: L_stderrState=E_NOK; break;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	89 83       	std	Y+1, r24	; 0x01
				}
				TCCR0 = (TCCR0&0xCF) | (ARG_u8HWPinMode<<4);
    1a9c:	a3 e5       	ldi	r26, 0x53	; 83
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e3 e5       	ldi	r30, 0x53	; 83
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	2f 7c       	andi	r18, 0xCF	; 207
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	82 95       	swap	r24
    1ab2:	92 95       	swap	r25
    1ab4:	90 7f       	andi	r25, 0xF0	; 240
    1ab6:	98 27       	eor	r25, r24
    1ab8:	80 7f       	andi	r24, 0xF0	; 240
    1aba:	98 27       	eor	r25, r24
    1abc:	82 2b       	or	r24, r18
    1abe:	8c 93       	st	X, r24
				MTIM_u8Timer0Clock = ARG_u8ClockSource; /* assign it to global var*/
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	80 93 6e 01 	sts	0x016E, r24
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <MTIM_stderrInit+0x15a>

			case MTIM_TIMER1:
			break;
			case MTIM_TIMER2:
			break;
			default: L_stderrState=E_NOK; break;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <MTIM_stderrInit+0x15a>
		}
	}
	else{
		L_stderrState=E_NOK;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad4:	29 96       	adiw	r28, 0x09	; 9
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <MTIM_voidForceOutputCompare>:

void MTIM_voidForceOutputCompare(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,FOC0);
    1aee:	a3 e5       	ldi	r26, 0x53	; 83
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e3 e5       	ldi	r30, 0x53	; 83
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 68       	ori	r24, 0x80	; 128
    1afa:	8c 93       	st	X, r24
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <MTIM_stderrEnableInterrupt>:

STD_error_t MTIM_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <MTIM_stderrEnableInterrupt+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    1b0e:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8InterruptSource<=7){
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	88 30       	cpi	r24, 0x08	; 8
    1b14:	a0 f4       	brcc	.+40     	; 0x1b3e <MTIM_stderrEnableInterrupt+0x3c>
		SET_BIT(TIMSK, ARG_u8InterruptSource);
    1b16:	a9 e5       	ldi	r26, 0x59	; 89
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e9 e5       	ldi	r30, 0x59	; 89
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <MTIM_stderrEnableInterrupt+0x32>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <MTIM_stderrEnableInterrupt+0x2e>
    1b38:	84 2b       	or	r24, r20
    1b3a:	8c 93       	st	X, r24
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <MTIM_stderrEnableInterrupt+0x40>
	}
	else{
		L_stderrState=E_NOK;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <MTIM_stderrDisableInterrupt>:
STD_error_t MTIM_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <MTIM_stderrDisableInterrupt+0x6>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    1b5a:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_u8InterruptSource<=7){
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	88 30       	cpi	r24, 0x08	; 8
    1b60:	a8 f4       	brcc	.+42     	; 0x1b8c <MTIM_stderrDisableInterrupt+0x3e>
		CLEAR_BIT(TIMSK, ARG_u8InterruptSource);
    1b62:	a9 e5       	ldi	r26, 0x59	; 89
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e9 e5       	ldi	r30, 0x59	; 89
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <MTIM_stderrDisableInterrupt+0x32>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <MTIM_stderrDisableInterrupt+0x2e>
    1b84:	80 95       	com	r24
    1b86:	84 23       	and	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <MTIM_stderrDisableInterrupt+0x42>
	}
	else{
		L_stderrState=E_NOK;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <MTIM_stderrSetCallBack>:
STD_error_t MTIM_stderrSetCallBack(void(*ARG_pvoidfUserFunction)(void), u8 ARG_u8InterruptSource)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <MTIM_stderrSetCallBack+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <MTIM_stderrSetCallBack+0x8>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <MTIM_stderrSetCallBack+0xa>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	9b 83       	std	Y+3, r25	; 0x03
    1bac:	8a 83       	std	Y+2, r24	; 0x02
    1bae:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    1bb0:	19 82       	std	Y+1, r1	; 0x01

	if(ARG_pvoidfUserFunction!=NULL_POINTER ){
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	01 f1       	breq	.+64     	; 0x1bfa <MTIM_stderrSetCallBack+0x5e>

		switch(ARG_u8InterruptSource){
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	3e 83       	std	Y+6, r19	; 0x06
    1bc2:	2d 83       	std	Y+5, r18	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	31 f0       	breq	.+12     	; 0x1bd8 <MTIM_stderrSetCallBack+0x3c>
    1bcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bce:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd0:	21 30       	cpi	r18, 0x01	; 1
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	41 f0       	breq	.+16     	; 0x1be6 <MTIM_stderrSetCallBack+0x4a>
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <MTIM_stderrSetCallBack+0x58>
			case MTIM_INTERRUPT_T0_OVF:	MTIM_pvoidfUserFunctionT0OVF=ARG_pvoidfUserFunction; break;
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	9b 81       	ldd	r25, Y+3	; 0x03
    1bdc:	90 93 69 01 	sts	0x0169, r25
    1be0:	80 93 68 01 	sts	0x0168, r24
    1be4:	0c c0       	rjmp	.+24     	; 0x1bfe <MTIM_stderrSetCallBack+0x62>
			case MTIM_INTERRUPT_T0_OCM:	MTIM_pvoidfUserFunctionT0OCM=ARG_pvoidfUserFunction; break;
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	90 93 6b 01 	sts	0x016B, r25
    1bee:	80 93 6a 01 	sts	0x016A, r24
    1bf2:	05 c0       	rjmp	.+10     	; 0x1bfe <MTIM_stderrSetCallBack+0x62>
			default: L_stderrState=E_NOK; break;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <MTIM_stderrSetCallBack+0x62>
		}
	}
	else{
		L_stderrState=E_NULL_POINTER;
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c00:	26 96       	adiw	r28, 0x06	; 6
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <MTIM_stderrStartTimer>:
STD_error_t MTIM_stderrStartTimer(u8 ARG_u8TimerNo)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <MTIM_stderrStartTimer+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <MTIM_stderrStartTimer+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    1c20:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	91 05       	cpc	r25, r1
    1c34:	b9 f0       	breq	.+46     	; 0x1c64 <MTIM_stderrStartTimer+0x52>
    1c36:	2b 81       	ldd	r18, Y+3	; 0x03
    1c38:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	91 f0       	breq	.+36     	; 0x1c64 <MTIM_stderrStartTimer+0x52>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	00 97       	sbiw	r24, 0x00	; 0
    1c46:	61 f4       	brne	.+24     	; 0x1c60 <MTIM_stderrStartTimer+0x4e>
		case MTIM_TIMER0:	TCCR0 = (TCCR0 & 0xF8) | MTIM_u8Timer0Clock; break;
    1c48:	a3 e5       	ldi	r26, 0x53	; 83
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e3 e5       	ldi	r30, 0x53	; 83
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	98 2f       	mov	r25, r24
    1c54:	98 7f       	andi	r25, 0xF8	; 248
    1c56:	80 91 6e 01 	lds	r24, 0x016E
    1c5a:	89 2b       	or	r24, r25
    1c5c:	8c 93       	st	X, r24
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <MTIM_stderrStartTimer+0x52>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <MTIM_stderrStopTimer>:
STD_error_t MTIM_stderrStopTimer(u8 ARG_u8TimerNo)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <MTIM_stderrStopTimer+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <MTIM_stderrStopTimer+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	3c 83       	std	Y+4, r19	; 0x04
    1c8c:	2b 83       	std	Y+3, r18	; 0x03
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	91 05       	cpc	r25, r1
    1c96:	99 f0       	breq	.+38     	; 0x1cbe <MTIM_stderrStopTimer+0x4a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	71 f0       	breq	.+28     	; 0x1cbe <MTIM_stderrStopTimer+0x4a>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	41 f4       	brne	.+16     	; 0x1cba <MTIM_stderrStopTimer+0x46>
		case MTIM_TIMER0:	TCCR0 = (TCCR0 & 0xF8) | MTIM_CS_NO_CLOCK; break;
    1caa:	a3 e5       	ldi	r26, 0x53	; 83
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e3 e5       	ldi	r30, 0x53	; 83
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 7f       	andi	r24, 0xF8	; 248
    1cb6:	8c 93       	st	X, r24
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <MTIM_stderrStopTimer+0x4a>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <MTIM_stderrSetOCR>:
STD_error_t MTIM_stderrSetOCR(u8 ARG_u8TimerNo,u16 ARG_u16OCRValue)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <MTIM_stderrSetOCR+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <MTIM_stderrSetOCR+0x8>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <MTIM_stderrSetOCR+0xa>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
    1cde:	7c 83       	std	Y+4, r23	; 0x04
    1ce0:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    1ce2:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo){
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	3e 83       	std	Y+6, r19	; 0x06
    1cec:	2d 83       	std	Y+5, r18	; 0x05
    1cee:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <MTIM_stderrSetOCR+0x4a>
    1cf8:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfa:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	59 f0       	breq	.+22     	; 0x1d18 <MTIM_stderrSetOCR+0x4a>
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <MTIM_stderrSetOCR+0x46>
		case MTIM_TIMER0:	OCR0 = ARG_u16OCRValue; break;
    1d0a:	ec e5       	ldi	r30, 0x5C	; 92
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	80 83       	st	Z, r24
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <MTIM_stderrSetOCR+0x4a>
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d1a:	26 96       	adiw	r28, 0x06	; 6
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <MTIM_stderrTimerDelay>:
STD_error_t MTIM_stderrTimerDelay(u8 ARG_u8TimerNo, u32 ARG_u32Delay){
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	64 97       	sbiw	r28, 0x14	; 20
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	8c 87       	std	Y+12, r24	; 0x0c
    1d4a:	4d 87       	std	Y+13, r20	; 0x0d
    1d4c:	5e 87       	std	Y+14, r21	; 0x0e
    1d4e:	6f 87       	std	Y+15, r22	; 0x0f
    1d50:	78 8b       	std	Y+16, r23	; 0x10
	STD_error_t L_stderrState=E_OK;
    1d52:	1b 86       	std	Y+11, r1	; 0x0b
	f32 L_f32TickTime,L_f32OVFTime;
	u16 L_u16Prscaler;
	switch(ARG_u8TimerNo){
    1d54:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3c 8b       	std	Y+20, r19	; 0x14
    1d5c:	2b 8b       	std	Y+19, r18	; 0x13
    1d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d60:	9c 89       	ldd	r25, Y+20	; 0x14
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <MTIM_stderrTimerDelay+0x3e>
    1d68:	c4 c0       	rjmp	.+392    	; 0x1ef2 <MTIM_stderrTimerDelay+0x1c6>
    1d6a:	2b 89       	ldd	r18, Y+19	; 0x13
    1d6c:	3c 89       	ldd	r19, Y+20	; 0x14
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <MTIM_stderrTimerDelay+0x4a>
    1d74:	be c0       	rjmp	.+380    	; 0x1ef2 <MTIM_stderrTimerDelay+0x1c6>
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <MTIM_stderrTimerDelay+0x54>
    1d7e:	b7 c0       	rjmp	.+366    	; 0x1eee <MTIM_stderrTimerDelay+0x1c2>
		case MTIM_TIMER0:
			switch(MTIM_u8Timer0Clock){
    1d80:	80 91 6e 01 	lds	r24, 0x016E
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3a 8b       	std	Y+18, r19	; 0x12
    1d8a:	29 8b       	std	Y+17, r18	; 0x11
    1d8c:	89 89       	ldd	r24, Y+17	; 0x11
    1d8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	91 05       	cpc	r25, r1
    1d94:	29 f1       	breq	.+74     	; 0x1de0 <MTIM_stderrTimerDelay+0xb4>
    1d96:	29 89       	ldd	r18, Y+17	; 0x11
    1d98:	3a 89       	ldd	r19, Y+18	; 0x12
    1d9a:	24 30       	cpi	r18, 0x04	; 4
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	5c f4       	brge	.+22     	; 0x1db6 <MTIM_stderrTimerDelay+0x8a>
    1da0:	89 89       	ldd	r24, Y+17	; 0x11
    1da2:	9a 89       	ldd	r25, Y+18	; 0x12
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	89 f0       	breq	.+34     	; 0x1dcc <MTIM_stderrTimerDelay+0xa0>
    1daa:	29 89       	ldd	r18, Y+17	; 0x11
    1dac:	3a 89       	ldd	r19, Y+18	; 0x12
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	89 f0       	breq	.+34     	; 0x1dd6 <MTIM_stderrTimerDelay+0xaa>
    1db4:	24 c0       	rjmp	.+72     	; 0x1dfe <MTIM_stderrTimerDelay+0xd2>
    1db6:	89 89       	ldd	r24, Y+17	; 0x11
    1db8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dba:	84 30       	cpi	r24, 0x04	; 4
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	a9 f0       	breq	.+42     	; 0x1dea <MTIM_stderrTimerDelay+0xbe>
    1dc0:	29 89       	ldd	r18, Y+17	; 0x11
    1dc2:	3a 89       	ldd	r19, Y+18	; 0x12
    1dc4:	25 30       	cpi	r18, 0x05	; 5
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	a9 f0       	breq	.+42     	; 0x1df4 <MTIM_stderrTimerDelay+0xc8>
    1dca:	19 c0       	rjmp	.+50     	; 0x1dfe <MTIM_stderrTimerDelay+0xd2>
				case MTIM_CS_PRESCALER_1 	:L_u16Prscaler = 1; break;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	16 c0       	rjmp	.+44     	; 0x1e02 <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_8 	:L_u16Prscaler = 8; break;
    1dd6:	88 e0       	ldi	r24, 0x08	; 8
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	11 c0       	rjmp	.+34     	; 0x1e02 <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_64 	:L_u16Prscaler = 64; break;
    1de0:	80 e4       	ldi	r24, 0x40	; 64
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	0c c0       	rjmp	.+24     	; 0x1e02 <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_256 	:L_u16Prscaler = 256; break;
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <MTIM_stderrTimerDelay+0xd6>
				case MTIM_CS_PRESCALER_1024 :L_u16Prscaler = 1024; break;
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	94 e0       	ldi	r25, 0x04	; 4
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <MTIM_stderrTimerDelay+0xd6>
				default: L_stderrState=E_NOK; break;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	8b 87       	std	Y+11, r24	; 0x0b
			}
			L_f32TickTime = (f32)L_u16Prscaler/ F_CPU;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	cc 01       	movw	r24, r24
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	34 e2       	ldi	r19, 0x24	; 36
    1e20:	44 ef       	ldi	r20, 0xF4	; 244
    1e22:	5a e4       	ldi	r21, 0x4A	; 74
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8f 83       	std	Y+7, r24	; 0x07
    1e2e:	98 87       	std	Y+8, r25	; 0x08
    1e30:	a9 87       	std	Y+9, r26	; 0x09
    1e32:	ba 87       	std	Y+10, r27	; 0x0a
			L_f32OVFTime = L_f32TickTime * 256;
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	ad 83       	std	Y+5, r26	; 0x05
    1e52:	be 83       	std	Y+6, r27	; 0x06
			MTIM_u16Timer0OVFCount = ((f32)ARG_u32Delay/1000) / L_f32OVFTime;
    1e54:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e56:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5a:	98 89       	ldd	r25, Y+16	; 0x10
    1e5c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	54 e4       	ldi	r21, 0x44	; 68
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	4d 81       	ldd	r20, Y+5	; 0x05
    1e82:	5e 81       	ldd	r21, Y+6	; 0x06
    1e84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	90 93 70 01 	sts	0x0170, r25
    1e9c:	80 93 6f 01 	sts	0x016F, r24
			MTIM_u8Timer0Preload = 256 - ((ARG_u32Delay / 1000) % (u32)L_f32OVFTime);
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	af 85       	ldd	r26, Y+15	; 0x0f
    1ea6:	b8 89       	ldd	r27, Y+16	; 0x10
    1ea8:	28 ee       	ldi	r18, 0xE8	; 232
    1eaa:	33 e0       	ldi	r19, 0x03	; 3
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__udivmodsi4>
    1eb8:	da 01       	movw	r26, r20
    1eba:	c9 01       	movw	r24, r18
    1ebc:	7c 01       	movw	r14, r24
    1ebe:	8d 01       	movw	r16, r26
    1ec0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ec2:	7c 81       	ldd	r23, Y+4	; 0x04
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	9b 01       	movw	r18, r22
    1ece:	ac 01       	movw	r20, r24
    1ed0:	c8 01       	movw	r24, r16
    1ed2:	b7 01       	movw	r22, r14
    1ed4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__udivmodsi4>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	81 95       	neg	r24
    1ede:	80 93 71 01 	sts	0x0171, r24
			TCNT0= MTIM_u8Timer0Preload;
    1ee2:	e2 e5       	ldi	r30, 0x52	; 82
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 91 71 01 	lds	r24, 0x0171
    1eea:	80 83       	st	Z, r24
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <MTIM_stderrTimerDelay+0x1c6>
		break;
		case MTIM_TIMER1: break;
		case MTIM_TIMER2: break;
		default: L_stderrState=E_NOK; break;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return L_stderrState;
    1ef2:	8b 85       	ldd	r24, Y+11	; 0x0b

}
    1ef4:	64 96       	adiw	r28, 0x14	; 20
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret

00001f0e <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    1f0e:	1f 92       	push	r1
    1f10:	0f 92       	push	r0
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	0f 92       	push	r0
    1f16:	11 24       	eor	r1, r1
    1f18:	2f 93       	push	r18
    1f1a:	3f 93       	push	r19
    1f1c:	4f 93       	push	r20
    1f1e:	5f 93       	push	r21
    1f20:	6f 93       	push	r22
    1f22:	7f 93       	push	r23
    1f24:	8f 93       	push	r24
    1f26:	9f 93       	push	r25
    1f28:	af 93       	push	r26
    1f2a:	bf 93       	push	r27
    1f2c:	ef 93       	push	r30
    1f2e:	ff 93       	push	r31
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62

	if(NULL_POINTER != MTIM_pvoidfUserFunctionT0OVF)
    1f38:	80 91 68 01 	lds	r24, 0x0168
    1f3c:	90 91 69 01 	lds	r25, 0x0169
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	29 f1       	breq	.+74     	; 0x1f8e <__vector_11+0x80>
	{
		volatile static u16 L_u16OVFCounter = 0;
		L_u16OVFCounter++;
    1f44:	80 91 6c 01 	lds	r24, 0x016C
    1f48:	90 91 6d 01 	lds	r25, 0x016D
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	90 93 6d 01 	sts	0x016D, r25
    1f52:	80 93 6c 01 	sts	0x016C, r24
		if(L_u16OVFCounter==(MTIM_u16Timer0OVFCount+1))
    1f56:	80 91 6f 01 	lds	r24, 0x016F
    1f5a:	90 91 70 01 	lds	r25, 0x0170
    1f5e:	9c 01       	movw	r18, r24
    1f60:	2f 5f       	subi	r18, 0xFF	; 255
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	80 91 6c 01 	lds	r24, 0x016C
    1f68:	90 91 6d 01 	lds	r25, 0x016D
    1f6c:	28 17       	cp	r18, r24
    1f6e:	39 07       	cpc	r19, r25
    1f70:	71 f4       	brne	.+28     	; 0x1f8e <__vector_11+0x80>
		{
			L_u16OVFCounter =0;
    1f72:	10 92 6d 01 	sts	0x016D, r1
    1f76:	10 92 6c 01 	sts	0x016C, r1
			TCNT0=MTIM_u8Timer0Preload;
    1f7a:	e2 e5       	ldi	r30, 0x52	; 82
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 91 71 01 	lds	r24, 0x0171
    1f82:	80 83       	st	Z, r24
			(*MTIM_pvoidfUserFunctionT0OVF)();
    1f84:	e0 91 68 01 	lds	r30, 0x0168
    1f88:	f0 91 69 01 	lds	r31, 0x0169
    1f8c:	09 95       	icall
	else
	{
		/* do nothing */
	}

}
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	ff 91       	pop	r31
    1f94:	ef 91       	pop	r30
    1f96:	bf 91       	pop	r27
    1f98:	af 91       	pop	r26
    1f9a:	9f 91       	pop	r25
    1f9c:	8f 91       	pop	r24
    1f9e:	7f 91       	pop	r23
    1fa0:	6f 91       	pop	r22
    1fa2:	5f 91       	pop	r21
    1fa4:	4f 91       	pop	r20
    1fa6:	3f 91       	pop	r19
    1fa8:	2f 91       	pop	r18
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	2f 93       	push	r18
    1fc0:	3f 93       	push	r19
    1fc2:	4f 93       	push	r20
    1fc4:	5f 93       	push	r21
    1fc6:	6f 93       	push	r22
    1fc8:	7f 93       	push	r23
    1fca:	8f 93       	push	r24
    1fcc:	9f 93       	push	r25
    1fce:	af 93       	push	r26
    1fd0:	bf 93       	push	r27
    1fd2:	ef 93       	push	r30
    1fd4:	ff 93       	push	r31
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	(*MTIM_pvoidfUserFunctionT0OCM)();
    1fde:	e0 91 6a 01 	lds	r30, 0x016A
    1fe2:	f0 91 6b 01 	lds	r31, 0x016B
    1fe6:	09 95       	icall

}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	ff 91       	pop	r31
    1fee:	ef 91       	pop	r30
    1ff0:	bf 91       	pop	r27
    1ff2:	af 91       	pop	r26
    1ff4:	9f 91       	pop	r25
    1ff6:	8f 91       	pop	r24
    1ff8:	7f 91       	pop	r23
    1ffa:	6f 91       	pop	r22
    1ffc:	5f 91       	pop	r21
    1ffe:	4f 91       	pop	r20
    2000:	3f 91       	pop	r19
    2002:	2f 91       	pop	r18
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	0f 90       	pop	r0
    200a:	1f 90       	pop	r1
    200c:	18 95       	reti

0000200e <main>:
#include "MADC_interface.h"



int main (void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <main+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
	/* Initialization  (Run Once)  */
	u8 L_ADCValue=0;
    2018:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_OCRValue=0;
    201a:	19 82       	std	Y+1, r1	; 0x01
	/* PWM0 pin */
	MDIO_stderrSetPinDirection(MDIO_PORTB,MDIO_PIN3,MDIO_OUTPUT);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	63 e0       	ldi	r22, 0x03	; 3
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 71 08 	call	0x10e2	; 0x10e2 <MDIO_stderrSetPinDirection>

	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_4,MADC_ADJUST_LEFT);
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	62 e0       	ldi	r22, 0x02	; 2
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MADC_stderrInit>
	MADC_voidEnableADC();
    2030:	0e 94 50 07 	call	0xea0	; 0xea0 <MADC_voidEnableADC>

	MTIM_stderrInit(MTIM_TIMER0, MTIM_CS_PRESCALER_256,MTIM_MODE_PHASECORRECTPWM,MTIM_HWPIN_NONINVERTING_PWM);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	64 e0       	ldi	r22, 0x04	; 4
    2038:	43 e0       	ldi	r20, 0x03	; 3
    203a:	22 e0       	ldi	r18, 0x02	; 2
    203c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <MTIM_stderrInit>
	MTIM_stderrStartTimer(MTIM_TIMER0);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <MTIM_stderrStartTimer>

	while(1)
	{
		MADC_stderrReadADC((u16*)&L_ADCValue,MADC_SCHANNEL_ADC0);
    2046:	ce 01       	movw	r24, r28
    2048:	02 96       	adiw	r24, 0x02	; 2
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <MADC_stderrReadADC>
		L_OCRValue = (((f32)L_ADCValue*15)/255) + 16 ;
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e7       	ldi	r20, 0x70	; 112
    2070:	51 e4       	ldi	r21, 0x41	; 65
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	53 e4       	ldi	r21, 0x43	; 67
    2086:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	89 83       	std	Y+1, r24	; 0x01
		MTIM_stderrSetOCR(MTIM_TIMER0,L_OCRValue);
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	b9 01       	movw	r22, r18
    20ba:	0e 94 67 0e 	call	0x1cce	; 0x1cce <MTIM_stderrSetOCR>
    20be:	c3 cf       	rjmp	.-122    	; 0x2046 <main+0x38>

000020c0 <__udivmodsi4>:
    20c0:	a1 e2       	ldi	r26, 0x21	; 33
    20c2:	1a 2e       	mov	r1, r26
    20c4:	aa 1b       	sub	r26, r26
    20c6:	bb 1b       	sub	r27, r27
    20c8:	fd 01       	movw	r30, r26
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <__udivmodsi4_ep>

000020cc <__udivmodsi4_loop>:
    20cc:	aa 1f       	adc	r26, r26
    20ce:	bb 1f       	adc	r27, r27
    20d0:	ee 1f       	adc	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	a2 17       	cp	r26, r18
    20d6:	b3 07       	cpc	r27, r19
    20d8:	e4 07       	cpc	r30, r20
    20da:	f5 07       	cpc	r31, r21
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <__udivmodsi4_ep>
    20de:	a2 1b       	sub	r26, r18
    20e0:	b3 0b       	sbc	r27, r19
    20e2:	e4 0b       	sbc	r30, r20
    20e4:	f5 0b       	sbc	r31, r21

000020e6 <__udivmodsi4_ep>:
    20e6:	66 1f       	adc	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	88 1f       	adc	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	1a 94       	dec	r1
    20f0:	69 f7       	brne	.-38     	; 0x20cc <__udivmodsi4_loop>
    20f2:	60 95       	com	r22
    20f4:	70 95       	com	r23
    20f6:	80 95       	com	r24
    20f8:	90 95       	com	r25
    20fa:	9b 01       	movw	r18, r22
    20fc:	ac 01       	movw	r20, r24
    20fe:	bd 01       	movw	r22, r26
    2100:	cf 01       	movw	r24, r30
    2102:	08 95       	ret

00002104 <__prologue_saves__>:
    2104:	2f 92       	push	r2
    2106:	3f 92       	push	r3
    2108:	4f 92       	push	r4
    210a:	5f 92       	push	r5
    210c:	6f 92       	push	r6
    210e:	7f 92       	push	r7
    2110:	8f 92       	push	r8
    2112:	9f 92       	push	r9
    2114:	af 92       	push	r10
    2116:	bf 92       	push	r11
    2118:	cf 92       	push	r12
    211a:	df 92       	push	r13
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	ca 1b       	sub	r28, r26
    212e:	db 0b       	sbc	r29, r27
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	09 94       	ijmp

0000213c <__epilogue_restores__>:
    213c:	2a 88       	ldd	r2, Y+18	; 0x12
    213e:	39 88       	ldd	r3, Y+17	; 0x11
    2140:	48 88       	ldd	r4, Y+16	; 0x10
    2142:	5f 84       	ldd	r5, Y+15	; 0x0f
    2144:	6e 84       	ldd	r6, Y+14	; 0x0e
    2146:	7d 84       	ldd	r7, Y+13	; 0x0d
    2148:	8c 84       	ldd	r8, Y+12	; 0x0c
    214a:	9b 84       	ldd	r9, Y+11	; 0x0b
    214c:	aa 84       	ldd	r10, Y+10	; 0x0a
    214e:	b9 84       	ldd	r11, Y+9	; 0x09
    2150:	c8 84       	ldd	r12, Y+8	; 0x08
    2152:	df 80       	ldd	r13, Y+7	; 0x07
    2154:	ee 80       	ldd	r14, Y+6	; 0x06
    2156:	fd 80       	ldd	r15, Y+5	; 0x05
    2158:	0c 81       	ldd	r16, Y+4	; 0x04
    215a:	1b 81       	ldd	r17, Y+3	; 0x03
    215c:	aa 81       	ldd	r26, Y+2	; 0x02
    215e:	b9 81       	ldd	r27, Y+1	; 0x01
    2160:	ce 0f       	add	r28, r30
    2162:	d1 1d       	adc	r29, r1
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	ed 01       	movw	r28, r26
    2170:	08 95       	ret

00002172 <_exit>:
    2172:	f8 94       	cli

00002174 <__stop_program>:
    2174:	ff cf       	rjmp	.-2      	; 0x2174 <__stop_program>
